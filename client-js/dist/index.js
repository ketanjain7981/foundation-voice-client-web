var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __copyProps = (to3, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to3, key) && key !== except)
        __defProp(to3, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to3;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));

// ../node_modules/kind-of/index.js
var require_kind_of = __commonJS({
  "../node_modules/kind-of/index.js"(exports, module) {
    "use strict";
    var toString = Object.prototype.toString;
    module.exports = function kindOf(val) {
      if (val === void 0)
        return "undefined";
      if (val === null)
        return "null";
      var type = typeof val;
      if (type === "boolean")
        return "boolean";
      if (type === "string")
        return "string";
      if (type === "number")
        return "number";
      if (type === "symbol")
        return "symbol";
      if (type === "function") {
        return isGeneratorFn(val) ? "generatorfunction" : "function";
      }
      if (isArray(val))
        return "array";
      if (isBuffer(val))
        return "buffer";
      if (isArguments(val))
        return "arguments";
      if (isDate(val))
        return "date";
      if (isError(val))
        return "error";
      if (isRegexp(val))
        return "regexp";
      switch (ctorName(val)) {
        case "Symbol":
          return "symbol";
        case "Promise":
          return "promise";
        case "WeakMap":
          return "weakmap";
        case "WeakSet":
          return "weakset";
        case "Map":
          return "map";
        case "Set":
          return "set";
        case "Int8Array":
          return "int8array";
        case "Uint8Array":
          return "uint8array";
        case "Uint8ClampedArray":
          return "uint8clampedarray";
        case "Int16Array":
          return "int16array";
        case "Uint16Array":
          return "uint16array";
        case "Int32Array":
          return "int32array";
        case "Uint32Array":
          return "uint32array";
        case "Float32Array":
          return "float32array";
        case "Float64Array":
          return "float64array";
      }
      if (isGeneratorObj(val)) {
        return "generator";
      }
      type = toString.call(val);
      switch (type) {
        case "[object Object]":
          return "object";
        case "[object Map Iterator]":
          return "mapiterator";
        case "[object Set Iterator]":
          return "setiterator";
        case "[object String Iterator]":
          return "stringiterator";
        case "[object Array Iterator]":
          return "arrayiterator";
      }
      return type.slice(8, -1).toLowerCase().replace(/\s/g, "");
    };
    function ctorName(val) {
      return typeof val.constructor === "function" ? val.constructor.name : null;
    }
    function isArray(val) {
      if (Array.isArray)
        return Array.isArray(val);
      return val instanceof Array;
    }
    function isError(val) {
      return val instanceof Error || typeof val.message === "string" && val.constructor && typeof val.constructor.stackTraceLimit === "number";
    }
    function isDate(val) {
      if (val instanceof Date)
        return true;
      return typeof val.toDateString === "function" && typeof val.getDate === "function" && typeof val.setDate === "function";
    }
    function isRegexp(val) {
      if (val instanceof RegExp)
        return true;
      return typeof val.flags === "string" && typeof val.ignoreCase === "boolean" && typeof val.multiline === "boolean" && typeof val.global === "boolean";
    }
    function isGeneratorFn(name, val) {
      return ctorName(name) === "GeneratorFunction";
    }
    function isGeneratorObj(val) {
      return typeof val.throw === "function" && typeof val.return === "function" && typeof val.next === "function";
    }
    function isArguments(val) {
      try {
        if (typeof val.length === "number" && typeof val.callee === "function") {
          return true;
        }
      } catch (err) {
        if (err.message.indexOf("callee") !== -1) {
          return true;
        }
      }
      return false;
    }
    function isBuffer(val) {
      if (val.constructor && typeof val.constructor.isBuffer === "function") {
        return val.constructor.isBuffer(val);
      }
      return false;
    }
  }
});

// ../node_modules/shallow-clone/index.js
var require_shallow_clone = __commonJS({
  "../node_modules/shallow-clone/index.js"(exports, module) {
    "use strict";
    var valueOf = Symbol.prototype.valueOf;
    var typeOf = require_kind_of();
    function clone(val, deep) {
      switch (typeOf(val)) {
        case "array":
          return val.slice();
        case "object":
          return Object.assign({}, val);
        case "date":
          return new val.constructor(Number(val));
        case "map":
          return new Map(val);
        case "set":
          return new Set(val);
        case "buffer":
          return cloneBuffer(val);
        case "symbol":
          return cloneSymbol(val);
        case "arraybuffer":
          return cloneArrayBuffer(val);
        case "float32array":
        case "float64array":
        case "int16array":
        case "int32array":
        case "int8array":
        case "uint16array":
        case "uint32array":
        case "uint8clampedarray":
        case "uint8array":
          return cloneTypedArray(val);
        case "regexp":
          return cloneRegExp(val);
        case "error":
          return Object.create(val);
        default: {
          return val;
        }
      }
    }
    function cloneRegExp(val) {
      const flags = val.flags !== void 0 ? val.flags : /\w+$/.exec(val) || void 0;
      const re3 = new val.constructor(val.source, flags);
      re3.lastIndex = val.lastIndex;
      return re3;
    }
    function cloneArrayBuffer(val) {
      const res = new val.constructor(val.byteLength);
      new Uint8Array(res).set(new Uint8Array(val));
      return res;
    }
    function cloneTypedArray(val, deep) {
      return new val.constructor(val.buffer, val.byteOffset, val.length);
    }
    function cloneBuffer(val) {
      const len = val.length;
      const buf = Buffer.allocUnsafe ? Buffer.allocUnsafe(len) : Buffer.from(len);
      val.copy(buf);
      return buf;
    }
    function cloneSymbol(val) {
      return valueOf ? Object(valueOf.call(val)) : {};
    }
    module.exports = clone;
  }
});

// ../node_modules/isobject/index.js
var require_isobject = __commonJS({
  "../node_modules/isobject/index.js"(exports, module) {
    "use strict";
    module.exports = function isObject(val) {
      return val != null && typeof val === "object" && Array.isArray(val) === false;
    };
  }
});

// ../node_modules/is-plain-object/index.js
var require_is_plain_object = __commonJS({
  "../node_modules/is-plain-object/index.js"(exports, module) {
    "use strict";
    var isObject = require_isobject();
    function isObjectObject(o3) {
      return isObject(o3) === true && Object.prototype.toString.call(o3) === "[object Object]";
    }
    module.exports = function isPlainObject(o3) {
      var ctor, prot;
      if (isObjectObject(o3) === false)
        return false;
      ctor = o3.constructor;
      if (typeof ctor !== "function")
        return false;
      prot = ctor.prototype;
      if (isObjectObject(prot) === false)
        return false;
      if (prot.hasOwnProperty("isPrototypeOf") === false) {
        return false;
      }
      return true;
    };
  }
});

// ../node_modules/clone-deep/index.js
var require_clone_deep = __commonJS({
  "../node_modules/clone-deep/index.js"(exports, module) {
    "use strict";
    var clone = require_shallow_clone();
    var typeOf = require_kind_of();
    var isPlainObject = require_is_plain_object();
    function cloneDeep(val, instanceClone) {
      switch (typeOf(val)) {
        case "object":
          return cloneObjectDeep(val, instanceClone);
        case "array":
          return cloneArrayDeep(val, instanceClone);
        default: {
          return clone(val);
        }
      }
    }
    function cloneObjectDeep(val, instanceClone) {
      if (typeof instanceClone === "function") {
        return instanceClone(val);
      }
      if (instanceClone || isPlainObject(val)) {
        const res = new val.constructor();
        for (let key in val) {
          res[key] = cloneDeep(val[key], instanceClone);
        }
        return res;
      }
      return val;
    }
    function cloneArrayDeep(val, instanceClone) {
      const res = new val.constructor(val.length);
      for (let i3 = 0; i3 < val.length; i3++) {
        res[i3] = cloneDeep(val[i3], instanceClone);
      }
      return res;
    }
    module.exports = cloneDeep;
  }
});

// ../node_modules/events/events.js
var require_events = __commonJS({
  "../node_modules/events/events.js"(exports, module) {
    "use strict";
    var R3 = typeof Reflect === "object" ? Reflect : null;
    var ReflectApply = R3 && typeof R3.apply === "function" ? R3.apply : function ReflectApply2(target, receiver, args) {
      return Function.prototype.apply.call(target, receiver, args);
    };
    var ReflectOwnKeys;
    if (R3 && typeof R3.ownKeys === "function") {
      ReflectOwnKeys = R3.ownKeys;
    } else if (Object.getOwnPropertySymbols) {
      ReflectOwnKeys = function ReflectOwnKeys2(target) {
        return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));
      };
    } else {
      ReflectOwnKeys = function ReflectOwnKeys2(target) {
        return Object.getOwnPropertyNames(target);
      };
    }
    function ProcessEmitWarning(warning) {
      if (console && console.warn)
        console.warn(warning);
    }
    var NumberIsNaN = Number.isNaN || function NumberIsNaN2(value) {
      return value !== value;
    };
    function EventEmitter() {
      EventEmitter.init.call(this);
    }
    module.exports = EventEmitter;
    module.exports.once = once;
    EventEmitter.EventEmitter = EventEmitter;
    EventEmitter.prototype._events = void 0;
    EventEmitter.prototype._eventsCount = 0;
    EventEmitter.prototype._maxListeners = void 0;
    var defaultMaxListeners = 10;
    function checkListener(listener) {
      if (typeof listener !== "function") {
        throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
      }
    }
    Object.defineProperty(EventEmitter, "defaultMaxListeners", {
      enumerable: true,
      get: function() {
        return defaultMaxListeners;
      },
      set: function(arg) {
        if (typeof arg !== "number" || arg < 0 || NumberIsNaN(arg)) {
          throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + ".");
        }
        defaultMaxListeners = arg;
      }
    });
    EventEmitter.init = function() {
      if (this._events === void 0 || this._events === Object.getPrototypeOf(this)._events) {
        this._events = /* @__PURE__ */ Object.create(null);
        this._eventsCount = 0;
      }
      this._maxListeners = this._maxListeners || void 0;
    };
    EventEmitter.prototype.setMaxListeners = function setMaxListeners(n3) {
      if (typeof n3 !== "number" || n3 < 0 || NumberIsNaN(n3)) {
        throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n3 + ".");
      }
      this._maxListeners = n3;
      return this;
    };
    function _getMaxListeners(that) {
      if (that._maxListeners === void 0)
        return EventEmitter.defaultMaxListeners;
      return that._maxListeners;
    }
    EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
      return _getMaxListeners(this);
    };
    EventEmitter.prototype.emit = function emit(type) {
      var args = [];
      for (var i3 = 1; i3 < arguments.length; i3++)
        args.push(arguments[i3]);
      var doError = type === "error";
      var events = this._events;
      if (events !== void 0)
        doError = doError && events.error === void 0;
      else if (!doError)
        return false;
      if (doError) {
        var er3;
        if (args.length > 0)
          er3 = args[0];
        if (er3 instanceof Error) {
          throw er3;
        }
        var err = new Error("Unhandled error." + (er3 ? " (" + er3.message + ")" : ""));
        err.context = er3;
        throw err;
      }
      var handler = events[type];
      if (handler === void 0)
        return false;
      if (typeof handler === "function") {
        ReflectApply(handler, this, args);
      } else {
        var len = handler.length;
        var listeners = arrayClone(handler, len);
        for (var i3 = 0; i3 < len; ++i3)
          ReflectApply(listeners[i3], this, args);
      }
      return true;
    };
    function _addListener(target, type, listener, prepend) {
      var m3;
      var events;
      var existing;
      checkListener(listener);
      events = target._events;
      if (events === void 0) {
        events = target._events = /* @__PURE__ */ Object.create(null);
        target._eventsCount = 0;
      } else {
        if (events.newListener !== void 0) {
          target.emit(
            "newListener",
            type,
            listener.listener ? listener.listener : listener
          );
          events = target._events;
        }
        existing = events[type];
      }
      if (existing === void 0) {
        existing = events[type] = listener;
        ++target._eventsCount;
      } else {
        if (typeof existing === "function") {
          existing = events[type] = prepend ? [listener, existing] : [existing, listener];
        } else if (prepend) {
          existing.unshift(listener);
        } else {
          existing.push(listener);
        }
        m3 = _getMaxListeners(target);
        if (m3 > 0 && existing.length > m3 && !existing.warned) {
          existing.warned = true;
          var w3 = new Error("Possible EventEmitter memory leak detected. " + existing.length + " " + String(type) + " listeners added. Use emitter.setMaxListeners() to increase limit");
          w3.name = "MaxListenersExceededWarning";
          w3.emitter = target;
          w3.type = type;
          w3.count = existing.length;
          ProcessEmitWarning(w3);
        }
      }
      return target;
    }
    EventEmitter.prototype.addListener = function addListener(type, listener) {
      return _addListener(this, type, listener, false);
    };
    EventEmitter.prototype.on = EventEmitter.prototype.addListener;
    EventEmitter.prototype.prependListener = function prependListener(type, listener) {
      return _addListener(this, type, listener, true);
    };
    function onceWrapper() {
      if (!this.fired) {
        this.target.removeListener(this.type, this.wrapFn);
        this.fired = true;
        if (arguments.length === 0)
          return this.listener.call(this.target);
        return this.listener.apply(this.target, arguments);
      }
    }
    function _onceWrap(target, type, listener) {
      var state = { fired: false, wrapFn: void 0, target, type, listener };
      var wrapped = onceWrapper.bind(state);
      wrapped.listener = listener;
      state.wrapFn = wrapped;
      return wrapped;
    }
    EventEmitter.prototype.once = function once2(type, listener) {
      checkListener(listener);
      this.on(type, _onceWrap(this, type, listener));
      return this;
    };
    EventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {
      checkListener(listener);
      this.prependListener(type, _onceWrap(this, type, listener));
      return this;
    };
    EventEmitter.prototype.removeListener = function removeListener(type, listener) {
      var list, events, position, i3, originalListener;
      checkListener(listener);
      events = this._events;
      if (events === void 0)
        return this;
      list = events[type];
      if (list === void 0)
        return this;
      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0)
          this._events = /* @__PURE__ */ Object.create(null);
        else {
          delete events[type];
          if (events.removeListener)
            this.emit("removeListener", type, list.listener || listener);
        }
      } else if (typeof list !== "function") {
        position = -1;
        for (i3 = list.length - 1; i3 >= 0; i3--) {
          if (list[i3] === listener || list[i3].listener === listener) {
            originalListener = list[i3].listener;
            position = i3;
            break;
          }
        }
        if (position < 0)
          return this;
        if (position === 0)
          list.shift();
        else {
          spliceOne(list, position);
        }
        if (list.length === 1)
          events[type] = list[0];
        if (events.removeListener !== void 0)
          this.emit("removeListener", type, originalListener || listener);
      }
      return this;
    };
    EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
    EventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {
      var listeners, events, i3;
      events = this._events;
      if (events === void 0)
        return this;
      if (events.removeListener === void 0) {
        if (arguments.length === 0) {
          this._events = /* @__PURE__ */ Object.create(null);
          this._eventsCount = 0;
        } else if (events[type] !== void 0) {
          if (--this._eventsCount === 0)
            this._events = /* @__PURE__ */ Object.create(null);
          else
            delete events[type];
        }
        return this;
      }
      if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;
        for (i3 = 0; i3 < keys.length; ++i3) {
          key = keys[i3];
          if (key === "removeListener")
            continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners("removeListener");
        this._events = /* @__PURE__ */ Object.create(null);
        this._eventsCount = 0;
        return this;
      }
      listeners = events[type];
      if (typeof listeners === "function") {
        this.removeListener(type, listeners);
      } else if (listeners !== void 0) {
        for (i3 = listeners.length - 1; i3 >= 0; i3--) {
          this.removeListener(type, listeners[i3]);
        }
      }
      return this;
    };
    function _listeners(target, type, unwrap) {
      var events = target._events;
      if (events === void 0)
        return [];
      var evlistener = events[type];
      if (evlistener === void 0)
        return [];
      if (typeof evlistener === "function")
        return unwrap ? [evlistener.listener || evlistener] : [evlistener];
      return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
    }
    EventEmitter.prototype.listeners = function listeners(type) {
      return _listeners(this, type, true);
    };
    EventEmitter.prototype.rawListeners = function rawListeners(type) {
      return _listeners(this, type, false);
    };
    EventEmitter.listenerCount = function(emitter, type) {
      if (typeof emitter.listenerCount === "function") {
        return emitter.listenerCount(type);
      } else {
        return listenerCount.call(emitter, type);
      }
    };
    EventEmitter.prototype.listenerCount = listenerCount;
    function listenerCount(type) {
      var events = this._events;
      if (events !== void 0) {
        var evlistener = events[type];
        if (typeof evlistener === "function") {
          return 1;
        } else if (evlistener !== void 0) {
          return evlistener.length;
        }
      }
      return 0;
    }
    EventEmitter.prototype.eventNames = function eventNames() {
      return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
    };
    function arrayClone(arr, n3) {
      var copy = new Array(n3);
      for (var i3 = 0; i3 < n3; ++i3)
        copy[i3] = arr[i3];
      return copy;
    }
    function spliceOne(list, index) {
      for (; index + 1 < list.length; index++)
        list[index] = list[index + 1];
      list.pop();
    }
    function unwrapListeners(arr) {
      var ret = new Array(arr.length);
      for (var i3 = 0; i3 < ret.length; ++i3) {
        ret[i3] = arr[i3].listener || arr[i3];
      }
      return ret;
    }
    function once(emitter, name) {
      return new Promise(function(resolve, reject) {
        function errorListener(err) {
          emitter.removeListener(name, resolver);
          reject(err);
        }
        function resolver() {
          if (typeof emitter.removeListener === "function") {
            emitter.removeListener("error", errorListener);
          }
          resolve([].slice.call(arguments));
        }
        ;
        eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });
        if (name !== "error") {
          addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });
        }
      });
    }
    function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
      if (typeof emitter.on === "function") {
        eventTargetAgnosticAddListener(emitter, "error", handler, flags);
      }
    }
    function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
      if (typeof emitter.on === "function") {
        if (flags.once) {
          emitter.once(name, listener);
        } else {
          emitter.on(name, listener);
        }
      } else if (typeof emitter.addEventListener === "function") {
        emitter.addEventListener(name, function wrapListener(arg) {
          if (flags.once) {
            emitter.removeEventListener(name, wrapListener);
          }
          listener(arg);
        });
      } else {
        throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
      }
    }
  }
});

// ../node_modules/@pipecat-ai/client-js/dist/index.module.js
var import_clone_deep = __toESM(require_clone_deep());
var import_events = __toESM(require_events());

// ../node_modules/uuid/dist/esm-browser/stringify.js
var byteToHex = [];
for (i3 = 0; i3 < 256; ++i3) {
  byteToHex.push((i3 + 256).toString(16).slice(1));
}
var i3;
function unsafeStringify(arr, offset = 0) {
  return (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + "-" + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + "-" + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + "-" + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + "-" + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();
}

// ../node_modules/uuid/dist/esm-browser/rng.js
var getRandomValues;
var rnds8 = new Uint8Array(16);
function rng() {
  if (!getRandomValues) {
    getRandomValues = typeof crypto !== "undefined" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);
    if (!getRandomValues) {
      throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");
    }
  }
  return getRandomValues(rnds8);
}

// ../node_modules/uuid/dist/esm-browser/native.js
var randomUUID = typeof crypto !== "undefined" && crypto.randomUUID && crypto.randomUUID.bind(crypto);
var native_default = {
  randomUUID
};

// ../node_modules/uuid/dist/esm-browser/v4.js
function v4(options, buf, offset) {
  if (native_default.randomUUID && !buf && !options) {
    return native_default.randomUUID();
  }
  options = options || {};
  var rnds = options.random || (options.rng || rng)();
  rnds[6] = rnds[6] & 15 | 64;
  rnds[8] = rnds[8] & 63 | 128;
  if (buf) {
    offset = offset || 0;
    for (var i3 = 0; i3 < 16; ++i3) {
      buf[offset + i3] = rnds[i3];
    }
    return buf;
  }
  return unsafeStringify(rnds);
}
var v4_default = v4;

// ../node_modules/@pipecat-ai/client-js/dist/index.module.js
function $parcel$export(e3, n3, v3, s3) {
  Object.defineProperty(e3, n3, { get: v3, set: s3, enumerable: true, configurable: true });
}
function $parcel$interopDefault(a3) {
  return a3 && a3.__esModule ? a3.default : a3;
}
var $4bb349f22aee5185$exports = {};
$parcel$export($4bb349f22aee5185$exports, "httpActionGenerator", () => $4bb349f22aee5185$export$8728b60ea57bf43e);
async function $4bb349f22aee5185$export$8728b60ea57bf43e(actionUrl, action, params, handleResponse) {
  try {
    (0, $7afbbd59ebaa42bf$export$af88d00dbe7f521).debug("[RTVI] Fetch action", actionUrl, action);
    const headers = new Headers({
      ...Object.fromEntries((params.headers ?? new Headers()).entries())
    });
    if (!headers.has("Content-Type"))
      headers.set("Content-Type", "application/json");
    headers.set("Cache-Control", "no-cache");
    headers.set("Connection", "keep-alive");
    const response = await fetch(actionUrl, {
      method: "POST",
      headers,
      body: JSON.stringify({
        ...params.requestData,
        actions: [
          action
        ]
      })
    });
    const contentType = response.headers.get("content-type");
    if (!response.ok) {
      const errorMessage = await response.text();
      throw new (0, $8ead7b33b8402751$export$59b4786f333aac02)(`Failed to resolve action: ${errorMessage}`, response.status);
    }
    if (response.body && contentType?.includes("text/event-stream")) {
      const reader = response.body.pipeThrough(new TextDecoderStream()).getReader();
      let buffer = "";
      while (true) {
        const { value, done } = await reader.read();
        if (done)
          break;
        buffer += value;
        let boundary = buffer.indexOf("\n\n");
        while (boundary !== -1) {
          const message = buffer.slice(0, boundary);
          buffer = buffer.slice(boundary + 2);
          const lines = message.split("\n");
          let encodedData = "";
          for (const line of lines) {
            const colonIndex = line.indexOf(":");
            if (colonIndex !== -1)
              encodedData += line.slice(colonIndex + 1).trim();
          }
          try {
            const jsonData = atob(encodedData);
            const parsedData = JSON.parse(jsonData);
            handleResponse(parsedData);
          } catch (error) {
            (0, $7afbbd59ebaa42bf$export$af88d00dbe7f521).error("[RTVI] Failed to parse JSON:", error);
            throw error;
          }
          boundary = buffer.indexOf("\n\n");
        }
      }
    } else {
      const data = await response.json();
      handleResponse(data);
    }
  } catch (error) {
    (0, $7afbbd59ebaa42bf$export$af88d00dbe7f521).error("[RTVI] Error during fetch:", error);
    throw error;
  }
}
var $a7c324a73303ad55$exports = {};
$parcel$export($a7c324a73303ad55$exports, "RTVIClient", () => $a7c324a73303ad55$export$fa42a01c1d60f4a1);
var $e3bad9cc25e327f7$exports = {};
$e3bad9cc25e327f7$exports = JSON.parse('{"name":"@pipecat-ai/client-js","version":"0.4.1","license":"BSD-2-Clause","main":"dist/index.js","module":"dist/index.module.js","types":"dist/index.d.ts","source":"src/index.ts","repository":{"type":"git","url":"git+https://github.com/pipecat-ai/pipecat-client-web.git"},"files":["dist","package.json","README.md"],"scripts":{"build":"jest --silent && parcel build --no-cache","dev":"parcel watch","lint":"eslint src/ --report-unused-disable-directives --max-warnings 0","test":"jest"},"jest":{"preset":"ts-jest","testEnvironment":"node"},"devDependencies":{"@jest/globals":"^29.7.0","@types/clone-deep":"^4.0.4","@types/jest":"^29.5.12","@types/uuid":"^10.0.0","eslint":"^9.11.1","eslint-config-prettier":"^9.1.0","eslint-plugin-simple-import-sort":"^12.1.1","jest":"^29.7.0","ts-jest":"^29.2.5"},"dependencies":{"@types/events":"^3.0.3","clone-deep":"^4.0.1","events":"^3.3.0","typed-emitter":"^2.1.0","uuid":"^10.0.0"}}');
var $8ead7b33b8402751$exports = {};
$parcel$export($8ead7b33b8402751$exports, "RTVIError", () => $8ead7b33b8402751$export$59b4786f333aac02);
$parcel$export($8ead7b33b8402751$exports, "ConnectionTimeoutError", () => $8ead7b33b8402751$export$c67992fa684a81a6);
$parcel$export($8ead7b33b8402751$exports, "StartBotError", () => $8ead7b33b8402751$export$e7544ab812238a61);
$parcel$export($8ead7b33b8402751$exports, "TransportStartError", () => $8ead7b33b8402751$export$e0624a511a2c4e9);
$parcel$export($8ead7b33b8402751$exports, "BotNotReadyError", () => $8ead7b33b8402751$export$885fb96b850e8fbb);
$parcel$export($8ead7b33b8402751$exports, "ConfigUpdateError", () => $8ead7b33b8402751$export$4eda4fd287fbbca5);
$parcel$export($8ead7b33b8402751$exports, "ActionEndpointNotSetError", () => $8ead7b33b8402751$export$be839f0100cd3132);
var $8ead7b33b8402751$export$59b4786f333aac02 = class extends Error {
  constructor(message, status) {
    super(message);
    this.status = status;
  }
};
var $8ead7b33b8402751$export$c67992fa684a81a6 = class extends $8ead7b33b8402751$export$59b4786f333aac02 {
  constructor(message) {
    super(message ?? "Bot did not enter ready state within the specified timeout period.");
  }
};
var $8ead7b33b8402751$export$e7544ab812238a61 = class extends $8ead7b33b8402751$export$59b4786f333aac02 {
  constructor(message, status) {
    super(message ?? `Failed to connect / invalid auth bundle from base url`, status ?? 500);
    this.error = "invalid-request-error";
  }
};
var $8ead7b33b8402751$export$e0624a511a2c4e9 = class extends $8ead7b33b8402751$export$59b4786f333aac02 {
  constructor(message) {
    super(message ?? "Unable to connect to transport");
  }
};
var $8ead7b33b8402751$export$885fb96b850e8fbb = class extends $8ead7b33b8402751$export$59b4786f333aac02 {
  constructor(message) {
    super(message ?? "Attempt to call action on transport when not in 'ready' state.");
  }
};
var $8ead7b33b8402751$export$4eda4fd287fbbca5 = class extends $8ead7b33b8402751$export$59b4786f333aac02 {
  constructor(message) {
    super(message ?? "Unable to update configuration");
    this.status = 400;
  }
};
var $8ead7b33b8402751$export$be839f0100cd3132 = class extends $8ead7b33b8402751$export$59b4786f333aac02 {
  constructor(message) {
    super(message ?? "Action endpoint is not set");
  }
};
function $16f019d4d16917df$export$f1586721024c4dab(_target, propertyKey, descriptor) {
  const originalMethod = descriptor.value;
  descriptor.value = function(...args) {
    if (this.state === "ready")
      return originalMethod.apply(this, args);
    else
      throw new (0, $8ead7b33b8402751$export$885fb96b850e8fbb)(`Attempt to call ${propertyKey.toString()} when transport not in ready state. Await connect() first.`);
  };
  return descriptor;
}
function $16f019d4d16917df$export$5c35b4fe6fa8c9a6(...states) {
  states = [
    "ready",
    ...states
  ];
  return function(_target, propertyKey, descriptor) {
    const originalGetter = descriptor.get;
    descriptor.get = function() {
      if (states.includes(this.state))
        return originalGetter?.apply(this);
      else
        throw new (0, $8ead7b33b8402751$export$885fb96b850e8fbb)(`Attempt to call ${propertyKey.toString()} when transport not in ${states}. Await connect() first.`);
    };
    return descriptor;
  };
}
var $f9fc0c57b9aaed9c$exports = {};
$parcel$export($f9fc0c57b9aaed9c$exports, "RTVIEvent", () => $f9fc0c57b9aaed9c$export$6b4624d233c61fcb);
var $f9fc0c57b9aaed9c$export$6b4624d233c61fcb;
(function(RTVIEvent) {
  RTVIEvent["MessageError"] = "messageError";
  RTVIEvent["Error"] = "error";
  RTVIEvent["Connected"] = "connected";
  RTVIEvent["Disconnected"] = "disconnected";
  RTVIEvent["TransportStateChanged"] = "transportStateChanged";
  RTVIEvent["Config"] = "config";
  RTVIEvent["ConfigDescribe"] = "configDescribe";
  RTVIEvent["ActionsAvailable"] = "actionsAvailable";
  RTVIEvent["ParticipantConnected"] = "participantConnected";
  RTVIEvent["ParticipantLeft"] = "participantLeft";
  RTVIEvent["TrackStarted"] = "trackStarted";
  RTVIEvent["TrackStopped"] = "trackStopped";
  RTVIEvent["ScreenTrackStarted"] = "screenTrackStarted";
  RTVIEvent["ScreenTrackStopped"] = "screenTrackStopped";
  RTVIEvent["ScreenShareError"] = "screenShareError";
  RTVIEvent["AvailableCamsUpdated"] = "availableCamsUpdated";
  RTVIEvent["AvailableMicsUpdated"] = "availableMicsUpdated";
  RTVIEvent["AvailableSpeakersUpdated"] = "availableSpeakersUpdated";
  RTVIEvent["CamUpdated"] = "camUpdated";
  RTVIEvent["MicUpdated"] = "micUpdated";
  RTVIEvent["SpeakerUpdated"] = "speakerUpdated";
  RTVIEvent["BotConnected"] = "botConnected";
  RTVIEvent["BotReady"] = "botReady";
  RTVIEvent["BotDisconnected"] = "botDisconnected";
  RTVIEvent["BotStartedSpeaking"] = "botStartedSpeaking";
  RTVIEvent["BotStoppedSpeaking"] = "botStoppedSpeaking";
  RTVIEvent["RemoteAudioLevel"] = "remoteAudioLevel";
  RTVIEvent["UserStartedSpeaking"] = "userStartedSpeaking";
  RTVIEvent["UserStoppedSpeaking"] = "userStoppedSpeaking";
  RTVIEvent["LocalAudioLevel"] = "localAudioLevel";
  RTVIEvent["Metrics"] = "metrics";
  RTVIEvent["UserTranscript"] = "userTranscript";
  RTVIEvent["BotTranscript"] = "botTranscript";
  RTVIEvent["BotLlmText"] = "botLlmText";
  RTVIEvent["BotLlmStarted"] = "botLlmStarted";
  RTVIEvent["BotLlmStopped"] = "botLlmStopped";
  RTVIEvent["BotTtsText"] = "botTtsText";
  RTVIEvent["BotTtsStarted"] = "botTtsStarted";
  RTVIEvent["BotTtsStopped"] = "botTtsStopped";
  RTVIEvent["LLMFunctionCall"] = "llmFunctionCall";
  RTVIEvent["LLMFunctionCallStart"] = "llmFunctionCallStart";
  RTVIEvent["LLMJsonCompletion"] = "llmJsonCompletion";
  RTVIEvent["StorageItemStored"] = "storageItemStored";
  RTVIEvent["BotLlmSearchResponse"] = "botLlmSearchResponse";
  RTVIEvent["ServerMessage"] = "serverMessage";
})($f9fc0c57b9aaed9c$export$6b4624d233c61fcb || ($f9fc0c57b9aaed9c$export$6b4624d233c61fcb = {}));
var $7614fb2168c523cc$exports = {};
$parcel$export($7614fb2168c523cc$exports, "RTVIClientHelper", () => $7614fb2168c523cc$export$23bc637255b2a471);
var $7614fb2168c523cc$export$23bc637255b2a471 = class {
  constructor(options) {
    this._options = options;
  }
  set client(client) {
    this._client = client;
  }
  set service(service) {
    this._service = service;
  }
};
var $7afbbd59ebaa42bf$exports = {};
$parcel$export($7afbbd59ebaa42bf$exports, "LogLevel", () => $7afbbd59ebaa42bf$export$243e62d78d3b544d);
$parcel$export($7afbbd59ebaa42bf$exports, "logger", () => $7afbbd59ebaa42bf$export$af88d00dbe7f521);
var $7afbbd59ebaa42bf$export$243e62d78d3b544d;
(function(LogLevel) {
  LogLevel[LogLevel["NONE"] = 0] = "NONE";
  LogLevel[LogLevel["ERROR"] = 1] = "ERROR";
  LogLevel[LogLevel["WARN"] = 2] = "WARN";
  LogLevel[LogLevel["INFO"] = 3] = "INFO";
  LogLevel[LogLevel["DEBUG"] = 4] = "DEBUG";
})($7afbbd59ebaa42bf$export$243e62d78d3b544d || ($7afbbd59ebaa42bf$export$243e62d78d3b544d = {}));
var $7afbbd59ebaa42bf$var$Logger = class _$7afbbd59ebaa42bf$var$Logger {
  constructor() {
    this.level = $7afbbd59ebaa42bf$export$243e62d78d3b544d.DEBUG;
  }
  static getInstance() {
    if (!_$7afbbd59ebaa42bf$var$Logger.instance)
      _$7afbbd59ebaa42bf$var$Logger.instance = new _$7afbbd59ebaa42bf$var$Logger();
    return _$7afbbd59ebaa42bf$var$Logger.instance;
  }
  setLevel(level) {
    this.level = level;
  }
  debug(...args) {
    if (this.level >= $7afbbd59ebaa42bf$export$243e62d78d3b544d.DEBUG)
      console.debug(...args);
  }
  info(...args) {
    if (this.level >= $7afbbd59ebaa42bf$export$243e62d78d3b544d.INFO)
      console.info(...args);
  }
  warn(...args) {
    if (this.level >= $7afbbd59ebaa42bf$export$243e62d78d3b544d.WARN)
      console.warn(...args);
  }
  error(...args) {
    if (this.level >= $7afbbd59ebaa42bf$export$243e62d78d3b544d.ERROR)
      console.error(...args);
  }
};
var $7afbbd59ebaa42bf$export$af88d00dbe7f521 = $7afbbd59ebaa42bf$var$Logger.getInstance();
var $b48f893ed1354c1e$exports = {};
$parcel$export($b48f893ed1354c1e$exports, "RTVI_MESSAGE_LABEL", () => $b48f893ed1354c1e$export$882b13c7fda338f5);
$parcel$export($b48f893ed1354c1e$exports, "RTVIMessageType", () => $b48f893ed1354c1e$export$38b3db05cbf0e240);
$parcel$export($b48f893ed1354c1e$exports, "RTVIMessage", () => $b48f893ed1354c1e$export$69aa9ab0334b212);
$parcel$export($b48f893ed1354c1e$exports, "RTVIActionRequest", () => $b48f893ed1354c1e$export$378529d7a8bead8b);
$parcel$export($b48f893ed1354c1e$exports, "MessageDispatcher", () => $b48f893ed1354c1e$export$e9a960646cc432aa);
var $b48f893ed1354c1e$export$882b13c7fda338f5 = "rtvi-ai";
var $b48f893ed1354c1e$export$38b3db05cbf0e240;
(function(RTVIMessageType) {
  RTVIMessageType["CLIENT_READY"] = "client-ready";
  RTVIMessageType["UPDATE_CONFIG"] = "update-config";
  RTVIMessageType["GET_CONFIG"] = "get-config";
  RTVIMessageType["DESCRIBE_CONFIG"] = "describe-config";
  RTVIMessageType["DESCRIBE_ACTIONS"] = "describe-actions";
  RTVIMessageType["DISCONNECT_BOT"] = "disconnect-bot";
  RTVIMessageType["ACTION"] = "action";
  RTVIMessageType["BOT_READY"] = "bot-ready";
  RTVIMessageType["ERROR"] = "error";
  RTVIMessageType["ERROR_RESPONSE"] = "error-response";
  RTVIMessageType["CONFIG"] = "config";
  RTVIMessageType["CONFIG_AVAILABLE"] = "config-available";
  RTVIMessageType["CONFIG_ERROR"] = "config-error";
  RTVIMessageType["ACTIONS_AVAILABLE"] = "actions-available";
  RTVIMessageType["ACTION_RESPONSE"] = "action-response";
  RTVIMessageType["METRICS"] = "metrics";
  RTVIMessageType["USER_TRANSCRIPTION"] = "user-transcription";
  RTVIMessageType["BOT_TRANSCRIPTION"] = "bot-transcription";
  RTVIMessageType["USER_STARTED_SPEAKING"] = "user-started-speaking";
  RTVIMessageType["USER_STOPPED_SPEAKING"] = "user-stopped-speaking";
  RTVIMessageType["BOT_STARTED_SPEAKING"] = "bot-started-speaking";
  RTVIMessageType["BOT_STOPPED_SPEAKING"] = "bot-stopped-speaking";
  RTVIMessageType["USER_LLM_TEXT"] = "user-llm-text";
  RTVIMessageType["BOT_LLM_TEXT"] = "bot-llm-text";
  RTVIMessageType["BOT_LLM_STARTED"] = "bot-llm-started";
  RTVIMessageType["BOT_LLM_STOPPED"] = "bot-llm-stopped";
  RTVIMessageType["BOT_TTS_TEXT"] = "bot-tts-text";
  RTVIMessageType["BOT_TTS_STARTED"] = "bot-tts-started";
  RTVIMessageType["BOT_TTS_STOPPED"] = "bot-tts-stopped";
  RTVIMessageType["BOT_LLM_SEARCH_RESPONSE"] = "bot-llm-search-response";
  RTVIMessageType["STORAGE_ITEM_STORED"] = "storage-item-stored";
  RTVIMessageType["SERVER_MESSAGE"] = "server-message";
})($b48f893ed1354c1e$export$38b3db05cbf0e240 || ($b48f893ed1354c1e$export$38b3db05cbf0e240 = {}));
var $b48f893ed1354c1e$export$69aa9ab0334b212 = class _$b48f893ed1354c1e$export$69aa9ab0334b212 {
  constructor(type, data, id) {
    this.label = $b48f893ed1354c1e$export$882b13c7fda338f5;
    this.type = type;
    this.data = data;
    this.id = id || (0, v4_default)().slice(0, 8);
  }
  // Outbound message types
  static clientReady() {
    return new _$b48f893ed1354c1e$export$69aa9ab0334b212($b48f893ed1354c1e$export$38b3db05cbf0e240.CLIENT_READY, {});
  }
  static updateConfig(config, interrupt = false) {
    return new _$b48f893ed1354c1e$export$69aa9ab0334b212($b48f893ed1354c1e$export$38b3db05cbf0e240.UPDATE_CONFIG, {
      config,
      interrupt
    });
  }
  static describeConfig() {
    return new _$b48f893ed1354c1e$export$69aa9ab0334b212($b48f893ed1354c1e$export$38b3db05cbf0e240.DESCRIBE_CONFIG, {});
  }
  static getBotConfig() {
    return new _$b48f893ed1354c1e$export$69aa9ab0334b212($b48f893ed1354c1e$export$38b3db05cbf0e240.GET_CONFIG, {});
  }
  static describeActions() {
    return new _$b48f893ed1354c1e$export$69aa9ab0334b212($b48f893ed1354c1e$export$38b3db05cbf0e240.DESCRIBE_ACTIONS, {});
  }
  static disconnectBot() {
    return new _$b48f893ed1354c1e$export$69aa9ab0334b212($b48f893ed1354c1e$export$38b3db05cbf0e240.DISCONNECT_BOT, {});
  }
  static error(message, fatal = false) {
    return new _$b48f893ed1354c1e$export$69aa9ab0334b212($b48f893ed1354c1e$export$38b3db05cbf0e240.ERROR, {
      message,
      fatal
    });
  }
};
var $b48f893ed1354c1e$export$378529d7a8bead8b = class extends $b48f893ed1354c1e$export$69aa9ab0334b212 {
  constructor(data) {
    super($b48f893ed1354c1e$export$38b3db05cbf0e240.ACTION, data);
  }
};
var $b48f893ed1354c1e$export$e9a960646cc432aa = class {
  constructor(client) {
    this._queue = new Array();
    this._gcTime = 1e4;
    this._queue = [];
    this._client = client;
  }
  dispatch(message) {
    const promise = new Promise((resolve, reject) => {
      this._queue.push({
        message,
        timestamp: Date.now(),
        resolve,
        reject
      });
    });
    (0, $7afbbd59ebaa42bf$export$af88d00dbe7f521).debug("[MessageDispatcher] dispatch", message);
    this._client.sendMessage(message);
    this._gc();
    return promise;
  }
  async dispatchAction(action, onMessage) {
    const promise = new Promise((resolve, reject) => {
      this._queue.push({
        message: action,
        timestamp: Date.now(),
        resolve,
        reject
      });
    });
    (0, $7afbbd59ebaa42bf$export$af88d00dbe7f521).debug("[MessageDispatcher] action", action);
    if (this._client.connected)
      this._client.sendMessage(action);
    else {
      if (!this._client.params.endpoints?.action) {
        (0, $7afbbd59ebaa42bf$export$af88d00dbe7f521).error("[MessageDispatcher] Action endpoint is required when dispatching action in disconnected state");
        throw new (0, $8ead7b33b8402751$export$be839f0100cd3132)();
      }
      const actionUrl = this._client.constructUrl("action");
      try {
        await (0, $4bb349f22aee5185$export$8728b60ea57bf43e)(actionUrl, action, this._client.params, (response) => {
          onMessage(response);
        });
      } catch (e3) {
        onMessage(new $b48f893ed1354c1e$export$69aa9ab0334b212($b48f893ed1354c1e$export$38b3db05cbf0e240.ERROR_RESPONSE, `Action endpoint '${actionUrl}' returned an error response`, action.id));
      }
    }
    this._gc();
    return promise;
  }
  _resolveReject(message, resolve = true) {
    const queuedMessage = this._queue.find((msg) => msg.message.id === message.id);
    if (queuedMessage) {
      if (resolve) {
        (0, $7afbbd59ebaa42bf$export$af88d00dbe7f521).debug("[MessageDispatcher] Resolve", message);
        queuedMessage.resolve(message.type === $b48f893ed1354c1e$export$38b3db05cbf0e240.ACTION_RESPONSE ? message : message);
      } else {
        (0, $7afbbd59ebaa42bf$export$af88d00dbe7f521).debug("[MessageDispatcher] Reject", message);
        queuedMessage.reject(message);
      }
      this._queue = this._queue.filter((msg) => msg.message.id !== message.id);
      (0, $7afbbd59ebaa42bf$export$af88d00dbe7f521).debug("[MessageDispatcher] Queue", this._queue);
    }
    return message;
  }
  resolve(message) {
    return this._resolveReject(message, true);
  }
  reject(message) {
    return this._resolveReject(message, false);
  }
  _gc() {
    this._queue = this._queue.filter((msg) => {
      return Date.now() - msg.timestamp < this._gcTime;
    });
    (0, $7afbbd59ebaa42bf$export$af88d00dbe7f521).debug("[MessageDispatcher] GC", this._queue);
  }
};
var $4086f06442fcb7d7$exports = {};
$parcel$export($4086f06442fcb7d7$exports, "Transport", () => $4086f06442fcb7d7$export$86495b081fef8e52);
$parcel$export($4086f06442fcb7d7$exports, "TransportWrapper", () => $4086f06442fcb7d7$export$82b6ede160a64a3c);
var $4086f06442fcb7d7$export$86495b081fef8e52 = class {
  constructor() {
    this._state = "disconnected";
    this._expiry = void 0;
  }
  get expiry() {
    return this._expiry;
  }
};
var $4086f06442fcb7d7$export$82b6ede160a64a3c = class {
  constructor(transport) {
    this._transport = transport;
    this._proxy = new Proxy(this._transport, {
      get: (target, prop, receiver) => {
        if (typeof target[prop] === "function") {
          let errMsg;
          switch (String(prop)) {
            case "initialize":
              errMsg = `Direct calls to initialize() are disabled and used internally by the RTVIClient.`;
              break;
            case "initDevices":
              errMsg = `Direct calls to initDevices() are disabled. Please use the RTVIClient.initDevices() wrapper or let RTVIClient.connect() call it for you.`;
              break;
            case "sendReadyMessage":
              errMsg = `Direct calls to sendReadyMessage() are disabled and used internally by the RTVIClient.`;
              break;
            case "connect":
              errMsg = `Direct calls to connect() are disabled. Please use the RTVIClient.connect() wrapper.`;
              break;
            case "disconnect":
              errMsg = `Direct calls to disconnect() are disabled. Please use the RTVIClient.disconnect() wrapper.`;
              break;
          }
          if (errMsg)
            return () => {
              throw new Error(errMsg);
            };
          return (...args) => {
            return target[prop](...args);
          };
        }
        return Reflect.get(target, prop, receiver);
      }
    });
  }
  get proxy() {
    return this._proxy;
  }
};
var $a7c324a73303ad55$var$__decorate = function(decorators, target, key, desc) {
  var c3 = arguments.length, r3 = c3 < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d3;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r3 = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i3 = decorators.length - 1; i3 >= 0; i3--)
      if (d3 = decorators[i3])
        r3 = (c3 < 3 ? d3(r3) : c3 > 3 ? d3(target, key, r3) : d3(target, key)) || r3;
  return c3 > 3 && r3 && Object.defineProperty(target, key, r3), r3;
};
var $a7c324a73303ad55$var$defaultEndpoints = {
  connect: "/connect",
  action: "/action"
};
var $a7c324a73303ad55$var$RTVIEventEmitter = class extends (0, import_events.default) {
};
var $a7c324a73303ad55$export$fa42a01c1d60f4a1 = class extends $a7c324a73303ad55$var$RTVIEventEmitter {
  constructor(options) {
    super();
    this.params = {
      ...options.params,
      endpoints: {
        ...$a7c324a73303ad55$var$defaultEndpoints,
        ...options.params.endpoints ?? {}
      }
    };
    this._helpers = {};
    this._transport = options.transport;
    this._transportWrapper = new (0, $4086f06442fcb7d7$export$82b6ede160a64a3c)(this._transport);
    const wrappedCallbacks = {
      ...options.callbacks,
      onMessageError: (message) => {
        options?.callbacks?.onMessageError?.(message);
        this.emit((0, $f9fc0c57b9aaed9c$export$6b4624d233c61fcb).MessageError, message);
      },
      onError: (message) => {
        options?.callbacks?.onError?.(message);
        try {
          this.emit((0, $f9fc0c57b9aaed9c$export$6b4624d233c61fcb).Error, message);
        } catch (e3) {
          (0, $7afbbd59ebaa42bf$export$af88d00dbe7f521).debug("Could not emit error", message);
        }
        const data = message.data;
        if (data?.fatal) {
          (0, $7afbbd59ebaa42bf$export$af88d00dbe7f521).error("Fatal error reported. Disconnecting...");
          this.disconnect();
        }
      },
      onConnected: () => {
        options?.callbacks?.onConnected?.();
        this.emit((0, $f9fc0c57b9aaed9c$export$6b4624d233c61fcb).Connected);
      },
      onDisconnected: () => {
        options?.callbacks?.onDisconnected?.();
        this.emit((0, $f9fc0c57b9aaed9c$export$6b4624d233c61fcb).Disconnected);
      },
      onTransportStateChanged: (state) => {
        options?.callbacks?.onTransportStateChanged?.(state);
        this.emit((0, $f9fc0c57b9aaed9c$export$6b4624d233c61fcb).TransportStateChanged, state);
      },
      onConfig: (config) => {
        options?.callbacks?.onConfig?.(config);
        this.emit((0, $f9fc0c57b9aaed9c$export$6b4624d233c61fcb).Config, config);
      },
      onConfigDescribe: (configDescription) => {
        options?.callbacks?.onConfigDescribe?.(configDescription);
        this.emit((0, $f9fc0c57b9aaed9c$export$6b4624d233c61fcb).ConfigDescribe, configDescription);
      },
      onActionsAvailable: (actionsAvailable) => {
        options?.callbacks?.onActionsAvailable?.(actionsAvailable);
        this.emit((0, $f9fc0c57b9aaed9c$export$6b4624d233c61fcb).ActionsAvailable, actionsAvailable);
      },
      onParticipantJoined: (p3) => {
        options?.callbacks?.onParticipantJoined?.(p3);
        this.emit((0, $f9fc0c57b9aaed9c$export$6b4624d233c61fcb).ParticipantConnected, p3);
      },
      onParticipantLeft: (p3) => {
        options?.callbacks?.onParticipantLeft?.(p3);
        this.emit((0, $f9fc0c57b9aaed9c$export$6b4624d233c61fcb).ParticipantLeft, p3);
      },
      onTrackStarted: (track2, p3) => {
        options?.callbacks?.onTrackStarted?.(track2, p3);
        this.emit((0, $f9fc0c57b9aaed9c$export$6b4624d233c61fcb).TrackStarted, track2, p3);
      },
      onTrackStopped: (track2, p3) => {
        options?.callbacks?.onTrackStopped?.(track2, p3);
        this.emit((0, $f9fc0c57b9aaed9c$export$6b4624d233c61fcb).TrackStopped, track2, p3);
      },
      onScreenTrackStarted: (track2, p3) => {
        options?.callbacks?.onScreenTrackStarted?.(track2, p3);
        this.emit((0, $f9fc0c57b9aaed9c$export$6b4624d233c61fcb).ScreenTrackStarted, track2, p3);
      },
      onScreenTrackStopped: (track2, p3) => {
        options?.callbacks?.onScreenTrackStopped?.(track2, p3);
        this.emit((0, $f9fc0c57b9aaed9c$export$6b4624d233c61fcb).ScreenTrackStopped, track2, p3);
      },
      onScreenShareError: (errorMessage) => {
        options?.callbacks?.onScreenShareError?.(errorMessage);
        this.emit((0, $f9fc0c57b9aaed9c$export$6b4624d233c61fcb).ScreenShareError, errorMessage);
      },
      onAvailableCamsUpdated: (cams) => {
        options?.callbacks?.onAvailableCamsUpdated?.(cams);
        this.emit((0, $f9fc0c57b9aaed9c$export$6b4624d233c61fcb).AvailableCamsUpdated, cams);
      },
      onAvailableMicsUpdated: (mics) => {
        options?.callbacks?.onAvailableMicsUpdated?.(mics);
        this.emit((0, $f9fc0c57b9aaed9c$export$6b4624d233c61fcb).AvailableMicsUpdated, mics);
      },
      onAvailableSpeakersUpdated: (speakers) => {
        options?.callbacks?.onAvailableSpeakersUpdated?.(speakers);
        this.emit((0, $f9fc0c57b9aaed9c$export$6b4624d233c61fcb).AvailableSpeakersUpdated, speakers);
      },
      onCamUpdated: (cam) => {
        options?.callbacks?.onCamUpdated?.(cam);
        this.emit((0, $f9fc0c57b9aaed9c$export$6b4624d233c61fcb).CamUpdated, cam);
      },
      onMicUpdated: (mic) => {
        options?.callbacks?.onMicUpdated?.(mic);
        this.emit((0, $f9fc0c57b9aaed9c$export$6b4624d233c61fcb).MicUpdated, mic);
      },
      onSpeakerUpdated: (speaker) => {
        options?.callbacks?.onSpeakerUpdated?.(speaker);
        this.emit((0, $f9fc0c57b9aaed9c$export$6b4624d233c61fcb).SpeakerUpdated, speaker);
      },
      onBotConnected: (p3) => {
        options?.callbacks?.onBotConnected?.(p3);
        this.emit((0, $f9fc0c57b9aaed9c$export$6b4624d233c61fcb).BotConnected, p3);
      },
      onBotReady: (botReadyData) => {
        options?.callbacks?.onBotReady?.(botReadyData);
        this.emit((0, $f9fc0c57b9aaed9c$export$6b4624d233c61fcb).BotReady, botReadyData);
      },
      onBotDisconnected: (p3) => {
        options?.callbacks?.onBotDisconnected?.(p3);
        this.emit((0, $f9fc0c57b9aaed9c$export$6b4624d233c61fcb).BotDisconnected, p3);
      },
      onBotStartedSpeaking: () => {
        options?.callbacks?.onBotStartedSpeaking?.();
        this.emit((0, $f9fc0c57b9aaed9c$export$6b4624d233c61fcb).BotStartedSpeaking);
      },
      onBotStoppedSpeaking: () => {
        options?.callbacks?.onBotStoppedSpeaking?.();
        this.emit((0, $f9fc0c57b9aaed9c$export$6b4624d233c61fcb).BotStoppedSpeaking);
      },
      onRemoteAudioLevel: (level, p3) => {
        options?.callbacks?.onRemoteAudioLevel?.(level, p3);
        this.emit((0, $f9fc0c57b9aaed9c$export$6b4624d233c61fcb).RemoteAudioLevel, level, p3);
      },
      onUserStartedSpeaking: () => {
        options?.callbacks?.onUserStartedSpeaking?.();
        this.emit((0, $f9fc0c57b9aaed9c$export$6b4624d233c61fcb).UserStartedSpeaking);
      },
      onUserStoppedSpeaking: () => {
        options?.callbacks?.onUserStoppedSpeaking?.();
        this.emit((0, $f9fc0c57b9aaed9c$export$6b4624d233c61fcb).UserStoppedSpeaking);
      },
      onLocalAudioLevel: (level) => {
        options?.callbacks?.onLocalAudioLevel?.(level);
        this.emit((0, $f9fc0c57b9aaed9c$export$6b4624d233c61fcb).LocalAudioLevel, level);
      },
      onUserTranscript: (data) => {
        options?.callbacks?.onUserTranscript?.(data);
        this.emit((0, $f9fc0c57b9aaed9c$export$6b4624d233c61fcb).UserTranscript, data);
      },
      onBotTranscript: (text) => {
        options?.callbacks?.onBotTranscript?.(text);
        this.emit((0, $f9fc0c57b9aaed9c$export$6b4624d233c61fcb).BotTranscript, text);
      },
      onBotLlmText: (text) => {
        options?.callbacks?.onBotLlmText?.(text);
        this.emit((0, $f9fc0c57b9aaed9c$export$6b4624d233c61fcb).BotLlmText, text);
      },
      onBotLlmStarted: () => {
        options?.callbacks?.onBotLlmStarted?.();
        this.emit((0, $f9fc0c57b9aaed9c$export$6b4624d233c61fcb).BotLlmStarted);
      },
      onBotLlmStopped: () => {
        options?.callbacks?.onBotLlmStopped?.();
        this.emit((0, $f9fc0c57b9aaed9c$export$6b4624d233c61fcb).BotLlmStopped);
      },
      onBotTtsText: (text) => {
        options?.callbacks?.onBotTtsText?.(text);
        this.emit((0, $f9fc0c57b9aaed9c$export$6b4624d233c61fcb).BotTtsText, text);
      },
      onBotTtsStarted: () => {
        options?.callbacks?.onBotTtsStarted?.();
        this.emit((0, $f9fc0c57b9aaed9c$export$6b4624d233c61fcb).BotTtsStarted);
      },
      onBotTtsStopped: () => {
        options?.callbacks?.onBotTtsStopped?.();
        this.emit((0, $f9fc0c57b9aaed9c$export$6b4624d233c61fcb).BotTtsStopped);
      },
      onStorageItemStored: (data) => {
        options?.callbacks?.onStorageItemStored?.(data);
        this.emit((0, $f9fc0c57b9aaed9c$export$6b4624d233c61fcb).StorageItemStored, data);
      }
    };
    this._options = {
      ...options,
      callbacks: wrappedCallbacks,
      enableMic: options.enableMic ?? true,
      enableCam: options.enableCam ?? false
    };
    this._initialize();
    (0, $7afbbd59ebaa42bf$export$af88d00dbe7f521).debug("[RTVI Client] Initialized", this.version);
  }
  constructUrl(endpoint) {
    if (!this.params.baseUrl)
      throw new $8ead7b33b8402751$export$59b4786f333aac02("Base URL not set. Please set rtviClient.params.baseUrl");
    const baseUrl = this.params.baseUrl.replace(/\/+$/, "");
    return baseUrl + (this.params.endpoints?.[endpoint] ?? "");
  }
  setLogLevel(level) {
    (0, $7afbbd59ebaa42bf$export$af88d00dbe7f521).setLevel(level);
  }
  // ------ Transport methods
  /**
   * Initialize local media devices
   */
  async initDevices() {
    (0, $7afbbd59ebaa42bf$export$af88d00dbe7f521).debug("[RTVI Client] Initializing devices...");
    await this._transport.initDevices();
  }
  /**
   * Connect the voice client session with chosen transport
   * Call async (await) to handle errors
   */
  async connect() {
    if ([
      "authenticating",
      "connecting",
      "connected",
      "ready"
    ].includes(this._transport.state))
      throw new $8ead7b33b8402751$export$59b4786f333aac02("Voice client has already been started. Please call disconnect() before starting again.");
    this._abortController = new AbortController();
    return new Promise((resolve, reject) => {
      (async () => {
        this._startResolve = resolve;
        if (this._transport.state === "disconnected")
          await this._transport.initDevices();
        this._transport.state = "authenticating";
        if (this._options.timeout)
          this._handshakeTimeout = setTimeout(async () => {
            this._abortController?.abort();
            await this.disconnect();
            this._transport.state = "error";
            reject(new $8ead7b33b8402751$export$c67992fa684a81a6());
          }, this._options.timeout);
        let authBundle;
        const customConnectHandler = this._options.customConnectHandler;
        (0, $7afbbd59ebaa42bf$export$af88d00dbe7f521).debug("[RTVI Client] Start params", this.params);
        this.params = {
          ...this.params,
          requestData: {
            ...this.params.requestData,
            rtvi_client_version: this.version
          }
        };
        if (!this.params.baseUrl && !this.params.endpoints?.connect) {
          (0, $7afbbd59ebaa42bf$export$af88d00dbe7f521).debug("[RTVI Client] Connecting directly (skipping handshake / auth)...");
          clearTimeout(this._handshakeTimeout);
        } else {
          const connectUrl = this.constructUrl("connect");
          (0, $7afbbd59ebaa42bf$export$af88d00dbe7f521).debug("[RTVI Client] Connecting...", connectUrl);
          (0, $7afbbd59ebaa42bf$export$af88d00dbe7f521).debug("[RTVI Client] Start params", this.params);
          try {
            if (customConnectHandler)
              authBundle = await customConnectHandler(this.params, this._handshakeTimeout, this._abortController);
            else
              authBundle = await fetch(connectUrl, {
                method: "POST",
                mode: "cors",
                headers: new Headers({
                  "Content-Type": "application/json",
                  ...Object.fromEntries((this.params.headers ?? new Headers()).entries())
                }),
                body: JSON.stringify({
                  config: this.params.config,
                  ...this.params.services ? {
                    services: this.params.services
                  } : {},
                  ...this.params.requestData
                }),
                signal: this._abortController?.signal
              }).then((res) => {
                clearTimeout(this._handshakeTimeout);
                if (res.ok)
                  return res.json();
                return Promise.reject(res);
              });
          } catch (e3) {
            clearTimeout(this._handshakeTimeout);
            if (this._abortController?.signal.aborted)
              return;
            this._transport.state = "error";
            if (e3 instanceof Response) {
              const errorResp = await e3.json();
              reject(new $8ead7b33b8402751$export$e7544ab812238a61(errorResp.info ?? errorResp.detail ?? e3.statusText, e3.status));
            } else
              reject(new $8ead7b33b8402751$export$e7544ab812238a61());
            return;
          }
          (0, $7afbbd59ebaa42bf$export$af88d00dbe7f521).debug("[RTVI Client] Auth bundle received", authBundle);
        }
        try {
          await this._transport.connect(authBundle, this._abortController);
          await this._transport.sendReadyMessage();
        } catch (e3) {
          clearTimeout(this._handshakeTimeout);
          this.disconnect();
          reject(e3);
          return;
        }
      })();
    });
  }
  /**
   * Disconnect the voice client from the transport
   * Reset / reinitialize transport and abort any pending requests
   */
  async disconnect() {
    if (this._abortController)
      this._abortController.abort();
    clearTimeout(this._handshakeTimeout);
    await this._transport.disconnect();
    this._messageDispatcher = new (0, $b48f893ed1354c1e$export$e9a960646cc432aa)(this);
  }
  _initialize() {
    this._transport.initialize(this._options, this.handleMessage.bind(this));
    this._messageDispatcher = new (0, $b48f893ed1354c1e$export$e9a960646cc432aa)(this);
  }
  /**
   * Get the current state of the transport
   */
  get connected() {
    return [
      "connected",
      "ready"
    ].includes(this._transport.state);
  }
  get transport() {
    return this._transportWrapper.proxy;
  }
  get state() {
    return this._transport.state;
  }
  get version() {
    return (0, /* @__PURE__ */ $parcel$interopDefault($e3bad9cc25e327f7$exports)).version;
  }
  // ------ Device methods
  async getAllMics() {
    return await this._transport.getAllMics();
  }
  async getAllCams() {
    return await this._transport.getAllCams();
  }
  async getAllSpeakers() {
    return await this._transport.getAllSpeakers();
  }
  get selectedMic() {
    return this._transport.selectedMic;
  }
  get selectedCam() {
    return this._transport.selectedCam;
  }
  get selectedSpeaker() {
    return this._transport.selectedSpeaker;
  }
  updateMic(micId) {
    this._transport.updateMic(micId);
  }
  updateCam(camId) {
    this._transport.updateCam(camId);
  }
  updateSpeaker(speakerId) {
    this._transport.updateSpeaker(speakerId);
  }
  enableMic(enable) {
    this._transport.enableMic(enable);
  }
  get isMicEnabled() {
    return this._transport.isMicEnabled;
  }
  enableCam(enable) {
    this._transport.enableCam(enable);
  }
  get isCamEnabled() {
    return this._transport.isCamEnabled;
  }
  tracks() {
    return this._transport.tracks();
  }
  enableScreenShare(enable) {
    return this._transport.enableScreenShare(enable);
  }
  get isSharingScreen() {
    return this._transport.isSharingScreen;
  }
  // ------ Config methods
  /**
   * Request the bot to send the current configuration
   * @returns Promise<RTVIClientConfigOption[]> - Promise that resolves with the bot's configuration
   */
  async getConfig() {
    const configMsg = await this._messageDispatcher.dispatch((0, $b48f893ed1354c1e$export$69aa9ab0334b212).getBotConfig());
    return configMsg.data.config;
  }
  /**
   * Update pipeline and services
   * @param config - RTVIClientConfigOption[] partial object with the new configuration
   * @param interrupt - boolean flag to interrupt the current pipeline, or wait until the next turn
   * @returns Promise<RTVIMessage> - Promise that resolves with the updated configuration
   */
  async updateConfig(config, interrupt = false) {
    (0, $7afbbd59ebaa42bf$export$af88d00dbe7f521).debug("[RTVI Client] Updating config", config);
    return this._messageDispatcher.dispatch((0, $b48f893ed1354c1e$export$69aa9ab0334b212).updateConfig(config, interrupt));
  }
  /**
   * Request bot describe the current configuration options
   * @returns Promise<unknown> - Promise that resolves with the bot's configuration description
   */
  async describeConfig() {
    return this._messageDispatcher.dispatch((0, $b48f893ed1354c1e$export$69aa9ab0334b212).describeConfig());
  }
  /**
   * Returns configuration options for specified service key
   * @param serviceKey - Service name to get options for (e.g. "llm")
   * @param config? - Optional RTVIClientConfigOption[] to query (vs. using remote config)
   * @returns RTVIClientConfigOption | undefined - Configuration options array for the service with specified key or undefined
   */
  async getServiceOptionsFromConfig(serviceKey, config) {
    if (!config && this.state !== "ready")
      throw new $8ead7b33b8402751$export$885fb96b850e8fbb("getServiceOptionsFromConfig called without config array before bot is ready");
    return Promise.resolve().then(async () => {
      if (!serviceKey) {
        (0, $7afbbd59ebaa42bf$export$af88d00dbe7f521).debug("Target service name is required");
        return void 0;
      }
      const passedConfig = config ?? await this.getConfig();
      const configServiceKey = passedConfig.find((config2) => config2.service === serviceKey);
      if (!configServiceKey) {
        (0, $7afbbd59ebaa42bf$export$af88d00dbe7f521).debug("No service with name " + serviceKey + " not found in config");
        return void 0;
      }
      return configServiceKey;
    });
  }
  /**
   * Returns configuration option value (unknown) for specified service key and option name
   * @param serviceKey - Service name to get options for (e.g. "llm")
   * @optional option Name of option return from the config (e.g. "model")
   * @returns Promise<unknown | undefined> - Service configuration option value or undefined
   */
  async getServiceOptionValueFromConfig(serviceKey, option, config) {
    const configServiceKey = await this.getServiceOptionsFromConfig(serviceKey, config);
    if (!configServiceKey) {
      (0, $7afbbd59ebaa42bf$export$af88d00dbe7f521).debug("Service with name " + serviceKey + " not found in config");
      return void 0;
    }
    const optionValue = configServiceKey.options.find((o3) => o3.name === option);
    return optionValue ? optionValue.value : void 0;
  }
  _updateOrAddOption(existingOptions, newOption) {
    const existingOptionIndex = existingOptions.findIndex((item) => item.name === newOption.name);
    if (existingOptionIndex !== -1)
      return existingOptions.map((item, index) => index === existingOptionIndex ? {
        ...item,
        value: newOption.value
      } : item);
    else
      return [
        ...existingOptions,
        {
          name: newOption.name,
          value: newOption.value
        }
      ];
  }
  /**
   * Returns config with updated option(s) for specified service key and option name
   * Note: does not update current config, only returns a new object (call updateConfig to apply changes)
   * @param serviceKey - Service name to get options for (e.g. "llm")
   * @param option - Service name to get options for (e.g. "model")
   * @param config - Optional RTVIClientConfigOption[] to update (vs. using current config)
   * @returns Promise<RTVIClientConfigOption[] | undefined> - Configuration options array with updated option(s) or undefined
   */
  async setServiceOptionInConfig(serviceKey, option, config) {
    const newConfig = (0, import_clone_deep.default)(config ?? await this.getConfig());
    const serviceOptions = await this.getServiceOptionsFromConfig(serviceKey, newConfig);
    if (!serviceOptions) {
      (0, $7afbbd59ebaa42bf$export$af88d00dbe7f521).debug("Service with name '" + serviceKey + "' not found in config");
      return newConfig;
    }
    const optionsArray = Array.isArray(option) ? option : [
      option
    ];
    for (const opt of optionsArray) {
      const existingItem = newConfig.find((item) => item.service === serviceKey);
      const updatedOptions = existingItem ? this._updateOrAddOption(existingItem.options, opt) : [
        {
          name: opt.name,
          value: opt.value
        }
      ];
      if (existingItem)
        existingItem.options = updatedOptions;
      else
        newConfig.push({
          service: serviceKey,
          options: updatedOptions
        });
    }
    return newConfig;
  }
  /**
   * Returns config object with updated properties from passed array.
   * @param configOptions - Array of RTVIClientConfigOption[] to update
   * @param config? - Optional RTVIClientConfigOption[] to update (vs. using current config)
   * @returns Promise<RTVIClientConfigOption[]> - Configuration options
   */
  async setConfigOptions(configOptions, config) {
    let accumulator = (0, import_clone_deep.default)(config ?? await this.getConfig());
    for (const configOption of configOptions)
      accumulator = await this.setServiceOptionInConfig(configOption.service, configOption.options, accumulator) || accumulator;
    return accumulator;
  }
  // ------ Actions
  /**
   * Dispatch an action message to the bot or http single-turn endpoint
   */
  async action(action) {
    return this._messageDispatcher.dispatchAction(new (0, $b48f893ed1354c1e$export$378529d7a8bead8b)(action), this.handleMessage.bind(this));
  }
  /**
   * Describe available / registered actions the bot has
   * @returns Promise<unknown> - Promise that resolves with the bot's actions
   */
  async describeActions() {
    return this._messageDispatcher.dispatch((0, $b48f893ed1354c1e$export$69aa9ab0334b212).describeActions());
  }
  // ------ Transport methods
  /**
   * Get the session expiry time for the transport session (if applicable)
   * @returns number - Expiry time in milliseconds
   */
  get transportExpiry() {
    return this._transport.expiry;
  }
  // ------ Messages
  /**
   * Directly send a message to the bot via the transport
   * @param message - RTVIMessage object to send
   */
  sendMessage(message) {
    this._transport.sendMessage(message);
  }
  /**
   * Disconnects the bot, but keeps the session alive
   */
  disconnectBot() {
    this._transport.sendMessage(new (0, $b48f893ed1354c1e$export$69aa9ab0334b212)((0, $b48f893ed1354c1e$export$38b3db05cbf0e240).DISCONNECT_BOT, {}));
  }
  handleMessage(ev) {
    (0, $7afbbd59ebaa42bf$export$af88d00dbe7f521).debug("[RTVI Message]", ev);
    switch (ev.type) {
      case (0, $b48f893ed1354c1e$export$38b3db05cbf0e240).BOT_READY:
        clearTimeout(this._handshakeTimeout);
        this._startResolve?.(ev.data);
        this._options.callbacks?.onBotReady?.(ev.data);
        break;
      case (0, $b48f893ed1354c1e$export$38b3db05cbf0e240).CONFIG_AVAILABLE:
        this._messageDispatcher.resolve(ev);
        this._options.callbacks?.onConfigDescribe?.(ev.data);
        break;
      case (0, $b48f893ed1354c1e$export$38b3db05cbf0e240).CONFIG: {
        const resp = this._messageDispatcher.resolve(ev);
        this._options.callbacks?.onConfig?.(resp.data.config);
        break;
      }
      case (0, $b48f893ed1354c1e$export$38b3db05cbf0e240).ACTIONS_AVAILABLE:
        this._messageDispatcher.resolve(ev);
        this._options.callbacks?.onActionsAvailable?.(ev.data);
        break;
      case (0, $b48f893ed1354c1e$export$38b3db05cbf0e240).ACTION_RESPONSE:
        this._messageDispatcher.resolve(ev);
        break;
      case (0, $b48f893ed1354c1e$export$38b3db05cbf0e240).ERROR_RESPONSE: {
        const resp = this._messageDispatcher.reject(ev);
        this._options.callbacks?.onMessageError?.(resp);
        break;
      }
      case (0, $b48f893ed1354c1e$export$38b3db05cbf0e240).ERROR:
        this._options.callbacks?.onError?.(ev);
        break;
      case (0, $b48f893ed1354c1e$export$38b3db05cbf0e240).USER_STARTED_SPEAKING:
        this._options.callbacks?.onUserStartedSpeaking?.();
        break;
      case (0, $b48f893ed1354c1e$export$38b3db05cbf0e240).USER_STOPPED_SPEAKING:
        this._options.callbacks?.onUserStoppedSpeaking?.();
        break;
      case (0, $b48f893ed1354c1e$export$38b3db05cbf0e240).BOT_STARTED_SPEAKING:
        this._options.callbacks?.onBotStartedSpeaking?.();
        break;
      case (0, $b48f893ed1354c1e$export$38b3db05cbf0e240).BOT_STOPPED_SPEAKING:
        this._options.callbacks?.onBotStoppedSpeaking?.();
        break;
      case (0, $b48f893ed1354c1e$export$38b3db05cbf0e240).USER_TRANSCRIPTION: {
        const TranscriptData2 = ev.data;
        this._options.callbacks?.onUserTranscript?.(TranscriptData2);
        break;
      }
      case (0, $b48f893ed1354c1e$export$38b3db05cbf0e240).BOT_TRANSCRIPTION:
        this._options.callbacks?.onBotTranscript?.(ev.data);
        break;
      case (0, $b48f893ed1354c1e$export$38b3db05cbf0e240).BOT_LLM_TEXT:
        this._options.callbacks?.onBotLlmText?.(ev.data);
        break;
      case (0, $b48f893ed1354c1e$export$38b3db05cbf0e240).BOT_LLM_STARTED:
        this._options.callbacks?.onBotLlmStarted?.();
        break;
      case (0, $b48f893ed1354c1e$export$38b3db05cbf0e240).BOT_LLM_STOPPED:
        this._options.callbacks?.onBotLlmStopped?.();
        break;
      case (0, $b48f893ed1354c1e$export$38b3db05cbf0e240).BOT_TTS_TEXT:
        this._options.callbacks?.onBotTtsText?.(ev.data);
        break;
      case (0, $b48f893ed1354c1e$export$38b3db05cbf0e240).BOT_TTS_STARTED:
        this._options.callbacks?.onBotTtsStarted?.();
        break;
      case (0, $b48f893ed1354c1e$export$38b3db05cbf0e240).BOT_TTS_STOPPED:
        this._options.callbacks?.onBotTtsStopped?.();
        break;
      case (0, $b48f893ed1354c1e$export$38b3db05cbf0e240).BOT_LLM_SEARCH_RESPONSE:
        this._options.callbacks?.onBotLlmSearchResponse?.(ev.data);
        this.emit((0, $f9fc0c57b9aaed9c$export$6b4624d233c61fcb).BotLlmSearchResponse, ev.data);
        break;
      case (0, $b48f893ed1354c1e$export$38b3db05cbf0e240).METRICS:
        this.emit((0, $f9fc0c57b9aaed9c$export$6b4624d233c61fcb).Metrics, ev.data);
        this._options.callbacks?.onMetrics?.(ev.data);
        break;
      case (0, $b48f893ed1354c1e$export$38b3db05cbf0e240).STORAGE_ITEM_STORED:
        this._options.callbacks?.onStorageItemStored?.(ev.data);
        break;
      case (0, $b48f893ed1354c1e$export$38b3db05cbf0e240).SERVER_MESSAGE:
        this._options.callbacks?.onServerMessage?.(ev.data);
        this.emit((0, $f9fc0c57b9aaed9c$export$6b4624d233c61fcb).ServerMessage, ev.data);
        break;
      default: {
        let match = false;
        for (const helper of Object.values(this._helpers))
          if (helper.getMessageTypes().includes(ev.type)) {
            match = true;
            helper.handleMessage(ev);
          }
        if (!match)
          this._options.callbacks?.onGenericMessage?.(ev.data);
      }
    }
  }
  // ------ Helpers
  /**
   * Register a new helper to the client
   * This (optionally) provides a way to reference helpers directly
   * from the client and use the event dispatcher
   * @param service - Target service for this helper
   * @param helper - Helper instance
   * @returns RTVIClientHelper - Registered helper instance
   */
  registerHelper(service, helper) {
    if (this._helpers[service])
      throw new Error(`Helper with name '${service}' already registered`);
    if (!(helper instanceof (0, $7614fb2168c523cc$export$23bc637255b2a471)))
      throw new Error(`Helper must be an instance of RTVIClientHelper`);
    helper.service = service;
    helper.client = this;
    this._helpers[service] = helper;
    return this._helpers[service];
  }
  getHelper(service) {
    const helper = this._helpers[service];
    if (!helper) {
      (0, $7afbbd59ebaa42bf$export$af88d00dbe7f521).debug(`Helper targeting service '${service}' not found`);
      return void 0;
    }
    return helper;
  }
  unregisterHelper(service) {
    if (!this._helpers[service])
      return;
    delete this._helpers[service];
  }
};
$a7c324a73303ad55$var$__decorate([
  (0, $16f019d4d16917df$export$f1586721024c4dab)
], $a7c324a73303ad55$export$fa42a01c1d60f4a1.prototype, "getConfig", null);
$a7c324a73303ad55$var$__decorate([
  (0, $16f019d4d16917df$export$f1586721024c4dab)
], $a7c324a73303ad55$export$fa42a01c1d60f4a1.prototype, "updateConfig", null);
$a7c324a73303ad55$var$__decorate([
  (0, $16f019d4d16917df$export$f1586721024c4dab)
], $a7c324a73303ad55$export$fa42a01c1d60f4a1.prototype, "describeConfig", null);
$a7c324a73303ad55$var$__decorate([
  (0, $16f019d4d16917df$export$f1586721024c4dab)
], $a7c324a73303ad55$export$fa42a01c1d60f4a1.prototype, "describeActions", null);
$a7c324a73303ad55$var$__decorate([
  (0, $16f019d4d16917df$export$5c35b4fe6fa8c9a6)("connected", "ready")
], $a7c324a73303ad55$export$fa42a01c1d60f4a1.prototype, "transportExpiry", null);
$a7c324a73303ad55$var$__decorate([
  (0, $16f019d4d16917df$export$f1586721024c4dab)
], $a7c324a73303ad55$export$fa42a01c1d60f4a1.prototype, "sendMessage", null);
$a7c324a73303ad55$var$__decorate([
  (0, $16f019d4d16917df$export$f1586721024c4dab)
], $a7c324a73303ad55$export$fa42a01c1d60f4a1.prototype, "disconnectBot", null);
var $0908f693e3e0724c$exports = {};
$parcel$export($0908f693e3e0724c$exports, "LLMMessageType", () => $0908f693e3e0724c$export$441bcd2e10762760);
$parcel$export($0908f693e3e0724c$exports, "LLMActionType", () => $0908f693e3e0724c$export$43cdfb26f790451);
$parcel$export($0908f693e3e0724c$exports, "LLMHelper", () => $0908f693e3e0724c$export$3cf39a62d076dd5c);
var $0908f693e3e0724c$export$441bcd2e10762760;
(function(LLMMessageType) {
  LLMMessageType["LLM_FUNCTION_CALL"] = "llm-function-call";
  LLMMessageType["LLM_FUNCTION_CALL_START"] = "llm-function-call-start";
  LLMMessageType["LLM_FUNCTION_CALL_RESULT"] = "llm-function-call-result";
  LLMMessageType["LLM_JSON_COMPLETION"] = "llm-json-completion";
})($0908f693e3e0724c$export$441bcd2e10762760 || ($0908f693e3e0724c$export$441bcd2e10762760 = {}));
var $0908f693e3e0724c$export$43cdfb26f790451;
(function(LLMActionType) {
  LLMActionType["APPEND_TO_MESSAGES"] = "append_to_messages";
  LLMActionType["GET_CONTEXT"] = "get_context";
  LLMActionType["SET_CONTEXT"] = "set_context";
  LLMActionType["RUN"] = "run";
})($0908f693e3e0724c$export$43cdfb26f790451 || ($0908f693e3e0724c$export$43cdfb26f790451 = {}));
var $0908f693e3e0724c$export$3cf39a62d076dd5c = class extends (0, $7614fb2168c523cc$export$23bc637255b2a471) {
  constructor(options) {
    super(options);
    this._functionCallCallback = null;
  }
  getMessageTypes() {
    return Object.values($0908f693e3e0724c$export$441bcd2e10762760);
  }
  // --- Actions
  /**
   * Retrieve the bot's current LLM context.
   * @returns Promise<LLMContext>
   */
  async getContext() {
    if (this._client.state !== "ready")
      throw new $8ead7b33b8402751$export$885fb96b850e8fbb("getContext called while transport not in ready state");
    const actionResponseMsg = await this._client.action({
      service: this._service,
      action: $0908f693e3e0724c$export$43cdfb26f790451.GET_CONTEXT
    });
    return actionResponseMsg.data.result;
  }
  /**
   * Update the bot's LLM context.
   * If this is called while the transport is not in the ready state, the local context will be updated
   * @param context LLMContext - The new context
   * @param interrupt boolean - Whether to interrupt the bot, or wait until it has finished speaking
   * @returns Promise<boolean>
   */
  async setContext(context, interrupt = false) {
    if (this._client.state !== "ready")
      throw new $8ead7b33b8402751$export$885fb96b850e8fbb("setContext called while transport not in ready state");
    const actionResponse = await this._client.action({
      service: this._service,
      action: $0908f693e3e0724c$export$43cdfb26f790451.SET_CONTEXT,
      arguments: [
        {
          name: "messages",
          value: context.messages
        },
        {
          name: "interrupt",
          value: interrupt
        }
      ]
    });
    return !!actionResponse.data.result;
  }
  /**
   * Append a new message to the LLM context.
   * If this is called while the transport is not in the ready state, the local context will be updated
   * @param context LLMContextMessage
   * @param runImmediately boolean - wait until pipeline is idle before running
   * @returns boolean
   */
  async appendToMessages(message, runImmediately = false) {
    if (this._client.state !== "ready")
      throw new $8ead7b33b8402751$export$885fb96b850e8fbb("setContext called while transport not in ready state");
    const actionResponse = await this._client.action({
      service: this._service,
      action: $0908f693e3e0724c$export$43cdfb26f790451.APPEND_TO_MESSAGES,
      arguments: [
        {
          name: "messages",
          value: [
            message
          ]
        },
        {
          name: "run_immediately",
          value: runImmediately
        }
      ]
    });
    return !!actionResponse.data.result;
  }
  /**
   * Run the bot's current LLM context.
   * Useful when appending messages to the context without runImmediately set to true.
   * Will do nothing if the bot is not in the ready state.
   * @param interrupt boolean - Whether to interrupt the bot, or wait until it has finished speaking
   * @returns Promise<unknown>
   */
  async run(interrupt = false) {
    if (this._client.state !== "ready")
      return;
    return this._client.action({
      service: this._service,
      action: $0908f693e3e0724c$export$43cdfb26f790451.RUN,
      arguments: [
        {
          name: "interrupt",
          value: interrupt
        }
      ]
    });
  }
  // --- Handlers
  /**
   * If the LLM wants to call a function, RTVI will invoke the callback defined
   * here. Whatever the callback returns will be sent to the LLM as the function result.
   * @param callback
   * @returns void
   */
  handleFunctionCall(callback) {
    this._functionCallCallback = callback;
  }
  handleMessage(ev) {
    switch (ev.type) {
      case $0908f693e3e0724c$export$441bcd2e10762760.LLM_JSON_COMPLETION:
        this._options.callbacks?.onLLMJsonCompletion?.(ev.data);
        this._client.emit((0, $f9fc0c57b9aaed9c$export$6b4624d233c61fcb).LLMJsonCompletion, ev.data);
        break;
      case $0908f693e3e0724c$export$441bcd2e10762760.LLM_FUNCTION_CALL: {
        const d3 = ev.data;
        this._options.callbacks?.onLLMFunctionCall?.(ev.data);
        this._client.emit((0, $f9fc0c57b9aaed9c$export$6b4624d233c61fcb).LLMFunctionCall, ev.data);
        if (this._functionCallCallback) {
          const fn3 = {
            functionName: d3.function_name,
            arguments: d3.args
          };
          if (this._client.state === "ready")
            this._functionCallCallback(fn3).then((result) => {
              this._client.sendMessage(new (0, $b48f893ed1354c1e$export$69aa9ab0334b212)($0908f693e3e0724c$export$441bcd2e10762760.LLM_FUNCTION_CALL_RESULT, {
                function_name: d3.function_name,
                tool_call_id: d3.tool_call_id,
                arguments: d3.args,
                result
              }));
            });
          else
            throw new $8ead7b33b8402751$export$885fb96b850e8fbb("Attempted to send a function call result from bot while transport not in ready state");
        }
        break;
      }
      case $0908f693e3e0724c$export$441bcd2e10762760.LLM_FUNCTION_CALL_START: {
        const e3 = ev.data;
        this._options.callbacks?.onLLMFunctionCallStart?.(e3.function_name);
        this._client.emit((0, $f9fc0c57b9aaed9c$export$6b4624d233c61fcb).LLMFunctionCallStart, e3.function_name);
        break;
      }
    }
  }
};

// src/client.ts
var Client = class extends $a7c324a73303ad55$export$fa42a01c1d60f4a1 {
  constructor(options) {
    super(options);
    console.log("[Client] Initialized with options:", options);
  }
  // Add custom method for sending text messages
  async sendTextMessage(text) {
    console.log("[Client] Sending text message:", text);
    const message = {
      type: "text",
      data: { text },
      id: crypto.randomUUID(),
      label: "user_message"
    };
    return this.sendMessage(message);
  }
  // Add custom method for sending actions with enhanced logging
  async sendCustomAction(action) {
    console.log("[Client] Sending custom action:", action);
    try {
      const response = await this.action(action);
      console.log("[Client] Action response:", response);
      return response;
    } catch (error) {
      console.error("[Client] Action failed:", error);
      throw error;
    }
  }
};

// src/utils/utils.ts
import { ProtobufFrameSerializer } from "@pipecat-ai/websocket-transport";

// src/transport/transport.ts
import { WebSocketTransport } from "@pipecat-ai/websocket-transport";

// ../node_modules/@daily-co/daily-js/dist/daily-esm.js
function e(e3, t3) {
  if (null == e3)
    return {};
  var n3, r3, i3 = function(e4, t4) {
    if (null == e4)
      return {};
    var n4 = {};
    for (var r4 in e4)
      if ({}.hasOwnProperty.call(e4, r4)) {
        if (-1 !== t4.indexOf(r4))
          continue;
        n4[r4] = e4[r4];
      }
    return n4;
  }(e3, t3);
  if (Object.getOwnPropertySymbols) {
    var o3 = Object.getOwnPropertySymbols(e3);
    for (r3 = 0; r3 < o3.length; r3++)
      n3 = o3[r3], -1 === t3.indexOf(n3) && {}.propertyIsEnumerable.call(e3, n3) && (i3[n3] = e3[n3]);
  }
  return i3;
}
function t(e3, t3) {
  if (!(e3 instanceof t3))
    throw new TypeError("Cannot call a class as a function");
}
function n(e3) {
  return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e4) {
    return typeof e4;
  } : function(e4) {
    return e4 && "function" == typeof Symbol && e4.constructor === Symbol && e4 !== Symbol.prototype ? "symbol" : typeof e4;
  }, n(e3);
}
function r(e3) {
  var t3 = function(e4, t4) {
    if ("object" != n(e4) || !e4)
      return e4;
    var r3 = e4[Symbol.toPrimitive];
    if (void 0 !== r3) {
      var i3 = r3.call(e4, t4 || "default");
      if ("object" != n(i3))
        return i3;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === t4 ? String : Number)(e4);
  }(e3, "string");
  return "symbol" == n(t3) ? t3 : t3 + "";
}
function i(e3, t3) {
  for (var n3 = 0; n3 < t3.length; n3++) {
    var i3 = t3[n3];
    i3.enumerable = i3.enumerable || false, i3.configurable = true, "value" in i3 && (i3.writable = true), Object.defineProperty(e3, r(i3.key), i3);
  }
}
function o(e3, t3, n3) {
  return t3 && i(e3.prototype, t3), n3 && i(e3, n3), Object.defineProperty(e3, "prototype", { writable: false }), e3;
}
function s(e3, t3) {
  if (t3 && ("object" == n(t3) || "function" == typeof t3))
    return t3;
  if (void 0 !== t3)
    throw new TypeError("Derived constructors may only return object or undefined");
  return function(e4) {
    if (void 0 === e4)
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return e4;
  }(e3);
}
function a(e3) {
  return a = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(e4) {
    return e4.__proto__ || Object.getPrototypeOf(e4);
  }, a(e3);
}
function c(e3, t3) {
  return c = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(e4, t4) {
    return e4.__proto__ = t4, e4;
  }, c(e3, t3);
}
function l(e3, t3) {
  if ("function" != typeof t3 && null !== t3)
    throw new TypeError("Super expression must either be null or a function");
  e3.prototype = Object.create(t3 && t3.prototype, { constructor: { value: e3, writable: true, configurable: true } }), Object.defineProperty(e3, "prototype", { writable: false }), t3 && c(e3, t3);
}
function u(e3, t3, n3) {
  return (t3 = r(t3)) in e3 ? Object.defineProperty(e3, t3, { value: n3, enumerable: true, configurable: true, writable: true }) : e3[t3] = n3, e3;
}
function d(e3, t3, n3, r3, i3, o3, s3) {
  try {
    var a3 = e3[o3](s3), c3 = a3.value;
  } catch (e4) {
    return void n3(e4);
  }
  a3.done ? t3(c3) : Promise.resolve(c3).then(r3, i3);
}
function p(e3) {
  return function() {
    var t3 = this, n3 = arguments;
    return new Promise(function(r3, i3) {
      var o3 = e3.apply(t3, n3);
      function s3(e4) {
        d(o3, r3, i3, s3, a3, "next", e4);
      }
      function a3(e4) {
        d(o3, r3, i3, s3, a3, "throw", e4);
      }
      s3(void 0);
    });
  };
}
function h(e3, t3) {
  (null == t3 || t3 > e3.length) && (t3 = e3.length);
  for (var n3 = 0, r3 = Array(t3); n3 < t3; n3++)
    r3[n3] = e3[n3];
  return r3;
}
function f(e3, t3) {
  return function(e4) {
    if (Array.isArray(e4))
      return e4;
  }(e3) || function(e4, t4) {
    var n3 = null == e4 ? null : "undefined" != typeof Symbol && e4[Symbol.iterator] || e4["@@iterator"];
    if (null != n3) {
      var r3, i3, o3, s3, a3 = [], c3 = true, l3 = false;
      try {
        if (o3 = (n3 = n3.call(e4)).next, 0 === t4) {
          if (Object(n3) !== n3)
            return;
          c3 = false;
        } else
          for (; !(c3 = (r3 = o3.call(n3)).done) && (a3.push(r3.value), a3.length !== t4); c3 = true)
            ;
      } catch (e5) {
        l3 = true, i3 = e5;
      } finally {
        try {
          if (!c3 && null != n3.return && (s3 = n3.return(), Object(s3) !== s3))
            return;
        } finally {
          if (l3)
            throw i3;
        }
      }
      return a3;
    }
  }(e3, t3) || function(e4, t4) {
    if (e4) {
      if ("string" == typeof e4)
        return h(e4, t4);
      var n3 = {}.toString.call(e4).slice(8, -1);
      return "Object" === n3 && e4.constructor && (n3 = e4.constructor.name), "Map" === n3 || "Set" === n3 ? Array.from(e4) : "Arguments" === n3 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n3) ? h(e4, t4) : void 0;
    }
  }(e3, t3) || function() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }();
}
function v(e3) {
  return e3 && e3.__esModule && Object.prototype.hasOwnProperty.call(e3, "default") ? e3.default : e3;
}
var g;
var m = { exports: {} };
var y = "object" == typeof Reflect ? Reflect : null;
var b = y && "function" == typeof y.apply ? y.apply : function(e3, t3, n3) {
  return Function.prototype.apply.call(e3, t3, n3);
};
g = y && "function" == typeof y.ownKeys ? y.ownKeys : Object.getOwnPropertySymbols ? function(e3) {
  return Object.getOwnPropertyNames(e3).concat(Object.getOwnPropertySymbols(e3));
} : function(e3) {
  return Object.getOwnPropertyNames(e3);
};
var _ = Number.isNaN || function(e3) {
  return e3 != e3;
};
function w() {
  w.init.call(this);
}
m.exports = w, m.exports.once = function(e3, t3) {
  return new Promise(function(n3, r3) {
    function i3(n4) {
      e3.removeListener(t3, o3), r3(n4);
    }
    function o3() {
      "function" == typeof e3.removeListener && e3.removeListener("error", i3), n3([].slice.call(arguments));
    }
    j(e3, t3, o3, { once: true }), "error" !== t3 && function(e4, t4, n4) {
      "function" == typeof e4.on && j(e4, "error", t4, n4);
    }(e3, i3, { once: true });
  });
}, w.EventEmitter = w, w.prototype._events = void 0, w.prototype._eventsCount = 0, w.prototype._maxListeners = void 0;
var S = 10;
function k(e3) {
  if ("function" != typeof e3)
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof e3);
}
function M(e3) {
  return void 0 === e3._maxListeners ? w.defaultMaxListeners : e3._maxListeners;
}
function C(e3, t3, n3, r3) {
  var i3, o3, s3, a3;
  if (k(n3), void 0 === (o3 = e3._events) ? (o3 = e3._events = /* @__PURE__ */ Object.create(null), e3._eventsCount = 0) : (void 0 !== o3.newListener && (e3.emit("newListener", t3, n3.listener ? n3.listener : n3), o3 = e3._events), s3 = o3[t3]), void 0 === s3)
    s3 = o3[t3] = n3, ++e3._eventsCount;
  else if ("function" == typeof s3 ? s3 = o3[t3] = r3 ? [n3, s3] : [s3, n3] : r3 ? s3.unshift(n3) : s3.push(n3), (i3 = M(e3)) > 0 && s3.length > i3 && !s3.warned) {
    s3.warned = true;
    var c3 = new Error("Possible EventEmitter memory leak detected. " + s3.length + " " + String(t3) + " listeners added. Use emitter.setMaxListeners() to increase limit");
    c3.name = "MaxListenersExceededWarning", c3.emitter = e3, c3.type = t3, c3.count = s3.length, a3 = c3, console && console.warn && console.warn(a3);
  }
  return e3;
}
function E() {
  if (!this.fired)
    return this.target.removeListener(this.type, this.wrapFn), this.fired = true, 0 === arguments.length ? this.listener.call(this.target) : this.listener.apply(this.target, arguments);
}
function T(e3, t3, n3) {
  var r3 = { fired: false, wrapFn: void 0, target: e3, type: t3, listener: n3 }, i3 = E.bind(r3);
  return i3.listener = n3, r3.wrapFn = i3, i3;
}
function O(e3, t3, n3) {
  var r3 = e3._events;
  if (void 0 === r3)
    return [];
  var i3 = r3[t3];
  return void 0 === i3 ? [] : "function" == typeof i3 ? n3 ? [i3.listener || i3] : [i3] : n3 ? function(e4) {
    for (var t4 = new Array(e4.length), n4 = 0; n4 < t4.length; ++n4)
      t4[n4] = e4[n4].listener || e4[n4];
    return t4;
  }(i3) : A(i3, i3.length);
}
function P(e3) {
  var t3 = this._events;
  if (void 0 !== t3) {
    var n3 = t3[e3];
    if ("function" == typeof n3)
      return 1;
    if (void 0 !== n3)
      return n3.length;
  }
  return 0;
}
function A(e3, t3) {
  for (var n3 = new Array(t3), r3 = 0; r3 < t3; ++r3)
    n3[r3] = e3[r3];
  return n3;
}
function j(e3, t3, n3, r3) {
  if ("function" == typeof e3.on)
    r3.once ? e3.once(t3, n3) : e3.on(t3, n3);
  else {
    if ("function" != typeof e3.addEventListener)
      throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof e3);
    e3.addEventListener(t3, function i3(o3) {
      r3.once && e3.removeEventListener(t3, i3), n3(o3);
    });
  }
}
Object.defineProperty(w, "defaultMaxListeners", { enumerable: true, get: function() {
  return S;
}, set: function(e3) {
  if ("number" != typeof e3 || e3 < 0 || _(e3))
    throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + e3 + ".");
  S = e3;
} }), w.init = function() {
  void 0 !== this._events && this._events !== Object.getPrototypeOf(this)._events || (this._events = /* @__PURE__ */ Object.create(null), this._eventsCount = 0), this._maxListeners = this._maxListeners || void 0;
}, w.prototype.setMaxListeners = function(e3) {
  if ("number" != typeof e3 || e3 < 0 || _(e3))
    throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + e3 + ".");
  return this._maxListeners = e3, this;
}, w.prototype.getMaxListeners = function() {
  return M(this);
}, w.prototype.emit = function(e3) {
  for (var t3 = [], n3 = 1; n3 < arguments.length; n3++)
    t3.push(arguments[n3]);
  var r3 = "error" === e3, i3 = this._events;
  if (void 0 !== i3)
    r3 = r3 && void 0 === i3.error;
  else if (!r3)
    return false;
  if (r3) {
    var o3;
    if (t3.length > 0 && (o3 = t3[0]), o3 instanceof Error)
      throw o3;
    var s3 = new Error("Unhandled error." + (o3 ? " (" + o3.message + ")" : ""));
    throw s3.context = o3, s3;
  }
  var a3 = i3[e3];
  if (void 0 === a3)
    return false;
  if ("function" == typeof a3)
    b(a3, this, t3);
  else {
    var c3 = a3.length, l3 = A(a3, c3);
    for (n3 = 0; n3 < c3; ++n3)
      b(l3[n3], this, t3);
  }
  return true;
}, w.prototype.addListener = function(e3, t3) {
  return C(this, e3, t3, false);
}, w.prototype.on = w.prototype.addListener, w.prototype.prependListener = function(e3, t3) {
  return C(this, e3, t3, true);
}, w.prototype.once = function(e3, t3) {
  return k(t3), this.on(e3, T(this, e3, t3)), this;
}, w.prototype.prependOnceListener = function(e3, t3) {
  return k(t3), this.prependListener(e3, T(this, e3, t3)), this;
}, w.prototype.removeListener = function(e3, t3) {
  var n3, r3, i3, o3, s3;
  if (k(t3), void 0 === (r3 = this._events))
    return this;
  if (void 0 === (n3 = r3[e3]))
    return this;
  if (n3 === t3 || n3.listener === t3)
    0 == --this._eventsCount ? this._events = /* @__PURE__ */ Object.create(null) : (delete r3[e3], r3.removeListener && this.emit("removeListener", e3, n3.listener || t3));
  else if ("function" != typeof n3) {
    for (i3 = -1, o3 = n3.length - 1; o3 >= 0; o3--)
      if (n3[o3] === t3 || n3[o3].listener === t3) {
        s3 = n3[o3].listener, i3 = o3;
        break;
      }
    if (i3 < 0)
      return this;
    0 === i3 ? n3.shift() : function(e4, t4) {
      for (; t4 + 1 < e4.length; t4++)
        e4[t4] = e4[t4 + 1];
      e4.pop();
    }(n3, i3), 1 === n3.length && (r3[e3] = n3[0]), void 0 !== r3.removeListener && this.emit("removeListener", e3, s3 || t3);
  }
  return this;
}, w.prototype.off = w.prototype.removeListener, w.prototype.removeAllListeners = function(e3) {
  var t3, n3, r3;
  if (void 0 === (n3 = this._events))
    return this;
  if (void 0 === n3.removeListener)
    return 0 === arguments.length ? (this._events = /* @__PURE__ */ Object.create(null), this._eventsCount = 0) : void 0 !== n3[e3] && (0 == --this._eventsCount ? this._events = /* @__PURE__ */ Object.create(null) : delete n3[e3]), this;
  if (0 === arguments.length) {
    var i3, o3 = Object.keys(n3);
    for (r3 = 0; r3 < o3.length; ++r3)
      "removeListener" !== (i3 = o3[r3]) && this.removeAllListeners(i3);
    return this.removeAllListeners("removeListener"), this._events = /* @__PURE__ */ Object.create(null), this._eventsCount = 0, this;
  }
  if ("function" == typeof (t3 = n3[e3]))
    this.removeListener(e3, t3);
  else if (void 0 !== t3)
    for (r3 = t3.length - 1; r3 >= 0; r3--)
      this.removeListener(e3, t3[r3]);
  return this;
}, w.prototype.listeners = function(e3) {
  return O(this, e3, true);
}, w.prototype.rawListeners = function(e3) {
  return O(this, e3, false);
}, w.listenerCount = function(e3, t3) {
  return "function" == typeof e3.listenerCount ? e3.listenerCount(t3) : P.call(e3, t3);
}, w.prototype.listenerCount = P, w.prototype.eventNames = function() {
  return this._eventsCount > 0 ? g(this._events) : [];
};
var I = m.exports;
var x = v(I);
var L = Object.prototype.hasOwnProperty;
function D(e3, t3, n3) {
  for (n3 of e3.keys())
    if (N(n3, t3))
      return n3;
}
function N(e3, t3) {
  var n3, r3, i3;
  if (e3 === t3)
    return true;
  if (e3 && t3 && (n3 = e3.constructor) === t3.constructor) {
    if (n3 === Date)
      return e3.getTime() === t3.getTime();
    if (n3 === RegExp)
      return e3.toString() === t3.toString();
    if (n3 === Array) {
      if ((r3 = e3.length) === t3.length)
        for (; r3-- && N(e3[r3], t3[r3]); )
          ;
      return -1 === r3;
    }
    if (n3 === Set) {
      if (e3.size !== t3.size)
        return false;
      for (r3 of e3) {
        if ((i3 = r3) && "object" == typeof i3 && !(i3 = D(t3, i3)))
          return false;
        if (!t3.has(i3))
          return false;
      }
      return true;
    }
    if (n3 === Map) {
      if (e3.size !== t3.size)
        return false;
      for (r3 of e3) {
        if ((i3 = r3[0]) && "object" == typeof i3 && !(i3 = D(t3, i3)))
          return false;
        if (!N(r3[1], t3.get(i3)))
          return false;
      }
      return true;
    }
    if (n3 === ArrayBuffer)
      e3 = new Uint8Array(e3), t3 = new Uint8Array(t3);
    else if (n3 === DataView) {
      if ((r3 = e3.byteLength) === t3.byteLength)
        for (; r3-- && e3.getInt8(r3) === t3.getInt8(r3); )
          ;
      return -1 === r3;
    }
    if (ArrayBuffer.isView(e3)) {
      if ((r3 = e3.byteLength) === t3.byteLength)
        for (; r3-- && e3[r3] === t3[r3]; )
          ;
      return -1 === r3;
    }
    if (!n3 || "object" == typeof e3) {
      for (n3 in r3 = 0, e3) {
        if (L.call(e3, n3) && ++r3 && !L.call(t3, n3))
          return false;
        if (!(n3 in t3) || !N(e3[n3], t3[n3]))
          return false;
      }
      return Object.keys(t3).length === r3;
    }
  }
  return e3 != e3 && t3 != t3;
}
var R = { "Amazon Silk": "amazon_silk", "Android Browser": "android", Bada: "bada", BlackBerry: "blackberry", Chrome: "chrome", Chromium: "chromium", Electron: "electron", Epiphany: "epiphany", Firefox: "firefox", Focus: "focus", Generic: "generic", "Google Search": "google_search", Googlebot: "googlebot", "Internet Explorer": "ie", "K-Meleon": "k_meleon", Maxthon: "maxthon", "Microsoft Edge": "edge", "MZ Browser": "mz", "NAVER Whale Browser": "naver", Opera: "opera", "Opera Coast": "opera_coast", PhantomJS: "phantomjs", Puffin: "puffin", QupZilla: "qupzilla", QQ: "qq", QQLite: "qqlite", Safari: "safari", Sailfish: "sailfish", "Samsung Internet for Android": "samsung_internet", SeaMonkey: "seamonkey", Sleipnir: "sleipnir", Swing: "swing", Tizen: "tizen", "UC Browser": "uc", Vivaldi: "vivaldi", "WebOS Browser": "webos", WeChat: "wechat", "Yandex Browser": "yandex", Roku: "roku" };
var F = { amazon_silk: "Amazon Silk", android: "Android Browser", bada: "Bada", blackberry: "BlackBerry", chrome: "Chrome", chromium: "Chromium", electron: "Electron", epiphany: "Epiphany", firefox: "Firefox", focus: "Focus", generic: "Generic", googlebot: "Googlebot", google_search: "Google Search", ie: "Internet Explorer", k_meleon: "K-Meleon", maxthon: "Maxthon", edge: "Microsoft Edge", mz: "MZ Browser", naver: "NAVER Whale Browser", opera: "Opera", opera_coast: "Opera Coast", phantomjs: "PhantomJS", puffin: "Puffin", qupzilla: "QupZilla", qq: "QQ Browser", qqlite: "QQ Browser Lite", safari: "Safari", sailfish: "Sailfish", samsung_internet: "Samsung Internet for Android", seamonkey: "SeaMonkey", sleipnir: "Sleipnir", swing: "Swing", tizen: "Tizen", uc: "UC Browser", vivaldi: "Vivaldi", webos: "WebOS Browser", wechat: "WeChat", yandex: "Yandex Browser" };
var B = { tablet: "tablet", mobile: "mobile", desktop: "desktop", tv: "tv" };
var U = { WindowsPhone: "Windows Phone", Windows: "Windows", MacOS: "macOS", iOS: "iOS", Android: "Android", WebOS: "WebOS", BlackBerry: "BlackBerry", Bada: "Bada", Tizen: "Tizen", Linux: "Linux", ChromeOS: "Chrome OS", PlayStation4: "PlayStation 4", Roku: "Roku" };
var V = { EdgeHTML: "EdgeHTML", Blink: "Blink", Trident: "Trident", Presto: "Presto", Gecko: "Gecko", WebKit: "WebKit" };
var J = class _J {
  static getFirstMatch(e3, t3) {
    const n3 = t3.match(e3);
    return n3 && n3.length > 0 && n3[1] || "";
  }
  static getSecondMatch(e3, t3) {
    const n3 = t3.match(e3);
    return n3 && n3.length > 1 && n3[2] || "";
  }
  static matchAndReturnConst(e3, t3, n3) {
    if (e3.test(t3))
      return n3;
  }
  static getWindowsVersionName(e3) {
    switch (e3) {
      case "NT":
        return "NT";
      case "XP":
      case "NT 5.1":
        return "XP";
      case "NT 5.0":
        return "2000";
      case "NT 5.2":
        return "2003";
      case "NT 6.0":
        return "Vista";
      case "NT 6.1":
        return "7";
      case "NT 6.2":
        return "8";
      case "NT 6.3":
        return "8.1";
      case "NT 10.0":
        return "10";
      default:
        return;
    }
  }
  static getMacOSVersionName(e3) {
    const t3 = e3.split(".").splice(0, 2).map((e4) => parseInt(e4, 10) || 0);
    if (t3.push(0), 10 === t3[0])
      switch (t3[1]) {
        case 5:
          return "Leopard";
        case 6:
          return "Snow Leopard";
        case 7:
          return "Lion";
        case 8:
          return "Mountain Lion";
        case 9:
          return "Mavericks";
        case 10:
          return "Yosemite";
        case 11:
          return "El Capitan";
        case 12:
          return "Sierra";
        case 13:
          return "High Sierra";
        case 14:
          return "Mojave";
        case 15:
          return "Catalina";
        default:
          return;
      }
  }
  static getAndroidVersionName(e3) {
    const t3 = e3.split(".").splice(0, 2).map((e4) => parseInt(e4, 10) || 0);
    if (t3.push(0), !(1 === t3[0] && t3[1] < 5))
      return 1 === t3[0] && t3[1] < 6 ? "Cupcake" : 1 === t3[0] && t3[1] >= 6 ? "Donut" : 2 === t3[0] && t3[1] < 2 ? "Eclair" : 2 === t3[0] && 2 === t3[1] ? "Froyo" : 2 === t3[0] && t3[1] > 2 ? "Gingerbread" : 3 === t3[0] ? "Honeycomb" : 4 === t3[0] && t3[1] < 1 ? "Ice Cream Sandwich" : 4 === t3[0] && t3[1] < 4 ? "Jelly Bean" : 4 === t3[0] && t3[1] >= 4 ? "KitKat" : 5 === t3[0] ? "Lollipop" : 6 === t3[0] ? "Marshmallow" : 7 === t3[0] ? "Nougat" : 8 === t3[0] ? "Oreo" : 9 === t3[0] ? "Pie" : void 0;
  }
  static getVersionPrecision(e3) {
    return e3.split(".").length;
  }
  static compareVersions(e3, t3, n3 = false) {
    const r3 = _J.getVersionPrecision(e3), i3 = _J.getVersionPrecision(t3);
    let o3 = Math.max(r3, i3), s3 = 0;
    const a3 = _J.map([e3, t3], (e4) => {
      const t4 = o3 - _J.getVersionPrecision(e4), n4 = e4 + new Array(t4 + 1).join(".0");
      return _J.map(n4.split("."), (e5) => new Array(20 - e5.length).join("0") + e5).reverse();
    });
    for (n3 && (s3 = o3 - Math.min(r3, i3)), o3 -= 1; o3 >= s3; ) {
      if (a3[0][o3] > a3[1][o3])
        return 1;
      if (a3[0][o3] === a3[1][o3]) {
        if (o3 === s3)
          return 0;
        o3 -= 1;
      } else if (a3[0][o3] < a3[1][o3])
        return -1;
    }
  }
  static map(e3, t3) {
    const n3 = [];
    let r3;
    if (Array.prototype.map)
      return Array.prototype.map.call(e3, t3);
    for (r3 = 0; r3 < e3.length; r3 += 1)
      n3.push(t3(e3[r3]));
    return n3;
  }
  static find(e3, t3) {
    let n3, r3;
    if (Array.prototype.find)
      return Array.prototype.find.call(e3, t3);
    for (n3 = 0, r3 = e3.length; n3 < r3; n3 += 1) {
      const r4 = e3[n3];
      if (t3(r4, n3))
        return r4;
    }
  }
  static assign(e3, ...t3) {
    const n3 = e3;
    let r3, i3;
    if (Object.assign)
      return Object.assign(e3, ...t3);
    for (r3 = 0, i3 = t3.length; r3 < i3; r3 += 1) {
      const e4 = t3[r3];
      if ("object" == typeof e4 && null !== e4) {
        Object.keys(e4).forEach((t4) => {
          n3[t4] = e4[t4];
        });
      }
    }
    return e3;
  }
  static getBrowserAlias(e3) {
    return R[e3];
  }
  static getBrowserTypeByAlias(e3) {
    return F[e3] || "";
  }
};
var $ = /version\/(\d+(\.?_?\d+)+)/i;
var q = [{ test: [/googlebot/i], describe(e3) {
  const t3 = { name: "Googlebot" }, n3 = J.getFirstMatch(/googlebot\/(\d+(\.\d+))/i, e3) || J.getFirstMatch($, e3);
  return n3 && (t3.version = n3), t3;
} }, { test: [/opera/i], describe(e3) {
  const t3 = { name: "Opera" }, n3 = J.getFirstMatch($, e3) || J.getFirstMatch(/(?:opera)[\s/](\d+(\.?_?\d+)+)/i, e3);
  return n3 && (t3.version = n3), t3;
} }, { test: [/opr\/|opios/i], describe(e3) {
  const t3 = { name: "Opera" }, n3 = J.getFirstMatch(/(?:opr|opios)[\s/](\S+)/i, e3) || J.getFirstMatch($, e3);
  return n3 && (t3.version = n3), t3;
} }, { test: [/SamsungBrowser/i], describe(e3) {
  const t3 = { name: "Samsung Internet for Android" }, n3 = J.getFirstMatch($, e3) || J.getFirstMatch(/(?:SamsungBrowser)[\s/](\d+(\.?_?\d+)+)/i, e3);
  return n3 && (t3.version = n3), t3;
} }, { test: [/Whale/i], describe(e3) {
  const t3 = { name: "NAVER Whale Browser" }, n3 = J.getFirstMatch($, e3) || J.getFirstMatch(/(?:whale)[\s/](\d+(?:\.\d+)+)/i, e3);
  return n3 && (t3.version = n3), t3;
} }, { test: [/MZBrowser/i], describe(e3) {
  const t3 = { name: "MZ Browser" }, n3 = J.getFirstMatch(/(?:MZBrowser)[\s/](\d+(?:\.\d+)+)/i, e3) || J.getFirstMatch($, e3);
  return n3 && (t3.version = n3), t3;
} }, { test: [/focus/i], describe(e3) {
  const t3 = { name: "Focus" }, n3 = J.getFirstMatch(/(?:focus)[\s/](\d+(?:\.\d+)+)/i, e3) || J.getFirstMatch($, e3);
  return n3 && (t3.version = n3), t3;
} }, { test: [/swing/i], describe(e3) {
  const t3 = { name: "Swing" }, n3 = J.getFirstMatch(/(?:swing)[\s/](\d+(?:\.\d+)+)/i, e3) || J.getFirstMatch($, e3);
  return n3 && (t3.version = n3), t3;
} }, { test: [/coast/i], describe(e3) {
  const t3 = { name: "Opera Coast" }, n3 = J.getFirstMatch($, e3) || J.getFirstMatch(/(?:coast)[\s/](\d+(\.?_?\d+)+)/i, e3);
  return n3 && (t3.version = n3), t3;
} }, { test: [/opt\/\d+(?:.?_?\d+)+/i], describe(e3) {
  const t3 = { name: "Opera Touch" }, n3 = J.getFirstMatch(/(?:opt)[\s/](\d+(\.?_?\d+)+)/i, e3) || J.getFirstMatch($, e3);
  return n3 && (t3.version = n3), t3;
} }, { test: [/yabrowser/i], describe(e3) {
  const t3 = { name: "Yandex Browser" }, n3 = J.getFirstMatch(/(?:yabrowser)[\s/](\d+(\.?_?\d+)+)/i, e3) || J.getFirstMatch($, e3);
  return n3 && (t3.version = n3), t3;
} }, { test: [/ucbrowser/i], describe(e3) {
  const t3 = { name: "UC Browser" }, n3 = J.getFirstMatch($, e3) || J.getFirstMatch(/(?:ucbrowser)[\s/](\d+(\.?_?\d+)+)/i, e3);
  return n3 && (t3.version = n3), t3;
} }, { test: [/Maxthon|mxios/i], describe(e3) {
  const t3 = { name: "Maxthon" }, n3 = J.getFirstMatch($, e3) || J.getFirstMatch(/(?:Maxthon|mxios)[\s/](\d+(\.?_?\d+)+)/i, e3);
  return n3 && (t3.version = n3), t3;
} }, { test: [/epiphany/i], describe(e3) {
  const t3 = { name: "Epiphany" }, n3 = J.getFirstMatch($, e3) || J.getFirstMatch(/(?:epiphany)[\s/](\d+(\.?_?\d+)+)/i, e3);
  return n3 && (t3.version = n3), t3;
} }, { test: [/puffin/i], describe(e3) {
  const t3 = { name: "Puffin" }, n3 = J.getFirstMatch($, e3) || J.getFirstMatch(/(?:puffin)[\s/](\d+(\.?_?\d+)+)/i, e3);
  return n3 && (t3.version = n3), t3;
} }, { test: [/sleipnir/i], describe(e3) {
  const t3 = { name: "Sleipnir" }, n3 = J.getFirstMatch($, e3) || J.getFirstMatch(/(?:sleipnir)[\s/](\d+(\.?_?\d+)+)/i, e3);
  return n3 && (t3.version = n3), t3;
} }, { test: [/k-meleon/i], describe(e3) {
  const t3 = { name: "K-Meleon" }, n3 = J.getFirstMatch($, e3) || J.getFirstMatch(/(?:k-meleon)[\s/](\d+(\.?_?\d+)+)/i, e3);
  return n3 && (t3.version = n3), t3;
} }, { test: [/micromessenger/i], describe(e3) {
  const t3 = { name: "WeChat" }, n3 = J.getFirstMatch(/(?:micromessenger)[\s/](\d+(\.?_?\d+)+)/i, e3) || J.getFirstMatch($, e3);
  return n3 && (t3.version = n3), t3;
} }, { test: [/qqbrowser/i], describe(e3) {
  const t3 = { name: /qqbrowserlite/i.test(e3) ? "QQ Browser Lite" : "QQ Browser" }, n3 = J.getFirstMatch(/(?:qqbrowserlite|qqbrowser)[/](\d+(\.?_?\d+)+)/i, e3) || J.getFirstMatch($, e3);
  return n3 && (t3.version = n3), t3;
} }, { test: [/msie|trident/i], describe(e3) {
  const t3 = { name: "Internet Explorer" }, n3 = J.getFirstMatch(/(?:msie |rv:)(\d+(\.?_?\d+)+)/i, e3);
  return n3 && (t3.version = n3), t3;
} }, { test: [/\sedg\//i], describe(e3) {
  const t3 = { name: "Microsoft Edge" }, n3 = J.getFirstMatch(/\sedg\/(\d+(\.?_?\d+)+)/i, e3);
  return n3 && (t3.version = n3), t3;
} }, { test: [/edg([ea]|ios)/i], describe(e3) {
  const t3 = { name: "Microsoft Edge" }, n3 = J.getSecondMatch(/edg([ea]|ios)\/(\d+(\.?_?\d+)+)/i, e3);
  return n3 && (t3.version = n3), t3;
} }, { test: [/vivaldi/i], describe(e3) {
  const t3 = { name: "Vivaldi" }, n3 = J.getFirstMatch(/vivaldi\/(\d+(\.?_?\d+)+)/i, e3);
  return n3 && (t3.version = n3), t3;
} }, { test: [/seamonkey/i], describe(e3) {
  const t3 = { name: "SeaMonkey" }, n3 = J.getFirstMatch(/seamonkey\/(\d+(\.?_?\d+)+)/i, e3);
  return n3 && (t3.version = n3), t3;
} }, { test: [/sailfish/i], describe(e3) {
  const t3 = { name: "Sailfish" }, n3 = J.getFirstMatch(/sailfish\s?browser\/(\d+(\.\d+)?)/i, e3);
  return n3 && (t3.version = n3), t3;
} }, { test: [/silk/i], describe(e3) {
  const t3 = { name: "Amazon Silk" }, n3 = J.getFirstMatch(/silk\/(\d+(\.?_?\d+)+)/i, e3);
  return n3 && (t3.version = n3), t3;
} }, { test: [/phantom/i], describe(e3) {
  const t3 = { name: "PhantomJS" }, n3 = J.getFirstMatch(/phantomjs\/(\d+(\.?_?\d+)+)/i, e3);
  return n3 && (t3.version = n3), t3;
} }, { test: [/slimerjs/i], describe(e3) {
  const t3 = { name: "SlimerJS" }, n3 = J.getFirstMatch(/slimerjs\/(\d+(\.?_?\d+)+)/i, e3);
  return n3 && (t3.version = n3), t3;
} }, { test: [/blackberry|\bbb\d+/i, /rim\stablet/i], describe(e3) {
  const t3 = { name: "BlackBerry" }, n3 = J.getFirstMatch($, e3) || J.getFirstMatch(/blackberry[\d]+\/(\d+(\.?_?\d+)+)/i, e3);
  return n3 && (t3.version = n3), t3;
} }, { test: [/(web|hpw)[o0]s/i], describe(e3) {
  const t3 = { name: "WebOS Browser" }, n3 = J.getFirstMatch($, e3) || J.getFirstMatch(/w(?:eb)?[o0]sbrowser\/(\d+(\.?_?\d+)+)/i, e3);
  return n3 && (t3.version = n3), t3;
} }, { test: [/bada/i], describe(e3) {
  const t3 = { name: "Bada" }, n3 = J.getFirstMatch(/dolfin\/(\d+(\.?_?\d+)+)/i, e3);
  return n3 && (t3.version = n3), t3;
} }, { test: [/tizen/i], describe(e3) {
  const t3 = { name: "Tizen" }, n3 = J.getFirstMatch(/(?:tizen\s?)?browser\/(\d+(\.?_?\d+)+)/i, e3) || J.getFirstMatch($, e3);
  return n3 && (t3.version = n3), t3;
} }, { test: [/qupzilla/i], describe(e3) {
  const t3 = { name: "QupZilla" }, n3 = J.getFirstMatch(/(?:qupzilla)[\s/](\d+(\.?_?\d+)+)/i, e3) || J.getFirstMatch($, e3);
  return n3 && (t3.version = n3), t3;
} }, { test: [/firefox|iceweasel|fxios/i], describe(e3) {
  const t3 = { name: "Firefox" }, n3 = J.getFirstMatch(/(?:firefox|iceweasel|fxios)[\s/](\d+(\.?_?\d+)+)/i, e3);
  return n3 && (t3.version = n3), t3;
} }, { test: [/electron/i], describe(e3) {
  const t3 = { name: "Electron" }, n3 = J.getFirstMatch(/(?:electron)\/(\d+(\.?_?\d+)+)/i, e3);
  return n3 && (t3.version = n3), t3;
} }, { test: [/MiuiBrowser/i], describe(e3) {
  const t3 = { name: "Miui" }, n3 = J.getFirstMatch(/(?:MiuiBrowser)[\s/](\d+(\.?_?\d+)+)/i, e3);
  return n3 && (t3.version = n3), t3;
} }, { test: [/chromium/i], describe(e3) {
  const t3 = { name: "Chromium" }, n3 = J.getFirstMatch(/(?:chromium)[\s/](\d+(\.?_?\d+)+)/i, e3) || J.getFirstMatch($, e3);
  return n3 && (t3.version = n3), t3;
} }, { test: [/chrome|crios|crmo/i], describe(e3) {
  const t3 = { name: "Chrome" }, n3 = J.getFirstMatch(/(?:chrome|crios|crmo)\/(\d+(\.?_?\d+)+)/i, e3);
  return n3 && (t3.version = n3), t3;
} }, { test: [/GSA/i], describe(e3) {
  const t3 = { name: "Google Search" }, n3 = J.getFirstMatch(/(?:GSA)\/(\d+(\.?_?\d+)+)/i, e3);
  return n3 && (t3.version = n3), t3;
} }, { test(e3) {
  const t3 = !e3.test(/like android/i), n3 = e3.test(/android/i);
  return t3 && n3;
}, describe(e3) {
  const t3 = { name: "Android Browser" }, n3 = J.getFirstMatch($, e3);
  return n3 && (t3.version = n3), t3;
} }, { test: [/playstation 4/i], describe(e3) {
  const t3 = { name: "PlayStation 4" }, n3 = J.getFirstMatch($, e3);
  return n3 && (t3.version = n3), t3;
} }, { test: [/safari|applewebkit/i], describe(e3) {
  const t3 = { name: "Safari" }, n3 = J.getFirstMatch($, e3);
  return n3 && (t3.version = n3), t3;
} }, { test: [/.*/i], describe(e3) {
  const t3 = -1 !== e3.search("\\(") ? /^(.*)\/(.*)[ \t]\((.*)/ : /^(.*)\/(.*) /;
  return { name: J.getFirstMatch(t3, e3), version: J.getSecondMatch(t3, e3) };
} }];
var z = [{ test: [/Roku\/DVP/], describe(e3) {
  const t3 = J.getFirstMatch(/Roku\/DVP-(\d+\.\d+)/i, e3);
  return { name: U.Roku, version: t3 };
} }, { test: [/windows phone/i], describe(e3) {
  const t3 = J.getFirstMatch(/windows phone (?:os)?\s?(\d+(\.\d+)*)/i, e3);
  return { name: U.WindowsPhone, version: t3 };
} }, { test: [/windows /i], describe(e3) {
  const t3 = J.getFirstMatch(/Windows ((NT|XP)( \d\d?.\d)?)/i, e3), n3 = J.getWindowsVersionName(t3);
  return { name: U.Windows, version: t3, versionName: n3 };
} }, { test: [/Macintosh(.*?) FxiOS(.*?)\//], describe(e3) {
  const t3 = { name: U.iOS }, n3 = J.getSecondMatch(/(Version\/)(\d[\d.]+)/, e3);
  return n3 && (t3.version = n3), t3;
} }, { test: [/macintosh/i], describe(e3) {
  const t3 = J.getFirstMatch(/mac os x (\d+(\.?_?\d+)+)/i, e3).replace(/[_\s]/g, "."), n3 = J.getMacOSVersionName(t3), r3 = { name: U.MacOS, version: t3 };
  return n3 && (r3.versionName = n3), r3;
} }, { test: [/(ipod|iphone|ipad)/i], describe(e3) {
  const t3 = J.getFirstMatch(/os (\d+([_\s]\d+)*) like mac os x/i, e3).replace(/[_\s]/g, ".");
  return { name: U.iOS, version: t3 };
} }, { test(e3) {
  const t3 = !e3.test(/like android/i), n3 = e3.test(/android/i);
  return t3 && n3;
}, describe(e3) {
  const t3 = J.getFirstMatch(/android[\s/-](\d+(\.\d+)*)/i, e3), n3 = J.getAndroidVersionName(t3), r3 = { name: U.Android, version: t3 };
  return n3 && (r3.versionName = n3), r3;
} }, { test: [/(web|hpw)[o0]s/i], describe(e3) {
  const t3 = J.getFirstMatch(/(?:web|hpw)[o0]s\/(\d+(\.\d+)*)/i, e3), n3 = { name: U.WebOS };
  return t3 && t3.length && (n3.version = t3), n3;
} }, { test: [/blackberry|\bbb\d+/i, /rim\stablet/i], describe(e3) {
  const t3 = J.getFirstMatch(/rim\stablet\sos\s(\d+(\.\d+)*)/i, e3) || J.getFirstMatch(/blackberry\d+\/(\d+([_\s]\d+)*)/i, e3) || J.getFirstMatch(/\bbb(\d+)/i, e3);
  return { name: U.BlackBerry, version: t3 };
} }, { test: [/bada/i], describe(e3) {
  const t3 = J.getFirstMatch(/bada\/(\d+(\.\d+)*)/i, e3);
  return { name: U.Bada, version: t3 };
} }, { test: [/tizen/i], describe(e3) {
  const t3 = J.getFirstMatch(/tizen[/\s](\d+(\.\d+)*)/i, e3);
  return { name: U.Tizen, version: t3 };
} }, { test: [/linux/i], describe: () => ({ name: U.Linux }) }, { test: [/CrOS/], describe: () => ({ name: U.ChromeOS }) }, { test: [/PlayStation 4/], describe(e3) {
  const t3 = J.getFirstMatch(/PlayStation 4[/\s](\d+(\.\d+)*)/i, e3);
  return { name: U.PlayStation4, version: t3 };
} }];
var W = [{ test: [/googlebot/i], describe: () => ({ type: "bot", vendor: "Google" }) }, { test: [/huawei/i], describe(e3) {
  const t3 = J.getFirstMatch(/(can-l01)/i, e3) && "Nova", n3 = { type: B.mobile, vendor: "Huawei" };
  return t3 && (n3.model = t3), n3;
} }, { test: [/nexus\s*(?:7|8|9|10).*/i], describe: () => ({ type: B.tablet, vendor: "Nexus" }) }, { test: [/ipad/i], describe: () => ({ type: B.tablet, vendor: "Apple", model: "iPad" }) }, { test: [/Macintosh(.*?) FxiOS(.*?)\//], describe: () => ({ type: B.tablet, vendor: "Apple", model: "iPad" }) }, { test: [/kftt build/i], describe: () => ({ type: B.tablet, vendor: "Amazon", model: "Kindle Fire HD 7" }) }, { test: [/silk/i], describe: () => ({ type: B.tablet, vendor: "Amazon" }) }, { test: [/tablet(?! pc)/i], describe: () => ({ type: B.tablet }) }, { test(e3) {
  const t3 = e3.test(/ipod|iphone/i), n3 = e3.test(/like (ipod|iphone)/i);
  return t3 && !n3;
}, describe(e3) {
  const t3 = J.getFirstMatch(/(ipod|iphone)/i, e3);
  return { type: B.mobile, vendor: "Apple", model: t3 };
} }, { test: [/nexus\s*[0-6].*/i, /galaxy nexus/i], describe: () => ({ type: B.mobile, vendor: "Nexus" }) }, { test: [/[^-]mobi/i], describe: () => ({ type: B.mobile }) }, { test: (e3) => "blackberry" === e3.getBrowserName(true), describe: () => ({ type: B.mobile, vendor: "BlackBerry" }) }, { test: (e3) => "bada" === e3.getBrowserName(true), describe: () => ({ type: B.mobile }) }, { test: (e3) => "windows phone" === e3.getBrowserName(), describe: () => ({ type: B.mobile, vendor: "Microsoft" }) }, { test(e3) {
  const t3 = Number(String(e3.getOSVersion()).split(".")[0]);
  return "android" === e3.getOSName(true) && t3 >= 3;
}, describe: () => ({ type: B.tablet }) }, { test: (e3) => "android" === e3.getOSName(true), describe: () => ({ type: B.mobile }) }, { test: (e3) => "macos" === e3.getOSName(true), describe: () => ({ type: B.desktop, vendor: "Apple" }) }, { test: (e3) => "windows" === e3.getOSName(true), describe: () => ({ type: B.desktop }) }, { test: (e3) => "linux" === e3.getOSName(true), describe: () => ({ type: B.desktop }) }, { test: (e3) => "playstation 4" === e3.getOSName(true), describe: () => ({ type: B.tv }) }, { test: (e3) => "roku" === e3.getOSName(true), describe: () => ({ type: B.tv }) }];
var H = [{ test: (e3) => "microsoft edge" === e3.getBrowserName(true), describe(e3) {
  if (/\sedg\//i.test(e3))
    return { name: V.Blink };
  const t3 = J.getFirstMatch(/edge\/(\d+(\.?_?\d+)+)/i, e3);
  return { name: V.EdgeHTML, version: t3 };
} }, { test: [/trident/i], describe(e3) {
  const t3 = { name: V.Trident }, n3 = J.getFirstMatch(/trident\/(\d+(\.?_?\d+)+)/i, e3);
  return n3 && (t3.version = n3), t3;
} }, { test: (e3) => e3.test(/presto/i), describe(e3) {
  const t3 = { name: V.Presto }, n3 = J.getFirstMatch(/presto\/(\d+(\.?_?\d+)+)/i, e3);
  return n3 && (t3.version = n3), t3;
} }, { test(e3) {
  const t3 = e3.test(/gecko/i), n3 = e3.test(/like gecko/i);
  return t3 && !n3;
}, describe(e3) {
  const t3 = { name: V.Gecko }, n3 = J.getFirstMatch(/gecko\/(\d+(\.?_?\d+)+)/i, e3);
  return n3 && (t3.version = n3), t3;
} }, { test: [/(apple)?webkit\/537\.36/i], describe: () => ({ name: V.Blink }) }, { test: [/(apple)?webkit/i], describe(e3) {
  const t3 = { name: V.WebKit }, n3 = J.getFirstMatch(/webkit\/(\d+(\.?_?\d+)+)/i, e3);
  return n3 && (t3.version = n3), t3;
} }];
var G = class {
  constructor(e3, t3 = false) {
    if (null == e3 || "" === e3)
      throw new Error("UserAgent parameter can't be empty");
    this._ua = e3, this.parsedResult = {}, true !== t3 && this.parse();
  }
  getUA() {
    return this._ua;
  }
  test(e3) {
    return e3.test(this._ua);
  }
  parseBrowser() {
    this.parsedResult.browser = {};
    const e3 = J.find(q, (e4) => {
      if ("function" == typeof e4.test)
        return e4.test(this);
      if (e4.test instanceof Array)
        return e4.test.some((e5) => this.test(e5));
      throw new Error("Browser's test function is not valid");
    });
    return e3 && (this.parsedResult.browser = e3.describe(this.getUA())), this.parsedResult.browser;
  }
  getBrowser() {
    return this.parsedResult.browser ? this.parsedResult.browser : this.parseBrowser();
  }
  getBrowserName(e3) {
    return e3 ? String(this.getBrowser().name).toLowerCase() || "" : this.getBrowser().name || "";
  }
  getBrowserVersion() {
    return this.getBrowser().version;
  }
  getOS() {
    return this.parsedResult.os ? this.parsedResult.os : this.parseOS();
  }
  parseOS() {
    this.parsedResult.os = {};
    const e3 = J.find(z, (e4) => {
      if ("function" == typeof e4.test)
        return e4.test(this);
      if (e4.test instanceof Array)
        return e4.test.some((e5) => this.test(e5));
      throw new Error("Browser's test function is not valid");
    });
    return e3 && (this.parsedResult.os = e3.describe(this.getUA())), this.parsedResult.os;
  }
  getOSName(e3) {
    const { name: t3 } = this.getOS();
    return e3 ? String(t3).toLowerCase() || "" : t3 || "";
  }
  getOSVersion() {
    return this.getOS().version;
  }
  getPlatform() {
    return this.parsedResult.platform ? this.parsedResult.platform : this.parsePlatform();
  }
  getPlatformType(e3 = false) {
    const { type: t3 } = this.getPlatform();
    return e3 ? String(t3).toLowerCase() || "" : t3 || "";
  }
  parsePlatform() {
    this.parsedResult.platform = {};
    const e3 = J.find(W, (e4) => {
      if ("function" == typeof e4.test)
        return e4.test(this);
      if (e4.test instanceof Array)
        return e4.test.some((e5) => this.test(e5));
      throw new Error("Browser's test function is not valid");
    });
    return e3 && (this.parsedResult.platform = e3.describe(this.getUA())), this.parsedResult.platform;
  }
  getEngine() {
    return this.parsedResult.engine ? this.parsedResult.engine : this.parseEngine();
  }
  getEngineName(e3) {
    return e3 ? String(this.getEngine().name).toLowerCase() || "" : this.getEngine().name || "";
  }
  parseEngine() {
    this.parsedResult.engine = {};
    const e3 = J.find(H, (e4) => {
      if ("function" == typeof e4.test)
        return e4.test(this);
      if (e4.test instanceof Array)
        return e4.test.some((e5) => this.test(e5));
      throw new Error("Browser's test function is not valid");
    });
    return e3 && (this.parsedResult.engine = e3.describe(this.getUA())), this.parsedResult.engine;
  }
  parse() {
    return this.parseBrowser(), this.parseOS(), this.parsePlatform(), this.parseEngine(), this;
  }
  getResult() {
    return J.assign({}, this.parsedResult);
  }
  satisfies(e3) {
    const t3 = {};
    let n3 = 0;
    const r3 = {};
    let i3 = 0;
    if (Object.keys(e3).forEach((o3) => {
      const s3 = e3[o3];
      "string" == typeof s3 ? (r3[o3] = s3, i3 += 1) : "object" == typeof s3 && (t3[o3] = s3, n3 += 1);
    }), n3 > 0) {
      const e4 = Object.keys(t3), n4 = J.find(e4, (e5) => this.isOS(e5));
      if (n4) {
        const e5 = this.satisfies(t3[n4]);
        if (void 0 !== e5)
          return e5;
      }
      const r4 = J.find(e4, (e5) => this.isPlatform(e5));
      if (r4) {
        const e5 = this.satisfies(t3[r4]);
        if (void 0 !== e5)
          return e5;
      }
    }
    if (i3 > 0) {
      const e4 = Object.keys(r3), t4 = J.find(e4, (e5) => this.isBrowser(e5, true));
      if (void 0 !== t4)
        return this.compareVersion(r3[t4]);
    }
  }
  isBrowser(e3, t3 = false) {
    const n3 = this.getBrowserName().toLowerCase();
    let r3 = e3.toLowerCase();
    const i3 = J.getBrowserTypeByAlias(r3);
    return t3 && i3 && (r3 = i3.toLowerCase()), r3 === n3;
  }
  compareVersion(e3) {
    let t3 = [0], n3 = e3, r3 = false;
    const i3 = this.getBrowserVersion();
    if ("string" == typeof i3)
      return ">" === e3[0] || "<" === e3[0] ? (n3 = e3.substr(1), "=" === e3[1] ? (r3 = true, n3 = e3.substr(2)) : t3 = [], ">" === e3[0] ? t3.push(1) : t3.push(-1)) : "=" === e3[0] ? n3 = e3.substr(1) : "~" === e3[0] && (r3 = true, n3 = e3.substr(1)), t3.indexOf(J.compareVersions(i3, n3, r3)) > -1;
  }
  isOS(e3) {
    return this.getOSName(true) === String(e3).toLowerCase();
  }
  isPlatform(e3) {
    return this.getPlatformType(true) === String(e3).toLowerCase();
  }
  isEngine(e3) {
    return this.getEngineName(true) === String(e3).toLowerCase();
  }
  is(e3, t3 = false) {
    return this.isBrowser(e3, t3) || this.isOS(e3) || this.isPlatform(e3);
  }
  some(e3 = []) {
    return e3.some((e4) => this.is(e4));
  }
};
var Q = class {
  static getParser(e3, t3 = false) {
    if ("string" != typeof e3)
      throw new Error("UserAgent should be a string");
    return new G(e3, t3);
  }
  static parse(e3) {
    return new G(e3).getResult();
  }
  static get BROWSER_MAP() {
    return F;
  }
  static get ENGINE_MAP() {
    return V;
  }
  static get OS_MAP() {
    return U;
  }
  static get PLATFORMS_MAP() {
    return B;
  }
};
function K() {
  return Date.now() + Math.random().toString();
}
function Y() {
  throw new Error("Method must be implemented in subclass");
}
function X(e3, t3) {
  return null != t3 && t3.proxyUrl ? t3.proxyUrl + ("/" === t3.proxyUrl.slice(-1) ? "" : "/") + e3.substring(8) : e3;
}
function Z(e3) {
  return null != e3 && e3.callObjectBundleUrlOverride ? e3.callObjectBundleUrlOverride : X("https://c.daily.co/call-machine/versioned/".concat("0.77.0", "/static/call-machine-object-bundle.js"), e3);
}
function ee(e3) {
  try {
    new URL(e3);
  } catch (e4) {
    return false;
  }
  return true;
}
var te = "undefined" == typeof __SENTRY_DEBUG__ || __SENTRY_DEBUG__;
var ne = "8.55.0";
var re = globalThis;
function ie(e3, t3, n3) {
  const r3 = n3 || re, i3 = r3.__SENTRY__ = r3.__SENTRY__ || {}, o3 = i3[ne] = i3[ne] || {};
  return o3[e3] || (o3[e3] = t3());
}
var oe = "undefined" == typeof __SENTRY_DEBUG__ || __SENTRY_DEBUG__;
var se = ["debug", "info", "warn", "error", "log", "assert", "trace"];
var ae = {};
function ce(e3) {
  if (!("console" in re))
    return e3();
  const t3 = re.console, n3 = {}, r3 = Object.keys(ae);
  r3.forEach((e4) => {
    const r4 = ae[e4];
    n3[e4] = t3[e4], t3[e4] = r4;
  });
  try {
    return e3();
  } finally {
    r3.forEach((e4) => {
      t3[e4] = n3[e4];
    });
  }
}
var le = ie("logger", function() {
  let e3 = false;
  const t3 = { enable: () => {
    e3 = true;
  }, disable: () => {
    e3 = false;
  }, isEnabled: () => e3 };
  return oe ? se.forEach((n3) => {
    t3[n3] = (...t4) => {
      e3 && ce(() => {
        re.console[n3](`Sentry Logger [${n3}]:`, ...t4);
      });
    };
  }) : se.forEach((e4) => {
    t3[e4] = () => {
    };
  }), t3;
});
var ue = "?";
var de = /\(error: (.*)\)/;
var pe = /captureMessage|captureException/;
function he(e3) {
  return e3[e3.length - 1] || {};
}
var fe = "<anonymous>";
function ve(e3) {
  try {
    return e3 && "function" == typeof e3 && e3.name || fe;
  } catch (e4) {
    return fe;
  }
}
function ge(e3) {
  const t3 = e3.exception;
  if (t3) {
    const e4 = [];
    try {
      return t3.values.forEach((t4) => {
        t4.stacktrace.frames && e4.push(...t4.stacktrace.frames);
      }), e4;
    } catch (e5) {
      return;
    }
  }
}
var me = {};
var ye = {};
function be(e3, t3) {
  me[e3] = me[e3] || [], me[e3].push(t3);
}
function _e(e3, t3) {
  if (!ye[e3]) {
    ye[e3] = true;
    try {
      t3();
    } catch (t4) {
      oe && le.error(`Error while instrumenting ${e3}`, t4);
    }
  }
}
function we(e3, t3) {
  const n3 = e3 && me[e3];
  if (n3)
    for (const r3 of n3)
      try {
        r3(t3);
      } catch (t4) {
        oe && le.error(`Error while triggering instrumentation handler.
Type: ${e3}
Name: ${ve(r3)}
Error:`, t4);
      }
}
var Se = null;
function ke() {
  Se = re.onerror, re.onerror = function(e3, t3, n3, r3, i3) {
    return we("error", { column: r3, error: i3, line: n3, msg: e3, url: t3 }), !!Se && Se.apply(this, arguments);
  }, re.onerror.__SENTRY_INSTRUMENTED__ = true;
}
var Me = null;
function Ce() {
  Me = re.onunhandledrejection, re.onunhandledrejection = function(e3) {
    return we("unhandledrejection", e3), !Me || Me.apply(this, arguments);
  }, re.onunhandledrejection.__SENTRY_INSTRUMENTED__ = true;
}
function Ee() {
  return Te(re), re;
}
function Te(e3) {
  const t3 = e3.__SENTRY__ = e3.__SENTRY__ || {};
  return t3.version = t3.version || ne, t3[ne] = t3[ne] || {};
}
var Oe = Object.prototype.toString;
function Pe(e3) {
  switch (Oe.call(e3)) {
    case "[object Error]":
    case "[object Exception]":
    case "[object DOMException]":
    case "[object WebAssembly.Exception]":
      return true;
    default:
      return Be(e3, Error);
  }
}
function Ae(e3, t3) {
  return Oe.call(e3) === `[object ${t3}]`;
}
function je(e3) {
  return Ae(e3, "ErrorEvent");
}
function Ie(e3) {
  return Ae(e3, "DOMError");
}
function xe(e3) {
  return Ae(e3, "String");
}
function Le(e3) {
  return "object" == typeof e3 && null !== e3 && "__sentry_template_string__" in e3 && "__sentry_template_values__" in e3;
}
function De(e3) {
  return null === e3 || Le(e3) || "object" != typeof e3 && "function" != typeof e3;
}
function Ne(e3) {
  return Ae(e3, "Object");
}
function Re(e3) {
  return "undefined" != typeof Event && Be(e3, Event);
}
function Fe(e3) {
  return Boolean(e3 && e3.then && "function" == typeof e3.then);
}
function Be(e3, t3) {
  try {
    return e3 instanceof t3;
  } catch (e4) {
    return false;
  }
}
function Ue(e3) {
  return !("object" != typeof e3 || null === e3 || !e3.__isVue && !e3._isVue);
}
var Ve = re;
function Je(e3, t3 = {}) {
  if (!e3)
    return "<unknown>";
  try {
    let n3 = e3;
    const r3 = 5, i3 = [];
    let o3 = 0, s3 = 0;
    const a3 = " > ", c3 = a3.length;
    let l3;
    const u3 = Array.isArray(t3) ? t3 : t3.keyAttrs, d3 = !Array.isArray(t3) && t3.maxStringLength || 80;
    for (; n3 && o3++ < r3 && (l3 = $e(n3, u3), !("html" === l3 || o3 > 1 && s3 + i3.length * c3 + l3.length >= d3)); )
      i3.push(l3), s3 += l3.length, n3 = n3.parentNode;
    return i3.reverse().join(a3);
  } catch (e4) {
    return "<unknown>";
  }
}
function $e(e3, t3) {
  const n3 = e3, r3 = [];
  if (!n3 || !n3.tagName)
    return "";
  if (Ve.HTMLElement && n3 instanceof HTMLElement && n3.dataset) {
    if (n3.dataset.sentryComponent)
      return n3.dataset.sentryComponent;
    if (n3.dataset.sentryElement)
      return n3.dataset.sentryElement;
  }
  r3.push(n3.tagName.toLowerCase());
  const i3 = t3 && t3.length ? t3.filter((e4) => n3.getAttribute(e4)).map((e4) => [e4, n3.getAttribute(e4)]) : null;
  if (i3 && i3.length)
    i3.forEach((e4) => {
      r3.push(`[${e4[0]}="${e4[1]}"]`);
    });
  else {
    n3.id && r3.push(`#${n3.id}`);
    const e4 = n3.className;
    if (e4 && xe(e4)) {
      const t4 = e4.split(/\s+/);
      for (const e5 of t4)
        r3.push(`.${e5}`);
    }
  }
  const o3 = ["aria-label", "type", "name", "title", "alt"];
  for (const e4 of o3) {
    const t4 = n3.getAttribute(e4);
    t4 && r3.push(`[${e4}="${t4}"]`);
  }
  return r3.join("");
}
function qe(e3, t3 = 0) {
  return "string" != typeof e3 || 0 === t3 || e3.length <= t3 ? e3 : `${e3.slice(0, t3)}...`;
}
function ze(e3, t3) {
  if (!Array.isArray(e3))
    return "";
  const n3 = [];
  for (let t4 = 0; t4 < e3.length; t4++) {
    const r3 = e3[t4];
    try {
      Ue(r3) ? n3.push("[VueViewModel]") : n3.push(String(r3));
    } catch (e4) {
      n3.push("[value cannot be serialized]");
    }
  }
  return n3.join(t3);
}
function We(e3, t3, n3 = false) {
  return !!xe(e3) && (Ae(t3, "RegExp") ? t3.test(e3) : !!xe(t3) && (n3 ? e3 === t3 : e3.includes(t3)));
}
function He(e3, t3 = [], n3 = false) {
  return t3.some((t4) => We(e3, t4, n3));
}
function Ge(e3, t3, n3) {
  if (!(t3 in e3))
    return;
  const r3 = e3[t3], i3 = n3(r3);
  "function" == typeof i3 && Ke(i3, r3);
  try {
    e3[t3] = i3;
  } catch (n4) {
    oe && le.log(`Failed to replace method "${t3}" in object`, e3);
  }
}
function Qe(e3, t3, n3) {
  try {
    Object.defineProperty(e3, t3, { value: n3, writable: true, configurable: true });
  } catch (n4) {
    oe && le.log(`Failed to add non-enumerable property "${t3}" to object`, e3);
  }
}
function Ke(e3, t3) {
  try {
    const n3 = t3.prototype || {};
    e3.prototype = t3.prototype = n3, Qe(e3, "__sentry_original__", t3);
  } catch (e4) {
  }
}
function Ye(e3) {
  return e3.__sentry_original__;
}
function Xe(e3) {
  if (Pe(e3))
    return { message: e3.message, name: e3.name, stack: e3.stack, ...et(e3) };
  if (Re(e3)) {
    const t3 = { type: e3.type, target: Ze(e3.target), currentTarget: Ze(e3.currentTarget), ...et(e3) };
    return "undefined" != typeof CustomEvent && Be(e3, CustomEvent) && (t3.detail = e3.detail), t3;
  }
  return e3;
}
function Ze(e3) {
  try {
    return t3 = e3, "undefined" != typeof Element && Be(t3, Element) ? Je(e3) : Object.prototype.toString.call(e3);
  } catch (e4) {
    return "<unknown>";
  }
  var t3;
}
function et(e3) {
  if ("object" == typeof e3 && null !== e3) {
    const t3 = {};
    for (const n3 in e3)
      Object.prototype.hasOwnProperty.call(e3, n3) && (t3[n3] = e3[n3]);
    return t3;
  }
  return {};
}
function tt(e3) {
  return nt(e3, /* @__PURE__ */ new Map());
}
function nt(e3, t3) {
  if (function(e4) {
    if (!Ne(e4))
      return false;
    try {
      const t4 = Object.getPrototypeOf(e4).constructor.name;
      return !t4 || "Object" === t4;
    } catch (e5) {
      return true;
    }
  }(e3)) {
    const n3 = t3.get(e3);
    if (void 0 !== n3)
      return n3;
    const r3 = {};
    t3.set(e3, r3);
    for (const n4 of Object.getOwnPropertyNames(e3))
      void 0 !== e3[n4] && (r3[n4] = nt(e3[n4], t3));
    return r3;
  }
  if (Array.isArray(e3)) {
    const n3 = t3.get(e3);
    if (void 0 !== n3)
      return n3;
    const r3 = [];
    return t3.set(e3, r3), e3.forEach((e4) => {
      r3.push(nt(e4, t3));
    }), r3;
  }
  return e3;
}
function rt() {
  return Date.now() / 1e3;
}
var it = function() {
  const { performance: e3 } = re;
  if (!e3 || !e3.now)
    return rt;
  const t3 = Date.now() - e3.now(), n3 = null == e3.timeOrigin ? t3 : e3.timeOrigin;
  return () => (n3 + e3.now()) / 1e3;
}();
function ot() {
  const e3 = re, t3 = e3.crypto || e3.msCrypto;
  let n3 = () => 16 * Math.random();
  try {
    if (t3 && t3.randomUUID)
      return t3.randomUUID().replace(/-/g, "");
    t3 && t3.getRandomValues && (n3 = () => {
      const e4 = new Uint8Array(1);
      return t3.getRandomValues(e4), e4[0];
    });
  } catch (e4) {
  }
  return ([1e7] + 1e3 + 4e3 + 8e3 + 1e11).replace(/[018]/g, (e4) => (e4 ^ (15 & n3()) >> e4 / 4).toString(16));
}
function st(e3) {
  return e3.exception && e3.exception.values ? e3.exception.values[0] : void 0;
}
function at(e3) {
  const { message: t3, event_id: n3 } = e3;
  if (t3)
    return t3;
  const r3 = st(e3);
  return r3 ? r3.type && r3.value ? `${r3.type}: ${r3.value}` : r3.type || r3.value || n3 || "<unknown>" : n3 || "<unknown>";
}
function ct(e3, t3, n3) {
  const r3 = e3.exception = e3.exception || {}, i3 = r3.values = r3.values || [], o3 = i3[0] = i3[0] || {};
  o3.value || (o3.value = t3 || ""), o3.type || (o3.type = n3 || "Error");
}
function lt(e3, t3) {
  const n3 = st(e3);
  if (!n3)
    return;
  const r3 = n3.mechanism;
  if (n3.mechanism = { type: "generic", handled: true, ...r3, ...t3 }, t3 && "data" in t3) {
    const e4 = { ...r3 && r3.data, ...t3.data };
    n3.mechanism.data = e4;
  }
}
function ut(e3) {
  if (function(e4) {
    try {
      return e4.__sentry_captured__;
    } catch (e5) {
    }
  }(e3))
    return true;
  try {
    Qe(e3, "__sentry_captured__", true);
  } catch (e4) {
  }
  return false;
}
var dt;
function pt(e3) {
  return new ft((t3) => {
    t3(e3);
  });
}
function ht(e3) {
  return new ft((t3, n3) => {
    n3(e3);
  });
}
(() => {
  const { performance: e3 } = re;
  if (!e3 || !e3.now)
    return;
  const t3 = 36e5, n3 = e3.now(), r3 = Date.now(), i3 = e3.timeOrigin ? Math.abs(e3.timeOrigin + n3 - r3) : t3, o3 = i3 < t3, s3 = e3.timing && e3.timing.navigationStart, a3 = "number" == typeof s3 ? Math.abs(s3 + n3 - r3) : t3;
  (o3 || a3 < t3) && (i3 <= a3 && e3.timeOrigin);
})(), function(e3) {
  e3[e3.PENDING = 0] = "PENDING";
  e3[e3.RESOLVED = 1] = "RESOLVED";
  e3[e3.REJECTED = 2] = "REJECTED";
}(dt || (dt = {}));
var ft = class _ft {
  constructor(e3) {
    _ft.prototype.__init.call(this), _ft.prototype.__init2.call(this), _ft.prototype.__init3.call(this), _ft.prototype.__init4.call(this), this._state = dt.PENDING, this._handlers = [];
    try {
      e3(this._resolve, this._reject);
    } catch (e4) {
      this._reject(e4);
    }
  }
  then(e3, t3) {
    return new _ft((n3, r3) => {
      this._handlers.push([false, (t4) => {
        if (e3)
          try {
            n3(e3(t4));
          } catch (e4) {
            r3(e4);
          }
        else
          n3(t4);
      }, (e4) => {
        if (t3)
          try {
            n3(t3(e4));
          } catch (e5) {
            r3(e5);
          }
        else
          r3(e4);
      }]), this._executeHandlers();
    });
  }
  catch(e3) {
    return this.then((e4) => e4, e3);
  }
  finally(e3) {
    return new _ft((t3, n3) => {
      let r3, i3;
      return this.then((t4) => {
        i3 = false, r3 = t4, e3 && e3();
      }, (t4) => {
        i3 = true, r3 = t4, e3 && e3();
      }).then(() => {
        i3 ? n3(r3) : t3(r3);
      });
    });
  }
  __init() {
    this._resolve = (e3) => {
      this._setResult(dt.RESOLVED, e3);
    };
  }
  __init2() {
    this._reject = (e3) => {
      this._setResult(dt.REJECTED, e3);
    };
  }
  __init3() {
    this._setResult = (e3, t3) => {
      this._state === dt.PENDING && (Fe(t3) ? t3.then(this._resolve, this._reject) : (this._state = e3, this._value = t3, this._executeHandlers()));
    };
  }
  __init4() {
    this._executeHandlers = () => {
      if (this._state === dt.PENDING)
        return;
      const e3 = this._handlers.slice();
      this._handlers = [], e3.forEach((e4) => {
        e4[0] || (this._state === dt.RESOLVED && e4[1](this._value), this._state === dt.REJECTED && e4[2](this._value), e4[0] = true);
      });
    };
  }
};
function vt(e3) {
  const t3 = it(), n3 = { sid: ot(), init: true, timestamp: t3, started: t3, duration: 0, status: "ok", errors: 0, ignoreDuration: false, toJSON: () => function(e4) {
    return tt({ sid: `${e4.sid}`, init: e4.init, started: new Date(1e3 * e4.started).toISOString(), timestamp: new Date(1e3 * e4.timestamp).toISOString(), status: e4.status, errors: e4.errors, did: "number" == typeof e4.did || "string" == typeof e4.did ? `${e4.did}` : void 0, duration: e4.duration, abnormal_mechanism: e4.abnormal_mechanism, attrs: { release: e4.release, environment: e4.environment, ip_address: e4.ipAddress, user_agent: e4.userAgent } });
  }(n3) };
  return e3 && gt(n3, e3), n3;
}
function gt(e3, t3 = {}) {
  if (t3.user && (!e3.ipAddress && t3.user.ip_address && (e3.ipAddress = t3.user.ip_address), e3.did || t3.did || (e3.did = t3.user.id || t3.user.email || t3.user.username)), e3.timestamp = t3.timestamp || it(), t3.abnormal_mechanism && (e3.abnormal_mechanism = t3.abnormal_mechanism), t3.ignoreDuration && (e3.ignoreDuration = t3.ignoreDuration), t3.sid && (e3.sid = 32 === t3.sid.length ? t3.sid : ot()), void 0 !== t3.init && (e3.init = t3.init), !e3.did && t3.did && (e3.did = `${t3.did}`), "number" == typeof t3.started && (e3.started = t3.started), e3.ignoreDuration)
    e3.duration = void 0;
  else if ("number" == typeof t3.duration)
    e3.duration = t3.duration;
  else {
    const t4 = e3.timestamp - e3.started;
    e3.duration = t4 >= 0 ? t4 : 0;
  }
  t3.release && (e3.release = t3.release), t3.environment && (e3.environment = t3.environment), !e3.ipAddress && t3.ipAddress && (e3.ipAddress = t3.ipAddress), !e3.userAgent && t3.userAgent && (e3.userAgent = t3.userAgent), "number" == typeof t3.errors && (e3.errors = t3.errors), t3.status && (e3.status = t3.status);
}
function mt() {
  return ot();
}
function yt() {
  return ot().substring(16);
}
function bt(e3, t3, n3 = 2) {
  if (!t3 || "object" != typeof t3 || n3 <= 0)
    return t3;
  if (e3 && t3 && 0 === Object.keys(t3).length)
    return e3;
  const r3 = { ...e3 };
  for (const e4 in t3)
    Object.prototype.hasOwnProperty.call(t3, e4) && (r3[e4] = bt(r3[e4], t3[e4], n3 - 1));
  return r3;
}
var _t = "_sentrySpan";
function wt(e3, t3) {
  t3 ? Qe(e3, _t, t3) : delete e3[_t];
}
function St(e3) {
  return e3[_t];
}
var kt = class _kt {
  constructor() {
    this._notifyingListeners = false, this._scopeListeners = [], this._eventProcessors = [], this._breadcrumbs = [], this._attachments = [], this._user = {}, this._tags = {}, this._extra = {}, this._contexts = {}, this._sdkProcessingMetadata = {}, this._propagationContext = { traceId: mt(), spanId: yt() };
  }
  clone() {
    const e3 = new _kt();
    return e3._breadcrumbs = [...this._breadcrumbs], e3._tags = { ...this._tags }, e3._extra = { ...this._extra }, e3._contexts = { ...this._contexts }, this._contexts.flags && (e3._contexts.flags = { values: [...this._contexts.flags.values] }), e3._user = this._user, e3._level = this._level, e3._session = this._session, e3._transactionName = this._transactionName, e3._fingerprint = this._fingerprint, e3._eventProcessors = [...this._eventProcessors], e3._requestSession = this._requestSession, e3._attachments = [...this._attachments], e3._sdkProcessingMetadata = { ...this._sdkProcessingMetadata }, e3._propagationContext = { ...this._propagationContext }, e3._client = this._client, e3._lastEventId = this._lastEventId, wt(e3, St(this)), e3;
  }
  setClient(e3) {
    this._client = e3;
  }
  setLastEventId(e3) {
    this._lastEventId = e3;
  }
  getClient() {
    return this._client;
  }
  lastEventId() {
    return this._lastEventId;
  }
  addScopeListener(e3) {
    this._scopeListeners.push(e3);
  }
  addEventProcessor(e3) {
    return this._eventProcessors.push(e3), this;
  }
  setUser(e3) {
    return this._user = e3 || { email: void 0, id: void 0, ip_address: void 0, username: void 0 }, this._session && gt(this._session, { user: e3 }), this._notifyScopeListeners(), this;
  }
  getUser() {
    return this._user;
  }
  getRequestSession() {
    return this._requestSession;
  }
  setRequestSession(e3) {
    return this._requestSession = e3, this;
  }
  setTags(e3) {
    return this._tags = { ...this._tags, ...e3 }, this._notifyScopeListeners(), this;
  }
  setTag(e3, t3) {
    return this._tags = { ...this._tags, [e3]: t3 }, this._notifyScopeListeners(), this;
  }
  setExtras(e3) {
    return this._extra = { ...this._extra, ...e3 }, this._notifyScopeListeners(), this;
  }
  setExtra(e3, t3) {
    return this._extra = { ...this._extra, [e3]: t3 }, this._notifyScopeListeners(), this;
  }
  setFingerprint(e3) {
    return this._fingerprint = e3, this._notifyScopeListeners(), this;
  }
  setLevel(e3) {
    return this._level = e3, this._notifyScopeListeners(), this;
  }
  setTransactionName(e3) {
    return this._transactionName = e3, this._notifyScopeListeners(), this;
  }
  setContext(e3, t3) {
    return null === t3 ? delete this._contexts[e3] : this._contexts[e3] = t3, this._notifyScopeListeners(), this;
  }
  setSession(e3) {
    return e3 ? this._session = e3 : delete this._session, this._notifyScopeListeners(), this;
  }
  getSession() {
    return this._session;
  }
  update(e3) {
    if (!e3)
      return this;
    const t3 = "function" == typeof e3 ? e3(this) : e3, [n3, r3] = t3 instanceof Mt ? [t3.getScopeData(), t3.getRequestSession()] : Ne(t3) ? [e3, e3.requestSession] : [], { tags: i3, extra: o3, user: s3, contexts: a3, level: c3, fingerprint: l3 = [], propagationContext: u3 } = n3 || {};
    return this._tags = { ...this._tags, ...i3 }, this._extra = { ...this._extra, ...o3 }, this._contexts = { ...this._contexts, ...a3 }, s3 && Object.keys(s3).length && (this._user = s3), c3 && (this._level = c3), l3.length && (this._fingerprint = l3), u3 && (this._propagationContext = u3), r3 && (this._requestSession = r3), this;
  }
  clear() {
    return this._breadcrumbs = [], this._tags = {}, this._extra = {}, this._user = {}, this._contexts = {}, this._level = void 0, this._transactionName = void 0, this._fingerprint = void 0, this._requestSession = void 0, this._session = void 0, wt(this, void 0), this._attachments = [], this.setPropagationContext({ traceId: mt() }), this._notifyScopeListeners(), this;
  }
  addBreadcrumb(e3, t3) {
    const n3 = "number" == typeof t3 ? t3 : 100;
    if (n3 <= 0)
      return this;
    const r3 = { timestamp: rt(), ...e3 };
    return this._breadcrumbs.push(r3), this._breadcrumbs.length > n3 && (this._breadcrumbs = this._breadcrumbs.slice(-n3), this._client && this._client.recordDroppedEvent("buffer_overflow", "log_item")), this._notifyScopeListeners(), this;
  }
  getLastBreadcrumb() {
    return this._breadcrumbs[this._breadcrumbs.length - 1];
  }
  clearBreadcrumbs() {
    return this._breadcrumbs = [], this._notifyScopeListeners(), this;
  }
  addAttachment(e3) {
    return this._attachments.push(e3), this;
  }
  clearAttachments() {
    return this._attachments = [], this;
  }
  getScopeData() {
    return { breadcrumbs: this._breadcrumbs, attachments: this._attachments, contexts: this._contexts, tags: this._tags, extra: this._extra, user: this._user, level: this._level, fingerprint: this._fingerprint || [], eventProcessors: this._eventProcessors, propagationContext: this._propagationContext, sdkProcessingMetadata: this._sdkProcessingMetadata, transactionName: this._transactionName, span: St(this) };
  }
  setSDKProcessingMetadata(e3) {
    return this._sdkProcessingMetadata = bt(this._sdkProcessingMetadata, e3, 2), this;
  }
  setPropagationContext(e3) {
    return this._propagationContext = { spanId: yt(), ...e3 }, this;
  }
  getPropagationContext() {
    return this._propagationContext;
  }
  captureException(e3, t3) {
    const n3 = t3 && t3.event_id ? t3.event_id : ot();
    if (!this._client)
      return le.warn("No client configured on scope - will not capture exception!"), n3;
    const r3 = new Error("Sentry syntheticException");
    return this._client.captureException(e3, { originalException: e3, syntheticException: r3, ...t3, event_id: n3 }, this), n3;
  }
  captureMessage(e3, t3, n3) {
    const r3 = n3 && n3.event_id ? n3.event_id : ot();
    if (!this._client)
      return le.warn("No client configured on scope - will not capture message!"), r3;
    const i3 = new Error(e3);
    return this._client.captureMessage(e3, t3, { originalException: e3, syntheticException: i3, ...n3, event_id: r3 }, this), r3;
  }
  captureEvent(e3, t3) {
    const n3 = t3 && t3.event_id ? t3.event_id : ot();
    return this._client ? (this._client.captureEvent(e3, { ...t3, event_id: n3 }, this), n3) : (le.warn("No client configured on scope - will not capture event!"), n3);
  }
  _notifyScopeListeners() {
    this._notifyingListeners || (this._notifyingListeners = true, this._scopeListeners.forEach((e3) => {
      e3(this);
    }), this._notifyingListeners = false);
  }
};
var Mt = kt;
var Ct = class {
  constructor(e3, t3) {
    let n3, r3;
    n3 = e3 || new Mt(), r3 = t3 || new Mt(), this._stack = [{ scope: n3 }], this._isolationScope = r3;
  }
  withScope(e3) {
    const t3 = this._pushScope();
    let n3;
    try {
      n3 = e3(t3);
    } catch (e4) {
      throw this._popScope(), e4;
    }
    return Fe(n3) ? n3.then((e4) => (this._popScope(), e4), (e4) => {
      throw this._popScope(), e4;
    }) : (this._popScope(), n3);
  }
  getClient() {
    return this.getStackTop().client;
  }
  getScope() {
    return this.getStackTop().scope;
  }
  getIsolationScope() {
    return this._isolationScope;
  }
  getStackTop() {
    return this._stack[this._stack.length - 1];
  }
  _pushScope() {
    const e3 = this.getScope().clone();
    return this._stack.push({ client: this.getClient(), scope: e3 }), e3;
  }
  _popScope() {
    return !(this._stack.length <= 1) && !!this._stack.pop();
  }
};
function Et() {
  const e3 = Te(Ee());
  return e3.stack = e3.stack || new Ct(ie("defaultCurrentScope", () => new Mt()), ie("defaultIsolationScope", () => new Mt()));
}
function Tt(e3) {
  return Et().withScope(e3);
}
function Ot(e3, t3) {
  const n3 = Et();
  return n3.withScope(() => (n3.getStackTop().scope = e3, t3(e3)));
}
function Pt(e3) {
  return Et().withScope(() => e3(Et().getIsolationScope()));
}
function At(e3) {
  const t3 = Te(e3);
  return t3.acs ? t3.acs : { withIsolationScope: Pt, withScope: Tt, withSetScope: Ot, withSetIsolationScope: (e4, t4) => Pt(t4), getCurrentScope: () => Et().getScope(), getIsolationScope: () => Et().getIsolationScope() };
}
function jt() {
  return At(Ee()).getCurrentScope();
}
function It() {
  return At(Ee()).getIsolationScope();
}
function xt() {
  return jt().getClient();
}
function Lt(e3) {
  const t3 = e3.getPropagationContext(), { traceId: n3, spanId: r3, parentSpanId: i3 } = t3;
  return tt({ trace_id: n3, span_id: r3, parent_span_id: i3 });
}
function Dt(e3) {
  const t3 = e3._sentryMetrics;
  if (!t3)
    return;
  const n3 = {};
  for (const [, [e4, r3]] of t3) {
    (n3[e4] || (n3[e4] = [])).push(tt(r3));
  }
  return n3;
}
var Nt = /^sentry-/;
function Rt(e3) {
  const t3 = function(e4) {
    if (!e4 || !xe(e4) && !Array.isArray(e4))
      return;
    if (Array.isArray(e4))
      return e4.reduce((e5, t4) => {
        const n4 = Ft(t4);
        return Object.entries(n4).forEach(([t5, n5]) => {
          e5[t5] = n5;
        }), e5;
      }, {});
    return Ft(e4);
  }(e3);
  if (!t3)
    return;
  const n3 = Object.entries(t3).reduce((e4, [t4, n4]) => {
    if (t4.match(Nt)) {
      e4[t4.slice(7)] = n4;
    }
    return e4;
  }, {});
  return Object.keys(n3).length > 0 ? n3 : void 0;
}
function Ft(e3) {
  return e3.split(",").map((e4) => e4.split("=").map((e5) => decodeURIComponent(e5.trim()))).reduce((e4, [t3, n3]) => (t3 && n3 && (e4[t3] = n3), e4), {});
}
var Bt = false;
function Ut(e3) {
  const { spanId: t3, traceId: n3, isRemote: r3 } = e3.spanContext();
  return tt({ parent_span_id: r3 ? t3 : $t(e3).parent_span_id, span_id: r3 ? yt() : t3, trace_id: n3 });
}
function Vt(e3) {
  return "number" == typeof e3 ? Jt(e3) : Array.isArray(e3) ? e3[0] + e3[1] / 1e9 : e3 instanceof Date ? Jt(e3.getTime()) : it();
}
function Jt(e3) {
  return e3 > 9999999999 ? e3 / 1e3 : e3;
}
function $t(e3) {
  if (function(e4) {
    return "function" == typeof e4.getSpanJSON;
  }(e3))
    return e3.getSpanJSON();
  try {
    const { spanId: t3, traceId: n3 } = e3.spanContext();
    if (function(e4) {
      const t4 = e4;
      return !!(t4.attributes && t4.startTime && t4.name && t4.endTime && t4.status);
    }(e3)) {
      const { attributes: r3, startTime: i3, name: o3, endTime: s3, parentSpanId: a3, status: c3 } = e3;
      return tt({ span_id: t3, trace_id: n3, data: r3, description: o3, parent_span_id: a3, start_timestamp: Vt(i3), timestamp: Vt(s3) || void 0, status: qt(c3), op: r3["sentry.op"], origin: r3["sentry.origin"], _metrics_summary: Dt(e3) });
    }
    return { span_id: t3, trace_id: n3 };
  } catch (e4) {
    return {};
  }
}
function qt(e3) {
  if (e3 && 0 !== e3.code)
    return 1 === e3.code ? "ok" : e3.message || "unknown_error";
}
function zt(e3) {
  return e3._sentryRootSpan || e3;
}
function Wt() {
  Bt || (ce(() => {
    console.warn("[Sentry] Deprecation warning: Returning null from `beforeSendSpan` will be disallowed from SDK version 9.0.0 onwards. The callback will only support mutating spans. To drop certain spans, configure the respective integrations directly.");
  }), Bt = true);
}
var Ht = "production";
function Gt(e3, t3) {
  const n3 = t3.getOptions(), { publicKey: r3 } = t3.getDsn() || {}, i3 = tt({ environment: n3.environment || Ht, release: n3.release, public_key: r3, trace_id: e3 });
  return t3.emit("createDsc", i3), i3;
}
function Qt(e3) {
  const t3 = xt();
  if (!t3)
    return {};
  const n3 = zt(e3), r3 = n3._frozenDsc;
  if (r3)
    return r3;
  const i3 = n3.spanContext().traceState, o3 = i3 && i3.get("sentry.dsc"), s3 = o3 && Rt(o3);
  if (s3)
    return s3;
  const a3 = Gt(e3.spanContext().traceId, t3), c3 = $t(n3), l3 = c3.data || {}, u3 = l3["sentry.sample_rate"];
  null != u3 && (a3.sample_rate = `${u3}`);
  const d3 = l3["sentry.source"], p3 = c3.description;
  return "url" !== d3 && p3 && (a3.transaction = p3), function(e4) {
    if ("boolean" == typeof __SENTRY_TRACING__ && !__SENTRY_TRACING__)
      return false;
    const t4 = xt(), n4 = e4 || t4 && t4.getOptions();
    return !!n4 && (n4.enableTracing || "tracesSampleRate" in n4 || "tracesSampler" in n4);
  }() && (a3.sampled = String(function(e4) {
    const { traceFlags: t4 } = e4.spanContext();
    return 1 === t4;
  }(n3))), t3.emit("createDsc", a3, n3), a3;
}
var Kt = /^(?:(\w+):)\/\/(?:(\w+)(?::(\w+)?)?@)([\w.-]+)(?::(\d+))?\/(.+)/;
function Yt(e3, t3 = false) {
  const { host: n3, path: r3, pass: i3, port: o3, projectId: s3, protocol: a3, publicKey: c3 } = e3;
  return `${a3}://${c3}${t3 && i3 ? `:${i3}` : ""}@${n3}${o3 ? `:${o3}` : ""}/${r3 ? `${r3}/` : r3}${s3}`;
}
function Xt(e3) {
  return { protocol: e3.protocol, publicKey: e3.publicKey || "", pass: e3.pass || "", host: e3.host, port: e3.port || "", path: e3.path || "", projectId: e3.projectId };
}
function Zt(e3) {
  const t3 = "string" == typeof e3 ? function(e4) {
    const t4 = Kt.exec(e4);
    if (!t4)
      return void ce(() => {
        console.error(`Invalid Sentry Dsn: ${e4}`);
      });
    const [n3, r3, i3 = "", o3 = "", s3 = "", a3 = ""] = t4.slice(1);
    let c3 = "", l3 = a3;
    const u3 = l3.split("/");
    if (u3.length > 1 && (c3 = u3.slice(0, -1).join("/"), l3 = u3.pop()), l3) {
      const e5 = l3.match(/^\d+/);
      e5 && (l3 = e5[0]);
    }
    return Xt({ host: o3, pass: i3, path: c3, projectId: l3, port: s3, protocol: n3, publicKey: r3 });
  }(e3) : Xt(e3);
  if (t3 && function(e4) {
    if (!oe)
      return true;
    const { port: t4, projectId: n3, protocol: r3 } = e4;
    return !(["protocol", "publicKey", "host", "projectId"].find((t5) => !e4[t5] && (le.error(`Invalid Sentry Dsn: ${t5} missing`), true)) || (n3.match(/^\d+$/) ? function(e5) {
      return "http" === e5 || "https" === e5;
    }(r3) ? t4 && isNaN(parseInt(t4, 10)) && (le.error(`Invalid Sentry Dsn: Invalid port ${t4}`), 1) : (le.error(`Invalid Sentry Dsn: Invalid protocol ${r3}`), 1) : (le.error(`Invalid Sentry Dsn: Invalid projectId ${n3}`), 1)));
  }(t3))
    return t3;
}
function en(e3, t3 = 100, n3 = 1 / 0) {
  try {
    return nn("", e3, t3, n3);
  } catch (e4) {
    return { ERROR: `**non-serializable** (${e4})` };
  }
}
function tn(e3, t3 = 3, n3 = 102400) {
  const r3 = en(e3, t3);
  return i3 = r3, function(e4) {
    return ~-encodeURI(e4).split(/%..|./).length;
  }(JSON.stringify(i3)) > n3 ? tn(e3, t3 - 1, n3) : r3;
  var i3;
}
function nn(e3, t3, n3 = 1 / 0, r3 = 1 / 0, i3 = function() {
  const e4 = "function" == typeof WeakSet, t4 = e4 ? /* @__PURE__ */ new WeakSet() : [];
  return [function(n4) {
    if (e4)
      return !!t4.has(n4) || (t4.add(n4), false);
    for (let e5 = 0; e5 < t4.length; e5++)
      if (t4[e5] === n4)
        return true;
    return t4.push(n4), false;
  }, function(n4) {
    if (e4)
      t4.delete(n4);
    else
      for (let e5 = 0; e5 < t4.length; e5++)
        if (t4[e5] === n4) {
          t4.splice(e5, 1);
          break;
        }
  }];
}()) {
  const [o3, s3] = i3;
  if (null == t3 || ["boolean", "string"].includes(typeof t3) || "number" == typeof t3 && Number.isFinite(t3))
    return t3;
  const a3 = function(e4, t4) {
    try {
      if ("domain" === e4 && t4 && "object" == typeof t4 && t4._events)
        return "[Domain]";
      if ("domainEmitter" === e4)
        return "[DomainEmitter]";
      if ("undefined" != typeof global && t4 === global)
        return "[Global]";
      if ("undefined" != typeof window && t4 === window)
        return "[Window]";
      if ("undefined" != typeof document && t4 === document)
        return "[Document]";
      if (Ue(t4))
        return "[VueViewModel]";
      if (Ne(n4 = t4) && "nativeEvent" in n4 && "preventDefault" in n4 && "stopPropagation" in n4)
        return "[SyntheticEvent]";
      if ("number" == typeof t4 && !Number.isFinite(t4))
        return `[${t4}]`;
      if ("function" == typeof t4)
        return `[Function: ${ve(t4)}]`;
      if ("symbol" == typeof t4)
        return `[${String(t4)}]`;
      if ("bigint" == typeof t4)
        return `[BigInt: ${String(t4)}]`;
      const r4 = function(e5) {
        const t5 = Object.getPrototypeOf(e5);
        return t5 ? t5.constructor.name : "null prototype";
      }(t4);
      return /^HTML(\w*)Element$/.test(r4) ? `[HTMLElement: ${r4}]` : `[object ${r4}]`;
    } catch (e5) {
      return `**non-serializable** (${e5})`;
    }
    var n4;
  }(e3, t3);
  if (!a3.startsWith("[object "))
    return a3;
  if (t3.__sentry_skip_normalization__)
    return t3;
  const c3 = "number" == typeof t3.__sentry_override_normalization_depth__ ? t3.__sentry_override_normalization_depth__ : n3;
  if (0 === c3)
    return a3.replace("object ", "");
  if (o3(t3))
    return "[Circular ~]";
  const l3 = t3;
  if (l3 && "function" == typeof l3.toJSON)
    try {
      return nn("", l3.toJSON(), c3 - 1, r3, i3);
    } catch (e4) {
    }
  const u3 = Array.isArray(t3) ? [] : {};
  let d3 = 0;
  const p3 = Xe(t3);
  for (const e4 in p3) {
    if (!Object.prototype.hasOwnProperty.call(p3, e4))
      continue;
    if (d3 >= r3) {
      u3[e4] = "[MaxProperties ~]";
      break;
    }
    const t4 = p3[e4];
    u3[e4] = nn(e4, t4, c3 - 1, r3, i3), d3++;
  }
  return s3(t3), u3;
}
function rn(e3, t3 = []) {
  return [e3, t3];
}
function on(e3, t3) {
  const [n3, r3] = e3;
  return [n3, [...r3, t3]];
}
function sn(e3, t3) {
  const n3 = e3[1];
  for (const e4 of n3) {
    if (t3(e4, e4[0].type))
      return true;
  }
  return false;
}
function an(e3) {
  return re.__SENTRY__ && re.__SENTRY__.encodePolyfill ? re.__SENTRY__.encodePolyfill(e3) : new TextEncoder().encode(e3);
}
function cn(e3) {
  const [t3, n3] = e3;
  let r3 = JSON.stringify(t3);
  function i3(e4) {
    "string" == typeof r3 ? r3 = "string" == typeof e4 ? r3 + e4 : [an(r3), e4] : r3.push("string" == typeof e4 ? an(e4) : e4);
  }
  for (const e4 of n3) {
    const [t4, n4] = e4;
    if (i3(`
${JSON.stringify(t4)}
`), "string" == typeof n4 || n4 instanceof Uint8Array)
      i3(n4);
    else {
      let e5;
      try {
        e5 = JSON.stringify(n4);
      } catch (t5) {
        e5 = JSON.stringify(en(n4));
      }
      i3(e5);
    }
  }
  return "string" == typeof r3 ? r3 : function(e4) {
    const t4 = e4.reduce((e5, t5) => e5 + t5.length, 0), n4 = new Uint8Array(t4);
    let r4 = 0;
    for (const t5 of e4)
      n4.set(t5, r4), r4 += t5.length;
    return n4;
  }(r3);
}
function ln(e3) {
  const t3 = "string" == typeof e3.data ? an(e3.data) : e3.data;
  return [tt({ type: "attachment", length: t3.length, filename: e3.filename, content_type: e3.contentType, attachment_type: e3.attachmentType }), t3];
}
var un = { session: "session", sessions: "session", attachment: "attachment", transaction: "transaction", event: "error", client_report: "internal", user_report: "default", profile: "profile", profile_chunk: "profile", replay_event: "replay", replay_recording: "replay", check_in: "monitor", feedback: "feedback", span: "span", statsd: "metric_bucket", raw_security: "security" };
function dn(e3) {
  return un[e3];
}
function pn(e3) {
  if (!e3 || !e3.sdk)
    return;
  const { name: t3, version: n3 } = e3.sdk;
  return { name: t3, version: n3 };
}
function hn(e3, t3, n3, r3) {
  const i3 = pn(n3), o3 = e3.type && "replay_event" !== e3.type ? e3.type : "event";
  !function(e4, t4) {
    t4 && (e4.sdk = e4.sdk || {}, e4.sdk.name = e4.sdk.name || t4.name, e4.sdk.version = e4.sdk.version || t4.version, e4.sdk.integrations = [...e4.sdk.integrations || [], ...t4.integrations || []], e4.sdk.packages = [...e4.sdk.packages || [], ...t4.packages || []]);
  }(e3, n3 && n3.sdk);
  const s3 = function(e4, t4, n4, r4) {
    const i4 = e4.sdkProcessingMetadata && e4.sdkProcessingMetadata.dynamicSamplingContext;
    return { event_id: e4.event_id, sent_at: (/* @__PURE__ */ new Date()).toISOString(), ...t4 && { sdk: t4 }, ...!!n4 && r4 && { dsn: Yt(r4) }, ...i4 && { trace: tt({ ...i4 }) } };
  }(e3, i3, r3, t3);
  delete e3.sdkProcessingMetadata;
  return rn(s3, [[{ type: o3 }, e3]]);
}
function fn(e3, t3, n3, r3 = 0) {
  return new ft((i3, o3) => {
    const s3 = e3[r3];
    if (null === t3 || "function" != typeof s3)
      i3(t3);
    else {
      const a3 = s3({ ...t3 }, n3);
      te && s3.id && null === a3 && le.log(`Event processor "${s3.id}" dropped event`), Fe(a3) ? a3.then((t4) => fn(e3, t4, n3, r3 + 1).then(i3)).then(null, o3) : fn(e3, a3, n3, r3 + 1).then(i3).then(null, o3);
    }
  });
}
var vn;
var gn;
var mn;
function yn(e3, t3) {
  const { fingerprint: n3, span: r3, breadcrumbs: i3, sdkProcessingMetadata: o3 } = t3;
  !function(e4, t4) {
    const { extra: n4, tags: r4, user: i4, contexts: o4, level: s3, transactionName: a3 } = t4, c3 = tt(n4);
    c3 && Object.keys(c3).length && (e4.extra = { ...c3, ...e4.extra });
    const l3 = tt(r4);
    l3 && Object.keys(l3).length && (e4.tags = { ...l3, ...e4.tags });
    const u3 = tt(i4);
    u3 && Object.keys(u3).length && (e4.user = { ...u3, ...e4.user });
    const d3 = tt(o4);
    d3 && Object.keys(d3).length && (e4.contexts = { ...d3, ...e4.contexts });
    s3 && (e4.level = s3);
    a3 && "transaction" !== e4.type && (e4.transaction = a3);
  }(e3, t3), r3 && function(e4, t4) {
    e4.contexts = { trace: Ut(t4), ...e4.contexts }, e4.sdkProcessingMetadata = { dynamicSamplingContext: Qt(t4), ...e4.sdkProcessingMetadata };
    const n4 = zt(t4), r4 = $t(n4).description;
    r4 && !e4.transaction && "transaction" === e4.type && (e4.transaction = r4);
  }(e3, r3), function(e4, t4) {
    e4.fingerprint = e4.fingerprint ? Array.isArray(e4.fingerprint) ? e4.fingerprint : [e4.fingerprint] : [], t4 && (e4.fingerprint = e4.fingerprint.concat(t4));
    e4.fingerprint && !e4.fingerprint.length && delete e4.fingerprint;
  }(e3, n3), function(e4, t4) {
    const n4 = [...e4.breadcrumbs || [], ...t4];
    e4.breadcrumbs = n4.length ? n4 : void 0;
  }(e3, i3), function(e4, t4) {
    e4.sdkProcessingMetadata = { ...e4.sdkProcessingMetadata, ...t4 };
  }(e3, o3);
}
function bn(e3, t3) {
  const { extra: n3, tags: r3, user: i3, contexts: o3, level: s3, sdkProcessingMetadata: a3, breadcrumbs: c3, fingerprint: l3, eventProcessors: u3, attachments: d3, propagationContext: p3, transactionName: h3, span: f3 } = t3;
  _n(e3, "extra", n3), _n(e3, "tags", r3), _n(e3, "user", i3), _n(e3, "contexts", o3), e3.sdkProcessingMetadata = bt(e3.sdkProcessingMetadata, a3, 2), s3 && (e3.level = s3), h3 && (e3.transactionName = h3), f3 && (e3.span = f3), c3.length && (e3.breadcrumbs = [...e3.breadcrumbs, ...c3]), l3.length && (e3.fingerprint = [...e3.fingerprint, ...l3]), u3.length && (e3.eventProcessors = [...e3.eventProcessors, ...u3]), d3.length && (e3.attachments = [...e3.attachments, ...d3]), e3.propagationContext = { ...e3.propagationContext, ...p3 };
}
function _n(e3, t3, n3) {
  e3[t3] = bt(e3[t3], n3, 1);
}
function wn(e3, t3, n3, r3, i3, o3) {
  const { normalizeDepth: s3 = 3, normalizeMaxBreadth: a3 = 1e3 } = e3, c3 = { ...t3, event_id: t3.event_id || n3.event_id || ot(), timestamp: t3.timestamp || rt() }, l3 = n3.integrations || e3.integrations.map((e4) => e4.name);
  !function(e4, t4) {
    const { environment: n4, release: r4, dist: i4, maxValueLength: o4 = 250 } = t4;
    e4.environment = e4.environment || n4 || Ht, !e4.release && r4 && (e4.release = r4);
    !e4.dist && i4 && (e4.dist = i4);
    e4.message && (e4.message = qe(e4.message, o4));
    const s4 = e4.exception && e4.exception.values && e4.exception.values[0];
    s4 && s4.value && (s4.value = qe(s4.value, o4));
    const a4 = e4.request;
    a4 && a4.url && (a4.url = qe(a4.url, o4));
  }(c3, e3), function(e4, t4) {
    t4.length > 0 && (e4.sdk = e4.sdk || {}, e4.sdk.integrations = [...e4.sdk.integrations || [], ...t4]);
  }(c3, l3), i3 && i3.emit("applyFrameMetadata", t3), void 0 === t3.type && function(e4, t4) {
    const n4 = function(e5) {
      const t5 = re._sentryDebugIds;
      if (!t5)
        return {};
      const n5 = Object.keys(t5);
      return mn && n5.length === gn || (gn = n5.length, mn = n5.reduce((n6, r4) => {
        vn || (vn = {});
        const i4 = vn[r4];
        if (i4)
          n6[i4[0]] = i4[1];
        else {
          const i5 = e5(r4);
          for (let e6 = i5.length - 1; e6 >= 0; e6--) {
            const o4 = i5[e6], s4 = o4 && o4.filename, a4 = t5[r4];
            if (s4 && a4) {
              n6[s4] = a4, vn[r4] = [s4, a4];
              break;
            }
          }
        }
        return n6;
      }, {})), mn;
    }(t4);
    try {
      e4.exception.values.forEach((e5) => {
        e5.stacktrace.frames.forEach((e6) => {
          n4 && e6.filename && (e6.debug_id = n4[e6.filename]);
        });
      });
    } catch (e5) {
    }
  }(c3, e3.stackParser);
  const u3 = function(e4, t4) {
    if (!t4)
      return e4;
    const n4 = e4 ? e4.clone() : new Mt();
    return n4.update(t4), n4;
  }(r3, n3.captureContext);
  n3.mechanism && lt(c3, n3.mechanism);
  const d3 = i3 ? i3.getEventProcessors() : [], p3 = ie("globalScope", () => new Mt()).getScopeData();
  if (o3) {
    bn(p3, o3.getScopeData());
  }
  if (u3) {
    bn(p3, u3.getScopeData());
  }
  const h3 = [...n3.attachments || [], ...p3.attachments];
  h3.length && (n3.attachments = h3), yn(c3, p3);
  return fn([...d3, ...p3.eventProcessors], c3, n3).then((e4) => (e4 && function(e5) {
    const t4 = {};
    try {
      e5.exception.values.forEach((e6) => {
        e6.stacktrace.frames.forEach((e7) => {
          e7.debug_id && (e7.abs_path ? t4[e7.abs_path] = e7.debug_id : e7.filename && (t4[e7.filename] = e7.debug_id), delete e7.debug_id);
        });
      });
    } catch (e6) {
    }
    if (0 === Object.keys(t4).length)
      return;
    e5.debug_meta = e5.debug_meta || {}, e5.debug_meta.images = e5.debug_meta.images || [];
    const n4 = e5.debug_meta.images;
    Object.entries(t4).forEach(([e6, t5]) => {
      n4.push({ type: "sourcemap", code_file: e6, debug_id: t5 });
    });
  }(e4), "number" == typeof s3 && s3 > 0 ? function(e5, t4, n4) {
    if (!e5)
      return null;
    const r4 = { ...e5, ...e5.breadcrumbs && { breadcrumbs: e5.breadcrumbs.map((e6) => ({ ...e6, ...e6.data && { data: en(e6.data, t4, n4) } })) }, ...e5.user && { user: en(e5.user, t4, n4) }, ...e5.contexts && { contexts: en(e5.contexts, t4, n4) }, ...e5.extra && { extra: en(e5.extra, t4, n4) } };
    e5.contexts && e5.contexts.trace && r4.contexts && (r4.contexts.trace = e5.contexts.trace, e5.contexts.trace.data && (r4.contexts.trace.data = en(e5.contexts.trace.data, t4, n4)));
    e5.spans && (r4.spans = e5.spans.map((e6) => ({ ...e6, ...e6.data && { data: en(e6.data, t4, n4) } })));
    e5.contexts && e5.contexts.flags && r4.contexts && (r4.contexts.flags = en(e5.contexts.flags, 3, n4));
    return r4;
  }(e4, s3, a3) : e4));
}
function Sn(e3) {
  if (e3)
    return function(e4) {
      return e4 instanceof Mt || "function" == typeof e4;
    }(e3) || function(e4) {
      return Object.keys(e4).some((e5) => kn.includes(e5));
    }(e3) ? { captureContext: e3 } : e3;
}
var kn = ["user", "level", "extra", "contexts", "tags", "fingerprint", "requestSession", "propagationContext"];
function Mn(e3, t3) {
  return jt().captureEvent(e3, t3);
}
function Cn(e3) {
  const t3 = xt(), n3 = It(), r3 = jt(), { release: i3, environment: o3 = Ht } = t3 && t3.getOptions() || {}, { userAgent: s3 } = re.navigator || {}, a3 = vt({ release: i3, environment: o3, user: r3.getUser() || n3.getUser(), ...s3 && { userAgent: s3 }, ...e3 }), c3 = n3.getSession();
  return c3 && "ok" === c3.status && gt(c3, { status: "exited" }), En(), n3.setSession(a3), r3.setSession(a3), a3;
}
function En() {
  const e3 = It(), t3 = jt(), n3 = t3.getSession() || e3.getSession();
  n3 && function(e4, t4) {
    let n4 = {};
    t4 ? n4 = { status: t4 } : "ok" === e4.status && (n4 = { status: "exited" }), gt(e4, n4);
  }(n3), Tn(), e3.setSession(), t3.setSession();
}
function Tn() {
  const e3 = It(), t3 = jt(), n3 = xt(), r3 = t3.getSession() || e3.getSession();
  r3 && n3 && n3.captureSession(r3);
}
function On(e3 = false) {
  e3 ? En() : Tn();
}
function Pn(e3, t3, n3) {
  return t3 || `${function(e4) {
    return `${function(e5) {
      const t4 = e5.protocol ? `${e5.protocol}:` : "", n4 = e5.port ? `:${e5.port}` : "";
      return `${t4}//${e5.host}${n4}${e5.path ? `/${e5.path}` : ""}/api/`;
    }(e4)}${e4.projectId}/envelope/`;
  }(e3)}?${function(e4, t4) {
    const n4 = { sentry_version: "7" };
    return e4.publicKey && (n4.sentry_key = e4.publicKey), t4 && (n4.sentry_client = `${t4.name}/${t4.version}`), new URLSearchParams(n4).toString();
  }(e3, n3)}`;
}
var An = [];
function jn(e3, t3) {
  for (const n3 of t3)
    n3 && n3.afterAllSetup && n3.afterAllSetup(e3);
}
function In(e3, t3, n3) {
  if (n3[t3.name])
    te && le.log(`Integration skipped because it was already installed: ${t3.name}`);
  else {
    if (n3[t3.name] = t3, -1 === An.indexOf(t3.name) && "function" == typeof t3.setupOnce && (t3.setupOnce(), An.push(t3.name)), t3.setup && "function" == typeof t3.setup && t3.setup(e3), "function" == typeof t3.preprocessEvent) {
      const n4 = t3.preprocessEvent.bind(t3);
      e3.on("preprocessEvent", (t4, r3) => n4(t4, r3, e3));
    }
    if ("function" == typeof t3.processEvent) {
      const n4 = t3.processEvent.bind(t3), r3 = Object.assign((t4, r4) => n4(t4, r4, e3), { id: t3.name });
      e3.addEventProcessor(r3);
    }
    te && le.log(`Integration installed: ${t3.name}`);
  }
}
var xn = class extends Error {
  constructor(e3, t3 = "warn") {
    super(e3), this.message = e3, this.logLevel = t3;
  }
};
var Ln = "Not capturing exception because it's already been captured.";
var Dn = class {
  constructor(e3) {
    if (this._options = e3, this._integrations = {}, this._numProcessing = 0, this._outcomes = {}, this._hooks = {}, this._eventProcessors = [], e3.dsn ? this._dsn = Zt(e3.dsn) : te && le.warn("No DSN provided, client will not send events."), this._dsn) {
      const t4 = Pn(this._dsn, e3.tunnel, e3._metadata ? e3._metadata.sdk : void 0);
      this._transport = e3.transport({ tunnel: this._options.tunnel, recordDroppedEvent: this.recordDroppedEvent.bind(this), ...e3.transportOptions, url: t4 });
    }
    const t3 = ["enableTracing", "tracesSampleRate", "tracesSampler"].find((t4) => t4 in e3 && null == e3[t4]);
    t3 && ce(() => {
      console.warn(`[Sentry] Deprecation warning: \`${t3}\` is set to undefined, which leads to tracing being enabled. In v9, a value of \`undefined\` will result in tracing being disabled.`);
    });
  }
  captureException(e3, t3, n3) {
    const r3 = ot();
    if (ut(e3))
      return te && le.log(Ln), r3;
    const i3 = { event_id: r3, ...t3 };
    return this._process(this.eventFromException(e3, i3).then((e4) => this._captureEvent(e4, i3, n3))), i3.event_id;
  }
  captureMessage(e3, t3, n3, r3) {
    const i3 = { event_id: ot(), ...n3 }, o3 = Le(e3) ? e3 : String(e3), s3 = De(e3) ? this.eventFromMessage(o3, t3, i3) : this.eventFromException(e3, i3);
    return this._process(s3.then((e4) => this._captureEvent(e4, i3, r3))), i3.event_id;
  }
  captureEvent(e3, t3, n3) {
    const r3 = ot();
    if (t3 && t3.originalException && ut(t3.originalException))
      return te && le.log(Ln), r3;
    const i3 = { event_id: r3, ...t3 }, o3 = (e3.sdkProcessingMetadata || {}).capturedSpanScope;
    return this._process(this._captureEvent(e3, i3, o3 || n3)), i3.event_id;
  }
  captureSession(e3) {
    "string" != typeof e3.release ? te && le.warn("Discarded session because of missing or non-string release") : (this.sendSession(e3), gt(e3, { init: false }));
  }
  getDsn() {
    return this._dsn;
  }
  getOptions() {
    return this._options;
  }
  getSdkMetadata() {
    return this._options._metadata;
  }
  getTransport() {
    return this._transport;
  }
  flush(e3) {
    const t3 = this._transport;
    return t3 ? (this.emit("flush"), this._isClientDoneProcessing(e3).then((n3) => t3.flush(e3).then((e4) => n3 && e4))) : pt(true);
  }
  close(e3) {
    return this.flush(e3).then((e4) => (this.getOptions().enabled = false, this.emit("close"), e4));
  }
  getEventProcessors() {
    return this._eventProcessors;
  }
  addEventProcessor(e3) {
    this._eventProcessors.push(e3);
  }
  init() {
    (this._isEnabled() || this._options.integrations.some(({ name: e3 }) => e3.startsWith("Spotlight"))) && this._setupIntegrations();
  }
  getIntegrationByName(e3) {
    return this._integrations[e3];
  }
  addIntegration(e3) {
    const t3 = this._integrations[e3.name];
    In(this, e3, this._integrations), t3 || jn(this, [e3]);
  }
  sendEvent(e3, t3 = {}) {
    this.emit("beforeSendEvent", e3, t3);
    let n3 = hn(e3, this._dsn, this._options._metadata, this._options.tunnel);
    for (const e4 of t3.attachments || [])
      n3 = on(n3, ln(e4));
    const r3 = this.sendEnvelope(n3);
    r3 && r3.then((t4) => this.emit("afterSendEvent", e3, t4), null);
  }
  sendSession(e3) {
    const t3 = function(e4, t4, n3, r3) {
      const i3 = pn(n3);
      return rn({ sent_at: (/* @__PURE__ */ new Date()).toISOString(), ...i3 && { sdk: i3 }, ...!!r3 && t4 && { dsn: Yt(t4) } }, ["aggregates" in e4 ? [{ type: "sessions" }, e4] : [{ type: "session" }, e4.toJSON()]]);
    }(e3, this._dsn, this._options._metadata, this._options.tunnel);
    this.sendEnvelope(t3);
  }
  recordDroppedEvent(e3, t3, n3) {
    if (this._options.sendClientReports) {
      const r3 = "number" == typeof n3 ? n3 : 1, i3 = `${e3}:${t3}`;
      te && le.log(`Recording outcome: "${i3}"${r3 > 1 ? ` (${r3} times)` : ""}`), this._outcomes[i3] = (this._outcomes[i3] || 0) + r3;
    }
  }
  on(e3, t3) {
    const n3 = this._hooks[e3] = this._hooks[e3] || [];
    return n3.push(t3), () => {
      const e4 = n3.indexOf(t3);
      e4 > -1 && n3.splice(e4, 1);
    };
  }
  emit(e3, ...t3) {
    const n3 = this._hooks[e3];
    n3 && n3.forEach((e4) => e4(...t3));
  }
  sendEnvelope(e3) {
    return this.emit("beforeEnvelope", e3), this._isEnabled() && this._transport ? this._transport.send(e3).then(null, (e4) => (te && le.error("Error while sending envelope:", e4), e4)) : (te && le.error("Transport disabled"), pt({}));
  }
  _setupIntegrations() {
    const { integrations: e3 } = this._options;
    this._integrations = function(e4, t3) {
      const n3 = {};
      return t3.forEach((t4) => {
        t4 && In(e4, t4, n3);
      }), n3;
    }(this, e3), jn(this, e3);
  }
  _updateSessionFromEvent(e3, t3) {
    let n3 = "fatal" === t3.level, r3 = false;
    const i3 = t3.exception && t3.exception.values;
    if (i3) {
      r3 = true;
      for (const e4 of i3) {
        const t4 = e4.mechanism;
        if (t4 && false === t4.handled) {
          n3 = true;
          break;
        }
      }
    }
    const o3 = "ok" === e3.status;
    (o3 && 0 === e3.errors || o3 && n3) && (gt(e3, { ...n3 && { status: "crashed" }, errors: e3.errors || Number(r3 || n3) }), this.captureSession(e3));
  }
  _isClientDoneProcessing(e3) {
    return new ft((t3) => {
      let n3 = 0;
      const r3 = setInterval(() => {
        0 == this._numProcessing ? (clearInterval(r3), t3(true)) : (n3 += 1, e3 && n3 >= e3 && (clearInterval(r3), t3(false)));
      }, 1);
    });
  }
  _isEnabled() {
    return false !== this.getOptions().enabled && void 0 !== this._transport;
  }
  _prepareEvent(e3, t3, n3 = jt(), r3 = It()) {
    const i3 = this.getOptions(), o3 = Object.keys(this._integrations);
    return !t3.integrations && o3.length > 0 && (t3.integrations = o3), this.emit("preprocessEvent", e3, t3), e3.type || r3.setLastEventId(e3.event_id || t3.event_id), wn(i3, e3, t3, n3, this, r3).then((e4) => {
      if (null === e4)
        return e4;
      e4.contexts = { trace: Lt(n3), ...e4.contexts };
      const t4 = function(e5, t5) {
        const n4 = t5.getPropagationContext();
        return n4.dsc || Gt(n4.traceId, e5);
      }(this, n3);
      return e4.sdkProcessingMetadata = { dynamicSamplingContext: t4, ...e4.sdkProcessingMetadata }, e4;
    });
  }
  _captureEvent(e3, t3 = {}, n3) {
    return this._processEvent(e3, t3, n3).then((e4) => e4.event_id, (e4) => {
      te && (e4 instanceof xn && "log" === e4.logLevel ? le.log(e4.message) : le.warn(e4));
    });
  }
  _processEvent(e3, t3, n3) {
    const r3 = this.getOptions(), { sampleRate: i3 } = r3, o3 = Rn(e3), s3 = Nn(e3), a3 = e3.type || "error", c3 = `before send for type \`${a3}\``, l3 = void 0 === i3 ? void 0 : function(e4) {
      if ("boolean" == typeof e4)
        return Number(e4);
      const t4 = "string" == typeof e4 ? parseFloat(e4) : e4;
      if (!("number" != typeof t4 || isNaN(t4) || t4 < 0 || t4 > 1))
        return t4;
      te && le.warn(`[Tracing] Given sample rate is invalid. Sample rate must be a boolean or a number between 0 and 1. Got ${JSON.stringify(e4)} of type ${JSON.stringify(typeof e4)}.`);
    }(i3);
    if (s3 && "number" == typeof l3 && Math.random() > l3)
      return this.recordDroppedEvent("sample_rate", "error", e3), ht(new xn(`Discarding event because it's not included in the random sample (sampling rate = ${i3})`, "log"));
    const u3 = "replay_event" === a3 ? "replay" : a3, d3 = (e3.sdkProcessingMetadata || {}).capturedSpanIsolationScope;
    return this._prepareEvent(e3, t3, n3, d3).then((n4) => {
      if (null === n4)
        throw this.recordDroppedEvent("event_processor", u3, e3), new xn("An event processor returned `null`, will not send event.", "log");
      if (t3.data && true === t3.data.__sentry__)
        return n4;
      const i4 = function(e4, t4, n5, r4) {
        const { beforeSend: i5, beforeSendTransaction: o4, beforeSendSpan: s4 } = t4;
        if (Nn(n5) && i5)
          return i5(n5, r4);
        if (Rn(n5)) {
          if (n5.spans && s4) {
            const t5 = [];
            for (const r5 of n5.spans) {
              const n6 = s4(r5);
              n6 ? t5.push(n6) : (Wt(), e4.recordDroppedEvent("before_send", "span"));
            }
            n5.spans = t5;
          }
          if (o4) {
            if (n5.spans) {
              const e5 = n5.spans.length;
              n5.sdkProcessingMetadata = { ...n5.sdkProcessingMetadata, spanCountBeforeProcessing: e5 };
            }
            return o4(n5, r4);
          }
        }
        return n5;
      }(this, r3, n4, t3);
      return function(e4, t4) {
        const n5 = `${t4} must return \`null\` or a valid event.`;
        if (Fe(e4))
          return e4.then((e5) => {
            if (!Ne(e5) && null !== e5)
              throw new xn(n5);
            return e5;
          }, (e5) => {
            throw new xn(`${t4} rejected with ${e5}`);
          });
        if (!Ne(e4) && null !== e4)
          throw new xn(n5);
        return e4;
      }(i4, c3);
    }).then((r4) => {
      if (null === r4) {
        if (this.recordDroppedEvent("before_send", u3, e3), o3) {
          const t4 = 1 + (e3.spans || []).length;
          this.recordDroppedEvent("before_send", "span", t4);
        }
        throw new xn(`${c3} returned \`null\`, will not send event.`, "log");
      }
      const i4 = n3 && n3.getSession();
      if (!o3 && i4 && this._updateSessionFromEvent(i4, r4), o3) {
        const e4 = (r4.sdkProcessingMetadata && r4.sdkProcessingMetadata.spanCountBeforeProcessing || 0) - (r4.spans ? r4.spans.length : 0);
        e4 > 0 && this.recordDroppedEvent("before_send", "span", e4);
      }
      const s4 = r4.transaction_info;
      if (o3 && s4 && r4.transaction !== e3.transaction) {
        const e4 = "custom";
        r4.transaction_info = { ...s4, source: e4 };
      }
      return this.sendEvent(r4, t3), r4;
    }).then(null, (e4) => {
      if (e4 instanceof xn)
        throw e4;
      throw this.captureException(e4, { data: { __sentry__: true }, originalException: e4 }), new xn(`Event processing pipeline threw an error, original event will not be sent. Details have been sent as a new event.
Reason: ${e4}`);
    });
  }
  _process(e3) {
    this._numProcessing++, e3.then((e4) => (this._numProcessing--, e4), (e4) => (this._numProcessing--, e4));
  }
  _clearOutcomes() {
    const e3 = this._outcomes;
    return this._outcomes = {}, Object.entries(e3).map(([e4, t3]) => {
      const [n3, r3] = e4.split(":");
      return { reason: n3, category: r3, quantity: t3 };
    });
  }
  _flushOutcomes() {
    te && le.log("Flushing outcomes...");
    const e3 = this._clearOutcomes();
    if (0 === e3.length)
      return void (te && le.log("No outcomes to send"));
    if (!this._dsn)
      return void (te && le.log("No dsn provided, will not send outcomes"));
    te && le.log("Sending outcomes:", e3);
    const t3 = (n3 = e3, rn((r3 = this._options.tunnel && Yt(this._dsn)) ? { dsn: r3 } : {}, [[{ type: "client_report" }, { timestamp: i3 || rt(), discarded_events: n3 }]]));
    var n3, r3, i3;
    this.sendEnvelope(t3);
  }
};
function Nn(e3) {
  return void 0 === e3.type;
}
function Rn(e3) {
  return "transaction" === e3.type;
}
function Fn(e3) {
  const t3 = [];
  function n3(e4) {
    return t3.splice(t3.indexOf(e4), 1)[0] || Promise.resolve(void 0);
  }
  return { $: t3, add: function(r3) {
    if (!(void 0 === e3 || t3.length < e3))
      return ht(new xn("Not adding Promise because buffer limit was reached."));
    const i3 = r3();
    return -1 === t3.indexOf(i3) && t3.push(i3), i3.then(() => n3(i3)).then(null, () => n3(i3).then(null, () => {
    })), i3;
  }, drain: function(e4) {
    return new ft((n4, r3) => {
      let i3 = t3.length;
      if (!i3)
        return n4(true);
      const o3 = setTimeout(() => {
        e4 && e4 > 0 && n4(false);
      }, e4);
      t3.forEach((e5) => {
        pt(e5).then(() => {
          --i3 || (clearTimeout(o3), n4(true));
        }, r3);
      });
    });
  } };
}
function Bn(e3, { statusCode: t3, headers: n3 }, r3 = Date.now()) {
  const i3 = { ...e3 }, o3 = n3 && n3["x-sentry-rate-limits"], s3 = n3 && n3["retry-after"];
  if (o3)
    for (const e4 of o3.trim().split(",")) {
      const [t4, n4, , , o4] = e4.split(":", 5), s4 = parseInt(t4, 10), a3 = 1e3 * (isNaN(s4) ? 60 : s4);
      if (n4)
        for (const e5 of n4.split(";"))
          "metric_bucket" === e5 && o4 && !o4.split(";").includes("custom") || (i3[e5] = r3 + a3);
      else
        i3.all = r3 + a3;
    }
  else
    s3 ? i3.all = r3 + function(e4, t4 = Date.now()) {
      const n4 = parseInt(`${e4}`, 10);
      if (!isNaN(n4))
        return 1e3 * n4;
      const r4 = Date.parse(`${e4}`);
      return isNaN(r4) ? 6e4 : r4 - t4;
    }(s3, r3) : 429 === t3 && (i3.all = r3 + 6e4);
  return i3;
}
function Un(e3, t3, n3 = Fn(e3.bufferSize || 64)) {
  let r3 = {};
  return { send: function(i3) {
    const o3 = [];
    if (sn(i3, (t4, n4) => {
      const i4 = dn(n4);
      if (function(e4, t5, n5 = Date.now()) {
        return function(e5, t6) {
          return e5[t6] || e5.all || 0;
        }(e4, t5) > n5;
      }(r3, i4)) {
        const r4 = Vn(t4, n4);
        e3.recordDroppedEvent("ratelimit_backoff", i4, r4);
      } else
        o3.push(t4);
    }), 0 === o3.length)
      return pt({});
    const s3 = rn(i3[0], o3), a3 = (t4) => {
      sn(s3, (n4, r4) => {
        const i4 = Vn(n4, r4);
        e3.recordDroppedEvent(t4, dn(r4), i4);
      });
    };
    return n3.add(() => t3({ body: cn(s3) }).then((e4) => (void 0 !== e4.statusCode && (e4.statusCode < 200 || e4.statusCode >= 300) && te && le.warn(`Sentry responded with status code ${e4.statusCode} to sent event.`), r3 = Bn(r3, e4), e4), (e4) => {
      throw a3("network_error"), e4;
    })).then((e4) => e4, (e4) => {
      if (e4 instanceof xn)
        return te && le.error("Skipped sending event because buffer is full."), a3("queue_overflow"), pt({});
      throw e4;
    });
  }, flush: (e4) => n3.drain(e4) };
}
function Vn(e3, t3) {
  if ("event" === t3 || "transaction" === t3)
    return Array.isArray(e3) ? e3[1] : void 0;
}
var Jn = 100;
function $n(e3, t3) {
  const n3 = xt(), r3 = It();
  if (!n3)
    return;
  const { beforeBreadcrumb: i3 = null, maxBreadcrumbs: o3 = Jn } = n3.getOptions();
  if (o3 <= 0)
    return;
  const s3 = { timestamp: rt(), ...e3 }, a3 = i3 ? ce(() => i3(s3, t3)) : s3;
  null !== a3 && (n3.emit && n3.emit("beforeAddBreadcrumb", a3, t3), r3.addBreadcrumb(a3, o3));
}
var qn;
var zn = /* @__PURE__ */ new WeakMap();
var Wn = () => ({ name: "FunctionToString", setupOnce() {
  qn = Function.prototype.toString;
  try {
    Function.prototype.toString = function(...e3) {
      const t3 = Ye(this), n3 = zn.has(xt()) && void 0 !== t3 ? t3 : this;
      return qn.apply(n3, e3);
    };
  } catch (e3) {
  }
}, setup(e3) {
  zn.set(e3, true);
} });
var Hn = [/^Script error\.?$/, /^Javascript error: Script error\.? on line 0$/, /^ResizeObserver loop completed with undelivered notifications.$/, /^Cannot redefine property: googletag$/, "undefined is not an object (evaluating 'a.L')", `can't redefine non-configurable property "solana"`, "vv().getRestrictions is not a function. (In 'vv().getRestrictions(1,a)', 'vv().getRestrictions' is undefined)", "Can't find variable: _AutofillCallbackHandler", /^Non-Error promise rejection captured with value: Object Not Found Matching Id:\d+, MethodName:simulateEvent, ParamCount:\d+$/];
var Gn = (e3 = {}) => ({ name: "InboundFilters", processEvent(t3, n3, r3) {
  const i3 = r3.getOptions(), o3 = function(e4 = {}, t4 = {}) {
    return { allowUrls: [...e4.allowUrls || [], ...t4.allowUrls || []], denyUrls: [...e4.denyUrls || [], ...t4.denyUrls || []], ignoreErrors: [...e4.ignoreErrors || [], ...t4.ignoreErrors || [], ...e4.disableErrorDefaults ? [] : Hn], ignoreTransactions: [...e4.ignoreTransactions || [], ...t4.ignoreTransactions || []], ignoreInternal: void 0 === e4.ignoreInternal || e4.ignoreInternal };
  }(e3, i3);
  return function(e4, t4) {
    if (t4.ignoreInternal && function(e5) {
      try {
        return "SentryError" === e5.exception.values[0].type;
      } catch (e6) {
      }
      return false;
    }(e4))
      return te && le.warn(`Event dropped due to being internal Sentry Error.
Event: ${at(e4)}`), true;
    if (function(e5, t5) {
      if (e5.type || !t5 || !t5.length)
        return false;
      return function(e6) {
        const t6 = [];
        e6.message && t6.push(e6.message);
        let n4;
        try {
          n4 = e6.exception.values[e6.exception.values.length - 1];
        } catch (e7) {
        }
        n4 && n4.value && (t6.push(n4.value), n4.type && t6.push(`${n4.type}: ${n4.value}`));
        return t6;
      }(e5).some((e6) => He(e6, t5));
    }(e4, t4.ignoreErrors))
      return te && le.warn(`Event dropped due to being matched by \`ignoreErrors\` option.
Event: ${at(e4)}`), true;
    if (function(e5) {
      if (e5.type)
        return false;
      if (!e5.exception || !e5.exception.values || 0 === e5.exception.values.length)
        return false;
      return !e5.message && !e5.exception.values.some((e6) => e6.stacktrace || e6.type && "Error" !== e6.type || e6.value);
    }(e4))
      return te && le.warn(`Event dropped due to not having an error message, error type or stacktrace.
Event: ${at(e4)}`), true;
    if (function(e5, t5) {
      if ("transaction" !== e5.type || !t5 || !t5.length)
        return false;
      const n4 = e5.transaction;
      return !!n4 && He(n4, t5);
    }(e4, t4.ignoreTransactions))
      return te && le.warn(`Event dropped due to being matched by \`ignoreTransactions\` option.
Event: ${at(e4)}`), true;
    if (function(e5, t5) {
      if (!t5 || !t5.length)
        return false;
      const n4 = Qn(e5);
      return !!n4 && He(n4, t5);
    }(e4, t4.denyUrls))
      return te && le.warn(`Event dropped due to being matched by \`denyUrls\` option.
Event: ${at(e4)}.
Url: ${Qn(e4)}`), true;
    if (!function(e5, t5) {
      if (!t5 || !t5.length)
        return true;
      const n4 = Qn(e5);
      return !n4 || He(n4, t5);
    }(e4, t4.allowUrls))
      return te && le.warn(`Event dropped due to not being matched by \`allowUrls\` option.
Event: ${at(e4)}.
Url: ${Qn(e4)}`), true;
    return false;
  }(t3, o3) ? null : t3;
} });
function Qn(e3) {
  try {
    let t3;
    try {
      t3 = e3.exception.values[0].stacktrace.frames;
    } catch (e4) {
    }
    return t3 ? function(e4 = []) {
      for (let t4 = e4.length - 1; t4 >= 0; t4--) {
        const n3 = e4[t4];
        if (n3 && "<anonymous>" !== n3.filename && "[native code]" !== n3.filename)
          return n3.filename || null;
      }
      return null;
    }(t3) : null;
  } catch (t3) {
    return te && le.error(`Cannot extract url for event ${at(e3)}`), null;
  }
}
function Kn(e3, t3, n3 = 250, r3, i3, o3, s3) {
  if (!(o3.exception && o3.exception.values && s3 && Be(s3.originalException, Error)))
    return;
  const a3 = o3.exception.values.length > 0 ? o3.exception.values[o3.exception.values.length - 1] : void 0;
  var c3, l3;
  a3 && (o3.exception.values = (c3 = Yn(e3, t3, i3, s3.originalException, r3, o3.exception.values, a3, 0), l3 = n3, c3.map((e4) => (e4.value && (e4.value = qe(e4.value, l3)), e4))));
}
function Yn(e3, t3, n3, r3, i3, o3, s3, a3) {
  if (o3.length >= n3 + 1)
    return o3;
  let c3 = [...o3];
  if (Be(r3[i3], Error)) {
    Xn(s3, a3);
    const o4 = e3(t3, r3[i3]), l3 = c3.length;
    Zn(o4, i3, l3, a3), c3 = Yn(e3, t3, n3, r3[i3], i3, [o4, ...c3], o4, l3);
  }
  return Array.isArray(r3.errors) && r3.errors.forEach((r4, o4) => {
    if (Be(r4, Error)) {
      Xn(s3, a3);
      const l3 = e3(t3, r4), u3 = c3.length;
      Zn(l3, `errors[${o4}]`, u3, a3), c3 = Yn(e3, t3, n3, r4, i3, [l3, ...c3], l3, u3);
    }
  }), c3;
}
function Xn(e3, t3) {
  e3.mechanism = e3.mechanism || { type: "generic", handled: true }, e3.mechanism = { ...e3.mechanism, ..."AggregateError" === e3.type && { is_exception_group: true }, exception_id: t3 };
}
function Zn(e3, t3, n3, r3) {
  e3.mechanism = e3.mechanism || { type: "generic", handled: true }, e3.mechanism = { ...e3.mechanism, type: "chained", source: t3, exception_id: n3, parent_id: r3 };
}
function er(e3) {
  if (!e3)
    return {};
  const t3 = e3.match(/^(([^:/?#]+):)?(\/\/([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?$/);
  if (!t3)
    return {};
  const n3 = t3[6] || "", r3 = t3[8] || "";
  return { host: t3[4], path: t3[5], protocol: t3[2], search: n3, hash: r3, relative: t3[5] + n3 + r3 };
}
function tr() {
  "console" in re && se.forEach(function(e3) {
    e3 in re.console && Ge(re.console, e3, function(t3) {
      return ae[e3] = t3, function(...t4) {
        we("console", { args: t4, level: e3 });
        const n3 = ae[e3];
        n3 && n3.apply(re.console, t4);
      };
    });
  });
}
function nr(e3) {
  return "warn" === e3 ? "warning" : ["fatal", "error", "warning", "log", "info", "debug"].includes(e3) ? e3 : "log";
}
var rr = () => {
  let e3;
  return { name: "Dedupe", processEvent(t3) {
    if (t3.type)
      return t3;
    try {
      if (function(e4, t4) {
        if (!t4)
          return false;
        if (function(e5, t5) {
          const n3 = e5.message, r3 = t5.message;
          if (!n3 && !r3)
            return false;
          if (n3 && !r3 || !n3 && r3)
            return false;
          if (n3 !== r3)
            return false;
          if (!or(e5, t5))
            return false;
          if (!ir(e5, t5))
            return false;
          return true;
        }(e4, t4))
          return true;
        if (function(e5, t5) {
          const n3 = sr(t5), r3 = sr(e5);
          if (!n3 || !r3)
            return false;
          if (n3.type !== r3.type || n3.value !== r3.value)
            return false;
          if (!or(e5, t5))
            return false;
          if (!ir(e5, t5))
            return false;
          return true;
        }(e4, t4))
          return true;
        return false;
      }(t3, e3))
        return te && le.warn("Event dropped due to being a duplicate of previously captured event."), null;
    } catch (e4) {
    }
    return e3 = t3;
  } };
};
function ir(e3, t3) {
  let n3 = ge(e3), r3 = ge(t3);
  if (!n3 && !r3)
    return true;
  if (n3 && !r3 || !n3 && r3)
    return false;
  if (r3.length !== n3.length)
    return false;
  for (let e4 = 0; e4 < r3.length; e4++) {
    const t4 = r3[e4], i3 = n3[e4];
    if (t4.filename !== i3.filename || t4.lineno !== i3.lineno || t4.colno !== i3.colno || t4.function !== i3.function)
      return false;
  }
  return true;
}
function or(e3, t3) {
  let n3 = e3.fingerprint, r3 = t3.fingerprint;
  if (!n3 && !r3)
    return true;
  if (n3 && !r3 || !n3 && r3)
    return false;
  try {
    return !(n3.join("") !== r3.join(""));
  } catch (e4) {
    return false;
  }
}
function sr(e3) {
  return e3.exception && e3.exception.values && e3.exception.values[0];
}
function ar(e3) {
  return void 0 === e3 ? void 0 : e3 >= 400 && e3 < 500 ? "warning" : e3 >= 500 ? "error" : void 0;
}
var cr = re;
function lr(e3) {
  return e3 && /^function\s+\w+\(\)\s+\{\s+\[native code\]\s+\}$/.test(e3.toString());
}
function ur() {
  if ("string" == typeof EdgeRuntime)
    return true;
  if (!function() {
    if (!("fetch" in cr))
      return false;
    try {
      return new Headers(), new Request("http://www.example.com"), new Response(), true;
    } catch (e4) {
      return false;
    }
  }())
    return false;
  if (lr(cr.fetch))
    return true;
  let e3 = false;
  const t3 = cr.document;
  if (t3 && "function" == typeof t3.createElement)
    try {
      const n3 = t3.createElement("iframe");
      n3.hidden = true, t3.head.appendChild(n3), n3.contentWindow && n3.contentWindow.fetch && (e3 = lr(n3.contentWindow.fetch)), t3.head.removeChild(n3);
    } catch (e4) {
      oe && le.warn("Could not create sandbox iframe for pure fetch check, bailing to window.fetch: ", e4);
    }
  return e3;
}
function dr(e3, t3) {
  const n3 = "fetch";
  be(n3, e3), _e(n3, () => function(e4, t4 = false) {
    if (t4 && !ur())
      return;
    Ge(re, "fetch", function(t5) {
      return function(...n4) {
        const r3 = new Error(), { method: i3, url: o3 } = function(e5) {
          if (0 === e5.length)
            return { method: "GET", url: "" };
          if (2 === e5.length) {
            const [t7, n5] = e5;
            return { url: hr(t7), method: pr(n5, "method") ? String(n5.method).toUpperCase() : "GET" };
          }
          const t6 = e5[0];
          return { url: hr(t6), method: pr(t6, "method") ? String(t6.method).toUpperCase() : "GET" };
        }(n4), s3 = { args: n4, fetchData: { method: i3, url: o3 }, startTimestamp: 1e3 * it(), virtualError: r3 };
        return e4 || we("fetch", { ...s3 }), t5.apply(re, n4).then(async (t6) => (e4 ? e4(t6) : we("fetch", { ...s3, endTimestamp: 1e3 * it(), response: t6 }), t6), (e5) => {
          throw we("fetch", { ...s3, endTimestamp: 1e3 * it(), error: e5 }), Pe(e5) && void 0 === e5.stack && (e5.stack = r3.stack, Qe(e5, "framesToPop", 1)), e5;
        });
      };
    });
  }(void 0, t3));
}
function pr(e3, t3) {
  return !!e3 && "object" == typeof e3 && !!e3[t3];
}
function hr(e3) {
  return "string" == typeof e3 ? e3 : e3 ? pr(e3, "url") ? e3.url : e3.toString ? e3.toString() : "" : "";
}
var fr = re;
var vr = re;
var gr = 0;
function mr() {
  return gr > 0;
}
function yr(e3, t3 = {}) {
  if (!function(e4) {
    return "function" == typeof e4;
  }(e3))
    return e3;
  try {
    const t4 = e3.__sentry_wrapped__;
    if (t4)
      return "function" == typeof t4 ? t4 : e3;
    if (Ye(e3))
      return e3;
  } catch (t4) {
    return e3;
  }
  const n3 = function(...n4) {
    try {
      const r3 = n4.map((e4) => yr(e4, t3));
      return e3.apply(this, r3);
    } catch (e4) {
      throw gr++, setTimeout(() => {
        gr--;
      }), function(...e5) {
        const t4 = At(Ee());
        if (2 === e5.length) {
          const [n5, r3] = e5;
          return n5 ? t4.withSetScope(n5, r3) : t4.withScope(r3);
        }
        t4.withScope(e5[0]);
      }((r3) => {
        var i3, o3;
        r3.addEventProcessor((e5) => (t3.mechanism && (ct(e5, void 0, void 0), lt(e5, t3.mechanism)), e5.extra = { ...e5.extra, arguments: n4 }, e5)), i3 = e4, jt().captureException(i3, Sn(o3));
      }), e4;
    }
  };
  try {
    for (const t4 in e3)
      Object.prototype.hasOwnProperty.call(e3, t4) && (n3[t4] = e3[t4]);
  } catch (e4) {
  }
  Ke(n3, e3), Qe(e3, "__sentry_wrapped__", n3);
  try {
    Object.getOwnPropertyDescriptor(n3, "name").configurable && Object.defineProperty(n3, "name", { get: () => e3.name });
  } catch (e4) {
  }
  return n3;
}
var br = "undefined" == typeof __SENTRY_DEBUG__ || __SENTRY_DEBUG__;
function _r(e3, t3) {
  const n3 = kr(e3, t3), r3 = { type: Er(t3), value: Tr(t3) };
  return n3.length && (r3.stacktrace = { frames: n3 }), void 0 === r3.type && "" === r3.value && (r3.value = "Unrecoverable error caught"), r3;
}
function wr(e3, t3, n3, r3) {
  const i3 = xt(), o3 = i3 && i3.getOptions().normalizeDepth, s3 = function(e4) {
    for (const t4 in e4)
      if (Object.prototype.hasOwnProperty.call(e4, t4)) {
        const n4 = e4[t4];
        if (n4 instanceof Error)
          return n4;
      }
    return;
  }(t3), a3 = { __serialized__: tn(t3, o3) };
  if (s3)
    return { exception: { values: [_r(e3, s3)] }, extra: a3 };
  const c3 = { exception: { values: [{ type: Re(t3) ? t3.constructor.name : r3 ? "UnhandledRejection" : "Error", value: Ar(t3, { isUnhandledRejection: r3 }) }] }, extra: a3 };
  if (n3) {
    const t4 = kr(e3, n3);
    t4.length && (c3.exception.values[0].stacktrace = { frames: t4 });
  }
  return c3;
}
function Sr(e3, t3) {
  return { exception: { values: [_r(e3, t3)] } };
}
function kr(e3, t3) {
  const n3 = t3.stacktrace || t3.stack || "", r3 = function(e4) {
    if (e4 && Mr.test(e4.message))
      return 1;
    return 0;
  }(t3), i3 = function(e4) {
    if ("number" == typeof e4.framesToPop)
      return e4.framesToPop;
    return 0;
  }(t3);
  try {
    return e3(n3, r3, i3);
  } catch (e4) {
  }
  return [];
}
var Mr = /Minified React error #\d+;/i;
function Cr(e3) {
  return "undefined" != typeof WebAssembly && void 0 !== WebAssembly.Exception && e3 instanceof WebAssembly.Exception;
}
function Er(e3) {
  const t3 = e3 && e3.name;
  if (!t3 && Cr(e3)) {
    return e3.message && Array.isArray(e3.message) && 2 == e3.message.length ? e3.message[0] : "WebAssembly.Exception";
  }
  return t3;
}
function Tr(e3) {
  const t3 = e3 && e3.message;
  return t3 ? t3.error && "string" == typeof t3.error.message ? t3.error.message : Cr(e3) && Array.isArray(e3.message) && 2 == e3.message.length ? e3.message[1] : t3 : "No error message";
}
function Or(e3, t3, n3, r3, i3) {
  let o3;
  if (je(t3) && t3.error) {
    return Sr(e3, t3.error);
  }
  if (Ie(t3) || Ae(t3, "DOMException")) {
    const i4 = t3;
    if ("stack" in t3)
      o3 = Sr(e3, t3);
    else {
      const t4 = i4.name || (Ie(i4) ? "DOMError" : "DOMException"), s3 = i4.message ? `${t4}: ${i4.message}` : t4;
      o3 = Pr(e3, s3, n3, r3), ct(o3, s3);
    }
    return "code" in i4 && (o3.tags = { ...o3.tags, "DOMException.code": `${i4.code}` }), o3;
  }
  if (Pe(t3))
    return Sr(e3, t3);
  if (Ne(t3) || Re(t3)) {
    return o3 = wr(e3, t3, n3, i3), lt(o3, { synthetic: true }), o3;
  }
  return o3 = Pr(e3, t3, n3, r3), ct(o3, `${t3}`, void 0), lt(o3, { synthetic: true }), o3;
}
function Pr(e3, t3, n3, r3) {
  const i3 = {};
  if (r3 && n3) {
    const r4 = kr(e3, n3);
    r4.length && (i3.exception = { values: [{ value: t3, stacktrace: { frames: r4 } }] }), lt(i3, { synthetic: true });
  }
  if (Le(t3)) {
    const { __sentry_template_string__: e4, __sentry_template_values__: n4 } = t3;
    return i3.logentry = { message: e4, params: n4 }, i3;
  }
  return i3.message = t3, i3;
}
function Ar(e3, { isUnhandledRejection: t3 }) {
  const n3 = function(e4, t4 = 40) {
    const n4 = Object.keys(Xe(e4));
    n4.sort();
    const r4 = n4[0];
    if (!r4)
      return "[object has no keys]";
    if (r4.length >= t4)
      return qe(r4, t4);
    for (let e5 = n4.length; e5 > 0; e5--) {
      const r5 = n4.slice(0, e5).join(", ");
      if (!(r5.length > t4))
        return e5 === n4.length ? r5 : qe(r5, t4);
    }
    return "";
  }(e3), r3 = t3 ? "promise rejection" : "exception";
  if (je(e3))
    return `Event \`ErrorEvent\` captured as ${r3} with message \`${e3.message}\``;
  if (Re(e3)) {
    return `Event \`${function(e4) {
      try {
        const t4 = Object.getPrototypeOf(e4);
        return t4 ? t4.constructor.name : void 0;
      } catch (e5) {
      }
    }(e3)}\` (type=${e3.type}) captured as ${r3}`;
  }
  return `Object captured as ${r3} with keys: ${n3}`;
}
var jr = class extends Dn {
  constructor(e3) {
    const t3 = { parentSpanIsAlwaysRootSpan: true, ...e3 };
    !function(e4, t4, n3 = [t4], r3 = "npm") {
      const i3 = e4._metadata || {};
      i3.sdk || (i3.sdk = { name: `sentry.javascript.${t4}`, packages: n3.map((e5) => ({ name: `${r3}:@sentry/${e5}`, version: ne })), version: ne }), e4._metadata = i3;
    }(t3, "browser", ["browser"], vr.SENTRY_SDK_SOURCE || "npm"), super(t3), t3.sendClientReports && vr.document && vr.document.addEventListener("visibilitychange", () => {
      "hidden" === vr.document.visibilityState && this._flushOutcomes();
    });
  }
  eventFromException(e3, t3) {
    return function(e4, t4, n3, r3) {
      const i3 = Or(e4, t4, n3 && n3.syntheticException || void 0, r3);
      return lt(i3), i3.level = "error", n3 && n3.event_id && (i3.event_id = n3.event_id), pt(i3);
    }(this._options.stackParser, e3, t3, this._options.attachStacktrace);
  }
  eventFromMessage(e3, t3 = "info", n3) {
    return function(e4, t4, n4 = "info", r3, i3) {
      const o3 = Pr(e4, t4, r3 && r3.syntheticException || void 0, i3);
      return o3.level = n4, r3 && r3.event_id && (o3.event_id = r3.event_id), pt(o3);
    }(this._options.stackParser, e3, t3, n3, this._options.attachStacktrace);
  }
  captureUserFeedback(e3) {
    if (!this._isEnabled())
      return void (br && le.warn("SDK not enabled, will not capture user feedback."));
    const t3 = function(e4, { metadata: t4, tunnel: n3, dsn: r3 }) {
      const i3 = { event_id: e4.event_id, sent_at: (/* @__PURE__ */ new Date()).toISOString(), ...t4 && t4.sdk && { sdk: { name: t4.sdk.name, version: t4.sdk.version } }, ...!!n3 && !!r3 && { dsn: Yt(r3) } }, o3 = function(e5) {
        return [{ type: "user_report" }, e5];
      }(e4);
      return rn(i3, [o3]);
    }(e3, { metadata: this.getSdkMetadata(), dsn: this.getDsn(), tunnel: this.getOptions().tunnel });
    this.sendEnvelope(t3);
  }
  _prepareEvent(e3, t3, n3) {
    return e3.platform = e3.platform || "javascript", super._prepareEvent(e3, t3, n3);
  }
};
var Ir = "undefined" == typeof __SENTRY_DEBUG__ || __SENTRY_DEBUG__;
var xr = re;
var Lr;
var Dr;
var Nr;
var Rr;
function Fr() {
  if (!xr.document)
    return;
  const e3 = we.bind(null, "dom"), t3 = Br(e3, true);
  xr.document.addEventListener("click", t3, false), xr.document.addEventListener("keypress", t3, false), ["EventTarget", "Node"].forEach((t4) => {
    const n3 = xr[t4], r3 = n3 && n3.prototype;
    r3 && r3.hasOwnProperty && r3.hasOwnProperty("addEventListener") && (Ge(r3, "addEventListener", function(t5) {
      return function(n4, r4, i3) {
        if ("click" === n4 || "keypress" == n4)
          try {
            const r5 = this.__sentry_instrumentation_handlers__ = this.__sentry_instrumentation_handlers__ || {}, o3 = r5[n4] = r5[n4] || { refCount: 0 };
            if (!o3.handler) {
              const r6 = Br(e3);
              o3.handler = r6, t5.call(this, n4, r6, i3);
            }
            o3.refCount++;
          } catch (e4) {
          }
        return t5.call(this, n4, r4, i3);
      };
    }), Ge(r3, "removeEventListener", function(e4) {
      return function(t5, n4, r4) {
        if ("click" === t5 || "keypress" == t5)
          try {
            const n5 = this.__sentry_instrumentation_handlers__ || {}, i3 = n5[t5];
            i3 && (i3.refCount--, i3.refCount <= 0 && (e4.call(this, t5, i3.handler, r4), i3.handler = void 0, delete n5[t5]), 0 === Object.keys(n5).length && delete this.__sentry_instrumentation_handlers__);
          } catch (e5) {
          }
        return e4.call(this, t5, n4, r4);
      };
    }));
  });
}
function Br(e3, t3 = false) {
  return (n3) => {
    if (!n3 || n3._sentryCaptured)
      return;
    const r3 = function(e4) {
      try {
        return e4.target;
      } catch (e5) {
        return null;
      }
    }(n3);
    if (function(e4, t4) {
      return "keypress" === e4 && (!t4 || !t4.tagName || "INPUT" !== t4.tagName && "TEXTAREA" !== t4.tagName && !t4.isContentEditable);
    }(n3.type, r3))
      return;
    Qe(n3, "_sentryCaptured", true), r3 && !r3._sentryId && Qe(r3, "_sentryId", ot());
    const i3 = "keypress" === n3.type ? "input" : n3.type;
    if (!function(e4) {
      if (e4.type !== Dr)
        return false;
      try {
        if (!e4.target || e4.target._sentryId !== Nr)
          return false;
      } catch (e5) {
      }
      return true;
    }(n3)) {
      e3({ event: n3, name: i3, global: t3 }), Dr = n3.type, Nr = r3 ? r3._sentryId : void 0;
    }
    clearTimeout(Lr), Lr = xr.setTimeout(() => {
      Nr = void 0, Dr = void 0;
    }, 1e3);
  };
}
function Ur(e3) {
  const t3 = "history";
  be(t3, e3), _e(t3, Vr);
}
function Vr() {
  if (!function() {
    const e4 = fr.chrome, t4 = e4 && e4.app && e4.app.runtime, n3 = "history" in fr && !!fr.history.pushState && !!fr.history.replaceState;
    return !t4 && n3;
  }())
    return;
  const e3 = xr.onpopstate;
  function t3(e4) {
    return function(...t4) {
      const n3 = t4.length > 2 ? t4[2] : void 0;
      if (n3) {
        const e5 = Rr, t5 = String(n3);
        Rr = t5;
        we("history", { from: e5, to: t5 });
      }
      return e4.apply(this, t4);
    };
  }
  xr.onpopstate = function(...t4) {
    const n3 = xr.location.href, r3 = Rr;
    Rr = n3;
    if (we("history", { from: r3, to: n3 }), e3)
      try {
        return e3.apply(this, t4);
      } catch (e4) {
      }
  }, Ge(xr.history, "pushState", t3), Ge(xr.history, "replaceState", t3);
}
var Jr = {};
function $r(e3) {
  Jr[e3] = void 0;
}
var qr = "__sentry_xhr_v3__";
function zr() {
  if (!xr.XMLHttpRequest)
    return;
  const e3 = XMLHttpRequest.prototype;
  e3.open = new Proxy(e3.open, { apply(e4, t3, n3) {
    const r3 = new Error(), i3 = 1e3 * it(), o3 = xe(n3[0]) ? n3[0].toUpperCase() : void 0, s3 = function(e5) {
      if (xe(e5))
        return e5;
      try {
        return e5.toString();
      } catch (e6) {
      }
      return;
    }(n3[1]);
    if (!o3 || !s3)
      return e4.apply(t3, n3);
    t3[qr] = { method: o3, url: s3, request_headers: {} }, "POST" === o3 && s3.match(/sentry_key/) && (t3.__sentry_own_request__ = true);
    const a3 = () => {
      const e5 = t3[qr];
      if (e5 && 4 === t3.readyState) {
        try {
          e5.status_code = t3.status;
        } catch (e6) {
        }
        we("xhr", { endTimestamp: 1e3 * it(), startTimestamp: i3, xhr: t3, virtualError: r3 });
      }
    };
    return "onreadystatechange" in t3 && "function" == typeof t3.onreadystatechange ? t3.onreadystatechange = new Proxy(t3.onreadystatechange, { apply: (e5, t4, n4) => (a3(), e5.apply(t4, n4)) }) : t3.addEventListener("readystatechange", a3), t3.setRequestHeader = new Proxy(t3.setRequestHeader, { apply(e5, t4, n4) {
      const [r4, i4] = n4, o4 = t4[qr];
      return o4 && xe(r4) && xe(i4) && (o4.request_headers[r4.toLowerCase()] = i4), e5.apply(t4, n4);
    } }), e4.apply(t3, n3);
  } }), e3.send = new Proxy(e3.send, { apply(e4, t3, n3) {
    const r3 = t3[qr];
    if (!r3)
      return e4.apply(t3, n3);
    void 0 !== n3[0] && (r3.body = n3[0]);
    return we("xhr", { startTimestamp: 1e3 * it(), xhr: t3 }), e4.apply(t3, n3);
  } });
}
function Wr(e3, t3 = function(e4) {
  const t4 = Jr[e4];
  if (t4)
    return t4;
  let n3 = xr[e4];
  if (lr(n3))
    return Jr[e4] = n3.bind(xr);
  const r3 = xr.document;
  if (r3 && "function" == typeof r3.createElement)
    try {
      const t5 = r3.createElement("iframe");
      t5.hidden = true, r3.head.appendChild(t5);
      const i3 = t5.contentWindow;
      i3 && i3[e4] && (n3 = i3[e4]), r3.head.removeChild(t5);
    } catch (t5) {
      Ir && le.warn(`Could not create sandbox iframe for ${e4} check, bailing to window.${e4}: `, t5);
    }
  return n3 ? Jr[e4] = n3.bind(xr) : n3;
}("fetch")) {
  let n3 = 0, r3 = 0;
  return Un(e3, function(i3) {
    const o3 = i3.body.length;
    n3 += o3, r3++;
    const s3 = { body: i3.body, method: "POST", referrerPolicy: "origin", headers: e3.headers, keepalive: n3 <= 6e4 && r3 < 15, ...e3.fetchOptions };
    if (!t3)
      return $r("fetch"), ht("No fetch implementation available");
    try {
      return t3(e3.url, s3).then((e4) => (n3 -= o3, r3--, { statusCode: e4.status, headers: { "x-sentry-rate-limits": e4.headers.get("X-Sentry-Rate-Limits"), "retry-after": e4.headers.get("Retry-After") } }));
    } catch (e4) {
      return $r("fetch"), n3 -= o3, r3--, ht(e4);
    }
  });
}
function Hr(e3, t3, n3, r3) {
  const i3 = { filename: e3, function: "<anonymous>" === t3 ? ue : t3, in_app: true };
  return void 0 !== n3 && (i3.lineno = n3), void 0 !== r3 && (i3.colno = r3), i3;
}
var Gr = /^\s*at (\S+?)(?::(\d+))(?::(\d+))\s*$/i;
var Qr = /^\s*at (?:(.+?\)(?: \[.+\])?|.*?) ?\((?:address at )?)?(?:async )?((?:<anonymous>|[-a-z]+:|.*bundle|\/)?.*?)(?::(\d+))?(?::(\d+))?\)?\s*$/i;
var Kr = /\((\S*)(?::(\d+))(?::(\d+))\)/;
var Yr = /^\s*(.*?)(?:\((.*?)\))?(?:^|@)?((?:[-a-z]+)?:\/.*?|\[native code\]|[^@]*(?:bundle|\d+\.js)|\/[\w\-. /=]+)(?::(\d+))?(?::(\d+))?\s*$/i;
var Xr = /(\S+) line (\d+)(?: > eval line \d+)* > eval/i;
var Zr = function(...e3) {
  const t3 = e3.sort((e4, t4) => e4[0] - t4[0]).map((e4) => e4[1]);
  return (e4, n3 = 0, r3 = 0) => {
    const i3 = [], o3 = e4.split("\n");
    for (let e5 = n3; e5 < o3.length; e5++) {
      const n4 = o3[e5];
      if (n4.length > 1024)
        continue;
      const s3 = de.test(n4) ? n4.replace(de, "$1") : n4;
      if (!s3.match(/\S*Error: /)) {
        for (const e6 of t3) {
          const t4 = e6(s3);
          if (t4) {
            i3.push(t4);
            break;
          }
        }
        if (i3.length >= 50 + r3)
          break;
      }
    }
    return function(e5) {
      if (!e5.length)
        return [];
      const t4 = Array.from(e5);
      /sentryWrapped/.test(he(t4).function || "") && t4.pop();
      t4.reverse(), pe.test(he(t4).function || "") && (t4.pop(), pe.test(he(t4).function || "") && t4.pop());
      return t4.slice(0, 50).map((e6) => ({ ...e6, filename: e6.filename || he(t4).filename, function: e6.function || ue }));
    }(i3.slice(r3));
  };
}(...[[30, (e3) => {
  const t3 = Gr.exec(e3);
  if (t3) {
    const [, e4, n4, r3] = t3;
    return Hr(e4, ue, +n4, +r3);
  }
  const n3 = Qr.exec(e3);
  if (n3) {
    if (n3[2] && 0 === n3[2].indexOf("eval")) {
      const e5 = Kr.exec(n3[2]);
      e5 && (n3[2] = e5[1], n3[3] = e5[2], n3[4] = e5[3]);
    }
    const [e4, t4] = ei(n3[1] || ue, n3[2]);
    return Hr(t4, e4, n3[3] ? +n3[3] : void 0, n3[4] ? +n3[4] : void 0);
  }
}], [50, (e3) => {
  const t3 = Yr.exec(e3);
  if (t3) {
    if (t3[3] && t3[3].indexOf(" > eval") > -1) {
      const e5 = Xr.exec(t3[3]);
      e5 && (t3[1] = t3[1] || "eval", t3[3] = e5[1], t3[4] = e5[2], t3[5] = "");
    }
    let e4 = t3[3], n3 = t3[1] || ue;
    return [n3, e4] = ei(n3, e4), Hr(e4, n3, t3[4] ? +t3[4] : void 0, t3[5] ? +t3[5] : void 0);
  }
}]]);
var ei = (e3, t3) => {
  const n3 = -1 !== e3.indexOf("safari-extension"), r3 = -1 !== e3.indexOf("safari-web-extension");
  return n3 || r3 ? [-1 !== e3.indexOf("@") ? e3.split("@")[0] : ue, n3 ? `safari-extension:${t3}` : `safari-web-extension:${t3}`] : [e3, t3];
};
var ti = 1024;
var ni = (e3 = {}) => {
  const t3 = { console: true, dom: true, fetch: true, history: true, sentry: true, xhr: true, ...e3 };
  return { name: "Breadcrumbs", setup(e4) {
    var n3;
    t3.console && function(e5) {
      const t4 = "console";
      be(t4, e5), _e(t4, tr);
    }(function(e5) {
      return function(t4) {
        if (xt() !== e5)
          return;
        const n4 = { category: "console", data: { arguments: t4.args, logger: "console" }, level: nr(t4.level), message: ze(t4.args, " ") };
        if ("assert" === t4.level) {
          if (false !== t4.args[0])
            return;
          n4.message = `Assertion failed: ${ze(t4.args.slice(1), " ") || "console.assert"}`, n4.data.arguments = t4.args.slice(1);
        }
        $n(n4, { input: t4.args, level: t4.level });
      };
    }(e4)), t3.dom && (n3 = function(e5, t4) {
      return function(n4) {
        if (xt() !== e5)
          return;
        let r3, i3, o3 = "object" == typeof t4 ? t4.serializeAttribute : void 0, s3 = "object" == typeof t4 && "number" == typeof t4.maxStringLength ? t4.maxStringLength : void 0;
        s3 && s3 > ti && (br && le.warn(`\`dom.maxStringLength\` cannot exceed 1024, but a value of ${s3} was configured. Sentry will use 1024 instead.`), s3 = ti), "string" == typeof o3 && (o3 = [o3]);
        try {
          const e6 = n4.event, t5 = function(e7) {
            return !!e7 && !!e7.target;
          }(e6) ? e6.target : e6;
          r3 = Je(t5, { keyAttrs: o3, maxStringLength: s3 }), i3 = function(e7) {
            if (!Ve.HTMLElement)
              return null;
            let t6 = e7;
            for (let e8 = 0; e8 < 5; e8++) {
              if (!t6)
                return null;
              if (t6 instanceof HTMLElement) {
                if (t6.dataset.sentryComponent)
                  return t6.dataset.sentryComponent;
                if (t6.dataset.sentryElement)
                  return t6.dataset.sentryElement;
              }
              t6 = t6.parentNode;
            }
            return null;
          }(t5);
        } catch (e6) {
          r3 = "<unknown>";
        }
        if (0 === r3.length)
          return;
        const a3 = { category: `ui.${n4.name}`, message: r3 };
        i3 && (a3.data = { "ui.component_name": i3 }), $n(a3, { event: n4.event, name: n4.name, global: n4.global });
      };
    }(e4, t3.dom), be("dom", n3), _e("dom", Fr)), t3.xhr && function(e5) {
      be("xhr", e5), _e("xhr", zr);
    }(function(e5) {
      return function(t4) {
        if (xt() !== e5)
          return;
        const { startTimestamp: n4, endTimestamp: r3 } = t4, i3 = t4.xhr[qr];
        if (!n4 || !r3 || !i3)
          return;
        const { method: o3, url: s3, status_code: a3, body: c3 } = i3, l3 = { method: o3, url: s3, status_code: a3 }, u3 = { xhr: t4.xhr, input: c3, startTimestamp: n4, endTimestamp: r3 };
        $n({ category: "xhr", data: l3, type: "http", level: ar(a3) }, u3);
      };
    }(e4)), t3.fetch && dr(function(e5) {
      return function(t4) {
        if (xt() !== e5)
          return;
        const { startTimestamp: n4, endTimestamp: r3 } = t4;
        if (r3 && (!t4.fetchData.url.match(/sentry_key/) || "POST" !== t4.fetchData.method))
          if (t4.error) {
            $n({ category: "fetch", data: t4.fetchData, level: "error", type: "http" }, { data: t4.error, input: t4.args, startTimestamp: n4, endTimestamp: r3 });
          } else {
            const e6 = t4.response, i3 = { ...t4.fetchData, status_code: e6 && e6.status }, o3 = { input: t4.args, response: e6, startTimestamp: n4, endTimestamp: r3 };
            $n({ category: "fetch", data: i3, type: "http", level: ar(i3.status_code) }, o3);
          }
      };
    }(e4)), t3.history && Ur(function(e5) {
      return function(t4) {
        if (xt() !== e5)
          return;
        let n4 = t4.from, r3 = t4.to;
        const i3 = er(vr.location.href);
        let o3 = n4 ? er(n4) : void 0;
        const s3 = er(r3);
        o3 && o3.path || (o3 = i3), i3.protocol === s3.protocol && i3.host === s3.host && (r3 = s3.relative), i3.protocol === o3.protocol && i3.host === o3.host && (n4 = o3.relative), $n({ category: "navigation", data: { from: n4, to: r3 } });
      };
    }(e4)), t3.sentry && e4.on("beforeSendEvent", function(e5) {
      return function(t4) {
        xt() === e5 && $n({ category: "sentry." + ("transaction" === t4.type ? "transaction" : "event"), event_id: t4.event_id, level: t4.level, message: at(t4) }, { event: t4 });
      };
    }(e4));
  } };
};
var ri = ["EventTarget", "Window", "Node", "ApplicationCache", "AudioTrackList", "BroadcastChannel", "ChannelMergerNode", "CryptoOperation", "EventSource", "FileReader", "HTMLUnknownElement", "IDBDatabase", "IDBRequest", "IDBTransaction", "KeyOperation", "MediaController", "MessagePort", "ModalWindow", "Notification", "SVGElementInstance", "Screen", "SharedWorker", "TextTrack", "TextTrackCue", "TextTrackList", "WebSocket", "WebSocketWorker", "Worker", "XMLHttpRequest", "XMLHttpRequestEventTarget", "XMLHttpRequestUpload"];
var ii = (e3 = {}) => {
  const t3 = { XMLHttpRequest: true, eventTarget: true, requestAnimationFrame: true, setInterval: true, setTimeout: true, ...e3 };
  return { name: "BrowserApiErrors", setupOnce() {
    t3.setTimeout && Ge(vr, "setTimeout", oi), t3.setInterval && Ge(vr, "setInterval", oi), t3.requestAnimationFrame && Ge(vr, "requestAnimationFrame", si), t3.XMLHttpRequest && "XMLHttpRequest" in vr && Ge(XMLHttpRequest.prototype, "send", ai);
    const e4 = t3.eventTarget;
    if (e4) {
      (Array.isArray(e4) ? e4 : ri).forEach(ci);
    }
  } };
};
function oi(e3) {
  return function(...t3) {
    const n3 = t3[0];
    return t3[0] = yr(n3, { mechanism: { data: { function: ve(e3) }, handled: false, type: "instrument" } }), e3.apply(this, t3);
  };
}
function si(e3) {
  return function(t3) {
    return e3.apply(this, [yr(t3, { mechanism: { data: { function: "requestAnimationFrame", handler: ve(e3) }, handled: false, type: "instrument" } })]);
  };
}
function ai(e3) {
  return function(...t3) {
    const n3 = this;
    return ["onload", "onerror", "onprogress", "onreadystatechange"].forEach((e4) => {
      e4 in n3 && "function" == typeof n3[e4] && Ge(n3, e4, function(t4) {
        const n4 = { mechanism: { data: { function: e4, handler: ve(t4) }, handled: false, type: "instrument" } }, r3 = Ye(t4);
        return r3 && (n4.mechanism.data.handler = ve(r3)), yr(t4, n4);
      });
    }), e3.apply(this, t3);
  };
}
function ci(e3) {
  const t3 = vr[e3], n3 = t3 && t3.prototype;
  n3 && n3.hasOwnProperty && n3.hasOwnProperty("addEventListener") && (Ge(n3, "addEventListener", function(t4) {
    return function(n4, r3, i3) {
      try {
        "function" == typeof r3.handleEvent && (r3.handleEvent = yr(r3.handleEvent, { mechanism: { data: { function: "handleEvent", handler: ve(r3), target: e3 }, handled: false, type: "instrument" } }));
      } catch (e4) {
      }
      return t4.apply(this, [n4, yr(r3, { mechanism: { data: { function: "addEventListener", handler: ve(r3), target: e3 }, handled: false, type: "instrument" } }), i3]);
    };
  }), Ge(n3, "removeEventListener", function(e4) {
    return function(t4, n4, r3) {
      try {
        const i3 = n4.__sentry_wrapped__;
        i3 && e4.call(this, t4, i3, r3);
      } catch (e5) {
      }
      return e4.call(this, t4, n4, r3);
    };
  }));
}
var li = () => ({ name: "BrowserSession", setupOnce() {
  void 0 !== vr.document ? (Cn({ ignoreDuration: true }), On(), Ur(({ from: e3, to: t3 }) => {
    void 0 !== e3 && e3 !== t3 && (Cn({ ignoreDuration: true }), On());
  })) : br && le.warn("Using the `browserSessionIntegration` in non-browser environments is not supported.");
} });
var ui = (e3 = {}) => {
  const t3 = { onerror: true, onunhandledrejection: true, ...e3 };
  return { name: "GlobalHandlers", setupOnce() {
    Error.stackTraceLimit = 50;
  }, setup(e4) {
    t3.onerror && (!function(e5) {
      !function(e6) {
        const t4 = "error";
        be(t4, e6), _e(t4, ke);
      }((t4) => {
        const { stackParser: n3, attachStacktrace: r3 } = pi();
        if (xt() !== e5 || mr())
          return;
        const { msg: i3, url: o3, line: s3, column: a3, error: c3 } = t4, l3 = function(e6, t5, n4, r4) {
          const i4 = e6.exception = e6.exception || {}, o4 = i4.values = i4.values || [], s4 = o4[0] = o4[0] || {}, a4 = s4.stacktrace = s4.stacktrace || {}, c4 = a4.frames = a4.frames || [], l4 = r4, u3 = n4, d3 = xe(t5) && t5.length > 0 ? t5 : function() {
            try {
              return Ve.document.location.href;
            } catch (e7) {
              return "";
            }
          }();
          0 === c4.length && c4.push({ colno: l4, filename: d3, function: ue, in_app: true, lineno: u3 });
          return e6;
        }(Or(n3, c3 || i3, void 0, r3, false), o3, s3, a3);
        l3.level = "error", Mn(l3, { originalException: c3, mechanism: { handled: false, type: "onerror" } });
      });
    }(e4), di("onerror")), t3.onunhandledrejection && (!function(e5) {
      !function(e6) {
        const t4 = "unhandledrejection";
        be(t4, e6), _e(t4, Ce);
      }((t4) => {
        const { stackParser: n3, attachStacktrace: r3 } = pi();
        if (xt() !== e5 || mr())
          return;
        const i3 = function(e6) {
          if (De(e6))
            return e6;
          try {
            if ("reason" in e6)
              return e6.reason;
            if ("detail" in e6 && "reason" in e6.detail)
              return e6.detail.reason;
          } catch (e7) {
          }
          return e6;
        }(t4), o3 = De(i3) ? { exception: { values: [{ type: "UnhandledRejection", value: `Non-Error promise rejection captured with value: ${String(i3)}` }] } } : Or(n3, i3, void 0, r3, true);
        o3.level = "error", Mn(o3, { originalException: i3, mechanism: { handled: false, type: "onunhandledrejection" } });
      });
    }(e4), di("onunhandledrejection"));
  } };
};
function di(e3) {
  br && le.log(`Global Handler attached: ${e3}`);
}
function pi() {
  const e3 = xt();
  return e3 && e3.getOptions() || { stackParser: () => [], attachStacktrace: false };
}
var hi = () => ({ name: "HttpContext", preprocessEvent(e3) {
  if (!vr.navigator && !vr.location && !vr.document)
    return;
  const t3 = e3.request && e3.request.url || vr.location && vr.location.href, { referrer: n3 } = vr.document || {}, { userAgent: r3 } = vr.navigator || {}, i3 = { ...e3.request && e3.request.headers, ...n3 && { Referer: n3 }, ...r3 && { "User-Agent": r3 } }, o3 = { ...e3.request, ...t3 && { url: t3 }, headers: i3 };
  e3.request = o3;
} });
var fi = (e3 = {}) => {
  const t3 = e3.limit || 5, n3 = e3.key || "cause";
  return { name: "LinkedErrors", preprocessEvent(e4, r3, i3) {
    const o3 = i3.getOptions();
    Kn(_r, o3.stackParser, o3.maxValueLength, n3, t3, e4, r3);
  } };
};
var vi = "new";
var gi = "loading";
var mi = "loaded";
var yi = "joining-meeting";
var bi = "joined-meeting";
var _i = "left-meeting";
var wi = "error";
var Ti = "playable";
var Oi = "unknown";
var Pi = "full";
var Ii = "base";
var Bi = "no-room";
var Vi = "end-of-life";
var $i = "connection-error";
var Xi = "iframe-ready-for-launch-config";
var Zi = "iframe-launch-config";
var eo = "theme-updated";
var to = "loading";
var no = "load-attempt-failed";
var ro = "loaded";
var io = "started-camera";
var oo = "camera-error";
var so = "joining-meeting";
var ao = "joined-meeting";
var co = "left-meeting";
var lo = "participant-joined";
var uo = "participant-updated";
var po = "participant-left";
var ho = "participant-counts-updated";
var fo = "access-state-updated";
var vo = "meeting-session-summary-updated";
var go = "meeting-session-state-updated";
var yo = "waiting-participant-added";
var bo = "waiting-participant-updated";
var _o = "waiting-participant-removed";
var wo = "track-started";
var So = "track-stopped";
var ko = "transcription-started";
var Mo = "transcription-stopped";
var Co = "transcription-error";
var Eo = "recording-started";
var To = "recording-stopped";
var Oo = "recording-stats";
var Po = "recording-error";
var Ao = "recording-upload-completed";
var jo = "recording-data";
var Io = "app-message";
var xo = "transcription-message";
var Lo = "remote-media-player-started";
var Do = "remote-media-player-updated";
var No = "remote-media-player-stopped";
var Ro = "local-screen-share-started";
var Fo = "local-screen-share-stopped";
var Bo = "local-screen-share-canceled";
var Uo = "active-speaker-change";
var Vo = "active-speaker-mode-change";
var Jo = "network-quality-change";
var $o = "network-connection";
var qo = "cpu-load-change";
var zo = "face-counts-updated";
var Wo = "fullscreen";
var Ho = "exited-fullscreen";
var Go = "live-streaming-started";
var Qo = "live-streaming-updated";
var Ko = "live-streaming-stopped";
var Yo = "live-streaming-error";
var Xo = "lang-updated";
var Zo = "receive-settings-updated";
var es = "input-settings-updated";
var ts = "nonfatal-error";
var ns = "error";
var rs = 4096;
var is = 102400;
var os = "iframe-call-message";
var ss = "local-screen-start";
var as = "daily-method-update-live-streaming-endpoints";
var cs = "transmit-log";
var ls = "daily-custom-track";
var us = { NONE: "none", BGBLUR: "background-blur", BGIMAGE: "background-image", FACE_DETECTION: "face-detection" };
var ds = { NONE: "none", NOISE_CANCELLATION: "noise-cancellation" };
var ps = { PLAY: "play", PAUSE: "pause" };
var hs = ["jpg", "png", "jpeg"];
var fs = "add-endpoints";
var vs = "remove-endpoints";
var gs = "sip-call-transfer";
function ms() {
  return !ys() && "undefined" != typeof window && window.navigator && window.navigator.userAgent ? window.navigator.userAgent : "";
}
function ys() {
  return "undefined" != typeof navigator && navigator.product && "ReactNative" === navigator.product;
}
function bs() {
  return navigator && navigator.mediaDevices && navigator.mediaDevices.getUserMedia;
}
function _s() {
  return !!(navigator && navigator.mediaDevices && navigator.mediaDevices.getDisplayMedia) && (function(e3, t3) {
    if (!e3 || !t3)
      return true;
    switch (e3) {
      case "Chrome":
        return t3.major >= 75;
      case "Safari":
        return RTCRtpTransceiver.prototype.hasOwnProperty("currentDirection") && !(13 === t3.major && 0 === t3.minor && 0 === t3.point);
      case "Firefox":
        return t3.major >= 67;
    }
    return true;
  }(Os(), Ps()) || ys());
}
function ws() {
  if (ys())
    return false;
  if (!document)
    return false;
  var e3 = document.createElement("iframe");
  return !!e3.requestFullscreen || !!e3.webkitRequestFullscreen;
}
var Ss = function() {
  try {
    var e3 = document.createElement("canvas"), t3 = null != (navigator.webdriver ? e3.getContext("webgl2") : e3.getContext("webgl2", { failIfMajorPerformanceCaveat: true }));
    return e3.remove(), t3;
  } catch (e4) {
    return false;
  }
}();
function ks() {
  var e3 = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
  return !ys() && (!!Ss && (e3 ? function() {
    if (Ts())
      return false;
    return ["Chrome", "Firefox"].includes(Os());
  }() : function() {
    if (Ts())
      return false;
    var e4 = Os();
    if ("Safari" === e4) {
      var t3 = xs();
      if (t3.major < 15 || 15 === t3.major && t3.minor < 4)
        return false;
    }
    if ("Chrome" === e4) {
      return As().major >= 77;
    }
    if ("Firefox" === e4) {
      return Ls().major >= 97;
    }
    return ["Chrome", "Firefox", "Safari"].includes(e4);
  }()));
}
function Ms() {
  if (ys())
    return false;
  if (Es())
    return false;
  if ("undefined" == typeof AudioWorkletNode)
    return false;
  switch (Os()) {
    case "Chrome":
    case "Firefox":
      return true;
    case "Safari":
      var e3 = Ps();
      return e3.major > 17 || 17 === e3.major && e3.minor >= 4;
  }
  return false;
}
function Cs() {
  return bs() && !function() {
    var e3, t3 = Os();
    if (!ms())
      return true;
    switch (t3) {
      case "Chrome":
        return (e3 = As()).major && e3.major > 0 && e3.major < 75;
      case "Firefox":
        return (e3 = Ls()).major < 91;
      case "Safari":
        return (e3 = xs()).major < 13 || 13 === e3.major && e3.minor < 1;
      default:
        return true;
    }
  }();
}
function Es() {
  return ms().match(/Linux; Android/);
}
function Ts() {
  var e3, t3 = ms(), n3 = t3.match(/Mac/) && (!ys() && "undefined" != typeof window && null !== (e3 = window) && void 0 !== e3 && null !== (e3 = e3.navigator) && void 0 !== e3 && e3.maxTouchPoints ? window.navigator.maxTouchPoints : 0) >= 5;
  return !!(t3.match(/Mobi/) || t3.match(/Android/) || n3) || (!!ms().match(/DailyAnd\//) || void 0);
}
function Os() {
  if ("undefined" != typeof window) {
    var e3 = ms();
    return js() ? "Safari" : e3.indexOf("Edge") > -1 ? "Edge" : e3.match(/Chrome\//) ? "Chrome" : e3.indexOf("Safari") > -1 || Is() ? "Safari" : e3.indexOf("Firefox") > -1 ? "Firefox" : e3.indexOf("MSIE") > -1 || e3.indexOf(".NET") > -1 ? "IE" : "Unknown Browser";
  }
}
function Ps() {
  switch (Os()) {
    case "Chrome":
      return As();
    case "Safari":
      return xs();
    case "Firefox":
      return Ls();
    case "Edge":
      return function() {
        var e3 = 0, t3 = 0;
        if ("undefined" != typeof window) {
          var n3 = ms().match(/Edge\/(\d+).(\d+)/);
          if (n3)
            try {
              e3 = parseInt(n3[1]), t3 = parseInt(n3[2]);
            } catch (e4) {
            }
        }
        return { major: e3, minor: t3 };
      }();
  }
}
function As() {
  var e3 = 0, t3 = 0, n3 = 0, r3 = 0, i3 = false;
  if ("undefined" != typeof window) {
    var o3 = ms(), s3 = o3.match(/Chrome\/(\d+).(\d+).(\d+).(\d+)/);
    if (s3)
      try {
        e3 = parseInt(s3[1]), t3 = parseInt(s3[2]), n3 = parseInt(s3[3]), r3 = parseInt(s3[4]), i3 = o3.indexOf("OPR/") > -1;
      } catch (e4) {
      }
  }
  return { major: e3, minor: t3, build: n3, patch: r3, opera: i3 };
}
function js() {
  return !!ms().match(/iPad|iPhone|iPod/i) && bs();
}
function Is() {
  return ms().indexOf("AppleWebKit/605.1.15") > -1;
}
function xs() {
  var e3 = 0, t3 = 0, n3 = 0;
  if ("undefined" != typeof window) {
    var r3 = ms().match(/Version\/(\d+).(\d+)(.(\d+))?/);
    if (r3)
      try {
        e3 = parseInt(r3[1]), t3 = parseInt(r3[2]), n3 = parseInt(r3[4]);
      } catch (e4) {
      }
    else
      (js() || Is()) && (e3 = 14, t3 = 0, n3 = 3);
  }
  return { major: e3, minor: t3, point: n3 };
}
function Ls() {
  var e3 = 0, t3 = 0;
  if ("undefined" != typeof window) {
    var n3 = ms().match(/Firefox\/(\d+).(\d+)/);
    if (n3)
      try {
        e3 = parseInt(n3[1]), t3 = parseInt(n3[2]);
      } catch (e4) {
      }
  }
  return { major: e3, minor: t3 };
}
var Ds = function() {
  return o(function e3() {
    t(this, e3);
  }, [{ key: "addListenerForMessagesFromCallMachine", value: function(e3, t3, n3) {
    Y();
  } }, { key: "addListenerForMessagesFromDailyJs", value: function(e3, t3, n3) {
    Y();
  } }, { key: "sendMessageToCallMachine", value: function(e3, t3, n3, r3) {
    Y();
  } }, { key: "sendMessageToDailyJs", value: function(e3, t3) {
    Y();
  } }, { key: "removeListener", value: function(e3) {
    Y();
  } }]);
}();
function Ns(e3, t3) {
  var n3 = Object.keys(e3);
  if (Object.getOwnPropertySymbols) {
    var r3 = Object.getOwnPropertySymbols(e3);
    t3 && (r3 = r3.filter(function(t4) {
      return Object.getOwnPropertyDescriptor(e3, t4).enumerable;
    })), n3.push.apply(n3, r3);
  }
  return n3;
}
function Rs(e3) {
  for (var t3 = 1; t3 < arguments.length; t3++) {
    var n3 = null != arguments[t3] ? arguments[t3] : {};
    t3 % 2 ? Ns(Object(n3), true).forEach(function(t4) {
      u(e3, t4, n3[t4]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(n3)) : Ns(Object(n3)).forEach(function(t4) {
      Object.defineProperty(e3, t4, Object.getOwnPropertyDescriptor(n3, t4));
    });
  }
  return e3;
}
function Fs() {
  try {
    var e3 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
  } catch (e4) {
  }
  return (Fs = function() {
    return !!e3;
  })();
}
var Bs = function() {
  function e3() {
    var n3, r3, i3, o3;
    return t(this, e3), r3 = this, i3 = a(i3 = e3), (n3 = s(r3, Fs() ? Reflect.construct(i3, o3 || [], a(r3).constructor) : i3.apply(r3, o3)))._wrappedListeners = {}, n3._messageCallbacks = {}, n3;
  }
  return l(e3, Ds), o(e3, [{ key: "addListenerForMessagesFromCallMachine", value: function(e4, t3, n3) {
    var r3 = this, i3 = function(i4) {
      if (i4.data && "iframe-call-message" === i4.data.what && (!i4.data.callClientId || i4.data.callClientId === t3) && (!i4.data.from || "module" !== i4.data.from)) {
        var o3 = Rs({}, i4.data);
        if (delete o3.from, o3.callbackStamp && r3._messageCallbacks[o3.callbackStamp]) {
          var s3 = o3.callbackStamp;
          r3._messageCallbacks[s3].call(n3, o3), delete r3._messageCallbacks[s3];
        }
        delete o3.what, delete o3.callbackStamp, e4.call(n3, o3);
      }
    };
    this._wrappedListeners[e4] = i3, window.addEventListener("message", i3);
  } }, { key: "addListenerForMessagesFromDailyJs", value: function(e4, t3, n3) {
    var r3 = function(r4) {
      var i3;
      if (!(!r4.data || r4.data.what !== os || !r4.data.action || r4.data.from && "module" !== r4.data.from || r4.data.callClientId && t3 && r4.data.callClientId !== t3 || null != r4 && null !== (i3 = r4.data) && void 0 !== i3 && i3.callFrameId)) {
        var o3 = r4.data;
        e4.call(n3, o3);
      }
    };
    this._wrappedListeners[e4] = r3, window.addEventListener("message", r3);
  } }, { key: "sendMessageToCallMachine", value: function(e4, t3, n3, r3) {
    if (!n3)
      throw new Error("undefined callClientId. Are you trying to use a DailyCall instance previously destroyed?");
    var i3 = Rs({}, e4);
    if (i3.what = os, i3.from = "module", i3.callClientId = n3, t3) {
      var o3 = K();
      this._messageCallbacks[o3] = t3, i3.callbackStamp = o3;
    }
    var s3 = r3 ? r3.contentWindow : window, a3 = this._callMachineTargetOrigin(r3);
    a3 && s3.postMessage(i3, a3);
  } }, { key: "sendMessageToDailyJs", value: function(e4, t3) {
    e4.what = os, e4.callClientId = t3, e4.from = "embedded", window.postMessage(e4, this._targetOriginFromWindowLocation());
  } }, { key: "removeListener", value: function(e4) {
    var t3 = this._wrappedListeners[e4];
    t3 && (window.removeEventListener("message", t3), delete this._wrappedListeners[e4]);
  } }, { key: "forwardPackagedMessageToCallMachine", value: function(e4, t3, n3) {
    var r3 = Rs({}, e4);
    r3.callClientId = n3;
    var i3 = t3 ? t3.contentWindow : window, o3 = this._callMachineTargetOrigin(t3);
    o3 && i3.postMessage(r3, o3);
  } }, { key: "addListenerForPackagedMessagesFromCallMachine", value: function(e4, t3) {
    var n3 = function(n4) {
      if (n4.data && "iframe-call-message" === n4.data.what && (!n4.data.callClientId || n4.data.callClientId === t3) && (!n4.data.from || "module" !== n4.data.from)) {
        var r3 = n4.data;
        e4(r3);
      }
    };
    return this._wrappedListeners[e4] = n3, window.addEventListener("message", n3), e4;
  } }, { key: "removeListenerForPackagedMessagesFromCallMachine", value: function(e4) {
    var t3 = this._wrappedListeners[e4];
    t3 && (window.removeEventListener("message", t3), delete this._wrappedListeners[e4]);
  } }, { key: "_callMachineTargetOrigin", value: function(e4) {
    return e4 ? e4.src ? new URL(e4.src).origin : void 0 : this._targetOriginFromWindowLocation();
  } }, { key: "_targetOriginFromWindowLocation", value: function() {
    return "file:" === window.location.protocol ? "*" : window.location.origin;
  } }]);
}();
function Us(e3, t3) {
  var n3 = Object.keys(e3);
  if (Object.getOwnPropertySymbols) {
    var r3 = Object.getOwnPropertySymbols(e3);
    t3 && (r3 = r3.filter(function(t4) {
      return Object.getOwnPropertyDescriptor(e3, t4).enumerable;
    })), n3.push.apply(n3, r3);
  }
  return n3;
}
function Vs() {
  try {
    var e3 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
  } catch (e4) {
  }
  return (Vs = function() {
    return !!e3;
  })();
}
var Js = function() {
  function e3() {
    var n3, r3, i3, o3;
    return t(this, e3), r3 = this, i3 = a(i3 = e3), n3 = s(r3, Vs() ? Reflect.construct(i3, o3 || [], a(r3).constructor) : i3.apply(r3, o3)), global.callMachineToDailyJsEmitter = global.callMachineToDailyJsEmitter || new I.EventEmitter(), global.dailyJsToCallMachineEmitter = global.dailyJsToCallMachineEmitter || new I.EventEmitter(), n3._wrappedListeners = {}, n3._messageCallbacks = {}, n3;
  }
  return l(e3, Ds), o(e3, [{ key: "addListenerForMessagesFromCallMachine", value: function(e4, t3, n3) {
    this._addListener(e4, global.callMachineToDailyJsEmitter, t3, n3, "received call machine message");
  } }, { key: "addListenerForMessagesFromDailyJs", value: function(e4, t3, n3) {
    this._addListener(e4, global.dailyJsToCallMachineEmitter, t3, n3, "received daily-js message");
  } }, { key: "sendMessageToCallMachine", value: function(e4, t3, n3) {
    this._sendMessage(e4, global.dailyJsToCallMachineEmitter, n3, t3, "sending message to call machine");
  } }, { key: "sendMessageToDailyJs", value: function(e4, t3) {
    this._sendMessage(e4, global.callMachineToDailyJsEmitter, t3, null, "sending message to daily-js");
  } }, { key: "removeListener", value: function(e4) {
    var t3 = this._wrappedListeners[e4];
    t3 && (global.callMachineToDailyJsEmitter.removeListener("message", t3), global.dailyJsToCallMachineEmitter.removeListener("message", t3), delete this._wrappedListeners[e4]);
  } }, { key: "_addListener", value: function(e4, t3, n3, r3, i3) {
    var o3 = this, s3 = function(t4) {
      if (t4.callClientId === n3) {
        if (t4.callbackStamp && o3._messageCallbacks[t4.callbackStamp]) {
          var i4 = t4.callbackStamp;
          o3._messageCallbacks[i4].call(r3, t4), delete o3._messageCallbacks[i4];
        }
        e4.call(r3, t4);
      }
    };
    this._wrappedListeners[e4] = s3, t3.addListener("message", s3);
  } }, { key: "_sendMessage", value: function(e4, t3, n3, r3, i3) {
    var o3 = function(e5) {
      for (var t4 = 1; t4 < arguments.length; t4++) {
        var n4 = null != arguments[t4] ? arguments[t4] : {};
        t4 % 2 ? Us(Object(n4), true).forEach(function(t5) {
          u(e5, t5, n4[t5]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e5, Object.getOwnPropertyDescriptors(n4)) : Us(Object(n4)).forEach(function(t5) {
          Object.defineProperty(e5, t5, Object.getOwnPropertyDescriptor(n4, t5));
        });
      }
      return e5;
    }({}, e4);
    if (o3.callClientId = n3, r3) {
      var s3 = K();
      this._messageCallbacks[s3] = r3, o3.callbackStamp = s3;
    }
    t3.emit("message", o3);
  } }]);
}();
var $s = "replace";
var qs = "shallow-merge";
var zs = [$s, qs];
var Ws = function() {
  function e3() {
    var n3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, r3 = n3.data, i3 = n3.mergeStrategy, o3 = void 0 === i3 ? $s : i3;
    t(this, e3), e3._validateMergeStrategy(o3), e3._validateData(r3, o3), this.mergeStrategy = o3, this.data = r3;
  }
  return o(e3, [{ key: "isNoOp", value: function() {
    return e3.isNoOpUpdate(this.data, this.mergeStrategy);
  } }], [{ key: "isNoOpUpdate", value: function(e4, t3) {
    return 0 === Object.keys(e4).length && t3 === qs;
  } }, { key: "_validateMergeStrategy", value: function(e4) {
    if (!zs.includes(e4))
      throw Error("Unrecognized mergeStrategy provided. Options are: [".concat(zs, "]"));
  } }, { key: "_validateData", value: function(e4, t3) {
    if (!function(e5) {
      if (null == e5 || "object" !== n(e5))
        return false;
      var t4 = Object.getPrototypeOf(e5);
      return null == t4 || t4 === Object.prototype;
    }(e4))
      throw Error("Meeting session data must be a plain (map-like) object");
    var r3;
    try {
      if (r3 = JSON.stringify(e4), t3 === $s) {
        var i3 = JSON.parse(r3);
        N(i3, e4) || console.warn("The meeting session data provided will be modified when serialized.", i3, e4);
      } else if (t3 === qs) {
        for (var o3 in e4)
          if (Object.hasOwnProperty.call(e4, o3) && void 0 !== e4[o3]) {
            var s3 = JSON.parse(JSON.stringify(e4[o3]));
            N(e4[o3], s3) || console.warn("At least one key in the meeting session data provided will be modified when serialized.", s3, e4[o3]);
          }
      }
    } catch (e5) {
      throw Error("Meeting session data must be serializable to JSON: ".concat(e5));
    }
    if (r3.length > is)
      throw Error("Meeting session data is too large (".concat(r3.length, " characters). Maximum size suppported is ").concat(is, "."));
  } }]);
}();
function Hs() {
  try {
    var e3 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
  } catch (e4) {
  }
  return (Hs = function() {
    return !!e3;
  })();
}
function Gs(e3) {
  var t3 = "function" == typeof Map ? /* @__PURE__ */ new Map() : void 0;
  return Gs = function(e4) {
    if (null === e4 || !function(e5) {
      try {
        return -1 !== Function.toString.call(e5).indexOf("[native code]");
      } catch (t4) {
        return "function" == typeof e5;
      }
    }(e4))
      return e4;
    if ("function" != typeof e4)
      throw new TypeError("Super expression must either be null or a function");
    if (void 0 !== t3) {
      if (t3.has(e4))
        return t3.get(e4);
      t3.set(e4, n3);
    }
    function n3() {
      return function(e5, t4, n4) {
        if (Hs())
          return Reflect.construct.apply(null, arguments);
        var r3 = [null];
        r3.push.apply(r3, t4);
        var i3 = new (e5.bind.apply(e5, r3))();
        return n4 && c(i3, n4.prototype), i3;
      }(e4, arguments, a(this).constructor);
    }
    return n3.prototype = Object.create(e4.prototype, { constructor: { value: n3, enumerable: false, writable: true, configurable: true } }), c(n3, e4);
  }, Gs(e3);
}
function Qs() {
  try {
    var e3 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
  } catch (e4) {
  }
  return (Qs = function() {
    return !!e3;
  })();
}
function Ks(e3) {
  var t3, n3 = null === (t3 = window._daily) || void 0 === t3 ? void 0 : t3.pendings;
  if (n3) {
    var r3 = n3.indexOf(e3);
    -1 !== r3 && n3.splice(r3, 1);
  }
}
var Ys = function() {
  return o(function e3(n3) {
    t(this, e3), this._currentLoad = null, this._callClientId = n3;
  }, [{ key: "load", value: function() {
    var e3, t3 = this, n3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, r3 = arguments.length > 1 ? arguments[1] : void 0, i3 = arguments.length > 2 ? arguments[2] : void 0;
    if (this.loaded)
      return window._daily.instances[this._callClientId].callMachine.reset(), void r3(true);
    e3 = this._callClientId, window._daily.pendings.push(e3), this._currentLoad && this._currentLoad.cancel(), this._currentLoad = new Xs(n3, function() {
      r3(false);
    }, function(e4, n4) {
      n4 || Ks(t3._callClientId), i3(e4, n4);
    }), this._currentLoad.start();
  } }, { key: "cancel", value: function() {
    this._currentLoad && this._currentLoad.cancel(), Ks(this._callClientId);
  } }, { key: "loaded", get: function() {
    return this._currentLoad && this._currentLoad.succeeded;
  } }]);
}();
var Xs = function() {
  return o(function e3() {
    var n3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, r3 = arguments.length > 1 ? arguments[1] : void 0, i3 = arguments.length > 2 ? arguments[2] : void 0;
    t(this, e3), this._attemptsRemaining = 3, this._currentAttempt = null, this._dailyConfig = n3, this._successCallback = r3, this._failureCallback = i3;
  }, [{ key: "start", value: function() {
    var e3 = this;
    if (!this._currentAttempt) {
      var t3 = function(n3) {
        e3._currentAttempt.cancelled || (e3._attemptsRemaining--, e3._failureCallback(n3, e3._attemptsRemaining > 0), e3._attemptsRemaining <= 0 || setTimeout(function() {
          e3._currentAttempt.cancelled || (e3._currentAttempt = new ta(e3._dailyConfig, e3._successCallback, t3), e3._currentAttempt.start());
        }, 3e3));
      };
      this._currentAttempt = new ta(this._dailyConfig, this._successCallback, t3), this._currentAttempt.start();
    }
  } }, { key: "cancel", value: function() {
    this._currentAttempt && this._currentAttempt.cancel();
  } }, { key: "cancelled", get: function() {
    return this._currentAttempt && this._currentAttempt.cancelled;
  } }, { key: "succeeded", get: function() {
    return this._currentAttempt && this._currentAttempt.succeeded;
  } }]);
}();
var Zs = function() {
  function e3() {
    return t(this, e3), n3 = this, i3 = arguments, r3 = a(r3 = e3), s(n3, Qs() ? Reflect.construct(r3, i3 || [], a(n3).constructor) : r3.apply(n3, i3));
    var n3, r3, i3;
  }
  return l(e3, Gs(Error)), o(e3);
}();
var ea = 2e4;
var ta = function() {
  return o(function e4(n3, r3, i3) {
    t(this, e4), this._loadAttemptImpl = ys() || !n3.avoidEval ? new na(n3, r3, i3) : new ra(n3, r3, i3);
  }, [{ key: "start", value: (e3 = p(function* () {
    return this._loadAttemptImpl.start();
  }), function() {
    return e3.apply(this, arguments);
  }) }, { key: "cancel", value: function() {
    this._loadAttemptImpl.cancel();
  } }, { key: "cancelled", get: function() {
    return this._loadAttemptImpl.cancelled;
  } }, { key: "succeeded", get: function() {
    return this._loadAttemptImpl.succeeded;
  } }]);
  var e3;
}();
var na = function() {
  return o(function e4(n4, r4, i4) {
    t(this, e4), this.cancelled = false, this.succeeded = false, this._networkTimedOut = false, this._networkTimeout = null, this._iosCache = "undefined" != typeof iOSCallObjectBundleCache && iOSCallObjectBundleCache, this._refetchHeaders = null, this._dailyConfig = n4, this._successCallback = r4, this._failureCallback = i4;
  }, [{ key: "start", value: (i3 = p(function* () {
    var e4 = Z(this._dailyConfig);
    !(yield this._tryLoadFromIOSCache(e4)) && this._loadFromNetwork(e4);
  }), function() {
    return i3.apply(this, arguments);
  }) }, { key: "cancel", value: function() {
    clearTimeout(this._networkTimeout), this.cancelled = true;
  } }, { key: "_tryLoadFromIOSCache", value: (r3 = p(function* (e4) {
    if (!this._iosCache)
      return false;
    try {
      var t3 = yield this._iosCache.get(e4);
      return !!this.cancelled || !!t3 && (t3.code ? (Function('"use strict";' + t3.code)(), this.succeeded = true, this._successCallback(), true) : (this._refetchHeaders = t3.refetchHeaders, false));
    } catch (e5) {
      return false;
    }
  }), function(e4) {
    return r3.apply(this, arguments);
  }) }, { key: "_loadFromNetwork", value: (n3 = p(function* (e4) {
    var t3 = this;
    this._networkTimeout = setTimeout(function() {
      t3._networkTimedOut = true, t3._failureCallback({ msg: "Timed out (>".concat(ea, " ms) when loading call object bundle ").concat(e4), type: "timeout" });
    }, ea);
    try {
      var n4 = this._refetchHeaders ? { headers: this._refetchHeaders } : {}, r4 = yield fetch(e4, n4);
      if (clearTimeout(this._networkTimeout), this.cancelled || this._networkTimedOut)
        throw new Zs();
      var i4 = yield this._getBundleCodeFromResponse(e4, r4);
      if (this.cancelled)
        throw new Zs();
      Function('"use strict";' + i4)(), this._iosCache && this._iosCache.set(e4, i4, r4.headers), this.succeeded = true, this._successCallback();
    } catch (t4) {
      if (clearTimeout(this._networkTimeout), t4 instanceof Zs || this.cancelled || this._networkTimedOut)
        return;
      this._failureCallback({ msg: "Failed to load call object bundle ".concat(e4, ": ").concat(t4), type: t4.message });
    }
  }), function(e4) {
    return n3.apply(this, arguments);
  }) }, { key: "_getBundleCodeFromResponse", value: (e3 = p(function* (e4, t3) {
    if (t3.ok)
      return yield t3.text();
    if (this._iosCache && 304 === t3.status)
      return (yield this._iosCache.renew(e4, t3.headers)).code;
    throw new Error("Received ".concat(t3.status, " response"));
  }), function(t3, n4) {
    return e3.apply(this, arguments);
  }) }]);
  var e3, n3, r3, i3;
}();
var ra = function() {
  return o(function e3(n3, r3, i3) {
    t(this, e3), this.cancelled = false, this.succeeded = false, this._dailyConfig = n3, this._successCallback = r3, this._failureCallback = i3, this._attemptId = K(), this._networkTimeout = null, this._scriptElement = null;
  }, [{ key: "start", value: function() {
    window._dailyCallMachineLoadWaitlist || (window._dailyCallMachineLoadWaitlist = /* @__PURE__ */ new Set());
    var e3 = Z(this._dailyConfig);
    "object" === ("undefined" == typeof document ? "undefined" : n(document)) ? this._startLoading(e3) : this._failureCallback({ msg: "Call object bundle must be loaded in a DOM/web context", type: "missing context" });
  } }, { key: "cancel", value: function() {
    this._stopLoading(), this.cancelled = true;
  } }, { key: "_startLoading", value: function(e3) {
    var t3 = this;
    this._signUpForCallMachineLoadWaitlist(), this._networkTimeout = setTimeout(function() {
      t3._stopLoading(), t3._failureCallback({ msg: "Timed out (>".concat(ea, " ms) when loading call object bundle ").concat(e3), type: "timeout" });
    }, ea);
    var n3 = document.getElementsByTagName("head")[0], r3 = document.createElement("script");
    this._scriptElement = r3, r3.onload = function() {
      t3._stopLoading(), t3.succeeded = true, t3._successCallback();
    }, r3.onerror = function(e4) {
      t3._stopLoading(), t3._failureCallback({ msg: "Failed to load call object bundle ".concat(e4.target.src), type: e4.message });
    }, r3.src = e3, n3.appendChild(r3);
  } }, { key: "_stopLoading", value: function() {
    this._withdrawFromCallMachineLoadWaitlist(), clearTimeout(this._networkTimeout), this._scriptElement && (this._scriptElement.onload = null, this._scriptElement.onerror = null);
  } }, { key: "_signUpForCallMachineLoadWaitlist", value: function() {
    window._dailyCallMachineLoadWaitlist.add(this._attemptId);
  } }, { key: "_withdrawFromCallMachineLoadWaitlist", value: function() {
    window._dailyCallMachineLoadWaitlist.delete(this._attemptId);
  } }]);
}();
var ia = function(e3, t3, n3) {
  return true === aa(e3.local, t3, n3);
};
var oa = function(e3, t3, n3) {
  return e3.local.streams && e3.local.streams[t3] && e3.local.streams[t3].stream && e3.local.streams[t3].stream["get".concat("video" === n3 ? "Video" : "Audio", "Tracks")]()[0];
};
var sa = function(e3, t3, n3, r3) {
  var i3 = ca(e3, t3, n3, r3);
  return i3 && i3.pendingTrack;
};
var aa = function(e3, t3, n3) {
  if (!e3)
    return false;
  var r3 = function(e4) {
    switch (e4) {
      case "avatar":
        return true;
      case "staged":
        return e4;
      default:
        return !!e4;
    }
  }, i3 = e3.public.subscribedTracks;
  return i3 && i3[t3] ? -1 === ["cam-audio", "cam-video", "screen-video", "screen-audio", "rmpAudio", "rmpVideo"].indexOf(n3) && i3[t3].custom ? [true, "staged"].includes(i3[t3].custom) ? r3(i3[t3].custom) : r3(i3[t3].custom[n3]) : r3(i3[t3][n3]) : !i3 || r3(i3.ALL);
};
var ca = function(e3, t3, n3, r3) {
  var i3 = Object.values(e3.streams || {}).filter(function(e4) {
    return e4.participantId === t3 && e4.type === n3 && e4.pendingTrack && e4.pendingTrack.kind === r3;
  }).sort(function(e4, t4) {
    return new Date(t4.starttime) - new Date(e4.starttime);
  });
  return i3 && i3[0];
};
var la = function(e3, t3) {
  var n3 = e3.local.public.customTracks;
  if (n3 && n3[t3])
    return n3[t3].track;
};
function ua(e3, t3) {
  for (var n3 = t3.getState(), r3 = 0, i3 = ["cam", "screen"]; r3 < i3.length; r3++)
    for (var o3 = i3[r3], s3 = 0, a3 = ["video", "audio"]; s3 < a3.length; s3++) {
      var c3 = a3[s3], l3 = "cam" === o3 ? c3 : "screen".concat(c3.charAt(0).toUpperCase() + c3.slice(1)), u3 = e3.tracks[l3];
      if (u3) {
        var d3 = e3.local ? oa(n3, o3, c3) : sa(n3, e3.session_id, o3, c3);
        "playable" === u3.state && (u3.track = d3), u3.persistentTrack = d3;
      }
    }
}
function da(e3, t3) {
  try {
    var n3 = t3.getState();
    for (var r3 in e3.tracks)
      if (!pa(r3)) {
        var i3 = e3.tracks[r3].kind;
        if (i3) {
          var o3 = e3.tracks[r3];
          if (o3) {
            var s3 = e3.local ? la(n3, r3) : sa(n3, e3.session_id, r3, i3);
            "playable" === o3.state && (e3.tracks[r3].track = s3), o3.persistentTrack = s3;
          }
        } else
          console.error("unknown type for custom track");
      }
  } catch (e4) {
    console.error(e4);
  }
}
function pa(e3) {
  return ["video", "audio", "screenVideo", "screenAudio"].includes(e3);
}
function ha(e3, t3, n3) {
  var r3 = n3.getState();
  if (e3.local) {
    if (e3.audio)
      try {
        e3.audioTrack = r3.local.streams.cam.stream.getAudioTracks()[0], e3.audioTrack || (e3.audio = false);
      } catch (e4) {
      }
    if (e3.video)
      try {
        e3.videoTrack = r3.local.streams.cam.stream.getVideoTracks()[0], e3.videoTrack || (e3.video = false);
      } catch (e4) {
      }
    if (e3.screen)
      try {
        e3.screenVideoTrack = r3.local.streams.screen.stream.getVideoTracks()[0], e3.screenAudioTrack = r3.local.streams.screen.stream.getAudioTracks()[0], e3.screenVideoTrack || e3.screenAudioTrack || (e3.screen = false);
      } catch (e4) {
      }
  } else {
    var i3 = true;
    try {
      var o3 = r3.participants[e3.session_id];
      o3 && o3.public && o3.public.rtcType && "peer-to-peer" === o3.public.rtcType.impl && o3.private && !["connected", "completed"].includes(o3.private.peeringState) && (i3 = false);
    } catch (e4) {
      console.error(e4);
    }
    if (!i3)
      return e3.audio = false, e3.audioTrack = false, e3.video = false, e3.videoTrack = false, e3.screen = false, void (e3.screenTrack = false);
    try {
      r3.streams;
      if (e3.audio && ia(r3, e3.session_id, "cam-audio")) {
        var s3 = sa(r3, e3.session_id, "cam", "audio");
        s3 && (t3 && t3.audioTrack && t3.audioTrack.id === s3.id ? e3.audioTrack = s3 : s3.muted || (e3.audioTrack = s3)), e3.audioTrack || (e3.audio = false);
      }
      if (e3.video && ia(r3, e3.session_id, "cam-video")) {
        var a3 = sa(r3, e3.session_id, "cam", "video");
        a3 && (t3 && t3.videoTrack && t3.videoTrack.id === a3.id ? e3.videoTrack = a3 : a3.muted || (e3.videoTrack = a3)), e3.videoTrack || (e3.video = false);
      }
      if (e3.screen && ia(r3, e3.session_id, "screen-audio")) {
        var c3 = sa(r3, e3.session_id, "screen", "audio");
        c3 && (t3 && t3.screenAudioTrack && t3.screenAudioTrack.id === c3.id ? e3.screenAudioTrack = c3 : c3.muted || (e3.screenAudioTrack = c3));
      }
      if (e3.screen && ia(r3, e3.session_id, "screen-video")) {
        var l3 = sa(r3, e3.session_id, "screen", "video");
        l3 && (t3 && t3.screenVideoTrack && t3.screenVideoTrack.id === l3.id ? e3.screenVideoTrack = l3 : l3.muted || (e3.screenVideoTrack = l3));
      }
      e3.screenVideoTrack || e3.screenAudioTrack || (e3.screen = false);
    } catch (e4) {
      console.error("unexpected error matching up tracks", e4);
    }
  }
}
function fa(e3, t3) {
  var n3 = "undefined" != typeof Symbol && e3[Symbol.iterator] || e3["@@iterator"];
  if (!n3) {
    if (Array.isArray(e3) || (n3 = function(e4, t4) {
      if (e4) {
        if ("string" == typeof e4)
          return va(e4, t4);
        var n4 = {}.toString.call(e4).slice(8, -1);
        return "Object" === n4 && e4.constructor && (n4 = e4.constructor.name), "Map" === n4 || "Set" === n4 ? Array.from(e4) : "Arguments" === n4 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n4) ? va(e4, t4) : void 0;
      }
    }(e3)) || t3 && e3 && "number" == typeof e3.length) {
      n3 && (e3 = n3);
      var r3 = 0, i3 = function() {
      };
      return { s: i3, n: function() {
        return r3 >= e3.length ? { done: true } : { done: false, value: e3[r3++] };
      }, e: function(e4) {
        throw e4;
      }, f: i3 };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var o3, s3 = true, a3 = false;
  return { s: function() {
    n3 = n3.call(e3);
  }, n: function() {
    var e4 = n3.next();
    return s3 = e4.done, e4;
  }, e: function(e4) {
    a3 = true, o3 = e4;
  }, f: function() {
    try {
      s3 || null == n3.return || n3.return();
    } finally {
      if (a3)
        throw o3;
    }
  } };
}
function va(e3, t3) {
  (null == t3 || t3 > e3.length) && (t3 = e3.length);
  for (var n3 = 0, r3 = Array(t3); n3 < t3; n3++)
    r3[n3] = e3[n3];
  return r3;
}
var ga = /* @__PURE__ */ new Map();
var ma = null;
function ya(e3, t3) {
  var n3 = "undefined" != typeof Symbol && e3[Symbol.iterator] || e3["@@iterator"];
  if (!n3) {
    if (Array.isArray(e3) || (n3 = function(e4, t4) {
      if (e4) {
        if ("string" == typeof e4)
          return ba(e4, t4);
        var n4 = {}.toString.call(e4).slice(8, -1);
        return "Object" === n4 && e4.constructor && (n4 = e4.constructor.name), "Map" === n4 || "Set" === n4 ? Array.from(e4) : "Arguments" === n4 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n4) ? ba(e4, t4) : void 0;
      }
    }(e3)) || t3 && e3 && "number" == typeof e3.length) {
      n3 && (e3 = n3);
      var r3 = 0, i3 = function() {
      };
      return { s: i3, n: function() {
        return r3 >= e3.length ? { done: true } : { done: false, value: e3[r3++] };
      }, e: function(e4) {
        throw e4;
      }, f: i3 };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var o3, s3 = true, a3 = false;
  return { s: function() {
    n3 = n3.call(e3);
  }, n: function() {
    var e4 = n3.next();
    return s3 = e4.done, e4;
  }, e: function(e4) {
    a3 = true, o3 = e4;
  }, f: function() {
    try {
      s3 || null == n3.return || n3.return();
    } finally {
      if (a3)
        throw o3;
    }
  } };
}
function ba(e3, t3) {
  (null == t3 || t3 > e3.length) && (t3 = e3.length);
  for (var n3 = 0, r3 = Array(t3); n3 < t3; n3++)
    r3[n3] = e3[n3];
  return r3;
}
var _a = /* @__PURE__ */ new Map();
var wa = null;
function Sa(e3) {
  Ma() ? function(e4) {
    ga.has(e4) || (ga.set(e4, {}), navigator.mediaDevices.enumerateDevices().then(function(t3) {
      ga.has(e4) && (ga.get(e4).lastDevicesString = JSON.stringify(t3), ma || (ma = function() {
        var e5 = p(function* () {
          var e6, t4 = yield navigator.mediaDevices.enumerateDevices(), n3 = fa(ga.keys());
          try {
            for (n3.s(); !(e6 = n3.n()).done; ) {
              var r3 = e6.value, i3 = JSON.stringify(t4);
              i3 !== ga.get(r3).lastDevicesString && (ga.get(r3).lastDevicesString = i3, r3(t4));
            }
          } catch (e7) {
            n3.e(e7);
          } finally {
            n3.f();
          }
        });
        return function() {
          return e5.apply(this, arguments);
        };
      }(), navigator.mediaDevices.addEventListener("devicechange", ma)));
    }).catch(function() {
    }));
  }(e3) : function(e4) {
    _a.has(e4) || (_a.set(e4, {}), navigator.mediaDevices.enumerateDevices().then(function(t3) {
      _a.has(e4) && (_a.get(e4).lastDevicesString = JSON.stringify(t3), wa || (wa = setInterval(p(function* () {
        var e5, t4 = yield navigator.mediaDevices.enumerateDevices(), n3 = ya(_a.keys());
        try {
          for (n3.s(); !(e5 = n3.n()).done; ) {
            var r3 = e5.value, i3 = JSON.stringify(t4);
            i3 !== _a.get(r3).lastDevicesString && (_a.get(r3).lastDevicesString = i3, r3(t4));
          }
        } catch (e6) {
          n3.e(e6);
        } finally {
          n3.f();
        }
      }), 3e3)));
    }));
  }(e3);
}
function ka(e3) {
  Ma() ? function(e4) {
    ga.has(e4) && (ga.delete(e4), 0 === ga.size && ma && (navigator.mediaDevices.removeEventListener("devicechange", ma), ma = null));
  }(e3) : function(e4) {
    _a.has(e4) && (_a.delete(e4), 0 === _a.size && wa && (clearInterval(wa), wa = null));
  }(e3);
}
function Ma() {
  var e3;
  return ys() || void 0 !== (null === (e3 = navigator.mediaDevices) || void 0 === e3 ? void 0 : e3.ondevicechange);
}
var Ca = /* @__PURE__ */ new Set();
function Ea(e3, t3) {
  var n3 = t3.isLocalScreenVideo;
  return e3 && "live" === e3.readyState && !function(e4, t4) {
    return (!t4.isLocalScreenVideo || "Chrome" !== Os()) && e4.muted && !Ca.has(e4.id);
  }(e3, { isLocalScreenVideo: n3 });
}
function Ta(e3, t3) {
  var n3 = Object.keys(e3);
  if (Object.getOwnPropertySymbols) {
    var r3 = Object.getOwnPropertySymbols(e3);
    t3 && (r3 = r3.filter(function(t4) {
      return Object.getOwnPropertyDescriptor(e3, t4).enumerable;
    })), n3.push.apply(n3, r3);
  }
  return n3;
}
function Oa(e3) {
  for (var t3 = 1; t3 < arguments.length; t3++) {
    var n3 = null != arguments[t3] ? arguments[t3] : {};
    t3 % 2 ? Ta(Object(n3), true).forEach(function(t4) {
      u(e3, t4, n3[t4]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(n3)) : Ta(Object(n3)).forEach(function(t4) {
      Object.defineProperty(e3, t4, Object.getOwnPropertyDescriptor(n3, t4));
    });
  }
  return e3;
}
var Pa = Object.freeze({ VIDEO: "video", AUDIO: "audio", SCREEN_VIDEO: "screenVideo", SCREEN_AUDIO: "screenAudio", CUSTOM_VIDEO: "customVideo", CUSTOM_AUDIO: "customAudio" });
var Aa = Object.freeze({ PARTICIPANTS: "participants", STREAMING: "streaming", TRANSCRIPTION: "transcription" });
var ja = Object.values(Pa);
var Ia = ["v", "a", "sv", "sa", "cv", "ca"];
Object.freeze(ja.reduce(function(e3, t3, n3) {
  return e3[t3] = Ia[n3], e3;
}, {})), Object.freeze(Ia.reduce(function(e3, t3, n3) {
  return e3[t3] = ja[n3], e3;
}, {}));
var xa = [Pa.VIDEO, Pa.AUDIO, Pa.SCREEN_VIDEO, Pa.SCREEN_AUDIO];
var La = Object.values(Aa);
var Da = ["p", "s", "t"];
Object.freeze(La.reduce(function(e3, t3, n3) {
  return e3[t3] = Da[n3], e3;
}, {})), Object.freeze(Da.reduce(function(e3, t3, n3) {
  return e3[t3] = La[n3], e3;
}, {}));
var Na = function() {
  function e3() {
    var n3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, r3 = n3.base, i3 = n3.byUserId, o3 = n3.byParticipantId;
    t(this, e3), this.base = r3, this.byUserId = i3, this.byParticipantId = o3;
  }
  return o(e3, [{ key: "clone", value: function() {
    var t3 = new e3();
    if (this.base instanceof Ra ? t3.base = this.base.clone() : t3.base = this.base, void 0 !== this.byUserId)
      for (var n3 in t3.byUserId = {}, this.byUserId) {
        var r3 = this.byUserId[n3];
        t3.byUserId[n3] = r3 instanceof Ra ? r3.clone() : r3;
      }
    if (void 0 !== this.byParticipantId)
      for (var i3 in t3.byParticipantId = {}, this.byParticipantId) {
        var o3 = this.byParticipantId[i3];
        t3.byParticipantId[i3] = o3 instanceof Ra ? o3.clone() : o3;
      }
    return t3;
  } }, { key: "toJSONObject", value: function() {
    var e4 = {};
    if ("boolean" == typeof this.base ? e4.base = this.base : this.base instanceof Ra && (e4.base = this.base.toJSONObject()), void 0 !== this.byUserId)
      for (var t3 in e4.byUserId = {}, this.byUserId) {
        var n3 = this.byUserId[t3];
        e4.byUserId[t3] = n3 instanceof Ra ? n3.toJSONObject() : n3;
      }
    if (void 0 !== this.byParticipantId)
      for (var r3 in e4.byParticipantId = {}, this.byParticipantId) {
        var i3 = this.byParticipantId[r3];
        e4.byParticipantId[r3] = i3 instanceof Ra ? i3.toJSONObject() : i3;
      }
    return e4;
  } }, { key: "toMinifiedJSONObject", value: function() {
    var e4 = {};
    if (void 0 !== this.base && ("boolean" == typeof this.base ? e4.b = this.base : e4.b = this.base.toMinifiedJSONObject()), void 0 !== this.byUserId)
      for (var t3 in e4.u = {}, this.byUserId) {
        var n3 = this.byUserId[t3];
        e4.u[t3] = "boolean" == typeof n3 ? n3 : n3.toMinifiedJSONObject();
      }
    if (void 0 !== this.byParticipantId)
      for (var r3 in e4.p = {}, this.byParticipantId) {
        var i3 = this.byParticipantId[r3];
        e4.p[r3] = "boolean" == typeof i3 ? i3 : i3.toMinifiedJSONObject();
      }
    return e4;
  } }, { key: "normalize", value: function() {
    return this.base instanceof Ra && (this.base = this.base.normalize()), this.byUserId && (this.byUserId = Object.fromEntries(Object.entries(this.byUserId).map(function(e4) {
      var t3 = f(e4, 2), n3 = t3[0], r3 = t3[1];
      return [n3, r3 instanceof Ra ? r3.normalize() : r3];
    }))), this.byParticipantId && (this.byParticipantId = Object.fromEntries(Object.entries(this.byParticipantId).map(function(e4) {
      var t3 = f(e4, 2), n3 = t3[0], r3 = t3[1];
      return [n3, r3 instanceof Ra ? r3.normalize() : r3];
    }))), this;
  } }], [{ key: "fromJSONObject", value: function(t3) {
    var n3, r3, i3;
    if (void 0 !== t3.base && (n3 = "boolean" == typeof t3.base ? t3.base : Ra.fromJSONObject(t3.base)), void 0 !== t3.byUserId)
      for (var o3 in r3 = {}, t3.byUserId) {
        var s3 = t3.byUserId[o3];
        r3[o3] = "boolean" == typeof s3 ? s3 : Ra.fromJSONObject(s3);
      }
    if (void 0 !== t3.byParticipantId)
      for (var a3 in i3 = {}, t3.byParticipantId) {
        var c3 = t3.byParticipantId[a3];
        i3[a3] = "boolean" == typeof c3 ? c3 : Ra.fromJSONObject(c3);
      }
    return new e3({ base: n3, byUserId: r3, byParticipantId: i3 });
  } }, { key: "fromMinifiedJSONObject", value: function(t3) {
    var n3, r3, i3;
    if (void 0 !== t3.b && (n3 = "boolean" == typeof t3.b ? t3.b : Ra.fromMinifiedJSONObject(t3.b)), void 0 !== t3.u)
      for (var o3 in r3 = {}, t3.u) {
        var s3 = t3.u[o3];
        r3[o3] = "boolean" == typeof s3 ? s3 : Ra.fromMinifiedJSONObject(s3);
      }
    if (void 0 !== t3.p)
      for (var a3 in i3 = {}, t3.p) {
        var c3 = t3.p[a3];
        i3[a3] = "boolean" == typeof c3 ? c3 : Ra.fromMinifiedJSONObject(c3);
      }
    return new e3({ base: n3, byUserId: r3, byParticipantId: i3 });
  } }, { key: "validateJSONObject", value: function(e4) {
    if ("object" !== n(e4))
      return [false, "canReceive must be an object"];
    for (var t3 = ["base", "byUserId", "byParticipantId"], r3 = 0, i3 = Object.keys(e4); r3 < i3.length; r3++) {
      var o3 = i3[r3];
      if (!t3.includes(o3))
        return [false, "canReceive can only contain keys (".concat(t3.join(", "), ")")];
      if ("base" === o3) {
        var s3 = f(Ra.validateJSONObject(e4.base, true), 2), a3 = s3[0], c3 = s3[1];
        if (!a3)
          return [false, c3];
      } else {
        if ("object" !== n(e4[o3]))
          return [false, "invalid (non-object) value for field '".concat(o3, "' in canReceive")];
        for (var l3 = 0, u3 = Object.values(e4[o3]); l3 < u3.length; l3++) {
          var d3 = u3[l3], p3 = f(Ra.validateJSONObject(d3), 2), h3 = p3[0], v3 = p3[1];
          if (!h3)
            return [false, v3];
        }
      }
    }
    return [true];
  } }]);
}();
var Ra = function() {
  function e3() {
    var n3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, r3 = n3.video, i3 = n3.audio, o3 = n3.screenVideo, s3 = n3.screenAudio, a3 = n3.customVideo, c3 = n3.customAudio;
    t(this, e3), this.video = r3, this.audio = i3, this.screenVideo = o3, this.screenAudio = s3, this.customVideo = a3, this.customAudio = c3;
  }
  return o(e3, [{ key: "clone", value: function() {
    var t3 = new e3();
    return void 0 !== this.video && (t3.video = this.video), void 0 !== this.audio && (t3.audio = this.audio), void 0 !== this.screenVideo && (t3.screenVideo = this.screenVideo), void 0 !== this.screenAudio && (t3.screenAudio = this.screenAudio), void 0 !== this.customVideo && (t3.customVideo = Oa({}, this.customVideo)), void 0 !== this.customAudio && (t3.customAudio = Oa({}, this.customAudio)), t3;
  } }, { key: "toJSONObject", value: function() {
    var e4 = {};
    return void 0 !== this.video && (e4.video = this.video), void 0 !== this.audio && (e4.audio = this.audio), void 0 !== this.screenVideo && (e4.screenVideo = this.screenVideo), void 0 !== this.screenAudio && (e4.screenAudio = this.screenAudio), void 0 !== this.customVideo && (e4.customVideo = Oa({}, this.customVideo)), void 0 !== this.customAudio && (e4.customAudio = Oa({}, this.customAudio)), e4;
  } }, { key: "toMinifiedJSONObject", value: function() {
    var e4 = {};
    return void 0 !== this.video && (e4.v = this.video), void 0 !== this.audio && (e4.a = this.audio), void 0 !== this.screenVideo && (e4.sv = this.screenVideo), void 0 !== this.screenAudio && (e4.sa = this.screenAudio), void 0 !== this.customVideo && (e4.cv = Oa({}, this.customVideo)), void 0 !== this.customAudio && (e4.ca = Oa({}, this.customAudio)), e4;
  } }, { key: "normalize", value: function() {
    function e4(e5, t3) {
      return e5 && 1 === Object.keys(e5).length && e5["*"] === t3;
    }
    return !(true !== this.video || true !== this.audio || true !== this.screenVideo || true !== this.screenAudio || !e4(this.customVideo, true) || !e4(this.customAudio, true)) || (false !== this.video || false !== this.audio || false !== this.screenVideo || false !== this.screenAudio || !e4(this.customVideo, false) || !e4(this.customAudio, false)) && this;
  } }], [{ key: "fromBoolean", value: function(t3) {
    return new e3({ video: t3, audio: t3, screenVideo: t3, screenAudio: t3, customVideo: { "*": t3 }, customAudio: { "*": t3 } });
  } }, { key: "fromJSONObject", value: function(t3) {
    return new e3({ video: t3.video, audio: t3.audio, screenVideo: t3.screenVideo, screenAudio: t3.screenAudio, customVideo: void 0 !== t3.customVideo ? Oa({}, t3.customVideo) : void 0, customAudio: void 0 !== t3.customAudio ? Oa({}, t3.customAudio) : void 0 });
  } }, { key: "fromMinifiedJSONObject", value: function(t3) {
    return new e3({ video: t3.v, audio: t3.a, screenVideo: t3.sv, screenAudio: t3.sa, customVideo: t3.cv, customAudio: t3.ca });
  } }, { key: "validateJSONObject", value: function(e4, t3) {
    if ("boolean" == typeof e4)
      return [true];
    if ("object" !== n(e4))
      return [false, "invalid (non-object, non-boolean) value in canReceive"];
    for (var r3 = Object.keys(e4), i3 = 0, o3 = r3; i3 < o3.length; i3++) {
      var s3 = o3[i3];
      if (!ja.includes(s3))
        return [false, "invalid media type '".concat(s3, "' in canReceive")];
      if (xa.includes(s3)) {
        if ("boolean" != typeof e4[s3])
          return [false, "invalid (non-boolean) value for media type '".concat(s3, "' in canReceive")];
      } else {
        if ("object" !== n(e4[s3]))
          return [false, "invalid (non-object) value for media type '".concat(s3, "' in canReceive")];
        for (var a3 = 0, c3 = Object.values(e4[s3]); a3 < c3.length; a3++) {
          if ("boolean" != typeof c3[a3])
            return [false, "invalid (non-boolean) value for entry within '".concat(s3, "' in canReceive")];
        }
        if (t3 && void 0 === e4[s3]["*"])
          return [false, `canReceive "base" permission must specify "*" as an entry within '`.concat(s3, "'")];
      }
    }
    return t3 && r3.length !== ja.length ? [false, 'canReceive "base" permission must specify all media types: '.concat(ja.join(", "), " (or be set to a boolean shorthand)")] : [true];
  } }]);
}();
var Fa = ["result"];
var Ba = ["preserveIframe"];
function Ua(e3, t3) {
  var n3 = Object.keys(e3);
  if (Object.getOwnPropertySymbols) {
    var r3 = Object.getOwnPropertySymbols(e3);
    t3 && (r3 = r3.filter(function(t4) {
      return Object.getOwnPropertyDescriptor(e3, t4).enumerable;
    })), n3.push.apply(n3, r3);
  }
  return n3;
}
function Va(e3) {
  for (var t3 = 1; t3 < arguments.length; t3++) {
    var n3 = null != arguments[t3] ? arguments[t3] : {};
    t3 % 2 ? Ua(Object(n3), true).forEach(function(t4) {
      u(e3, t4, n3[t4]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(n3)) : Ua(Object(n3)).forEach(function(t4) {
      Object.defineProperty(e3, t4, Object.getOwnPropertyDescriptor(n3, t4));
    });
  }
  return e3;
}
function Ja() {
  try {
    var e3 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
  } catch (e4) {
  }
  return (Ja = function() {
    return !!e3;
  })();
}
function $a(e3, t3) {
  var n3 = "undefined" != typeof Symbol && e3[Symbol.iterator] || e3["@@iterator"];
  if (!n3) {
    if (Array.isArray(e3) || (n3 = function(e4, t4) {
      if (e4) {
        if ("string" == typeof e4)
          return qa(e4, t4);
        var n4 = {}.toString.call(e4).slice(8, -1);
        return "Object" === n4 && e4.constructor && (n4 = e4.constructor.name), "Map" === n4 || "Set" === n4 ? Array.from(e4) : "Arguments" === n4 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n4) ? qa(e4, t4) : void 0;
      }
    }(e3)) || t3 && e3 && "number" == typeof e3.length) {
      n3 && (e3 = n3);
      var r3 = 0, i3 = function() {
      };
      return { s: i3, n: function() {
        return r3 >= e3.length ? { done: true } : { done: false, value: e3[r3++] };
      }, e: function(e4) {
        throw e4;
      }, f: i3 };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var o3, s3 = true, a3 = false;
  return { s: function() {
    n3 = n3.call(e3);
  }, n: function() {
    var e4 = n3.next();
    return s3 = e4.done, e4;
  }, e: function(e4) {
    a3 = true, o3 = e4;
  }, f: function() {
    try {
      s3 || null == n3.return || n3.return();
    } finally {
      if (a3)
        throw o3;
    }
  } };
}
function qa(e3, t3) {
  (null == t3 || t3 > e3.length) && (t3 = e3.length);
  for (var n3 = 0, r3 = Array(t3); n3 < t3; n3++)
    r3[n3] = e3[n3];
  return r3;
}
var za = {};
var Wa = "video";
var Ha = "voice";
var Ga = ys() ? { data: {} } : { data: {}, topology: "none" };
var Qa = { present: 0, hidden: 0 };
var Ka = { maxBitrate: { min: 1e5, max: 25e5 }, maxFramerate: { min: 1, max: 30 }, scaleResolutionDownBy: { min: 1, max: 8 } };
var Ya = Object.keys(Ka);
var Xa = ["state", "volume", "simulcastEncodings"];
var Za = { androidInCallNotification: { title: "string", subtitle: "string", iconName: "string", disableForCustomOverride: "boolean" }, disableAutoDeviceManagement: { audio: "boolean", video: "boolean" } };
var ec = { id: { iconPath: "string", iconPathDarkMode: "string", label: "string", tooltip: "string", visualState: "'default' | 'sidebar-open' | 'active'" } };
var tc = { id: { allow: "string", controlledBy: "'*' | 'owners' | string[]", csp: "string", iconURL: "string", label: "string", loading: "'eager' | 'lazy'", location: "'main' | 'sidebar'", name: "string", referrerPolicy: "string", sandbox: "string", src: "string", srcdoc: "string", shared: "string[] | 'owners' | boolean" } };
var nc = { customIntegrations: { validate: Ec, help: Mc() }, customTrayButtons: { validate: Cc, help: "customTrayButtons should be a dictionary of the type ".concat(JSON.stringify(ec)) }, url: { validate: function(e3) {
  return "string" == typeof e3;
}, help: "url should be a string" }, baseUrl: { validate: function(e3) {
  return "string" == typeof e3;
}, help: "baseUrl should be a string" }, token: { validate: function(e3) {
  return "string" == typeof e3;
}, help: "token should be a string", queryString: "t" }, dailyConfig: { validate: function(e3, t3) {
  try {
    return t3.validateDailyConfig(e3), true;
  } catch (e4) {
    console.error("Failed to validate dailyConfig", e4);
  }
  return false;
}, help: "Unsupported dailyConfig. Check error logs for detailed info." }, reactNativeConfig: { validate: function(e3) {
  return Tc(e3, Za);
}, help: "reactNativeConfig should look like ".concat(JSON.stringify(Za), ", all fields optional") }, lang: { validate: function(e3) {
  return ["da", "de", "en-us", "en", "es", "fi", "fr", "it", "jp", "ka", "nl", "no", "pl", "pt", "pt-BR", "ru", "sv", "tr", "user"].includes(e3);
}, help: "language not supported. Options are: da, de, en-us, en, es, fi, fr, it, jp, ka, nl, no, pl, pt, pt-BR, ru, sv, tr, user" }, userName: true, userData: { validate: function(e3) {
  try {
    return vc(e3), true;
  } catch (e4) {
    return console.error(e4), false;
  }
}, help: "invalid userData type provided" }, startVideoOff: true, startAudioOff: true, allowLocalVideo: true, allowLocalAudio: true, activeSpeakerMode: true, showLeaveButton: true, showLocalVideo: true, showParticipantsBar: true, showFullscreenButton: true, showUserNameChangeUI: true, iframeStyle: true, customLayout: true, cssFile: true, cssText: true, bodyClass: true, videoSource: { validate: function(e3, t3) {
  if ("boolean" == typeof e3)
    return t3._preloadCache.allowLocalVideo = e3, true;
  var n3;
  if (e3 instanceof MediaStreamTrack)
    t3._sharedTracks.videoTrack = e3, n3 = { customTrack: ls };
  else {
    if (delete t3._sharedTracks.videoTrack, "string" != typeof e3)
      return console.error("videoSource must be a MediaStreamTrack, boolean, or a string"), false;
    n3 = { deviceId: e3 };
  }
  return t3._updatePreloadCacheInputSettings({ video: { settings: n3 } }, false), true;
} }, audioSource: { validate: function(e3, t3) {
  if ("boolean" == typeof e3)
    return t3._preloadCache.allowLocalAudio = e3, true;
  var n3;
  if (e3 instanceof MediaStreamTrack)
    t3._sharedTracks.audioTrack = e3, n3 = { customTrack: ls };
  else {
    if (delete t3._sharedTracks.audioTrack, "string" != typeof e3)
      return console.error("audioSource must be a MediaStreamTrack, boolean, or a string"), false;
    n3 = { deviceId: e3 };
  }
  return t3._updatePreloadCacheInputSettings({ audio: { settings: n3 } }, false), true;
} }, subscribeToTracksAutomatically: { validate: function(e3, t3) {
  return t3._preloadCache.subscribeToTracksAutomatically = e3, true;
} }, theme: { validate: function(e3) {
  var t3 = ["accent", "accentText", "background", "backgroundAccent", "baseText", "border", "mainAreaBg", "mainAreaBgAccent", "mainAreaText", "supportiveText"], r3 = function(e4) {
    for (var n3 = 0, r4 = Object.keys(e4); n3 < r4.length; n3++) {
      var i3 = r4[n3];
      if (!t3.includes(i3))
        return console.error('unsupported color "'.concat(i3, '". Valid colors: ').concat(t3.join(", "))), false;
      if (!e4[i3].match(/^#[0-9a-f]{6}|#[0-9a-f]{3}$/i))
        return console.error("".concat(i3, ' theme color should be provided in valid hex color format. Received: "').concat(e4[i3], '"')), false;
    }
    return true;
  };
  return "object" === n(e3) && ("light" in e3 && "dark" in e3 || "colors" in e3) ? "light" in e3 && "dark" in e3 ? "colors" in e3.light ? "colors" in e3.dark ? r3(e3.light.colors) && r3(e3.dark.colors) : (console.error('Dark theme is missing "colors" property.', e3), false) : (console.error('Light theme is missing "colors" property.', e3), false) : r3(e3.colors) : (console.error('Theme must contain either both "light" and "dark" properties, or "colors".', e3), false);
}, help: "unsupported theme configuration. Check error logs for detailed info." }, layoutConfig: { validate: function(e3) {
  if ("grid" in e3) {
    var t3 = e3.grid;
    if ("maxTilesPerPage" in t3) {
      if (!Number.isInteger(t3.maxTilesPerPage))
        return console.error("grid.maxTilesPerPage should be an integer. You passed ".concat(t3.maxTilesPerPage, ".")), false;
      if (t3.maxTilesPerPage > 49)
        return console.error("grid.maxTilesPerPage can't be larger than 49 without sacrificing browser performance. Please contact us at https://www.daily.co/contact to talk about your use case."), false;
    }
    if ("minTilesPerPage" in t3) {
      if (!Number.isInteger(t3.minTilesPerPage))
        return console.error("grid.minTilesPerPage should be an integer. You passed ".concat(t3.minTilesPerPage, ".")), false;
      if (t3.minTilesPerPage < 1)
        return console.error("grid.minTilesPerPage can't be lower than 1."), false;
      if ("maxTilesPerPage" in t3 && t3.minTilesPerPage > t3.maxTilesPerPage)
        return console.error("grid.minTilesPerPage can't be higher than grid.maxTilesPerPage."), false;
    }
  }
  return true;
}, help: "unsupported layoutConfig. Check error logs for detailed info." }, receiveSettings: { validate: function(e3) {
  return gc(e3, { allowAllParticipantsKey: false });
}, help: kc({ allowAllParticipantsKey: false }) }, sendSettings: { validate: function(e3, t3) {
  return !!function(e4, t4) {
    try {
      return t4.validateUpdateSendSettings(e4), true;
    } catch (e5) {
      return console.error("Failed to validate send settings", e5), false;
    }
  }(e3, t3) && (t3._preloadCache.sendSettings = e3, true);
}, help: "Invalid sendSettings provided. Check error logs for detailed info." }, inputSettings: { validate: function(e3, t3) {
  var n3;
  return !!mc(e3) && (t3._inputSettings || (t3._inputSettings = {}), yc(e3, null === (n3 = t3.properties) || void 0 === n3 ? void 0 : n3.dailyConfig, t3._sharedTracks), t3._updatePreloadCacheInputSettings(e3, true), true);
}, help: Sc() }, layout: { validate: function(e3) {
  return "custom-v1" === e3 || "browser" === e3 || "none" === e3;
}, help: 'layout may only be set to "custom-v1"', queryString: "layout" }, emb: { queryString: "emb" }, embHref: { queryString: "embHref" }, dailyJsVersion: { queryString: "dailyJsVersion" }, proxy: { queryString: "proxy" }, strictMode: true, allowMultipleCallInstances: true };
var rc = { styles: { validate: function(e3) {
  for (var t3 in e3)
    if ("cam" !== t3 && "screen" !== t3)
      return false;
  if (e3.cam) {
    for (var n3 in e3.cam)
      if ("div" !== n3 && "video" !== n3)
        return false;
  }
  if (e3.screen) {
    for (var r3 in e3.screen)
      if ("div" !== r3 && "video" !== r3)
        return false;
  }
  return true;
}, help: "styles format should be a subset of: { cam: {div: {}, video: {}}, screen: {div: {}, video: {}} }" }, setSubscribedTracks: { validate: function(e3, t3) {
  if (t3._preloadCache.subscribeToTracksAutomatically)
    return false;
  var n3 = [true, false, "staged"];
  if (n3.includes(e3) || !ys() && "avatar" === e3)
    return true;
  var r3 = ["audio", "video", "screenAudio", "screenVideo", "rmpAudio", "rmpVideo"], i3 = function(e4) {
    var t4 = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
    for (var o3 in e4)
      if ("custom" === o3) {
        if (!n3.includes(e4[o3]) && !i3(e4[o3], true))
          return false;
      } else {
        var s3 = !t4 && !r3.includes(o3), a3 = !n3.includes(e4[o3]);
        if (s3 || a3)
          return false;
      }
    return true;
  };
  return i3(e3);
}, help: "setSubscribedTracks cannot be used when setSubscribeToTracksAutomatically is enabled, and should be of the form: " + "true".concat(ys() ? "" : " | 'avatar'", " | false | 'staged' | { [audio: true|false|'staged'], [video: true|false|'staged'], [screenAudio: true|false|'staged'], [screenVideo: true|false|'staged'] }") }, setAudio: true, setVideo: true, setScreenShare: { validate: function(e3) {
  return false === e3;
}, help: "setScreenShare must be false, as it's only meant for stopping remote participants' screen shares" }, eject: true, updatePermissions: { validate: function(e3) {
  for (var t3 = 0, n3 = Object.entries(e3); t3 < n3.length; t3++) {
    var r3 = f(n3[t3], 2), i3 = r3[0], o3 = r3[1];
    switch (i3) {
      case "hasPresence":
        if ("boolean" != typeof o3)
          return false;
        break;
      case "canSend":
        if (o3 instanceof Set || o3 instanceof Array || Array.isArray(o3)) {
          var s3, a3 = ["video", "audio", "screenVideo", "screenAudio", "customVideo", "customAudio"], c3 = $a(o3);
          try {
            for (c3.s(); !(s3 = c3.n()).done; ) {
              var l3 = s3.value;
              if (!a3.includes(l3))
                return false;
            }
          } catch (e4) {
            c3.e(e4);
          } finally {
            c3.f();
          }
        } else if ("boolean" != typeof o3)
          return false;
        (o3 instanceof Array || Array.isArray(o3)) && (e3.canSend = new Set(o3));
        break;
      case "canReceive":
        var u3 = f(Na.validateJSONObject(o3), 2), d3 = u3[0], p3 = u3[1];
        if (!d3)
          return console.error(p3), false;
        break;
      case "canAdmin":
        if (o3 instanceof Set || o3 instanceof Array || Array.isArray(o3)) {
          var h3, v3 = ["participants", "streaming", "transcription"], g3 = $a(o3);
          try {
            for (g3.s(); !(h3 = g3.n()).done; ) {
              var m3 = h3.value;
              if (!v3.includes(m3))
                return false;
            }
          } catch (e4) {
            g3.e(e4);
          } finally {
            g3.f();
          }
        } else if ("boolean" != typeof o3)
          return false;
        (o3 instanceof Array || Array.isArray(o3)) && (e3.canAdmin = new Set(o3));
        break;
      default:
        return false;
    }
  }
  return true;
}, help: "updatePermissions can take hasPresence, canSend, canReceive, and canAdmin permissions. hasPresence must be a boolean. canSend can be a boolean or an Array or Set of media types (video, audio, screenVideo, screenAudio, customVideo, customAudio). canReceive must be an object specifying base, byUserId, and/or byParticipantId fields (see documentation for more details). canAdmin can be a boolean or an Array or Set of admin types (participants, streaming, transcription)." } };
Promise.any || (Promise.any = function() {
  var e3 = p(function* (e4) {
    return new Promise(function(t3, n3) {
      var r3 = [];
      e4.forEach(function(i3) {
        return Promise.resolve(i3).then(function(e5) {
          t3(e5);
        }).catch(function(t4) {
          r3.push(t4), r3.length === e4.length && n3(r3);
        });
      });
    });
  });
  return function(t3) {
    return e3.apply(this, arguments);
  };
}());
var ic = function() {
  function r3(e3) {
    var n3, i4, o3, c4, l3, d4, h4 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
    if (t(this, r3), o3 = this, c4 = a(c4 = r3), u(i4 = s(o3, Ja() ? Reflect.construct(c4, l3 || [], a(o3).constructor) : c4.apply(o3, l3)), "startListeningForDeviceChanges", function() {
      Sa(i4.handleDeviceChange);
    }), u(i4, "stopListeningForDeviceChanges", function() {
      ka(i4.handleDeviceChange);
    }), u(i4, "handleDeviceChange", function(e4) {
      e4 = e4.map(function(e5) {
        return JSON.parse(JSON.stringify(e5));
      }), i4.emitDailyJSEvent({ action: "available-devices-updated", availableDevices: e4 });
    }), u(i4, "handleNativeAppStateChange", function() {
      var e4 = p(function* (e5) {
        if ("destroyed" === e5)
          return console.warn("App has been destroyed before leaving the meeting. Cleaning up all the resources!"), void (yield i4.destroy());
        var t3 = "active" === e5;
        i4.disableReactNativeAutoDeviceManagement("video") || (t3 ? i4.camUnmutedBeforeLosingNativeActiveState && i4.setLocalVideo(true) : (i4.camUnmutedBeforeLosingNativeActiveState = i4.localVideo(), i4.camUnmutedBeforeLosingNativeActiveState && i4.setLocalVideo(false)));
      });
      return function(t3) {
        return e4.apply(this, arguments);
      };
    }()), u(i4, "handleNativeAudioFocusChange", function(e4) {
      i4.disableReactNativeAutoDeviceManagement("audio") || (i4._hasNativeAudioFocus = e4, i4.toggleParticipantAudioBasedOnNativeAudioFocus(), i4._hasNativeAudioFocus ? i4.micUnmutedBeforeLosingNativeAudioFocus && i4.setLocalAudio(true) : (i4.micUnmutedBeforeLosingNativeAudioFocus = i4.localAudio(), i4.setLocalAudio(false)));
    }), u(i4, "handleNativeSystemScreenCaptureStop", function() {
      i4.stopScreenShare();
    }), i4.strictMode = void 0 === h4.strictMode || h4.strictMode, i4.allowMultipleCallInstances = null !== (n3 = h4.allowMultipleCallInstances) && void 0 !== n3 && n3, Object.keys(za).length && (i4._logDuplicateInstanceAttempt(), !i4.allowMultipleCallInstances)) {
      if (i4.strictMode)
        throw new Error("Duplicate DailyIframe instances are not allowed");
      console.warn("Using strictMode: false to allow multiple call instances is now deprecated. Set `allowMultipleCallInstances: true`");
    }
    if (window._daily || (window._daily = { pendings: [], instances: {} }), i4.callClientId = K(), za[(d4 = i4).callClientId] = d4, window._daily.instances[i4.callClientId] = {}, i4._sharedTracks = {}, window._daily.instances[i4.callClientId].tracks = i4._sharedTracks, h4.dailyJsVersion = r3.version(), i4._iframe = e3, i4._callObjectMode = "none" === h4.layout && !i4._iframe, i4._preloadCache = { subscribeToTracksAutomatically: true, outputDeviceId: null, inputSettings: null, sendSettings: null, videoTrackForNetworkConnectivityTest: null, videoTrackForConnectionQualityTest: null }, void 0 !== h4.showLocalVideo ? i4._callObjectMode ? console.error("showLocalVideo is not available in call object mode") : i4._showLocalVideo = !!h4.showLocalVideo : i4._showLocalVideo = true, void 0 !== h4.showParticipantsBar ? i4._callObjectMode ? console.error("showParticipantsBar is not available in call object mode") : i4._showParticipantsBar = !!h4.showParticipantsBar : i4._showParticipantsBar = true, void 0 !== h4.customIntegrations ? i4._callObjectMode ? console.error("customIntegrations is not available in call object mode") : i4._customIntegrations = h4.customIntegrations : i4._customIntegrations = {}, void 0 !== h4.customTrayButtons ? i4._callObjectMode ? console.error("customTrayButtons is not available in call object mode") : i4._customTrayButtons = h4.customTrayButtons : i4._customTrayButtons = {}, void 0 !== h4.activeSpeakerMode ? i4._callObjectMode ? console.error("activeSpeakerMode is not available in call object mode") : i4._activeSpeakerMode = !!h4.activeSpeakerMode : i4._activeSpeakerMode = false, h4.receiveSettings ? i4._callObjectMode ? i4._receiveSettings = h4.receiveSettings : console.error("receiveSettings is only available in call object mode") : i4._receiveSettings = {}, i4.validateProperties(h4), i4.properties = Va({}, h4), i4._inputSettings || (i4._inputSettings = {}), i4._callObjectLoader = i4._callObjectMode ? new Ys(i4.callClientId) : null, i4._callState = vi, i4._isPreparingToJoin = false, i4._accessState = { access: Oi }, i4._meetingSessionSummary = {}, i4._finalSummaryOfPrevSession = {}, i4._meetingSessionState = jc(Ga, i4._callObjectMode), i4._nativeInCallAudioMode = Wa, i4._participants = {}, i4._isScreenSharing = false, i4._participantCounts = Qa, i4._rmpPlayerState = {}, i4._waitingParticipants = {}, i4._network = { threshold: "good", quality: 100, networkState: "unknown", stats: {} }, i4._activeSpeaker = {}, i4._localAudioLevel = 0, i4._isLocalAudioLevelObserverRunning = false, i4._remoteParticipantsAudioLevel = {}, i4._isRemoteParticipantsAudioLevelObserverRunning = false, i4._maxAppMessageSize = rs, i4._messageChannel = ys() ? new Js() : new Bs(), i4._iframe && (i4._iframe.requestFullscreen ? i4._iframe.addEventListener("fullscreenchange", function() {
      document.fullscreenElement === i4._iframe ? (i4.emitDailyJSEvent({ action: Wo }), i4.sendMessageToCallMachine({ action: Wo })) : (i4.emitDailyJSEvent({ action: Ho }), i4.sendMessageToCallMachine({ action: Ho }));
    }) : i4._iframe.webkitRequestFullscreen && i4._iframe.addEventListener("webkitfullscreenchange", function() {
      document.webkitFullscreenElement === i4._iframe ? (i4.emitDailyJSEvent({ action: Wo }), i4.sendMessageToCallMachine({ action: Wo })) : (i4.emitDailyJSEvent({ action: Ho }), i4.sendMessageToCallMachine({ action: Ho }));
    })), ys()) {
      var f3 = i4.nativeUtils();
      f3.addAudioFocusChangeListener && f3.removeAudioFocusChangeListener && f3.addAppStateChangeListener && f3.removeAppStateChangeListener && f3.addSystemScreenCaptureStopListener && f3.removeSystemScreenCaptureStopListener || console.warn("expected (add|remove)(AudioFocusChange|AppActiveStateChange|SystemScreenCaptureStop)Listener to be available in React Native"), i4._hasNativeAudioFocus = true, f3.addAudioFocusChangeListener(i4.handleNativeAudioFocusChange), f3.addAppStateChangeListener(i4.handleNativeAppStateChange), f3.addSystemScreenCaptureStopListener(i4.handleNativeSystemScreenCaptureStop);
    }
    return i4._callObjectMode && i4.startListeningForDeviceChanges(), i4._messageChannel.addListenerForMessagesFromCallMachine(i4.handleMessageFromCallMachine, i4.callClientId, i4), i4;
  }
  return l(r3, x), o(r3, [{ key: "destroy", value: (ee3 = p(function* () {
    var e3;
    try {
      yield this.leave();
    } catch (e4) {
    }
    var t3 = this._iframe;
    if (t3) {
      var n3 = t3.parentElement;
      n3 && n3.removeChild(t3);
    }
    if (this._messageChannel.removeListener(this.handleMessageFromCallMachine), ys()) {
      var r4 = this.nativeUtils();
      r4.removeAudioFocusChangeListener(this.handleNativeAudioFocusChange), r4.removeAppStateChangeListener(this.handleNativeAppStateChange), r4.removeSystemScreenCaptureStopListener(this.handleNativeSystemScreenCaptureStop);
    }
    this._callObjectMode && this.stopListeningForDeviceChanges(), this.resetMeetingDependentVars(), this._destroyed = true, this.emitDailyJSEvent({ action: "call-instance-destroyed" }), delete za[this.callClientId], (null === (e3 = window) || void 0 === e3 || null === (e3 = e3._daily) || void 0 === e3 ? void 0 : e3.instances) && delete window._daily.instances[this.callClientId], this.strictMode && (this.callClientId = void 0);
  }), function() {
    return ee3.apply(this, arguments);
  }) }, { key: "isDestroyed", value: function() {
    return !!this._destroyed;
  } }, { key: "loadCss", value: function(e3) {
    var t3 = e3.bodyClass, n3 = e3.cssFile, r4 = e3.cssText;
    return hc(), this.sendMessageToCallMachine({ action: "load-css", cssFile: this.absoluteUrl(n3), bodyClass: t3, cssText: r4 }), this;
  } }, { key: "iframe", value: function() {
    return hc(), this._iframe;
  } }, { key: "meetingState", value: function() {
    return this._callState;
  } }, { key: "accessState", value: function() {
    return dc(this._callObjectMode, "accessState()"), this._accessState;
  } }, { key: "participants", value: function() {
    return this._participants;
  } }, { key: "participantCounts", value: function() {
    return this._participantCounts;
  } }, { key: "waitingParticipants", value: function() {
    return dc(this._callObjectMode, "waitingParticipants()"), this._waitingParticipants;
  } }, { key: "validateParticipantProperties", value: function(e3, t3) {
    for (var n3 in t3) {
      if (!rc[n3])
        throw new Error("unrecognized updateParticipant property ".concat(n3));
      if (rc[n3].validate && !rc[n3].validate(t3[n3], this, this._participants[e3]))
        throw new Error(rc[n3].help);
    }
  } }, { key: "updateParticipant", value: function(e3, t3) {
    return this._participants.local && this._participants.local.session_id === e3 && (e3 = "local"), e3 && t3 && (this.validateParticipantProperties(e3, t3), this.sendMessageToCallMachine({ action: "update-participant", id: e3, properties: t3 })), this;
  } }, { key: "updateParticipants", value: function(e3) {
    var t3 = this._participants.local && this._participants.local.session_id;
    for (var n3 in e3)
      n3 === t3 && (n3 = "local"), n3 && e3[n3] && this.validateParticipantProperties(n3, e3[n3]);
    return this.sendMessageToCallMachine({ action: "update-participants", participants: e3 }), this;
  } }, { key: "updateWaitingParticipant", value: (Y3 = p(function* () {
    var e3 = this, t3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "", r4 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
    if (dc(this._callObjectMode, "updateWaitingParticipant()"), sc(this._callState, "updateWaitingParticipant()"), "string" != typeof t3 || "object" !== n(r4))
      throw new Error("updateWaitingParticipant() must take an id string and a updates object");
    return new Promise(function(n3, i4) {
      e3.sendMessageToCallMachine({ action: "daily-method-update-waiting-participant", id: t3, updates: r4 }, function(e4) {
        e4.error && i4(e4.error), e4.id || i4(new Error("unknown error in updateWaitingParticipant()")), n3({ id: e4.id });
      });
    });
  }), function() {
    return Y3.apply(this, arguments);
  }) }, { key: "updateWaitingParticipants", value: (G3 = p(function* () {
    var e3 = this, t3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
    if (dc(this._callObjectMode, "updateWaitingParticipants()"), sc(this._callState, "updateWaitingParticipants()"), "object" !== n(t3))
      throw new Error("updateWaitingParticipants() must take a mapping between ids and update objects");
    return new Promise(function(n3, r4) {
      e3.sendMessageToCallMachine({ action: "daily-method-update-waiting-participants", updatesById: t3 }, function(e4) {
        e4.error && r4(e4.error), e4.ids || r4(new Error("unknown error in updateWaitingParticipants()")), n3({ ids: e4.ids });
      });
    });
  }), function() {
    return G3.apply(this, arguments);
  }) }, { key: "requestAccess", value: (H3 = p(function* () {
    var e3 = this, t3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, n3 = t3.access, r4 = void 0 === n3 ? { level: Pi } : n3, i4 = t3.name, o3 = void 0 === i4 ? "" : i4;
    return dc(this._callObjectMode, "requestAccess()"), sc(this._callState, "requestAccess()"), new Promise(function(t4, n4) {
      e3.sendMessageToCallMachine({ action: "daily-method-request-access", access: r4, name: o3 }, function(e4) {
        e4.error && n4(e4.error), e4.access || n4(new Error("unknown error in requestAccess()")), t4({ access: e4.access, granted: e4.granted });
      });
    });
  }), function() {
    return H3.apply(this, arguments);
  }) }, { key: "localAudio", value: function() {
    return this._participants.local ? !["blocked", "off"].includes(this._participants.local.tracks.audio.state) : null;
  } }, { key: "localVideo", value: function() {
    return this._participants.local ? !["blocked", "off"].includes(this._participants.local.tracks.video.state) : null;
  } }, { key: "setLocalAudio", value: function(e3) {
    var t3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
    return "forceDiscardTrack" in t3 && (ys() ? (console.warn("forceDiscardTrack option not supported in React Native; ignoring"), t3 = {}) : e3 && (console.warn("forceDiscardTrack option only supported when calling setLocalAudio(false); ignoring"), t3 = {})), this.sendMessageToCallMachine({ action: "local-audio", state: e3, options: t3 }), this;
  } }, { key: "localScreenAudio", value: function() {
    return this._participants.local ? !["blocked", "off"].includes(this._participants.local.tracks.screenAudio.state) : null;
  } }, { key: "localScreenVideo", value: function() {
    return this._participants.local ? !["blocked", "off"].includes(this._participants.local.tracks.screenVideo.state) : null;
  } }, { key: "updateScreenShare", value: function(e3) {
    if (this._isScreenSharing)
      return this.sendMessageToCallMachine({ action: "local-screen-update", options: e3 }), this;
    console.warn("There is no screen share in progress. Try calling startScreenShare first.");
  } }, { key: "setLocalVideo", value: function(e3) {
    return this.sendMessageToCallMachine({ action: "local-video", state: e3 }), this;
  } }, { key: "_setAllowLocalAudio", value: function(e3) {
    if (this._preloadCache.allowLocalAudio = e3, this._callMachineInitialized)
      return this.sendMessageToCallMachine({ action: "set-allow-local-audio", state: e3 }), this;
  } }, { key: "_setAllowLocalVideo", value: function(e3) {
    if (this._preloadCache.allowLocalVideo = e3, this._callMachineInitialized)
      return this.sendMessageToCallMachine({ action: "set-allow-local-video", state: e3 }), this;
  } }, { key: "getReceiveSettings", value: (W3 = p(function* (e3) {
    var t3 = this, r4 = (arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}).showInheritedValues, i4 = void 0 !== r4 && r4;
    if (dc(this._callObjectMode, "getReceiveSettings()"), !this._callMachineInitialized)
      return this._receiveSettings;
    switch (n(e3)) {
      case "string":
        return new Promise(function(n3) {
          t3.sendMessageToCallMachine({ action: "get-single-participant-receive-settings", id: e3, showInheritedValues: i4 }, function(e4) {
            n3(e4.receiveSettings);
          });
        });
      case "undefined":
        return this._receiveSettings;
      default:
        throw new Error('first argument to getReceiveSettings() must be a participant id (or "base"), or there should be no arguments');
    }
  }), function(e3) {
    return W3.apply(this, arguments);
  }) }, { key: "updateReceiveSettings", value: (z3 = p(function* (e3) {
    var t3 = this;
    if (dc(this._callObjectMode, "updateReceiveSettings()"), !gc(e3, { allowAllParticipantsKey: true }))
      throw new Error(kc({ allowAllParticipantsKey: true }));
    return sc(this._callState, "updateReceiveSettings()", "To specify receive settings earlier, use the receiveSettings config property."), new Promise(function(n3) {
      t3.sendMessageToCallMachine({ action: "update-receive-settings", receiveSettings: e3 }, function(e4) {
        n3({ receiveSettings: e4.receiveSettings });
      });
    });
  }), function(e3) {
    return z3.apply(this, arguments);
  }) }, { key: "_prepInputSettingsForSharing", value: function(e3, t3) {
    if (e3) {
      var n3 = {};
      if (e3.audio) {
        var r4, i4, o3;
        e3.audio.settings && (!Object.keys(e3.audio.settings).length && t3 || (n3.audio = { settings: Va({}, e3.audio.settings) })), t3 && null !== (r4 = n3.audio) && void 0 !== r4 && null !== (r4 = r4.settings) && void 0 !== r4 && r4.customTrack && (n3.audio.settings = { customTrack: this._sharedTracks.audioTrack });
        var s3 = "none" === (null === (i4 = e3.audio.processor) || void 0 === i4 ? void 0 : i4.type) && (null === (o3 = e3.audio.processor) || void 0 === o3 ? void 0 : o3._isDefaultWhenNone);
        if (e3.audio.processor && !s3) {
          var a3 = Va({}, e3.audio.processor);
          delete a3._isDefaultWhenNone, n3.audio = Va(Va({}, n3.audio), {}, { processor: a3 });
        }
      }
      if (e3.video) {
        var c4, l3, u3;
        e3.video.settings && (!Object.keys(e3.video.settings).length && t3 || (n3.video = { settings: Va({}, e3.video.settings) })), t3 && null !== (c4 = n3.video) && void 0 !== c4 && null !== (c4 = c4.settings) && void 0 !== c4 && c4.customTrack && (n3.video.settings = { customTrack: this._sharedTracks.videoTrack });
        var d4 = "none" === (null === (l3 = e3.video.processor) || void 0 === l3 ? void 0 : l3.type) && (null === (u3 = e3.video.processor) || void 0 === u3 ? void 0 : u3._isDefaultWhenNone);
        if (e3.video.processor && !d4) {
          var p3 = Va({}, e3.video.processor);
          delete p3._isDefaultWhenNone, n3.video = Va(Va({}, n3.video), {}, { processor: p3 });
        }
      }
      return n3;
    }
  } }, { key: "getInputSettings", value: function() {
    var e3 = this;
    return hc(), new Promise(function(t3) {
      t3(e3._getInputSettings());
    });
  } }, { key: "_getInputSettings", value: function() {
    var e3, t3, n3, r4, i4, o3, s3 = { processor: { type: "none", _isDefaultWhenNone: true } };
    this._inputSettings ? (e3 = (null === (n3 = this._inputSettings) || void 0 === n3 ? void 0 : n3.video) || s3, t3 = (null === (r4 = this._inputSettings) || void 0 === r4 ? void 0 : r4.audio) || s3) : (e3 = (null === (i4 = this._preloadCache) || void 0 === i4 || null === (i4 = i4.inputSettings) || void 0 === i4 ? void 0 : i4.video) || s3, t3 = (null === (o3 = this._preloadCache) || void 0 === o3 || null === (o3 = o3.inputSettings) || void 0 === o3 ? void 0 : o3.audio) || s3);
    var a3 = { audio: t3, video: e3 };
    return this._prepInputSettingsForSharing(a3, true);
  } }, { key: "_updatePreloadCacheInputSettings", value: function(e3, t3) {
    var n3 = this._inputSettings || {}, r4 = {};
    if (e3.video) {
      var i4, o3, s3;
      if (r4.video = {}, e3.video.settings)
        r4.video.settings = {}, t3 || e3.video.settings.customTrack || null === (s3 = n3.video) || void 0 === s3 || !s3.settings ? r4.video.settings = e3.video.settings : r4.video.settings = Va(Va({}, n3.video.settings), e3.video.settings), Object.keys(r4.video.settings).length || delete r4.video.settings;
      else
        null !== (i4 = n3.video) && void 0 !== i4 && i4.settings && (r4.video.settings = n3.video.settings);
      e3.video.processor ? r4.video.processor = e3.video.processor : null !== (o3 = n3.video) && void 0 !== o3 && o3.processor && (r4.video.processor = n3.video.processor);
    } else
      n3.video && (r4.video = n3.video);
    if (e3.audio) {
      var a3, c4, l3;
      if (r4.audio = {}, e3.audio.settings)
        r4.audio.settings = {}, t3 || e3.audio.settings.customTrack || null === (l3 = n3.audio) || void 0 === l3 || !l3.settings ? r4.audio.settings = e3.audio.settings : r4.audio.settings = Va(Va({}, n3.audio.settings), e3.audio.settings), Object.keys(r4.audio.settings).length || delete r4.audio.settings;
      else
        null !== (a3 = n3.audio) && void 0 !== a3 && a3.settings && (r4.audio.settings = n3.audio.settings);
      e3.audio.processor ? r4.audio.processor = e3.audio.processor : null !== (c4 = n3.audio) && void 0 !== c4 && c4.processor && (r4.audio.processor = n3.audio.processor);
    } else
      n3.audio && (r4.audio = n3.audio);
    this._maybeUpdateInputSettings(r4);
  } }, { key: "_devicesFromInputSettings", value: function(e3) {
    var t3, n3, r4 = (null == e3 || null === (t3 = e3.video) || void 0 === t3 || null === (t3 = t3.settings) || void 0 === t3 ? void 0 : t3.deviceId) || null, i4 = (null == e3 || null === (n3 = e3.audio) || void 0 === n3 || null === (n3 = n3.settings) || void 0 === n3 ? void 0 : n3.deviceId) || null, o3 = this._preloadCache.outputDeviceId || null;
    return { camera: r4 ? { deviceId: r4 } : {}, mic: i4 ? { deviceId: i4 } : {}, speaker: o3 ? { deviceId: o3 } : {} };
  } }, { key: "updateInputSettings", value: (q3 = p(function* (e3) {
    var t3 = this;
    return hc(), mc(e3) ? e3.video || e3.audio ? (yc(e3, this.properties.dailyConfig, this._sharedTracks), this._callObjectMode && !this._callMachineInitialized ? (this._updatePreloadCacheInputSettings(e3, true), this._getInputSettings()) : new Promise(function(n3, r4) {
      t3.sendMessageToCallMachine({ action: "update-input-settings", inputSettings: e3 }, function(i4) {
        if (i4.error)
          r4(i4.error);
        else {
          if (i4.returnPreloadCache)
            return t3._updatePreloadCacheInputSettings(e3, true), void n3(t3._getInputSettings());
          t3._maybeUpdateInputSettings(i4.inputSettings), n3(t3._prepInputSettingsForSharing(i4.inputSettings, true));
        }
      });
    })) : this._getInputSettings() : (console.error(Sc()), Promise.reject(Sc()));
  }), function(e3) {
    return q3.apply(this, arguments);
  }) }, { key: "setBandwidth", value: function(e3) {
    var t3 = e3.kbs, n3 = e3.trackConstraints;
    if (hc(), this._callMachineInitialized)
      return this.sendMessageToCallMachine({ action: "set-bandwidth", kbs: t3, trackConstraints: n3 }), this;
  } }, { key: "getDailyLang", value: function() {
    var e3 = this;
    if (hc(), this._callMachineInitialized)
      return new Promise(function(t3) {
        e3.sendMessageToCallMachine({ action: "get-daily-lang" }, function(e4) {
          delete e4.action, delete e4.callbackStamp, t3(e4);
        });
      });
  } }, { key: "setDailyLang", value: function(e3) {
    return hc(), this.sendMessageToCallMachine({ action: "set-daily-lang", lang: e3 }), this;
  } }, { key: "setProxyUrl", value: function(e3) {
    return this.sendMessageToCallMachine({ action: "set-proxy-url", proxyUrl: e3 }), this;
  } }, { key: "setIceConfig", value: function(e3) {
    return this.sendMessageToCallMachine({ action: "set-ice-config", iceConfig: e3 }), this;
  } }, { key: "meetingSessionSummary", value: function() {
    return [_i, wi].includes(this._callState) ? this._finalSummaryOfPrevSession : this._meetingSessionSummary;
  } }, { key: "getMeetingSession", value: ($3 = p(function* () {
    var e3 = this;
    return console.warn("getMeetingSession() is deprecated: use meetingSessionSummary(), which will return immediately"), sc(this._callState, "getMeetingSession()"), new Promise(function(t3) {
      e3.sendMessageToCallMachine({ action: "get-meeting-session" }, function(e4) {
        delete e4.action, delete e4.callbackStamp, t3(e4);
      });
    });
  }), function() {
    return $3.apply(this, arguments);
  }) }, { key: "meetingSessionState", value: function() {
    return sc(this._callState, "meetingSessionState"), this._meetingSessionState;
  } }, { key: "setMeetingSessionData", value: function(e3) {
    var t3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "replace";
    dc(this._callObjectMode, "setMeetingSessionData()"), sc(this._callState, "setMeetingSessionData");
    try {
      !function(e4, t4) {
        new Ws({ data: e4, mergeStrategy: t4 });
      }(e3, t3);
    } catch (e4) {
      throw console.error(e4), e4;
    }
    try {
      this.sendMessageToCallMachine({ action: "set-session-data", data: e3, mergeStrategy: t3 });
    } catch (e4) {
      throw new Error("Error setting meeting session data: ".concat(e4));
    }
  } }, { key: "setUserName", value: function(e3, t3) {
    var n3 = this;
    return this.properties.userName = e3, new Promise(function(r4) {
      n3.sendMessageToCallMachine({ action: "set-user-name", name: null != e3 ? e3 : "", thisMeetingOnly: ys() || !!t3 && !!t3.thisMeetingOnly }, function(e4) {
        delete e4.action, delete e4.callbackStamp, r4(e4);
      });
    });
  } }, { key: "setUserData", value: (J3 = p(function* (e3) {
    var t3 = this;
    try {
      vc(e3);
    } catch (e4) {
      throw console.error(e4), e4;
    }
    if (this.properties.userData = e3, this._callMachineInitialized)
      return new Promise(function(n3) {
        try {
          t3.sendMessageToCallMachine({ action: "set-user-data", userData: e3 }, function(e4) {
            delete e4.action, delete e4.callbackStamp, n3(e4);
          });
        } catch (e4) {
          throw new Error("Error setting user data: ".concat(e4));
        }
      });
  }), function(e3) {
    return J3.apply(this, arguments);
  }) }, { key: "validateAudioLevelInterval", value: function(e3) {
    if (e3 && (e3 < 100 || "number" != typeof e3))
      throw new Error("The interval must be a number greater than or equal to 100 milliseconds.");
  } }, { key: "startLocalAudioLevelObserver", value: function(e3) {
    var t3 = this;
    if ("undefined" == typeof AudioWorkletNode && !ys())
      throw new Error("startLocalAudioLevelObserver() is not supported on this browser");
    if (this.validateAudioLevelInterval(e3), this._callMachineInitialized)
      return this._isLocalAudioLevelObserverRunning = true, new Promise(function(n3, r4) {
        t3.sendMessageToCallMachine({ action: "start-local-audio-level-observer", interval: e3 }, function(e4) {
          t3._isLocalAudioLevelObserverRunning = !e4.error, e4.error ? r4({ error: e4.error }) : n3();
        });
      });
    this._preloadCache.localAudioLevelObserver = { enabled: true, interval: e3 };
  } }, { key: "isLocalAudioLevelObserverRunning", value: function() {
    return this._isLocalAudioLevelObserverRunning;
  } }, { key: "stopLocalAudioLevelObserver", value: function() {
    this._preloadCache.localAudioLevelObserver = null, this._localAudioLevel = 0, this._isLocalAudioLevelObserverRunning = false, this.sendMessageToCallMachine({ action: "stop-local-audio-level-observer" });
  } }, { key: "startRemoteParticipantsAudioLevelObserver", value: function(e3) {
    var t3 = this;
    if (this.validateAudioLevelInterval(e3), this._callMachineInitialized)
      return this._isRemoteParticipantsAudioLevelObserverRunning = true, new Promise(function(n3, r4) {
        t3.sendMessageToCallMachine({ action: "start-remote-participants-audio-level-observer", interval: e3 }, function(e4) {
          t3._isRemoteParticipantsAudioLevelObserverRunning = !e4.error, e4.error ? r4({ error: e4.error }) : n3();
        });
      });
    this._preloadCache.remoteParticipantsAudioLevelObserver = { enabled: true, interval: e3 };
  } }, { key: "isRemoteParticipantsAudioLevelObserverRunning", value: function() {
    return this._isRemoteParticipantsAudioLevelObserverRunning;
  } }, { key: "stopRemoteParticipantsAudioLevelObserver", value: function() {
    this._preloadCache.remoteParticipantsAudioLevelObserver = null, this._remoteParticipantsAudioLevel = {}, this._isRemoteParticipantsAudioLevelObserverRunning = false, this.sendMessageToCallMachine({ action: "stop-remote-participants-audio-level-observer" });
  } }, { key: "startCamera", value: (V3 = p(function* () {
    var e3 = this, t3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
    if (dc(this._callObjectMode, "startCamera()"), cc(this._callState, this._isPreparingToJoin, "startCamera()", "Did you mean to use setLocalAudio() and/or setLocalVideo() instead?"), this.needsLoad())
      try {
        yield this.load(t3);
      } catch (e4) {
        return Promise.reject(e4);
      }
    else {
      if (this._didPreAuth) {
        if (t3.url && t3.url !== this.properties.url)
          return console.error("url in startCamera() is different than the one used in preAuth()"), Promise.reject();
        if (t3.token && t3.token !== this.properties.token)
          return console.error("token in startCamera() is different than the one used in preAuth()"), Promise.reject();
      }
      this.validateProperties(t3), this.properties = Va(Va({}, this.properties), t3);
    }
    return new Promise(function(t4) {
      e3._preloadCache.inputSettings = e3._prepInputSettingsForSharing(e3._inputSettings, false), e3.sendMessageToCallMachine({ action: "start-camera", properties: oc(e3.properties, e3.callClientId), preloadCache: oc(e3._preloadCache, e3.callClientId) }, function(e4) {
        t4({ camera: e4.camera, mic: e4.mic, speaker: e4.speaker });
      });
    });
  }), function() {
    return V3.apply(this, arguments);
  }) }, { key: "validateCustomTrack", value: function(e3, t3, n3) {
    if (n3 && n3.length > 50)
      throw new Error("Custom track `trackName` must not be more than 50 characters");
    if (t3 && "music" !== t3 && "speech" !== t3 && !(t3 instanceof Object))
      throw new Error("Custom track `mode` must be either `music` | `speech` | `DailyMicAudioModeSettings` or `undefined`");
    if (!!n3 && ["cam-audio", "cam-video", "screen-video", "screen-audio", "rmpAudio", "rmpVideo", "customVideoDefaults"].includes(n3))
      throw new Error("Custom track `trackName` must not match a track name already used by daily: cam-audio, cam-video, customVideoDefaults, screen-video, screen-audio, rmpAudio, rmpVideo");
    if (!(e3 instanceof MediaStreamTrack))
      throw new Error("Custom tracks provided must be instances of MediaStreamTrack");
  } }, { key: "startCustomTrack", value: function() {
    var e3 = this, t3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : { track, mode, trackName };
    return hc(), sc(this._callState, "startCustomTrack()"), this.validateCustomTrack(t3.track, t3.mode, t3.trackName), new Promise(function(n3, r4) {
      e3._sharedTracks.customTrack = t3.track, t3.track = ls, e3.sendMessageToCallMachine({ action: "start-custom-track", properties: t3 }, function(e4) {
        e4.error ? r4({ error: e4.error }) : n3(e4.mediaTag);
      });
    });
  } }, { key: "stopCustomTrack", value: function(e3) {
    var t3 = this;
    return hc(), sc(this._callState, "stopCustomTrack()"), new Promise(function(n3) {
      t3.sendMessageToCallMachine({ action: "stop-custom-track", mediaTag: e3 }, function(e4) {
        n3(e4.mediaTag);
      });
    });
  } }, { key: "setCamera", value: function(e3) {
    var t3 = this;
    return fc(), lc(this._callMachineInitialized, "setCamera()"), new Promise(function(n3) {
      t3.sendMessageToCallMachine({ action: "set-camera", cameraDeviceId: e3 }, function(e4) {
        n3({ device: e4.device });
      });
    });
  } }, { key: "setAudioDevice", value: (U3 = p(function* (e3) {
    return fc(), this.nativeUtils().setAudioDevice(e3), { deviceId: yield this.nativeUtils().getAudioDevice() };
  }), function(e3) {
    return U3.apply(this, arguments);
  }) }, { key: "cycleCamera", value: function() {
    var e3 = this, t3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
    return new Promise(function(n3) {
      e3.sendMessageToCallMachine({ action: "cycle-camera", properties: t3 }, function(e4) {
        n3({ device: e4.device });
      });
    });
  } }, { key: "cycleMic", value: function() {
    var e3 = this;
    return hc(), new Promise(function(t3) {
      e3.sendMessageToCallMachine({ action: "cycle-mic" }, function(e4) {
        t3({ device: e4.device });
      });
    });
  } }, { key: "getCameraFacingMode", value: function() {
    var e3 = this;
    return fc(), new Promise(function(t3) {
      e3.sendMessageToCallMachine({ action: "get-camera-facing-mode" }, function(e4) {
        t3(e4.facingMode);
      });
    });
  } }, { key: "setInputDevicesAsync", value: (B3 = p(function* (e3) {
    var t3 = this, n3 = e3.audioDeviceId, r4 = e3.videoDeviceId, i4 = e3.audioSource, o3 = e3.videoSource;
    if (hc(), void 0 !== i4 && (n3 = i4), void 0 !== o3 && (r4 = o3), "boolean" == typeof n3 && (this._setAllowLocalAudio(n3), n3 = void 0), "boolean" == typeof r4 && (this._setAllowLocalVideo(r4), r4 = void 0), !n3 && !r4)
      return yield this.getInputDevices();
    var s3 = {};
    return n3 && (n3 instanceof MediaStreamTrack ? (this._sharedTracks.audioTrack = n3, n3 = ls, s3.audio = { settings: { customTrack: n3 } }) : (delete this._sharedTracks.audioTrack, s3.audio = { settings: { deviceId: n3 } })), r4 && (r4 instanceof MediaStreamTrack ? (this._sharedTracks.videoTrack = r4, r4 = ls, s3.video = { settings: { customTrack: r4 } }) : (delete this._sharedTracks.videoTrack, s3.video = { settings: { deviceId: r4 } })), this._callObjectMode && this.needsLoad() ? (this._updatePreloadCacheInputSettings(s3, false), this._devicesFromInputSettings(this._inputSettings)) : new Promise(function(e4) {
      t3.sendMessageToCallMachine({ action: "set-input-devices", audioDeviceId: n3, videoDeviceId: r4 }, function(n4) {
        if (delete n4.action, delete n4.callbackStamp, n4.returnPreloadCache)
          return t3._updatePreloadCacheInputSettings(s3, false), void e4(t3._devicesFromInputSettings(t3._inputSettings));
        e4(n4);
      });
    });
  }), function(e3) {
    return B3.apply(this, arguments);
  }) }, { key: "setOutputDeviceAsync", value: (F3 = p(function* (e3) {
    var t3 = this, n3 = e3.outputDeviceId;
    return hc(), n3 && (this._preloadCache.outputDeviceId = n3), this._callObjectMode && this.needsLoad() ? this._devicesFromInputSettings(this._inputSettings) : new Promise(function(e4) {
      t3.sendMessageToCallMachine({ action: "set-output-device", outputDeviceId: n3 }, function(n4) {
        delete n4.action, delete n4.callbackStamp, n4.returnPreloadCache ? e4(t3._devicesFromInputSettings(t3._inputSettings)) : e4(n4);
      });
    });
  }), function(e3) {
    return F3.apply(this, arguments);
  }) }, { key: "getInputDevices", value: (R3 = p(function* () {
    var e3 = this;
    return this._callObjectMode && this.needsLoad() ? this._devicesFromInputSettings(this._inputSettings) : new Promise(function(t3) {
      e3.sendMessageToCallMachine({ action: "get-input-devices" }, function(n3) {
        n3.returnPreloadCache ? t3(e3._devicesFromInputSettings(e3._inputSettings)) : t3({ camera: n3.camera, mic: n3.mic, speaker: n3.speaker });
      });
    });
  }), function() {
    return R3.apply(this, arguments);
  }) }, { key: "nativeInCallAudioMode", value: function() {
    return fc(), this._nativeInCallAudioMode;
  } }, { key: "setNativeInCallAudioMode", value: function(e3) {
    if (fc(), [Wa, Ha].includes(e3)) {
      if (e3 !== this._nativeInCallAudioMode)
        return this._nativeInCallAudioMode = e3, !this.disableReactNativeAutoDeviceManagement("audio") && ac(this._callState, this._isPreparingToJoin) && this.nativeUtils().setAudioMode(this._nativeInCallAudioMode), this;
    } else
      console.error("invalid in-call audio mode specified: ", e3);
  } }, { key: "preAuth", value: (D3 = p(function* () {
    var e3 = this, t3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
    if (dc(this._callObjectMode, "preAuth()"), cc(this._callState, this._isPreparingToJoin, "preAuth()"), this.needsLoad() && (yield this.load(t3)), !t3.url)
      throw new Error("preAuth() requires at least a url to be provided");
    return this.validateProperties(t3), this.properties = Va(Va({}, this.properties), t3), new Promise(function(t4, n3) {
      e3._preloadCache.inputSettings = e3._prepInputSettingsForSharing(e3._inputSettings, false), e3.sendMessageToCallMachine({ action: "daily-method-preauth", properties: oc(e3.properties, e3.callClientId), preloadCache: oc(e3._preloadCache, e3.callClientId) }, function(r4) {
        return r4.error ? n3(r4.error) : r4.access ? (e3._didPreAuth = true, void t4({ access: r4.access })) : n3(new Error("unknown error in preAuth()"));
      });
    });
  }), function() {
    return D3.apply(this, arguments);
  }) }, { key: "load", value: (L3 = p(function* (e3) {
    var t3 = this;
    if (this.needsLoad()) {
      if (this._destroyed && (this._logUseAfterDestroy(), this.strictMode))
        throw new Error("Use after destroy");
      if (e3 && (this.validateProperties(e3), this.properties = Va(Va({}, this.properties), e3)), !this._callObjectMode && !this.properties.url)
        throw new Error("can't load iframe meeting because url property isn't set");
      return this._updateCallState(gi), this.emitDailyJSEvent({ action: to }), this._callObjectMode ? new Promise(function(e4, n3) {
        t3._callObjectLoader.cancel();
        var r4 = Date.now();
        t3._callObjectLoader.load(t3.properties.dailyConfig, function(n4) {
          t3._bundleLoadTime = n4 ? "no-op" : Date.now() - r4, t3._updateCallState(mi), n4 && t3.emitDailyJSEvent({ action: ro }), e4();
        }, function(e5, r5) {
          if (t3.emitDailyJSEvent({ action: no }), !r5) {
            t3._updateCallState(wi), t3.resetMeetingDependentVars();
            var i4 = { action: ns, errorMsg: e5.msg, error: { type: "connection-error", msg: "Failed to load call object bundle.", details: { on: "load", sourceError: e5, bundleUrl: Z(t3.properties.dailyConfig) } } };
            t3._maybeSendToSentry(i4), t3.emitDailyJSEvent(i4), n3(e5.msg);
          }
        });
      }) : (this._iframe.src = X(this.assembleMeetingUrl(), this.properties.dailyConfig), new Promise(function(e4, n3) {
        t3._loadedCallback = function(r4) {
          t3._callState !== wi ? (t3._updateCallState(mi), (t3.properties.cssFile || t3.properties.cssText) && t3.loadCss(t3.properties), e4()) : n3(r4);
        };
      }));
    }
  }), function(e3) {
    return L3.apply(this, arguments);
  }) }, { key: "join", value: (I3 = p(function* () {
    var e3 = this, t3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
    this._testCallInProgress && this.stopTestCallQuality();
    var n3 = false;
    if (this.needsLoad()) {
      this.updateIsPreparingToJoin(true);
      try {
        yield this.load(t3);
      } catch (e4) {
        return this.updateIsPreparingToJoin(false), Promise.reject(e4);
      }
    } else {
      if (n3 = !(!this.properties.cssFile && !this.properties.cssText), this._didPreAuth) {
        if (t3.url && t3.url !== this.properties.url)
          return console.error("url in join() is different than the one used in preAuth()"), this.updateIsPreparingToJoin(false), Promise.reject();
        if (t3.token && t3.token !== this.properties.token)
          return console.error("token in join() is different than the one used in preAuth()"), this.updateIsPreparingToJoin(false), Promise.reject();
      }
      if (t3.url && !this._callObjectMode && t3.url && t3.url !== this.properties.url)
        return console.error("url in join() is different than the one used in load() (".concat(this.properties.url, " -> ").concat(t3.url, ")")), this.updateIsPreparingToJoin(false), Promise.reject();
      this.validateProperties(t3), this.properties = Va(Va({}, this.properties), t3);
    }
    return void 0 !== t3.showLocalVideo && (this._callObjectMode ? console.error("showLocalVideo is not available in callObject mode") : this._showLocalVideo = !!t3.showLocalVideo), void 0 !== t3.showParticipantsBar && (this._callObjectMode ? console.error("showParticipantsBar is not available in callObject mode") : this._showParticipantsBar = !!t3.showParticipantsBar), this._callState === bi || this._callState === yi ? (console.warn("already joined meeting, call leave() before joining again"), void this.updateIsPreparingToJoin(false)) : (this._updateCallState(yi, false), this.emitDailyJSEvent({ action: so }), this._preloadCache.inputSettings = this._prepInputSettingsForSharing(this._inputSettings || {}, false), this.sendMessageToCallMachine({ action: "join-meeting", properties: oc(this.properties, this.callClientId), preloadCache: oc(this._preloadCache, this.callClientId) }), new Promise(function(t4, r4) {
      e3._joinedCallback = function(i4, o3) {
        if (e3._callState !== wi) {
          if (e3._updateCallState(bi), i4)
            for (var s3 in i4) {
              if (e3._callObjectMode) {
                var a3 = e3._callMachine().store;
                ua(i4[s3], a3), da(i4[s3], a3), ha(i4[s3], e3._participants[s3], a3);
              }
              e3._participants[s3] = Va({}, i4[s3]), e3.toggleParticipantAudioBasedOnNativeAudioFocus();
            }
          n3 && e3.loadCss(e3.properties), t4(i4);
        } else
          r4(o3);
      };
    }));
  }), function() {
    return I3.apply(this, arguments);
  }) }, { key: "leave", value: (j3 = p(function* () {
    var e3 = this;
    return this._testCallInProgress && this.stopTestCallQuality(), new Promise(function(t3) {
      e3._callState === _i || e3._callState === wi ? t3() : e3._callObjectLoader && !e3._callObjectLoader.loaded ? (e3._callObjectLoader.cancel(), e3._updateCallState(_i), e3.resetMeetingDependentVars(), e3.emitDailyJSEvent({ action: _i }), t3()) : (e3._resolveLeave = t3, e3.sendMessageToCallMachine({ action: "leave-meeting" }));
    });
  }), function() {
    return j3.apply(this, arguments);
  }) }, { key: "startScreenShare", value: (A3 = p(function* () {
    var e3 = this, t3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
    if (lc(this._callMachineInitialized, "startScreenShare()"), t3.screenVideoSendSettings && this._validateVideoSendSettings("screenVideo", t3.screenVideoSendSettings), t3.mediaStream && (this._sharedTracks.screenMediaStream = t3.mediaStream, t3.mediaStream = ls), "undefined" != typeof DailyNativeUtils && void 0 !== DailyNativeUtils.isIOS && DailyNativeUtils.isIOS) {
      var n3 = this.nativeUtils();
      if (yield n3.isScreenBeingCaptured())
        return void this.emitDailyJSEvent({ action: ts, type: "screen-share-error", errorMsg: "Could not start the screen sharing. The screen is already been captured!" });
      n3.setSystemScreenCaptureStartCallback(function() {
        n3.setSystemScreenCaptureStartCallback(null), e3.sendMessageToCallMachine({ action: ss, captureOptions: t3 });
      }), n3.presentSystemScreenCapturePrompt();
    } else
      this.sendMessageToCallMachine({ action: ss, captureOptions: t3 });
  }), function() {
    return A3.apply(this, arguments);
  }) }, { key: "stopScreenShare", value: function() {
    lc(this._callMachineInitialized, "stopScreenShare()"), this.sendMessageToCallMachine({ action: "local-screen-stop" });
  } }, { key: "startRecording", value: function() {
    var e3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, t3 = e3.type;
    if (t3 && "cloud" !== t3 && "raw-tracks" !== t3 && "local" !== t3)
      throw new Error("invalid type: ".concat(t3, ", allowed values 'cloud', 'raw-tracks', or 'local'"));
    this.sendMessageToCallMachine(Va({ action: "local-recording-start" }, e3));
  } }, { key: "updateRecording", value: function(e3) {
    var t3 = e3.layout, n3 = void 0 === t3 ? { preset: "default" } : t3, r4 = e3.instanceId;
    this.sendMessageToCallMachine({ action: "daily-method-update-recording", layout: n3, instanceId: r4 });
  } }, { key: "stopRecording", value: function() {
    var e3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
    this.sendMessageToCallMachine(Va({ action: "local-recording-stop" }, e3));
  } }, { key: "startLiveStreaming", value: function() {
    var e3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
    this.sendMessageToCallMachine(Va({ action: "daily-method-start-live-streaming" }, e3));
  } }, { key: "updateLiveStreaming", value: function(e3) {
    var t3 = e3.layout, n3 = void 0 === t3 ? { preset: "default" } : t3, r4 = e3.instanceId;
    this.sendMessageToCallMachine({ action: "daily-method-update-live-streaming", layout: n3, instanceId: r4 });
  } }, { key: "addLiveStreamingEndpoints", value: function(e3) {
    var t3 = e3.endpoints, n3 = e3.instanceId;
    this.sendMessageToCallMachine({ action: as, endpointsOp: fs, endpoints: t3, instanceId: n3 });
  } }, { key: "removeLiveStreamingEndpoints", value: function(e3) {
    var t3 = e3.endpoints, n3 = e3.instanceId;
    this.sendMessageToCallMachine({ action: as, endpointsOp: vs, endpoints: t3, instanceId: n3 });
  } }, { key: "stopLiveStreaming", value: function() {
    var e3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
    this.sendMessageToCallMachine(Va({ action: "daily-method-stop-live-streaming" }, e3));
  } }, { key: "validateDailyConfig", value: function(e3) {
    e3.camSimulcastEncodings && (console.warn("camSimulcastEncodings is deprecated. Use sendSettings, found in DailyCallOptions, to provide camera simulcast settings."), this.validateSimulcastEncodings(e3.camSimulcastEncodings)), e3.screenSimulcastEncodings && console.warn("screenSimulcastEncodings is deprecated. Use sendSettings, found in DailyCallOptions, to provide screen simulcast settings."), Es() && e3.noAutoDefaultDeviceChange && console.warn("noAutoDefaultDeviceChange is not supported on Android, and will be ignored.");
  } }, { key: "validateSimulcastEncodings", value: function(e3) {
    var t3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null, n3 = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
    if (e3) {
      if (!(e3 instanceof Array || Array.isArray(e3)))
        throw new Error("encodings must be an Array");
      if (!Ac(e3.length, 1, 3))
        throw new Error("encodings must be an Array with between 1 to ".concat(3, " layers"));
      for (var r4 = 0; r4 < e3.length; r4++) {
        var i4 = e3[r4];
        for (var o3 in this._validateEncodingLayerHasValidProperties(i4), i4)
          if (Ya.includes(o3)) {
            if ("number" != typeof i4[o3])
              throw new Error("".concat(o3, " must be a number"));
            if (t3) {
              var s3 = t3[o3], a3 = s3.min, c4 = s3.max;
              if (!Ac(i4[o3], a3, c4))
                throw new Error("".concat(o3, " value not in range. valid range: ").concat(a3, " to ").concat(c4));
            }
          } else if (!["active", "scalabilityMode"].includes(o3))
            throw new Error("Invalid key ".concat(o3, ", valid keys are:") + Object.values(Ya));
        if (n3 && !i4.hasOwnProperty("maxBitrate"))
          throw new Error("maxBitrate is not specified");
      }
    }
  } }, { key: "startRemoteMediaPlayer", value: (P3 = p(function* (e3) {
    var t3 = this, n3 = e3.url, r4 = e3.settings, i4 = void 0 === r4 ? { state: ps.PLAY } : r4;
    try {
      !function(e4) {
        if ("string" != typeof e4)
          throw new Error('url parameter must be "string" type');
      }(n3), Pc(i4), function(e4) {
        for (var t4 in e4)
          if (!Xa.includes(t4))
            throw new Error("Invalid key ".concat(t4, ", valid keys are: ").concat(Xa));
        e4.simulcastEncodings && this.validateSimulcastEncodings(e4.simulcastEncodings, Ka, true);
      }(i4);
    } catch (e4) {
      throw console.error("invalid argument Error: ".concat(e4)), console.error('startRemoteMediaPlayer arguments must be of the form:\n  { url: "playback url",\n  settings?:\n  {state: "play"|"pause", simulcastEncodings?: [{}] } }'), e4;
    }
    return new Promise(function(e4, r5) {
      t3.sendMessageToCallMachine({ action: "daily-method-start-remote-media-player", url: n3, settings: i4 }, function(t4) {
        t4.error ? r5({ error: t4.error, errorMsg: t4.errorMsg }) : e4({ session_id: t4.session_id, remoteMediaPlayerState: { state: t4.state, settings: t4.settings } });
      });
    });
  }), function(e3) {
    return P3.apply(this, arguments);
  }) }, { key: "stopRemoteMediaPlayer", value: (O3 = p(function* (e3) {
    var t3 = this;
    if ("string" != typeof e3)
      throw new Error(" remotePlayerID must be of type string");
    return new Promise(function(n3, r4) {
      t3.sendMessageToCallMachine({ action: "daily-method-stop-remote-media-player", session_id: e3 }, function(e4) {
        e4.error ? r4({ error: e4.error, errorMsg: e4.errorMsg }) : n3();
      });
    });
  }), function(e3) {
    return O3.apply(this, arguments);
  }) }, { key: "updateRemoteMediaPlayer", value: (T3 = p(function* (e3) {
    var t3 = this, n3 = e3.session_id, r4 = e3.settings;
    try {
      Pc(r4);
    } catch (e4) {
      throw console.error("invalid argument Error: ".concat(e4)), console.error('updateRemoteMediaPlayer arguments must be of the form:\n  session_id: "participant session",\n  { settings?: {state: "play"|"pause"} }'), e4;
    }
    return new Promise(function(e4, i4) {
      t3.sendMessageToCallMachine({ action: "daily-method-update-remote-media-player", session_id: n3, settings: r4 }, function(t4) {
        t4.error ? i4({ error: t4.error, errorMsg: t4.errorMsg }) : e4({ session_id: t4.session_id, remoteMediaPlayerState: { state: t4.state, settings: t4.settings } });
      });
    });
  }), function(e3) {
    return T3.apply(this, arguments);
  }) }, { key: "startTranscription", value: function(e3) {
    sc(this._callState, "startTranscription()"), this.sendMessageToCallMachine(Va({ action: "daily-method-start-transcription" }, e3));
  } }, { key: "updateTranscription", value: function(e3) {
    if (sc(this._callState, "updateTranscription()"), !e3)
      throw new Error("updateTranscription Error: options is mandatory");
    if ("object" !== n(e3))
      throw new Error("updateTranscription Error: options must be object type");
    if (e3.participants && !Array.isArray(e3.participants))
      throw new Error("updateTranscription Error: participants must be an array");
    this.sendMessageToCallMachine(Va({ action: "daily-method-update-transcription" }, e3));
  } }, { key: "stopTranscription", value: function(e3) {
    if (sc(this._callState, "stopTranscription()"), e3 && "object" !== n(e3))
      throw new Error("stopTranscription Error: options must be object type");
    if (e3 && !e3.instanceId)
      throw new Error('"instanceId" not provided');
    this.sendMessageToCallMachine(Va({ action: "daily-method-stop-transcription" }, e3));
  } }, { key: "startDialOut", value: (E3 = p(function* (e3) {
    var t3 = this;
    sc(this._callState, "startDialOut()");
    var n3 = function(e4) {
      if (e4) {
        if (!Array.isArray(e4))
          throw new Error("Error starting dial out: audio codec must be an array");
        if (e4.length <= 0)
          throw new Error("Error starting dial out: audio codec array specified but empty");
        e4.forEach(function(e5) {
          if ("string" != typeof e5)
            throw new Error("Error starting dial out: audio codec must be a string");
          if ("OPUS" !== e5 && "PCMU" !== e5 && "PCMA" !== e5 && "G722" !== e5)
            throw new Error("Error starting dial out: audio codec must be one of OPUS, PCMU, PCMA, G722");
        });
      }
    };
    if (!e3.sipUri && !e3.phoneNumber)
      throw new Error("Error starting dial out: either a sip uri or phone number must be provided");
    if (e3.sipUri && e3.phoneNumber)
      throw new Error("Error starting dial out: only one of sip uri or phone number must be provided");
    if (e3.sipUri) {
      if ("string" != typeof e3.sipUri)
        throw new Error("Error starting dial out: sipUri must be a string");
      if (!e3.sipUri.startsWith("sip:"))
        throw new Error("Error starting dial out: Invalid SIP URI, must start with 'sip:'");
      if (e3.video && "boolean" != typeof e3.video)
        throw new Error("Error starting dial out: video must be a boolean value");
      !function(e4) {
        if (e4 && (n3(e4.audio), e4.video)) {
          if (!Array.isArray(e4.video))
            throw new Error("Error starting dial out: video codec must be an array");
          if (e4.video.length <= 0)
            throw new Error("Error starting dial out: video codec array specified but empty");
          e4.video.forEach(function(e5) {
            if ("string" != typeof e5)
              throw new Error("Error starting dial out: video codec must be a string");
            if ("H264" !== e5 && "VP8" !== e5)
              throw new Error("Error starting dial out: video codec must be H264 or VP8");
          });
        }
      }(e3.codecs);
    }
    if (e3.phoneNumber) {
      if ("string" != typeof e3.phoneNumber)
        throw new Error("Error starting dial out: phoneNumber must be a string");
      if (!/^\+\d{1,}$/.test(e3.phoneNumber))
        throw new Error("Error starting dial out: Invalid phone number, must be valid phone number as per E.164");
      e3.codecs && n3(e3.codecs.audio);
    }
    if (e3.callerId) {
      if ("string" != typeof e3.callerId)
        throw new Error("Error starting dial out: callerId must be a string");
      if (e3.sipUri)
        throw new Error("Error starting dial out: callerId not allowed with sipUri");
    }
    if (e3.displayName) {
      if ("string" != typeof e3.displayName)
        throw new Error("Error starting dial out: displayName must be a string");
      if (e3.displayName.length >= 200)
        throw new Error("Error starting dial out: displayName length must be less than 200");
    }
    if (e3.userId) {
      if ("string" != typeof e3.userId)
        throw new Error("Error starting dial out: userId must be a string");
      if (e3.userId.length > 36)
        throw new Error("Error starting dial out: userId length must be less than or equal to 36");
    }
    return new Promise(function(n4, r4) {
      t3.sendMessageToCallMachine(Va({ action: "dialout-start" }, e3), function(e4) {
        e4.error ? r4(e4.error) : n4(e4);
      });
    });
  }), function(e3) {
    return E3.apply(this, arguments);
  }) }, { key: "stopDialOut", value: function(e3) {
    var t3 = this;
    return sc(this._callState, "stopDialOut()"), new Promise(function(n3, r4) {
      t3.sendMessageToCallMachine(Va({ action: "dialout-stop" }, e3), function(e4) {
        e4.error ? r4(e4.error) : n3(e4);
      });
    });
  } }, { key: "sipCallTransfer", value: (C3 = p(function* (e3) {
    var t3 = this;
    if (sc(this._callState, "sipCallTransfer()"), !e3)
      throw new Error("sipCallTransfer() requires a sessionId and toEndPoint");
    return e3.useSipRefer = false, Oc(e3, "sipCallTransfer"), new Promise(function(n3, r4) {
      t3.sendMessageToCallMachine(Va({ action: gs }, e3), function(e4) {
        e4.error ? r4(e4.error) : n3(e4);
      });
    });
  }), function(e3) {
    return C3.apply(this, arguments);
  }) }, { key: "sipRefer", value: (M3 = p(function* (e3) {
    var t3 = this;
    if (sc(this._callState, "sipRefer()"), !e3)
      throw new Error("sessionId and toEndPoint are mandatory parameter");
    return e3.useSipRefer = true, Oc(e3, "sipRefer"), new Promise(function(n3, r4) {
      t3.sendMessageToCallMachine(Va({ action: gs }, e3), function(e4) {
        e4.error ? r4(e4.error) : n3(e4);
      });
    });
  }), function(e3) {
    return M3.apply(this, arguments);
  }) }, { key: "sendDTMF", value: (k3 = p(function* (e3) {
    var t3 = this;
    return sc(this._callState, "sendDTMF()"), function(e4) {
      var t4 = e4.sessionId, n3 = e4.tones;
      if (!t4 || !n3)
        throw new Error("sessionId and tones are mandatory parameter");
      if ("string" != typeof t4 || "string" != typeof n3)
        throw new Error("sessionId and tones should be of string type");
      if (n3.length > 20)
        throw new Error("tones string must be upto 20 characters");
      var r4 = /[^0-9A-D*#]/g, i4 = n3.match(r4);
      if (i4 && i4[0])
        throw new Error("".concat(i4[0], " is not valid DTMF tone"));
    }(e3), new Promise(function(n3, r4) {
      t3.sendMessageToCallMachine(Va({ action: "send-dtmf" }, e3), function(e4) {
        e4.error ? r4(e4.error) : n3(e4);
      });
    });
  }), function(e3) {
    return k3.apply(this, arguments);
  }) }, { key: "getNetworkStats", value: function() {
    var e3 = this;
    if (this._callState !== bi) {
      return Promise.resolve(Va({ stats: { latest: {} } }, this._network));
    }
    return new Promise(function(t3) {
      e3.sendMessageToCallMachine({ action: "get-calc-stats" }, function(n3) {
        t3(Va(Va({}, e3._network), {}, { stats: n3.stats }));
      });
    });
  } }, { key: "testWebsocketConnectivity", value: (S3 = p(function* () {
    var e3 = this;
    if (uc(this._testCallInProgress, "testWebsocketConnectivity()"), this.needsLoad())
      try {
        yield this.load();
      } catch (e4) {
        return Promise.reject(e4);
      }
    return new Promise(function(t3, n3) {
      e3.sendMessageToCallMachine({ action: "test-websocket-connectivity" }, function(e4) {
        e4.error ? n3(e4.error) : t3(e4.results);
      });
    });
  }), function() {
    return S3.apply(this, arguments);
  }) }, { key: "abortTestWebsocketConnectivity", value: function() {
    this.sendMessageToCallMachine({ action: "abort-test-websocket-connectivity" });
  } }, { key: "_validateVideoTrackForNetworkTests", value: function(e3) {
    return e3 ? e3 instanceof MediaStreamTrack ? !!Ea(e3, { isLocalScreenVideo: false }) || (console.error("Video track is not playable. This test needs a live video track."), false) : (console.error("Video track needs to be of type `MediaStreamTrack`."), false) : (console.error("Missing video track. You must provide a video track in order to run this test."), false);
  } }, { key: "testCallQuality", value: (w3 = p(function* () {
    var t3 = this;
    hc(), dc(this._callObjectMode, "testCallQuality()"), lc(this._callMachineInitialized, "testCallQuality()", null, true), cc(this._callState, this._isPreparingToJoin, "testCallQuality()");
    var n3 = this._testCallAlreadyInProgress, r4 = function(e3) {
      n3 || (t3._testCallInProgress = e3);
    };
    if (r4(true), this.needsLoad())
      try {
        var i4 = this._callState;
        yield this.load(), this._callState = i4;
      } catch (e3) {
        return r4(false), Promise.reject(e3);
      }
    return new Promise(function(n4) {
      t3.sendMessageToCallMachine({ action: "test-call-quality", dailyJsVersion: t3.properties.dailyJsVersion }, function(i5) {
        var o3 = i5.results, s3 = o3.result, a3 = e(o3, Fa);
        if ("failed" === s3) {
          var c4, l3 = Va({}, a3);
          null !== (c4 = a3.error) && void 0 !== c4 && c4.details ? (a3.error.details = JSON.parse(a3.error.details), l3.error = Va(Va({}, l3.error), {}, { details: Va({}, l3.error.details) }), l3.error.details.duringTest = "testCallQuality") : (l3.error = l3.error ? Va({}, l3.error) : {}, l3.error.details = { duringTest: "testCallQuality" }), t3._maybeSendToSentry(l3);
        }
        r4(false), n4(Va({ result: s3 }, a3));
      });
    });
  }), function() {
    return w3.apply(this, arguments);
  }) }, { key: "stopTestCallQuality", value: function() {
    this.sendMessageToCallMachine({ action: "stop-test-call-quality" });
  } }, { key: "testConnectionQuality", value: (_3 = p(function* (e3) {
    var t3;
    ys() ? (console.warn("testConnectionQuality() is deprecated: use testPeerToPeerCallQuality() instead"), t3 = yield this.testPeerToPeerCallQuality(e3)) : (console.warn("testConnectionQuality() is deprecated: use testCallQuality() instead"), t3 = yield this.testCallQuality());
    var n3 = { result: t3.result, secondsElapsed: t3.secondsElapsed };
    return t3.data && (n3.data = { maxRTT: t3.data.maxRoundTripTime, packetLoss: t3.data.avgRecvPacketLoss }), n3;
  }), function(e3) {
    return _3.apply(this, arguments);
  }) }, { key: "testPeerToPeerCallQuality", value: (b3 = p(function* (e3) {
    var t3 = this;
    if (uc(this._testCallInProgress, "testPeerToPeerCallQuality()"), this.needsLoad())
      try {
        yield this.load();
      } catch (e4) {
        return Promise.reject(e4);
      }
    var n3 = e3.videoTrack, r4 = e3.duration;
    if (!this._validateVideoTrackForNetworkTests(n3))
      throw new Error("Video track error");
    return this._sharedTracks.videoTrackForConnectionQualityTest = n3, new Promise(function(e4, n4) {
      t3.sendMessageToCallMachine({ action: "test-p2p-call-quality", duration: r4 }, function(t4) {
        t4.error ? n4(t4.error) : e4(t4.results);
      });
    });
  }), function(e3) {
    return b3.apply(this, arguments);
  }) }, { key: "stopTestConnectionQuality", value: function() {
    ys() ? (console.warn("stopTestConnectionQuality() is deprecated: use testPeerToPeerCallQuality() and stopTestPeerToPeerCallQuality() instead"), this.stopTestPeerToPeerCallQuality()) : (console.warn("stopTestConnectionQuality() is deprecated: use testCallQuality() and stopTestCallQuality() instead"), this.stopTestCallQuality());
  } }, { key: "stopTestPeerToPeerCallQuality", value: function() {
    this.sendMessageToCallMachine({ action: "stop-test-p2p-call-quality" });
  } }, { key: "testNetworkConnectivity", value: (y3 = p(function* (e3) {
    var t3 = this;
    if (uc(this._testCallInProgress, "testNetworkConnectivity()"), this.needsLoad())
      try {
        yield this.load();
      } catch (e4) {
        return Promise.reject(e4);
      }
    if (!this._validateVideoTrackForNetworkTests(e3))
      throw new Error("Video track error");
    return this._sharedTracks.videoTrackForNetworkConnectivityTest = e3, new Promise(function(e4, n3) {
      t3.sendMessageToCallMachine({ action: "test-network-connectivity" }, function(t4) {
        t4.error ? n3(t4.error) : e4(t4.results);
      });
    });
  }), function(e3) {
    return y3.apply(this, arguments);
  }) }, { key: "abortTestNetworkConnectivity", value: function() {
    this.sendMessageToCallMachine({ action: "abort-test-network-connectivity" });
  } }, { key: "getCpuLoadStats", value: function() {
    var e3 = this;
    return new Promise(function(t3) {
      if (e3._callState === bi) {
        e3.sendMessageToCallMachine({ action: "get-cpu-load-stats" }, function(e4) {
          t3(e4.cpuStats);
        });
      } else
        t3({ cpuLoadState: void 0, cpuLoadStateReason: void 0, stats: {} });
    });
  } }, { key: "_validateEncodingLayerHasValidProperties", value: function(e3) {
    var t3;
    if (!((null === (t3 = Object.keys(e3)) || void 0 === t3 ? void 0 : t3.length) > 0))
      throw new Error("Empty encoding is not allowed. At least one of these valid keys should be specified:" + Object.values(Ya));
  } }, { key: "_validateVideoSendSettings", value: function(e3, t3) {
    var r4 = "screenVideo" === e3 ? ["default-screen-video", "detail-optimized", "motion-optimized", "motion-and-detail-balanced"] : ["default-video", "bandwidth-optimized", "bandwidth-and-quality-balanced", "quality-optimized", "adaptive-2-layers", "adaptive-3-layers"], i4 = "Video send settings should be either an object or one of the supported presets: ".concat(r4.join());
    if ("string" == typeof t3) {
      if (!r4.includes(t3))
        throw new Error(i4);
    } else {
      if ("object" !== n(t3))
        throw new Error(i4);
      if (!t3.maxQuality && !t3.encodings && void 0 === t3.allowAdaptiveLayers)
        throw new Error("Video send settings must contain at least maxQuality, allowAdaptiveLayers or encodings attribute");
      if (t3.maxQuality && -1 === ["low", "medium", "high"].indexOf(t3.maxQuality))
        throw new Error("maxQuality must be either low, medium or high");
      if (t3.encodings) {
        var o3 = false;
        switch (Object.keys(t3.encodings).length) {
          case 1:
            o3 = !t3.encodings.low;
            break;
          case 2:
            o3 = !t3.encodings.low || !t3.encodings.medium;
            break;
          case 3:
            o3 = !t3.encodings.low || !t3.encodings.medium || !t3.encodings.high;
            break;
          default:
            o3 = true;
        }
        if (o3)
          throw new Error("Encodings must be defined as: low, low and medium, or low, medium and high.");
        t3.encodings.low && this._validateEncodingLayerHasValidProperties(t3.encodings.low), t3.encodings.medium && this._validateEncodingLayerHasValidProperties(t3.encodings.medium), t3.encodings.high && this._validateEncodingLayerHasValidProperties(t3.encodings.high);
      }
    }
  } }, { key: "validateUpdateSendSettings", value: function(e3) {
    var t3 = this;
    if (!e3 || 0 === Object.keys(e3).length)
      throw new Error("Send settings must contain at least information for one track!");
    Object.entries(e3).forEach(function(e4) {
      var n3 = f(e4, 2), r4 = n3[0], i4 = n3[1];
      t3._validateVideoSendSettings(r4, i4);
    });
  } }, { key: "updateSendSettings", value: function(e3) {
    var t3 = this;
    return this.validateUpdateSendSettings(e3), this.needsLoad() ? (this._preloadCache.sendSettings = e3, { sendSettings: this._preloadCache.sendSettings }) : new Promise(function(n3, r4) {
      t3.sendMessageToCallMachine({ action: "update-send-settings", sendSettings: e3 }, function(e4) {
        e4.error ? r4(e4.error) : n3(e4.sendSettings);
      });
    });
  } }, { key: "getSendSettings", value: function() {
    return this._sendSettings || this._preloadCache.sendSettings;
  } }, { key: "getLocalAudioLevel", value: function() {
    return this._localAudioLevel;
  } }, { key: "getRemoteParticipantsAudioLevel", value: function() {
    return this._remoteParticipantsAudioLevel;
  } }, { key: "getActiveSpeaker", value: function() {
    return hc(), this._activeSpeaker;
  } }, { key: "setActiveSpeakerMode", value: function(e3) {
    return hc(), this.sendMessageToCallMachine({ action: "set-active-speaker-mode", enabled: e3 }), this;
  } }, { key: "activeSpeakerMode", value: function() {
    return hc(), this._activeSpeakerMode;
  } }, { key: "subscribeToTracksAutomatically", value: function() {
    return this._preloadCache.subscribeToTracksAutomatically;
  } }, { key: "setSubscribeToTracksAutomatically", value: function(e3) {
    return sc(this._callState, "setSubscribeToTracksAutomatically()", "Use the subscribeToTracksAutomatically configuration property."), this._preloadCache.subscribeToTracksAutomatically = e3, this.sendMessageToCallMachine({ action: "daily-method-subscribe-to-tracks-automatically", enabled: e3 }), this;
  } }, { key: "enumerateDevices", value: (m3 = p(function* () {
    var e3 = this;
    if (this._callObjectMode) {
      var t3 = yield navigator.mediaDevices.enumerateDevices();
      return "Firefox" === Os() && Ps().major > 115 && Ps().major < 123 && (t3 = t3.filter(function(e4) {
        return "audiooutput" !== e4.kind;
      })), { devices: t3.map(function(e4) {
        var t4 = JSON.parse(JSON.stringify(e4));
        if (!ys() && "videoinput" === e4.kind && e4.getCapabilities) {
          var n3, r4 = e4.getCapabilities();
          t4.facing = (null == r4 || null === (n3 = r4.facingMode) || void 0 === n3 ? void 0 : n3.length) >= 1 ? r4.facingMode[0] : void 0;
        }
        return t4;
      }) };
    }
    return new Promise(function(t4) {
      e3.sendMessageToCallMachine({ action: "enumerate-devices" }, function(e4) {
        t4({ devices: e4.devices });
      });
    });
  }), function() {
    return m3.apply(this, arguments);
  }) }, { key: "sendAppMessage", value: function(e3) {
    var t3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "*";
    if (sc(this._callState, "sendAppMessage()"), JSON.stringify(e3).length > this._maxAppMessageSize)
      throw new Error("Message data too large. Max size is " + this._maxAppMessageSize);
    return this.sendMessageToCallMachine({ action: "app-msg", data: e3, to: t3 }), this;
  } }, { key: "addFakeParticipant", value: function(e3) {
    return hc(), sc(this._callState, "addFakeParticipant()"), this.sendMessageToCallMachine(Va({ action: "add-fake-participant" }, e3)), this;
  } }, { key: "setShowNamesMode", value: function(e3) {
    return pc(this._callObjectMode, "setShowNamesMode()"), hc(), e3 && "always" !== e3 && "never" !== e3 ? (console.error('setShowNamesMode argument should be "always", "never", or false'), this) : (this.sendMessageToCallMachine({ action: "set-show-names", mode: e3 }), this);
  } }, { key: "setShowLocalVideo", value: function() {
    var e3 = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];
    return pc(this._callObjectMode, "setShowLocalVideo()"), hc(), sc(this._callState, "setShowLocalVideo()"), "boolean" != typeof e3 ? (console.error("setShowLocalVideo only accepts a boolean value"), this) : (this.sendMessageToCallMachine({ action: "set-show-local-video", show: e3 }), this._showLocalVideo = e3, this);
  } }, { key: "showLocalVideo", value: function() {
    return pc(this._callObjectMode, "showLocalVideo()"), hc(), this._showLocalVideo;
  } }, { key: "setShowParticipantsBar", value: function() {
    var e3 = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];
    return pc(this._callObjectMode, "setShowParticipantsBar()"), hc(), sc(this._callState, "setShowParticipantsBar()"), "boolean" != typeof e3 ? (console.error("setShowParticipantsBar only accepts a boolean value"), this) : (this.sendMessageToCallMachine({ action: "set-show-participants-bar", show: e3 }), this._showParticipantsBar = e3, this);
  } }, { key: "showParticipantsBar", value: function() {
    return pc(this._callObjectMode, "showParticipantsBar()"), hc(), this._showParticipantsBar;
  } }, { key: "customIntegrations", value: function() {
    return hc(), pc(this._callObjectMode, "customIntegrations()"), this._customIntegrations;
  } }, { key: "setCustomIntegrations", value: function(e3) {
    return hc(), pc(this._callObjectMode, "setCustomIntegrations()"), sc(this._callState, "setCustomIntegrations()"), Ec(e3) ? (this.sendMessageToCallMachine({ action: "set-custom-integrations", integrations: e3 }), this._customIntegrations = e3, this) : this;
  } }, { key: "startCustomIntegrations", value: function(e3) {
    var t3 = this;
    if (hc(), pc(this._callObjectMode, "startCustomIntegrations()"), sc(this._callState, "startCustomIntegrations()"), Array.isArray(e3) && e3.some(function(e4) {
      return "string" != typeof e4;
    }) || !Array.isArray(e3) && "string" != typeof e3)
      return console.error("startCustomIntegrations() only accepts string | string[]"), this;
    var n3 = "string" == typeof e3 ? [e3] : e3, r4 = n3.filter(function(e4) {
      return !(e4 in t3._customIntegrations);
    });
    return r4.length ? (console.error(`Can't find custom integration(s): "`.concat(r4.join(", "), '"')), this) : (this.sendMessageToCallMachine({ action: "start-custom-integrations", ids: n3 }), this);
  } }, { key: "stopCustomIntegrations", value: function(e3) {
    var t3 = this;
    if (hc(), pc(this._callObjectMode, "stopCustomIntegrations()"), sc(this._callState, "stopCustomIntegrations()"), Array.isArray(e3) && e3.some(function(e4) {
      return "string" != typeof e4;
    }) || !Array.isArray(e3) && "string" != typeof e3)
      return console.error("stopCustomIntegrations() only accepts string | string[]"), this;
    var n3 = "string" == typeof e3 ? [e3] : e3, r4 = n3.filter(function(e4) {
      return !(e4 in t3._customIntegrations);
    });
    return r4.length ? (console.error(`Can't find custom integration(s): "`.concat(r4.join(", "), '"')), this) : (this.sendMessageToCallMachine({ action: "stop-custom-integrations", ids: n3 }), this);
  } }, { key: "customTrayButtons", value: function() {
    return pc(this._callObjectMode, "customTrayButtons()"), hc(), this._customTrayButtons;
  } }, { key: "updateCustomTrayButtons", value: function(e3) {
    return pc(this._callObjectMode, "updateCustomTrayButtons()"), hc(), sc(this._callState, "updateCustomTrayButtons()"), Cc(e3) ? (this.sendMessageToCallMachine({ action: "update-custom-tray-buttons", btns: e3 }), this._customTrayButtons = e3, this) : (console.error("updateCustomTrayButtons only accepts a dictionary of the type ".concat(JSON.stringify(ec))), this);
  } }, { key: "theme", value: function() {
    return pc(this._callObjectMode, "theme()"), this.properties.theme;
  } }, { key: "setTheme", value: function(e3) {
    var t3 = this;
    return pc(this._callObjectMode, "setTheme()"), new Promise(function(n3, r4) {
      try {
        t3.validateProperties({ theme: e3 }), t3.properties.theme = Va({}, e3), t3.sendMessageToCallMachine({ action: "set-theme", theme: t3.properties.theme });
        try {
          t3.emitDailyJSEvent({ action: eo, theme: t3.properties.theme });
        } catch (e4) {
          console.log("could not emit 'theme-updated'", e4);
        }
        n3(t3.properties.theme);
      } catch (e4) {
        r4(e4);
      }
    });
  } }, { key: "requestFullscreen", value: (g3 = p(function* () {
    if (hc(), this._iframe && !document.fullscreenElement && ws())
      try {
        (yield this._iframe.requestFullscreen) ? this._iframe.requestFullscreen() : this._iframe.webkitRequestFullscreen();
      } catch (e3) {
        console.log("could not make video call fullscreen", e3);
      }
  }), function() {
    return g3.apply(this, arguments);
  }) }, { key: "exitFullscreen", value: function() {
    hc(), document.fullscreenElement ? document.exitFullscreen() : document.webkitFullscreenElement && document.webkitExitFullscreen();
  } }, { key: "getSidebarView", value: (v3 = p(function* () {
    var e3 = this;
    return this._callObjectMode ? (console.error("getSidebarView is not available in callObject mode"), Promise.resolve(null)) : new Promise(function(t3) {
      e3.sendMessageToCallMachine({ action: "get-sidebar-view" }, function(e4) {
        t3(e4.view);
      });
    });
  }), function() {
    return v3.apply(this, arguments);
  }) }, { key: "setSidebarView", value: function(e3) {
    return this._callObjectMode ? (console.error("setSidebarView is not available in callObject mode"), this) : (this.sendMessageToCallMachine({ action: "set-sidebar-view", view: e3 }), this);
  } }, { key: "room", value: (h3 = p(function* () {
    var e3 = this, t3 = (arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}).includeRoomConfigDefaults, n3 = void 0 === t3 || t3;
    return this._accessState.access === Oi || this.needsLoad() ? this.properties.url ? { roomUrlPendingJoin: this.properties.url } : null : new Promise(function(t4) {
      e3.sendMessageToCallMachine({ action: "lib-room-info", includeRoomConfigDefaults: n3 }, function(e4) {
        delete e4.action, delete e4.callbackStamp, t4(e4);
      });
    });
  }), function() {
    return h3.apply(this, arguments);
  }) }, { key: "geo", value: (d3 = p(function* () {
    try {
      var e3 = yield fetch("https://gs.daily.co/_ks_/x-swsl/:");
      return { current: (yield e3.json()).geo };
    } catch (e4) {
      return console.error("geo lookup failed", e4), { current: "" };
    }
  }), function() {
    return d3.apply(this, arguments);
  }) }, { key: "setNetworkTopology", value: (c3 = p(function* (e3) {
    var t3 = this;
    return hc(), sc(this._callState, "setNetworkTopology()"), new Promise(function(n3, r4) {
      t3.sendMessageToCallMachine({ action: "set-network-topology", opts: e3 }, function(e4) {
        e4.error ? r4({ error: e4.error }) : n3({ workerId: e4.workerId });
      });
    });
  }), function(e3) {
    return c3.apply(this, arguments);
  }) }, { key: "getNetworkTopology", value: (i3 = p(function* () {
    var e3 = this;
    return new Promise(function(t3, n3) {
      e3.needsLoad() && t3({ topology: "none" }), e3.sendMessageToCallMachine({ action: "get-network-topology" }, function(e4) {
        e4.error ? n3({ error: e4.error }) : t3({ topology: e4.topology });
      });
    });
  }), function() {
    return i3.apply(this, arguments);
  }) }, { key: "setPlayNewParticipantSound", value: function(e3) {
    if (hc(), "number" != typeof e3 && true !== e3 && false !== e3)
      throw new Error("argument to setShouldPlayNewParticipantSound should be true, false, or a number, but is ".concat(e3));
    this.sendMessageToCallMachine({ action: "daily-method-set-play-ding", arg: e3 });
  } }, { key: "on", value: function(e3, t3) {
    return x.prototype.on.call(this, e3, t3);
  } }, { key: "once", value: function(e3, t3) {
    return x.prototype.once.call(this, e3, t3);
  } }, { key: "off", value: function(e3, t3) {
    return x.prototype.off.call(this, e3, t3);
  } }, { key: "validateProperties", value: function(e3) {
    var t3, n3;
    if (null != e3 && null !== (t3 = e3.dailyConfig) && void 0 !== t3 && t3.userMediaAudioConstraints) {
      var r4, i4;
      ys() || console.warn("userMediaAudioConstraints is deprecated. You can override constraints with inputSettings.audio.settings, found in DailyCallOptions.");
      var o3 = e3.inputSettings || {};
      o3.audio = (null === (r4 = e3.inputSettings) || void 0 === r4 ? void 0 : r4.audio) || {}, o3.audio.settings = (null === (i4 = e3.inputSettings) || void 0 === i4 || null === (i4 = i4.audio) || void 0 === i4 ? void 0 : i4.settings) || {}, o3.audio.settings = Va(Va({}, o3.audio.settings), e3.dailyConfig.userMediaAudioConstraints), e3.inputSettings = o3, delete e3.dailyConfig.userMediaAudioConstraints;
    }
    if (null != e3 && null !== (n3 = e3.dailyConfig) && void 0 !== n3 && n3.userMediaVideoConstraints) {
      var s3, a3;
      ys() || console.warn("userMediaVideoConstraints is deprecated. You can override constraints with inputSettings.video.settings, found in DailyCallOptions.");
      var c4 = e3.inputSettings || {};
      c4.video = (null === (s3 = e3.inputSettings) || void 0 === s3 ? void 0 : s3.video) || {}, c4.video.settings = (null === (a3 = e3.inputSettings) || void 0 === a3 || null === (a3 = a3.video) || void 0 === a3 ? void 0 : a3.settings) || {}, c4.video.settings = Va(Va({}, c4.video.settings), e3.dailyConfig.userMediaVideoConstraints), e3.inputSettings = c4, delete e3.dailyConfig.userMediaVideoConstraints;
    }
    for (var l3 in e3) {
      if (!nc[l3])
        throw new Error("unrecognized property '".concat(l3, "'"));
      if (nc[l3].validate && !nc[l3].validate(e3[l3], this))
        throw new Error("property '".concat(l3, "': ").concat(nc[l3].help));
    }
  } }, { key: "assembleMeetingUrl", value: function() {
    var e3, t3, n3 = Va(Va({}, this.properties), {}, { emb: this.callClientId, embHref: encodeURIComponent(window.location.href), proxy: null !== (e3 = this.properties.dailyConfig) && void 0 !== e3 && e3.proxyUrl ? encodeURIComponent(null === (t3 = this.properties.dailyConfig) || void 0 === t3 ? void 0 : t3.proxyUrl) : void 0 }), r4 = n3.url.match(/\?/) ? "&" : "?";
    return n3.url + r4 + Object.keys(nc).filter(function(e4) {
      return nc[e4].queryString && void 0 !== n3[e4];
    }).map(function(e4) {
      return "".concat(nc[e4].queryString, "=").concat(n3[e4]);
    }).join("&");
  } }, { key: "needsLoad", value: function() {
    return [vi, gi, _i, wi].includes(this._callState);
  } }, { key: "sendMessageToCallMachine", value: function(e3, t3) {
    if (this._destroyed && (this._logUseAfterDestroy(), this.strictMode))
      throw new Error("Use after destroy");
    this._messageChannel.sendMessageToCallMachine(e3, t3, this.callClientId, this._iframe);
  } }, { key: "forwardPackagedMessageToCallMachine", value: function(e3) {
    this._messageChannel.forwardPackagedMessageToCallMachine(e3, this._iframe, this.callClientId);
  } }, { key: "addListenerForPackagedMessagesFromCallMachine", value: function(e3) {
    return this._messageChannel.addListenerForPackagedMessagesFromCallMachine(e3, this.callClientId);
  } }, { key: "removeListenerForPackagedMessagesFromCallMachine", value: function(e3) {
    this._messageChannel.removeListenerForPackagedMessagesFromCallMachine(e3);
  } }, { key: "handleMessageFromCallMachine", value: function(t3) {
    switch (t3.action) {
      case Xi:
        this.sendMessageToCallMachine(Va({ action: Zi }, this.properties));
        break;
      case "call-machine-initialized":
        this._callMachineInitialized = true;
        var n3 = { action: cs, level: "log", code: 1011, stats: { event: "bundle load", time: "no-op" === this._bundleLoadTime ? 0 : this._bundleLoadTime, preLoaded: "no-op" === this._bundleLoadTime, url: Z(this.properties.dailyConfig) } };
        this.sendMessageToCallMachine(n3), this._delayDuplicateInstanceLog && this._logDuplicateInstanceAttempt();
        break;
      case ro:
        this._loadedCallback && (this._loadedCallback(), this._loadedCallback = null), this.emitDailyJSEvent(t3);
        break;
      case ao:
        var r4, i4 = Va({}, t3);
        delete i4.internal, this._maxAppMessageSize = (null === (r4 = t3.internal) || void 0 === r4 ? void 0 : r4._maxAppMessageSize) || rs, this._joinedCallback && (this._joinedCallback(t3.participants), this._joinedCallback = null), this.emitDailyJSEvent(i4);
        break;
      case lo:
      case uo:
        if (this._callState === _i)
          return;
        if (t3.participant && t3.participant.session_id) {
          var o3 = t3.participant.local ? "local" : t3.participant.session_id;
          if (this._callObjectMode) {
            var s3 = this._callMachine().store;
            ua(t3.participant, s3), da(t3.participant, s3), ha(t3.participant, this._participants[o3], s3);
          }
          try {
            this.maybeParticipantTracksStopped(this._participants[o3], t3.participant), this.maybeParticipantTracksStarted(this._participants[o3], t3.participant), this.maybeEventRecordingStopped(this._participants[o3], t3.participant), this.maybeEventRecordingStarted(this._participants[o3], t3.participant);
          } catch (e3) {
            console.error("track events error", e3);
          }
          this.compareEqualForParticipantUpdateEvent(t3.participant, this._participants[o3]) || (this._participants[o3] = Va({}, t3.participant), this.toggleParticipantAudioBasedOnNativeAudioFocus(), this.emitDailyJSEvent(t3));
        }
        break;
      case po:
        if (t3.participant && t3.participant.session_id) {
          var a3 = this._participants[t3.participant.session_id];
          a3 && this.maybeParticipantTracksStopped(a3, null), delete this._participants[t3.participant.session_id], this.emitDailyJSEvent(t3);
        }
        break;
      case ho:
        N(this._participantCounts, t3.participantCounts) || (this._participantCounts = t3.participantCounts, this.emitDailyJSEvent(t3));
        break;
      case fo:
        var c4 = { access: t3.access };
        t3.awaitingAccess && (c4.awaitingAccess = t3.awaitingAccess), N(this._accessState, c4) || (this._accessState = c4, this.emitDailyJSEvent(t3));
        break;
      case vo:
        if (t3.meetingSession) {
          this._meetingSessionSummary = t3.meetingSession, this.emitDailyJSEvent(t3);
          var l3 = Va(Va({}, t3), {}, { action: "meeting-session-updated" });
          this.emitDailyJSEvent(l3);
        }
        break;
      case ns:
        var u3;
        this._iframe && !t3.preserveIframe && (this._iframe.src = ""), this._updateCallState(wi), this.resetMeetingDependentVars(), this._loadedCallback && (this._loadedCallback(t3.errorMsg), this._loadedCallback = null), t3.preserveIframe;
        var d4 = e(t3, Ba);
        null != d4 && null !== (u3 = d4.error) && void 0 !== u3 && u3.details && (d4.error.details = JSON.parse(d4.error.details)), this._maybeSendToSentry(t3), this._joinedCallback && (this._joinedCallback(null, d4), this._joinedCallback = null), this.emitDailyJSEvent(d4);
        break;
      case co:
        this._callState !== wi && this._updateCallState(_i), this.resetMeetingDependentVars(), this._resolveLeave && (this._resolveLeave(), this._resolveLeave = null), this.emitDailyJSEvent(t3);
        break;
      case "selected-devices-updated":
        t3.devices && this.emitDailyJSEvent(t3);
        break;
      case Jo:
        var p3 = t3.state, h4 = t3.threshold, f3 = t3.quality, v5 = p3.state, g4 = p3.reasons;
        v5 === this._network.networkState && N(g4, this._network.networkStateReasons) && h4 === this._network.threshold && f3 === this._network.quality || (this._network.networkState = v5, this._network.networkStateReasons = g4, this._network.quality = f3, this._network.threshold = h4, t3.networkState = v5, g4.length && (t3.networkStateReasons = g4), delete t3.state, this.emitDailyJSEvent(t3));
        break;
      case qo:
        t3 && t3.cpuLoadState && this.emitDailyJSEvent(t3);
        break;
      case zo:
        t3 && void 0 !== t3.faceCounts && this.emitDailyJSEvent(t3);
        break;
      case Uo:
        var m4 = t3.activeSpeaker;
        this._activeSpeaker.peerId !== m4.peerId && (this._activeSpeaker.peerId = m4.peerId, this.emitDailyJSEvent({ action: t3.action, activeSpeaker: this._activeSpeaker }));
        break;
      case "show-local-video-changed":
        if (this._callObjectMode)
          return;
        var y4 = t3.show;
        this._showLocalVideo = y4, this.emitDailyJSEvent({ action: t3.action, show: y4 });
        break;
      case Vo:
        var b4 = t3.enabled;
        this._activeSpeakerMode !== b4 && (this._activeSpeakerMode = b4, this.emitDailyJSEvent({ action: t3.action, enabled: this._activeSpeakerMode }));
        break;
      case yo:
      case bo:
      case _o:
        this._waitingParticipants = t3.allWaitingParticipants, this.emitDailyJSEvent({ action: t3.action, participant: t3.participant });
        break;
      case Zo:
        N(this._receiveSettings, t3.receiveSettings) || (this._receiveSettings = t3.receiveSettings, this.emitDailyJSEvent({ action: t3.action, receiveSettings: t3.receiveSettings }));
        break;
      case es:
        this._maybeUpdateInputSettings(t3.inputSettings);
        break;
      case "send-settings-updated":
        N(this._sendSettings, t3.sendSettings) || (this._sendSettings = t3.sendSettings, this._preloadCache.sendSettings = null, this.emitDailyJSEvent({ action: t3.action, sendSettings: t3.sendSettings }));
        break;
      case "local-audio-level":
        this._localAudioLevel = t3.audioLevel, this._preloadCache.localAudioLevelObserver = null, this.emitDailyJSEvent(t3);
        break;
      case "remote-participants-audio-level":
        this._remoteParticipantsAudioLevel = t3.participantsAudioLevel, this._preloadCache.remoteParticipantsAudioLevelObserver = null, this.emitDailyJSEvent(t3);
        break;
      case Lo:
        var _4 = t3.session_id;
        this._rmpPlayerState[_4] = t3.playerState, this.emitDailyJSEvent(t3);
        break;
      case No:
        delete this._rmpPlayerState[t3.session_id], this.emitDailyJSEvent(t3);
        break;
      case Do:
        var w4 = t3.session_id, S4 = this._rmpPlayerState[w4];
        S4 && this.compareEqualForRMPUpdateEvent(S4, t3.remoteMediaPlayerState) || (this._rmpPlayerState[w4] = t3.remoteMediaPlayerState, this.emitDailyJSEvent(t3));
        break;
      case "custom-button-click":
      case "sidebar-view-changed":
        this.emitDailyJSEvent(t3);
        break;
      case go:
        var k4 = this._meetingSessionState.topology !== (t3.meetingSessionState && t3.meetingSessionState.topology);
        this._meetingSessionState = jc(t3.meetingSessionState, this._callObjectMode), (this._callObjectMode || k4) && this.emitDailyJSEvent(t3);
        break;
      case Ro:
        this._isScreenSharing = true, this.emitDailyJSEvent(t3);
        break;
      case Fo:
      case Bo:
        this._isScreenSharing = false, this.emitDailyJSEvent(t3);
        break;
      case Eo:
      case To:
      case Oo:
      case Po:
      case Ao:
      case ko:
      case Mo:
      case Co:
      case io:
      case oo:
      case Io:
      case xo:
      case "test-completed":
      case $o:
      case jo:
      case Go:
      case Qo:
      case Ko:
      case Yo:
      case ts:
      case Xo:
      case "dialin-ready":
      case "dialin-connected":
      case "dialin-error":
      case "dialin-stopped":
      case "dialin-warning":
      case "dialout-connected":
      case "dialout-answered":
      case "dialout-error":
      case "dialout-stopped":
      case "dialout-warning":
        this.emitDailyJSEvent(t3);
        break;
      case "request-fullscreen":
        this.requestFullscreen();
        break;
      case "request-exit-fullscreen":
        this.exitFullscreen();
    }
  } }, { key: "maybeEventRecordingStopped", value: function(e3, t3) {
    var n3 = "record";
    e3 && (t3.local || false !== t3[n3] || e3[n3] === t3[n3] || this.emitDailyJSEvent({ action: To }));
  } }, { key: "maybeEventRecordingStarted", value: function(e3, t3) {
    var n3 = "record";
    e3 && (t3.local || true !== t3[n3] || e3[n3] === t3[n3] || this.emitDailyJSEvent({ action: Eo }));
  } }, { key: "_trackStatePlayable", value: function(e3) {
    return !(!e3 || e3.state !== Ti);
  } }, { key: "_trackChanged", value: function(e3, t3) {
    return !((null == e3 ? void 0 : e3.id) === (null == t3 ? void 0 : t3.id));
  } }, { key: "maybeEventTrackStopped", value: function(e3, t3, n3) {
    var r4, i4, o3 = null !== (r4 = null == t3 ? void 0 : t3.tracks[e3]) && void 0 !== r4 ? r4 : null, s3 = null !== (i4 = null == n3 ? void 0 : n3.tracks[e3]) && void 0 !== i4 ? i4 : null, a3 = null == o3 ? void 0 : o3.track;
    if (a3) {
      var c4 = this._trackStatePlayable(o3), l3 = this._trackStatePlayable(s3), u3 = this._trackChanged(a3, null == s3 ? void 0 : s3.track);
      c4 && (l3 && !u3 || this.emitDailyJSEvent({ action: So, track: a3, participant: null != n3 ? n3 : t3, type: e3 }));
    }
  } }, { key: "maybeEventTrackStarted", value: function(e3, t3, n3) {
    var r4, i4, o3 = null !== (r4 = null == t3 ? void 0 : t3.tracks[e3]) && void 0 !== r4 ? r4 : null, s3 = null !== (i4 = null == n3 ? void 0 : n3.tracks[e3]) && void 0 !== i4 ? i4 : null, a3 = null == s3 ? void 0 : s3.track;
    if (a3) {
      var c4 = this._trackStatePlayable(o3), l3 = this._trackStatePlayable(s3), u3 = this._trackChanged(null == o3 ? void 0 : o3.track, a3);
      l3 && (c4 && !u3 || this.emitDailyJSEvent({ action: wo, track: a3, participant: n3, type: e3 }));
    }
  } }, { key: "maybeParticipantTracksStopped", value: function(e3, t3) {
    if (e3)
      for (var n3 in e3.tracks)
        this.maybeEventTrackStopped(n3, e3, t3);
  } }, { key: "maybeParticipantTracksStarted", value: function(e3, t3) {
    if (t3)
      for (var n3 in t3.tracks)
        this.maybeEventTrackStarted(n3, e3, t3);
  } }, { key: "compareEqualForRMPUpdateEvent", value: function(e3, t3) {
    var n3, r4;
    return e3.state === t3.state && (null === (n3 = e3.settings) || void 0 === n3 ? void 0 : n3.volume) === (null === (r4 = t3.settings) || void 0 === r4 ? void 0 : r4.volume);
  } }, { key: "emitDailyJSEvent", value: function(e3) {
    try {
      e3.callClientId = this.callClientId, this.emit(e3.action, e3);
    } catch (t3) {
      console.log("could not emit", e3, t3);
    }
  } }, { key: "compareEqualForParticipantUpdateEvent", value: function(e3, t3) {
    return !!N(e3, t3) && ((!e3.videoTrack || !t3.videoTrack || e3.videoTrack.id === t3.videoTrack.id && e3.videoTrack.muted === t3.videoTrack.muted && e3.videoTrack.enabled === t3.videoTrack.enabled) && (!e3.audioTrack || !t3.audioTrack || e3.audioTrack.id === t3.audioTrack.id && e3.audioTrack.muted === t3.audioTrack.muted && e3.audioTrack.enabled === t3.audioTrack.enabled));
  } }, { key: "nativeUtils", value: function() {
    return ys() ? "undefined" == typeof DailyNativeUtils ? (console.warn("in React Native, DailyNativeUtils is expected to be available"), null) : DailyNativeUtils : null;
  } }, { key: "updateIsPreparingToJoin", value: function(e3) {
    this._updateCallState(this._callState, e3);
  } }, { key: "_updateCallState", value: function(e3) {
    var t3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this._isPreparingToJoin;
    if (e3 !== this._callState || t3 !== this._isPreparingToJoin) {
      var n3 = this._callState, r4 = this._isPreparingToJoin;
      this._callState = e3, this._isPreparingToJoin = t3;
      var i4 = this._callState === bi;
      this.updateShowAndroidOngoingMeetingNotification(i4);
      var o3 = ac(n3, r4), s3 = ac(this._callState, this._isPreparingToJoin);
      o3 !== s3 && (this.updateKeepDeviceAwake(s3), this.updateDeviceAudioMode(s3), this.updateNoOpRecordingEnsuringBackgroundContinuity(s3));
    }
  } }, { key: "resetMeetingDependentVars", value: function() {
    this._participants = {}, this._participantCounts = Qa, this._waitingParticipants = {}, this._activeSpeaker = {}, this._activeSpeakerMode = false, this._didPreAuth = false, this._accessState = { access: Oi }, this._finalSummaryOfPrevSession = this._meetingSessionSummary, this._meetingSessionSummary = {}, this._meetingSessionState = jc(Ga, this._callObjectMode), this._isScreenSharing = false, this._receiveSettings = {}, this._inputSettings = void 0, this._sendSettings = {}, this._localAudioLevel = 0, this._isLocalAudioLevelObserverRunning = false, this._remoteParticipantsAudioLevel = {}, this._isRemoteParticipantsAudioLevelObserverRunning = false, this._maxAppMessageSize = rs, this._callMachineInitialized = false, this._bundleLoadTime = void 0, this._preloadCache;
  } }, { key: "updateKeepDeviceAwake", value: function(e3) {
    ys() && this.nativeUtils().setKeepDeviceAwake(e3, this.callClientId);
  } }, { key: "updateDeviceAudioMode", value: function(e3) {
    if (ys() && !this.disableReactNativeAutoDeviceManagement("audio")) {
      var t3 = e3 ? this._nativeInCallAudioMode : "idle";
      this.nativeUtils().setAudioMode(t3);
    }
  } }, { key: "updateShowAndroidOngoingMeetingNotification", value: function(e3) {
    if (ys() && this.nativeUtils().setShowOngoingMeetingNotification) {
      var t3, n3, r4, i4;
      if (this.properties.reactNativeConfig && this.properties.reactNativeConfig.androidInCallNotification) {
        var o3 = this.properties.reactNativeConfig.androidInCallNotification;
        t3 = o3.title, n3 = o3.subtitle, r4 = o3.iconName, i4 = o3.disableForCustomOverride;
      }
      i4 && (e3 = false), this.nativeUtils().setShowOngoingMeetingNotification(e3, t3, n3, r4, this.callClientId);
    }
  } }, { key: "updateNoOpRecordingEnsuringBackgroundContinuity", value: function(e3) {
    ys() && this.nativeUtils().enableNoOpRecordingEnsuringBackgroundContinuity && this.nativeUtils().enableNoOpRecordingEnsuringBackgroundContinuity(e3);
  } }, { key: "toggleParticipantAudioBasedOnNativeAudioFocus", value: function() {
    var e3;
    if (ys()) {
      var t3 = null === (e3 = this._callMachine()) || void 0 === e3 || null === (e3 = e3.store) || void 0 === e3 ? void 0 : e3.getState();
      for (var n3 in null == t3 ? void 0 : t3.streams) {
        var r4 = t3.streams[n3];
        r4 && r4.pendingTrack && "audio" === r4.pendingTrack.kind && (r4.pendingTrack.enabled = this._hasNativeAudioFocus);
      }
    }
  } }, { key: "disableReactNativeAutoDeviceManagement", value: function(e3) {
    return this.properties.reactNativeConfig && this.properties.reactNativeConfig.disableAutoDeviceManagement && this.properties.reactNativeConfig.disableAutoDeviceManagement[e3];
  } }, { key: "absoluteUrl", value: function(e3) {
    if (void 0 !== e3) {
      var t3 = document.createElement("a");
      return t3.href = e3, t3.href;
    }
  } }, { key: "sayHello", value: function() {
    var e3 = "hello, world.";
    return console.log(e3), e3;
  } }, { key: "_logUseAfterDestroy", value: function() {
    var e3 = Object.values(za)[0];
    if (this.needsLoad()) {
      if (e3 && !e3.needsLoad()) {
        var t3 = { action: cs, level: "error", code: this.strictMode ? 9995 : 9997 };
        e3.sendMessageToCallMachine(t3);
      } else if (!this.strictMode) {
        console.error("You are are attempting to use a call instance that was previously destroyed, which is unsupported. Please remove `strictMode: false` from your constructor properties to enable strict mode to track down and fix this unsupported usage.");
      }
    } else {
      var n3 = { action: cs, level: "error", code: this.strictMode ? 9995 : 9997 };
      this._messageChannel.sendMessageToCallMachine(n3, null, this.callClientId, this._iframe);
    }
  } }, { key: "_logDuplicateInstanceAttempt", value: function() {
    for (var e3 = 0, t3 = Object.values(za); e3 < t3.length; e3++) {
      var n3 = t3[e3];
      n3._callMachineInitialized ? (n3.sendMessageToCallMachine({ action: cs, level: "warn", code: this.allowMultipleCallInstances ? 9993 : 9992 }), n3._delayDuplicateInstanceLog = false) : n3._delayDuplicateInstanceLog = true;
    }
  } }, { key: "_maybeSendToSentry", value: function(e3) {
    var t3, n3, i4, o3;
    if (null !== (t3 = e3.error) && void 0 !== t3 && t3.type) {
      if (![$i, Vi, Bi].includes(e3.error.type))
        return;
      if (e3.error.type === Bi && e3.error.msg.includes("deleted"))
        return;
    }
    var s3 = null !== (n3 = this.properties) && void 0 !== n3 && n3.url ? new URL(this.properties.url) : void 0, a3 = "production";
    s3 && s3.host.includes(".staging.daily") && (a3 = "staging");
    var c4, l3, u3, d4, p3, h4 = function(e4) {
      const t4 = [Gn(), Wn(), ii(), ni(), ui(), fi(), rr(), hi()];
      return false !== e4.autoSessionTracking && t4.push(li()), t4;
    }({}).filter(function(e4) {
      return !["BrowserApiErrors", "Breadcrumbs", "GlobalHandlers"].includes(e4.name);
    }), f3 = new jr({ dsn: "https://f10f1c81e5d44a4098416c0867a8b740@o77906.ingest.sentry.io/168844", transport: Wr, stackParser: Zr, integrations: h4, environment: a3 }), v5 = new Mt();
    if (v5.setClient(f3), f3.init(), this.session_id && v5.setExtra("sessionId", this.session_id), this.properties) {
      var g4 = Va({}, this.properties);
      g4.userName = g4.userName ? "[Filtered]" : void 0, g4.userData = g4.userData ? "[Filtered]" : void 0, g4.token = g4.token ? "[Filtered]" : void 0, v5.setExtra("properties", g4);
    }
    if (s3) {
      var m4 = s3.searchParams.get("domain");
      if (!m4) {
        var y4 = s3.host.match(/(.*?)\./);
        m4 = y4 && y4[1] || "";
      }
      m4 && v5.setTag("domain", m4);
    }
    e3.error && (v5.setTag("fatalErrorType", e3.error.type), v5.setExtra("errorDetails", e3.error.details), (null === (c4 = e3.error.details) || void 0 === c4 ? void 0 : c4.uri) && v5.setTag("serverAddress", e3.error.details.uri), (null === (l3 = e3.error.details) || void 0 === l3 ? void 0 : l3.workerGroup) && v5.setTag("workerGroup", e3.error.details.workerGroup), (null === (u3 = e3.error.details) || void 0 === u3 ? void 0 : u3.geoGroup) && v5.setTag("geoGroup", e3.error.details.geoGroup), (null === (d4 = e3.error.details) || void 0 === d4 ? void 0 : d4.on) && v5.setTag("connectionAttempt", e3.error.details.on), null !== (p3 = e3.error.details) && void 0 !== p3 && p3.bundleUrl && (v5.setTag("bundleUrl", e3.error.details.bundleUrl), v5.setTag("bundleError", e3.error.details.sourceError.type)));
    v5.setTags({ callMode: this._callObjectMode ? ys() ? "reactNative" : null !== (i4 = this.properties) && void 0 !== i4 && null !== (i4 = i4.dailyConfig) && void 0 !== i4 && null !== (i4 = i4.callMode) && void 0 !== i4 && i4.includes("prebuilt") ? this.properties.dailyConfig.callMode : "custom" : "prebuilt-frame", version: r3.version() });
    var b4 = (null === (o3 = e3.error) || void 0 === o3 ? void 0 : o3.msg) || e3.errorMsg;
    v5.captureException(new Error(b4));
  } }, { key: "_callMachine", value: function() {
    var e3;
    return null === (e3 = window._daily) || void 0 === e3 || null === (e3 = e3.instances) || void 0 === e3 || null === (e3 = e3[this.callClientId]) || void 0 === e3 ? void 0 : e3.callMachine;
  } }, { key: "_maybeUpdateInputSettings", value: function(e3) {
    if (!N(this._inputSettings, e3)) {
      var t3 = this._getInputSettings();
      this._inputSettings = e3;
      var n3 = this._getInputSettings();
      N(t3, n3) || this.emitDailyJSEvent({ action: es, inputSettings: n3 });
    }
  } }], [{ key: "supportedBrowser", value: function() {
    if (ys())
      return { supported: true, mobile: true, name: "React Native", version: null, supportsScreenShare: true, supportsSfu: true, supportsVideoProcessing: false, supportsAudioProcessing: false };
    var e3 = Q.getParser(ms());
    return { supported: !!Cs(), mobile: "mobile" === e3.getPlatformType(), name: e3.getBrowserName(), version: e3.getBrowserVersion(), supportsFullscreen: !!ws(), supportsScreenShare: !!_s(), supportsSfu: !!Cs(), supportsVideoProcessing: ks(), supportsAudioProcessing: Ms() };
  } }, { key: "version", value: function() {
    return "0.77.0";
  } }, { key: "createCallObject", value: function() {
    var e3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
    return e3.layout = "none", new r3(null, e3);
  } }, { key: "wrap", value: function(e3) {
    var t3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
    if (hc(), !e3 || !e3.contentWindow || "string" != typeof e3.src)
      throw new Error("DailyIframe::Wrap needs an iframe-like first argument");
    return t3.layout || (t3.customLayout ? t3.layout = "custom-v1" : t3.layout = "browser"), new r3(e3, t3);
  } }, { key: "createFrame", value: function(e3, t3) {
    var n3, i4;
    hc(), e3 && t3 ? (n3 = e3, i4 = t3) : e3 && e3.append ? (n3 = e3, i4 = {}) : (n3 = document.body, i4 = e3 || {});
    var o3 = i4.iframeStyle;
    o3 || (o3 = n3 === document.body ? { position: "fixed", border: "1px solid black", backgroundColor: "white", width: "375px", height: "450px", right: "1em", bottom: "1em" } : { border: 0, width: "100%", height: "100%" });
    var s3 = document.createElement("iframe");
    window.navigator && window.navigator.userAgent.match(/Chrome\/61\./) ? s3.allow = "microphone, camera" : s3.allow = "microphone; camera; autoplay; display-capture; screen-wake-lock", s3.style.visibility = "hidden", n3.appendChild(s3), s3.style.visibility = null, Object.keys(o3).forEach(function(e4) {
      return s3.style[e4] = o3[e4];
    }), i4.layout || (i4.customLayout ? i4.layout = "custom-v1" : i4.layout = "browser");
    try {
      return new r3(s3, i4);
    } catch (e4) {
      throw n3.removeChild(s3), e4;
    }
  } }, { key: "createTransparentFrame", value: function() {
    var e3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
    hc();
    var t3 = document.createElement("iframe");
    return t3.allow = "microphone; camera; autoplay", t3.style.cssText = "\n      position: fixed;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      border: 0;\n      pointer-events: none;\n    ", document.body.appendChild(t3), e3.layout || (e3.layout = "custom-v1"), r3.wrap(t3, e3);
  } }, { key: "getCallInstance", value: function() {
    var e3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : void 0;
    return e3 ? za[e3] : Object.values(za)[0];
  } }]);
  var i3, c3, d3, h3, v3, g3, m3, y3, b3, _3, w3, S3, k3, M3, C3, E3, T3, O3, P3, A3, j3, I3, L3, D3, R3, F3, B3, U3, V3, J3, $3, q3, z3, W3, H3, G3, Y3, ee3;
}();
function oc(e3, t3) {
  var n3 = {};
  for (var r3 in e3)
    if (e3[r3] instanceof MediaStreamTrack)
      console.warn("MediaStreamTrack found in props or cache.", r3), n3[r3] = ls;
    else if ("dailyConfig" === r3) {
      if (e3[r3].modifyLocalSdpHook) {
        var i3 = window._daily.instances[t3].customCallbacks || {};
        i3.modifyLocalSdpHook = e3[r3].modifyLocalSdpHook, window._daily.instances[t3].customCallbacks = i3, delete e3[r3].modifyLocalSdpHook;
      }
      if (e3[r3].modifyRemoteSdpHook) {
        var o3 = window._daily.instances[t3].customCallbacks || {};
        o3.modifyRemoteSdpHook = e3[r3].modifyRemoteSdpHook, window._daily.instances[t3].customCallbacks = o3, delete e3[r3].modifyRemoteSdpHook;
      }
      n3[r3] = e3[r3];
    } else
      n3[r3] = e3[r3];
  return n3;
}
function sc(e3) {
  var t3 = arguments.length > 2 ? arguments[2] : void 0;
  if (e3 !== bi) {
    var n3 = "".concat(arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "This daily-js method", " only supported after join.");
    throw t3 && (n3 += " ".concat(t3)), console.error(n3), new Error(n3);
  }
}
function ac(e3, t3) {
  return [yi, bi].includes(e3) || t3;
}
function cc(e3, t3) {
  var n3 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : "This daily-js method", r3 = arguments.length > 3 ? arguments[3] : void 0;
  if (ac(e3, t3)) {
    var i3 = "".concat(n3, " not supported after joining a meeting.");
    throw r3 && (i3 += " ".concat(r3)), console.error(i3), new Error(i3);
  }
}
function lc(e3) {
  var t3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "This daily-js method", n3 = arguments.length > 2 ? arguments[2] : void 0;
  if (!e3) {
    var r3 = "".concat(t3, arguments.length > 3 && void 0 !== arguments[3] && arguments[3] ? " requires preAuth() or startCamera() to initialize call state." : " requires preAuth(), startCamera(), or join() to initialize call state.");
    throw n3 && (r3 += " ".concat(n3)), console.error(r3), new Error(r3);
  }
}
function uc(e3) {
  if (e3) {
    var t3 = "A pre-call quality test is in progress. Please try ".concat(arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "This daily-js method", " again once testing has completed. Use stopTestCallQuality() to end it early.");
    throw console.error(t3), new Error(t3);
  }
}
function dc(e3) {
  if (!e3) {
    var t3 = "".concat(arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "This daily-js method", " is only supported on custom callObject instances");
    throw console.error(t3), new Error(t3);
  }
}
function pc(e3) {
  if (e3) {
    var t3 = "".concat(arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "This daily-js method", " is only supported as part of Daily's Prebuilt");
    throw console.error(t3), new Error(t3);
  }
}
function hc() {
  if (ys())
    throw new Error("This daily-js method is not currently supported in React Native");
}
function fc() {
  if (!ys())
    throw new Error("This daily-js method is only supported in React Native");
}
function vc(e3) {
  if (void 0 === e3)
    return true;
  var t3;
  if ("string" == typeof e3)
    t3 = e3;
  else
    try {
      t3 = JSON.stringify(e3), N(JSON.parse(t3), e3) || console.warn("The userData provided will be modified when serialized.");
    } catch (e4) {
      throw Error("userData must be serializable to JSON: ".concat(e4));
    }
  if (t3.length > 4096)
    throw Error("userData is too large (".concat(t3.length, " characters). Maximum size suppported is ").concat(4096, "."));
  return true;
}
function gc(e3, t3) {
  for (var n3 = t3.allowAllParticipantsKey, r3 = function(e4) {
    var t4 = ["local"];
    return n3 || t4.push("*"), e4 && !t4.includes(e4);
  }, i3 = function(e4) {
    return !!(void 0 === e4.layer || Number.isInteger(e4.layer) && e4.layer >= 0 || "inherit" === e4.layer);
  }, o3 = function(e4) {
    return !!e4 && (!(e4.video && !i3(e4.video)) && !(e4.screenVideo && !i3(e4.screenVideo)));
  }, s3 = 0, a3 = Object.entries(e3); s3 < a3.length; s3++) {
    var c3 = f(a3[s3], 2), l3 = c3[0], u3 = c3[1];
    if (!r3(l3) || !o3(u3))
      return false;
  }
  return true;
}
function mc(e3) {
  if ("object" !== n(e3))
    return false;
  for (var t3 = 0, r3 = Object.entries(e3); t3 < r3.length; t3++) {
    var i3 = f(r3[t3], 2), o3 = i3[0], s3 = i3[1];
    switch (o3) {
      case "video":
        if ("object" !== n(s3))
          return false;
        for (var a3 = 0, c3 = Object.entries(s3); a3 < c3.length; a3++) {
          var l3 = f(c3[a3], 2), u3 = l3[0], d3 = l3[1];
          switch (u3) {
            case "processor":
              if (!_c(d3))
                return false;
              break;
            case "settings":
              if (!wc(d3))
                return false;
              break;
            default:
              return false;
          }
        }
        break;
      case "audio":
        if ("object" !== n(s3))
          return false;
        for (var p3 = 0, h3 = Object.entries(s3); p3 < h3.length; p3++) {
          var v3 = f(h3[p3], 2), g3 = v3[0], m3 = v3[1];
          switch (g3) {
            case "processor":
              if (!bc(m3))
                return false;
              break;
            case "settings":
              if (!wc(m3))
                return false;
              break;
            default:
              return false;
          }
        }
        break;
      default:
        return false;
    }
  }
  return true;
}
function yc(e3, t3, n3) {
  var r3, i3 = [];
  e3.video && e3.video.processor && (ks(null !== (r3 = null == t3 ? void 0 : t3.useLegacyVideoProcessor) && void 0 !== r3 && r3) || (e3.video.settings ? delete e3.video.processor : delete e3.video, i3.push("video")));
  e3.audio && e3.audio.processor && (Ms() || (e3.audio.settings ? delete e3.audio.processor : delete e3.audio, i3.push("audio"))), i3.length > 0 && console.error("Ignoring settings for browser- or platform-unsupported input processor(s): ".concat(i3.join(", "))), e3.audio && e3.audio.settings && (e3.audio.settings.customTrack ? (n3.audioTrack = e3.audio.settings.customTrack, e3.audio.settings = { customTrack: ls }) : delete n3.audioTrack), e3.video && e3.video.settings && (e3.video.settings.customTrack ? (n3.videoTrack = e3.video.settings.customTrack, e3.video.settings = { customTrack: ls }) : delete n3.videoTrack);
}
function bc(e3) {
  if (ys())
    return console.warn("Video processing is not yet supported in React Native"), false;
  var t3 = ["type"];
  return !!e3 && ("object" === n(e3) && (Object.keys(e3).filter(function(e4) {
    return !t3.includes(e4);
  }).forEach(function(t4) {
    console.warn("invalid key inputSettings -> audio -> processor : ".concat(t4)), delete e3[t4];
  }), !!function(e4) {
    if ("string" != typeof e4)
      return false;
    if (!Object.values(ds).includes(e4))
      return console.error("inputSettings audio processor type invalid"), false;
    return true;
  }(e3.type)));
}
function _c(e3) {
  if (ys())
    return console.warn("Video processing is not yet supported in React Native"), false;
  var t3 = ["type", "config"];
  if (!e3)
    return false;
  if ("object" !== n(e3))
    return false;
  if (!function(e4) {
    if ("string" != typeof e4)
      return false;
    if (!Object.values(us).includes(e4))
      return console.error("inputSettings video processor type invalid"), false;
    return true;
  }(e3.type))
    return false;
  if (e3.config) {
    if ("object" !== n(e3.config))
      return false;
    if (!function(e4, t4) {
      var n3 = Object.keys(t4);
      if (0 === n3.length)
        return true;
      var r3 = "invalid object in inputSettings -> video -> processor -> config";
      switch (e4) {
        case us.BGBLUR:
          return n3.length > 1 || "strength" !== n3[0] ? (console.error(r3), false) : !("number" != typeof t4.strength || t4.strength <= 0 || t4.strength > 1 || isNaN(t4.strength)) || (console.error("".concat(r3, "; expected: {0 < strength <= 1}, got: ").concat(t4.strength)), false);
        case us.BGIMAGE:
          return !(void 0 !== t4.source && !function(e5) {
            if ("default" === e5.source)
              return e5.type = "default", true;
            if (e5.source instanceof ArrayBuffer)
              return true;
            if (ee(e5.source))
              return e5.type = "url", !!function(e6) {
                var t6 = new URL(e6), n5 = t6.pathname;
                if ("data:" === t6.protocol)
                  try {
                    var r4 = n5.substring(n5.indexOf(":") + 1, n5.indexOf(";")).split("/")[1];
                    return hs.includes(r4);
                  } catch (e7) {
                    return console.error("failed to deduce blob content type", e7), false;
                  }
                var i3 = n5.split(".").at(-1).toLowerCase().trim();
                return hs.includes(i3);
              }(e5.source) || (console.error("invalid image type; supported types: [".concat(hs.join(", "), "]")), false);
            return t5 = e5.source, n4 = Number(t5), isNaN(n4) || !Number.isInteger(n4) || n4 <= 0 || n4 > 10 ? (console.error("invalid image selection; must be an int, > 0, <= ".concat(10)), false) : (e5.type = "daily-preselect", true);
            var t5, n4;
          }(t4));
        default:
          return true;
      }
    }(e3.type, e3.config))
      return false;
  }
  return Object.keys(e3).filter(function(e4) {
    return !t3.includes(e4);
  }).forEach(function(t4) {
    console.warn("invalid key inputSettings -> video -> processor : ".concat(t4)), delete e3[t4];
  }), true;
}
function wc(e3) {
  return "object" === n(e3) && (!e3.customTrack || e3.customTrack instanceof MediaStreamTrack);
}
function Sc() {
  var e3 = Object.values(us).join(" | "), t3 = Object.values(ds).join(" | ");
  return "inputSettings must be of the form: { video?: { processor?: { type: [ ".concat(e3, " ], config?: {} } }, audio?: { processor: {type: [ ").concat(t3, " ] } } }");
}
function kc(e3) {
  var t3 = e3.allowAllParticipantsKey;
  return "receiveSettings must be of the form { [<remote participant id> | ".concat(Ii).concat(t3 ? ' | "'.concat("*", '"') : "", "]: ") + '{ [video: [{ layer: [<non-negative integer> | "inherit"] } | "inherit"]], [screenVideo: [{ layer: [<non-negative integer> | "inherit"] } | "inherit"]] }}}';
}
function Mc() {
  return "customIntegrations should be an object of type ".concat(JSON.stringify(tc), ".");
}
function Cc(e3) {
  if (e3 && "object" !== n(e3) || Array.isArray(e3))
    return console.error("customTrayButtons should be an Object of the type ".concat(JSON.stringify(ec), ".")), false;
  if (e3)
    for (var t3 = 0, r3 = Object.entries(e3); t3 < r3.length; t3++)
      for (var i3 = f(r3[t3], 1)[0], o3 = 0, s3 = Object.entries(e3[i3]); o3 < s3.length; o3++) {
        var a3 = f(s3[o3], 2), c3 = a3[0], l3 = a3[1], u3 = ec.id[c3];
        if (!u3)
          return console.error("customTrayButton does not support key ".concat(c3)), false;
        switch (c3) {
          case "iconPath":
          case "iconPathDarkMode":
            if (!ee(l3))
              return console.error("customTrayButton ".concat(c3, " should be a url.")), false;
            break;
          case "visualState":
            if (!["default", "sidebar-open", "active"].includes(l3))
              return console.error("customTrayButton ".concat(c3, " should be ").concat(u3, ". Got: ").concat(l3)), false;
            break;
          default:
            if (n(l3) !== u3)
              return console.error("customTrayButton ".concat(c3, " should be a ").concat(u3, ".")), false;
        }
      }
  return true;
}
function Ec(e3) {
  if (!e3 || e3 && "object" !== n(e3) || Array.isArray(e3))
    return console.error(Mc()), false;
  for (var t3 = function(e4) {
    return "".concat(e4, " should be ").concat(tc.id[e4]);
  }, r3 = function(e4, t4) {
    return console.error("customIntegration ".concat(e4, ": ").concat(t4));
  }, i3 = 0, o3 = Object.entries(e3); i3 < o3.length; i3++) {
    var s3 = f(o3[i3], 1)[0];
    if (!("label" in e3[s3]))
      return r3(s3, "label is required"), false;
    if (!("location" in e3[s3]))
      return r3(s3, "location is required"), false;
    if (!("src" in e3[s3]) && !("srcdoc" in e3[s3]))
      return r3(s3, "src or srcdoc is required"), false;
    for (var a3 = 0, c3 = Object.entries(e3[s3]); a3 < c3.length; a3++) {
      var l3 = f(c3[a3], 2), u3 = l3[0], d3 = l3[1];
      switch (u3) {
        case "allow":
        case "csp":
        case "name":
        case "referrerPolicy":
        case "sandbox":
          if ("string" != typeof d3)
            return r3(s3, t3(u3)), false;
          break;
        case "iconURL":
          if (!ee(d3))
            return r3(s3, "".concat(u3, " should be a url")), false;
          break;
        case "src":
          if ("srcdoc" in e3[s3])
            return r3(s3, "cannot have both src and srcdoc"), false;
          if (!ee(d3))
            return r3(s3, 'src "'.concat(d3, '" is not a valid URL')), false;
          break;
        case "srcdoc":
          if ("src" in e3[s3])
            return r3(s3, "cannot have both src and srcdoc"), false;
          if ("string" != typeof d3)
            return r3(s3, t3(u3)), false;
          break;
        case "location":
          if (!["main", "sidebar"].includes(d3))
            return r3(s3, t3(u3)), false;
          break;
        case "controlledBy":
          if ("*" !== d3 && "owners" !== d3 && (!Array.isArray(d3) || d3.some(function(e4) {
            return "string" != typeof e4;
          })))
            return r3(s3, t3(u3)), false;
          break;
        case "shared":
          if ((!Array.isArray(d3) || d3.some(function(e4) {
            return "string" != typeof e4;
          })) && "owners" !== d3 && "boolean" != typeof d3)
            return r3(s3, t3(u3)), false;
          break;
        default:
          if (!tc.id[u3])
            return console.error("customIntegration does not support key ".concat(u3)), false;
      }
    }
  }
  return true;
}
function Tc(e3, t3) {
  if (void 0 === t3)
    return false;
  switch (n(t3)) {
    case "string":
      return n(e3) === t3;
    case "object":
      if ("object" !== n(e3))
        return false;
      for (var r3 in e3)
        if (!Tc(e3[r3], t3[r3]))
          return false;
      return true;
    default:
      return false;
  }
}
function Oc(e3, t3) {
  var n3 = e3.sessionId, r3 = e3.toEndPoint, i3 = e3.callerId, o3 = e3.useSipRefer;
  if (!n3 || !r3)
    throw new Error("".concat(t3, "() requires a sessionId and toEndPoint"));
  if ("string" != typeof n3 || "string" != typeof r3)
    throw new Error("Invalid paramater: sessionId and toEndPoint must be of type string");
  if (o3 && !r3.startsWith("sip:"))
    throw new Error('"toEndPoint" must be a "sip" address');
  if (!r3.startsWith("sip:") && !r3.startsWith("+"))
    throw new Error("toEndPoint: ".concat(r3, ' must starts with either "sip:" or "+"'));
  if (i3 && "string" != typeof i3)
    throw new Error("callerId must be of type string");
  if (i3 && !r3.startsWith("+"))
    throw new Error("callerId is only valid when transferring to a PSTN number");
}
function Pc(e3) {
  if ("object" !== n(e3))
    throw new Error('RemoteMediaPlayerSettings: must be "object" type');
  if (e3.state && !Object.values(ps).includes(e3.state))
    throw new Error("Invalid value for RemoteMediaPlayerSettings.state, valid values are: " + JSON.stringify(ps));
  if (e3.volume) {
    if ("number" != typeof e3.volume)
      throw new Error('RemoteMediaPlayerSettings.volume: must be "number" type');
    if (e3.volume < 0 || e3.volume > 2)
      throw new Error("RemoteMediaPlayerSettings.volume: must be between 0.0 - 2.0");
  }
}
function Ac(e3, t3, n3) {
  return !("number" != typeof e3 || e3 < t3 || e3 > n3);
}
function jc(e3, t3) {
  return e3 && !t3 && delete e3.data, e3;
}

// ../node_modules/@pipecat-ai/daily-transport/dist/index.module.js
function $parcel$interopDefault2(a3) {
  return a3 && a3.__esModule ? a3.default : a3;
}
function $parcel$export2(e3, n3, v3, s3) {
  Object.defineProperty(e3, n3, { get: v3, set: s3, enumerable: true, configurable: true });
}
var $683f111f61e07358$exports = {};
$parcel$export2($683f111f61e07358$exports, "DailyRTVIMessageType", () => $683f111f61e07358$export$ef180de88fd317cc);
$parcel$export2($683f111f61e07358$exports, "DailyTransport", () => $683f111f61e07358$export$b1ca982aa1e488c1);
var $6d4b7449a1e1544a$export$13afda237b1c9846 = class {
  /**
  * Converts Float32Array of amplitude data to ArrayBuffer in Int16Array format
  * @param {Float32Array} float32Array
  * @returns {ArrayBuffer}
  */
  static floatTo16BitPCM(float32Array) {
    const buffer = new ArrayBuffer(float32Array.length * 2);
    const view = new DataView(buffer);
    let offset = 0;
    for (let i3 = 0; i3 < float32Array.length; i3++, offset += 2) {
      let s3 = Math.max(-1, Math.min(1, float32Array[i3]));
      view.setInt16(offset, s3 < 0 ? s3 * 32768 : s3 * 32767, true);
    }
    return buffer;
  }
  /**
  * Concatenates two ArrayBuffers
  * @param {ArrayBuffer} leftBuffer
  * @param {ArrayBuffer} rightBuffer
  * @returns {ArrayBuffer}
  */
  static mergeBuffers(leftBuffer, rightBuffer) {
    const tmpArray = new Uint8Array(leftBuffer.byteLength + rightBuffer.byteLength);
    tmpArray.set(new Uint8Array(leftBuffer), 0);
    tmpArray.set(new Uint8Array(rightBuffer), leftBuffer.byteLength);
    return tmpArray.buffer;
  }
  /**
  * Packs data into an Int16 format
  * @private
  * @param {number} size 0 = 1x Int16, 1 = 2x Int16
  * @param {number} arg value to pack
  * @returns
  */
  _packData(size, arg) {
    return [
      new Uint8Array([
        arg,
        arg >> 8
      ]),
      new Uint8Array([
        arg,
        arg >> 8,
        arg >> 16,
        arg >> 24
      ])
    ][size];
  }
  /**
  * Packs audio into "audio/wav" Blob
  * @param {number} sampleRate
  * @param {{bitsPerSample: number, channels: Array<Float32Array>, data: Int16Array}} audio
  * @returns {WavPackerAudioType}
  */
  pack(sampleRate, audio) {
    if (!audio?.bitsPerSample)
      throw new Error(`Missing "bitsPerSample"`);
    else if (!audio?.channels)
      throw new Error(`Missing "channels"`);
    else if (!audio?.data)
      throw new Error(`Missing "data"`);
    const { bitsPerSample, channels, data } = audio;
    const output = [
      // Header
      "RIFF",
      this._packData(1, 52),
      "WAVE",
      // chunk 1
      "fmt ",
      this._packData(1, 16),
      this._packData(0, 1),
      this._packData(0, channels.length),
      this._packData(1, sampleRate),
      this._packData(1, sampleRate * channels.length * bitsPerSample / 8),
      this._packData(0, channels.length * bitsPerSample / 8),
      this._packData(0, bitsPerSample),
      // chunk 2
      "data",
      this._packData(1, channels[0].length * channels.length * bitsPerSample / 8),
      data
    ];
    const blob = new Blob(output, {
      type: "audio/mpeg"
    });
    const url = URL.createObjectURL(blob);
    return {
      blob,
      url,
      channelCount: channels.length,
      sampleRate,
      duration: data.byteLength / (channels.length * sampleRate * 2)
    };
  }
};
globalThis.WavPacker = $6d4b7449a1e1544a$export$13afda237b1c9846;
var $03f71ce85e00ada6$var$octave8Frequencies = [
  4186.01,
  4434.92,
  4698.63,
  4978.03,
  5274.04,
  5587.65,
  5919.91,
  6271.93,
  6644.88,
  7040,
  7458.62,
  7902.13
];
var $03f71ce85e00ada6$var$octave8FrequencyLabels = [
  "C",
  "C#",
  "D",
  "D#",
  "E",
  "F",
  "F#",
  "G",
  "G#",
  "A",
  "A#",
  "B"
];
var $03f71ce85e00ada6$export$776c63898ae5b636 = [];
var $03f71ce85e00ada6$export$facd167cc27ea9b0 = [];
for (let i3 = 1; i3 <= 8; i3++)
  for (let f3 = 0; f3 < $03f71ce85e00ada6$var$octave8Frequencies.length; f3++) {
    const freq = $03f71ce85e00ada6$var$octave8Frequencies[f3];
    $03f71ce85e00ada6$export$776c63898ae5b636.push(freq / Math.pow(2, 8 - i3));
    $03f71ce85e00ada6$export$facd167cc27ea9b0.push($03f71ce85e00ada6$var$octave8FrequencyLabels[f3] + i3);
  }
var $03f71ce85e00ada6$var$voiceFrequencyRange = [
  32,
  2e3
];
var $03f71ce85e00ada6$export$dbc1581ed2cfa183 = $03f71ce85e00ada6$export$776c63898ae5b636.filter((_3, i3) => {
  return $03f71ce85e00ada6$export$776c63898ae5b636[i3] > $03f71ce85e00ada6$var$voiceFrequencyRange[0] && $03f71ce85e00ada6$export$776c63898ae5b636[i3] < $03f71ce85e00ada6$var$voiceFrequencyRange[1];
});
var $03f71ce85e00ada6$export$30a6f2881311088f = $03f71ce85e00ada6$export$facd167cc27ea9b0.filter((_3, i3) => {
  return $03f71ce85e00ada6$export$776c63898ae5b636[i3] > $03f71ce85e00ada6$var$voiceFrequencyRange[0] && $03f71ce85e00ada6$export$776c63898ae5b636[i3] < $03f71ce85e00ada6$var$voiceFrequencyRange[1];
});
var $f32f064564ee62f6$export$2c3136da0bf130f9 = class _$f32f064564ee62f6$export$2c3136da0bf130f9 {
  /**
  * Retrieves frequency domain data from an AnalyserNode adjusted to a decibel range
  * returns human-readable formatting and labels
  * @param {AnalyserNode} analyser
  * @param {number} sampleRate
  * @param {Float32Array} [fftResult]
  * @param {"frequency"|"music"|"voice"} [analysisType]
  * @param {number} [minDecibels] default -100
  * @param {number} [maxDecibels] default -30
  * @returns {AudioAnalysisOutputType}
  */
  static getFrequencies(analyser, sampleRate, fftResult, analysisType = "frequency", minDecibels = -100, maxDecibels = -30) {
    if (!fftResult) {
      fftResult = new Float32Array(analyser.frequencyBinCount);
      analyser.getFloatFrequencyData(fftResult);
    }
    const nyquistFrequency = sampleRate / 2;
    const frequencyStep = 1 / fftResult.length * nyquistFrequency;
    let outputValues;
    let frequencies;
    let labels;
    if (analysisType === "music" || analysisType === "voice") {
      const useFrequencies = analysisType === "voice" ? (0, $03f71ce85e00ada6$export$dbc1581ed2cfa183) : (0, $03f71ce85e00ada6$export$776c63898ae5b636);
      const aggregateOutput = Array(useFrequencies.length).fill(minDecibels);
      for (let i3 = 0; i3 < fftResult.length; i3++) {
        const frequency = i3 * frequencyStep;
        const amplitude = fftResult[i3];
        for (let n3 = useFrequencies.length - 1; n3 >= 0; n3--)
          if (frequency > useFrequencies[n3]) {
            aggregateOutput[n3] = Math.max(aggregateOutput[n3], amplitude);
            break;
          }
      }
      outputValues = aggregateOutput;
      frequencies = analysisType === "voice" ? (0, $03f71ce85e00ada6$export$dbc1581ed2cfa183) : (0, $03f71ce85e00ada6$export$776c63898ae5b636);
      labels = analysisType === "voice" ? (0, $03f71ce85e00ada6$export$30a6f2881311088f) : (0, $03f71ce85e00ada6$export$facd167cc27ea9b0);
    } else {
      outputValues = Array.from(fftResult);
      frequencies = outputValues.map((_3, i3) => frequencyStep * i3);
      labels = frequencies.map((f3) => `${f3.toFixed(2)} Hz`);
    }
    const normalizedOutput = outputValues.map((v3) => {
      return Math.max(0, Math.min((v3 - minDecibels) / (maxDecibels - minDecibels), 1));
    });
    const values = new Float32Array(normalizedOutput);
    return {
      values,
      frequencies,
      labels
    };
  }
  /**
  * Creates a new AudioAnalysis instance for an HTMLAudioElement
  * @param {HTMLAudioElement} audioElement
  * @param {AudioBuffer|null} [audioBuffer] If provided, will cache all frequency domain data from the buffer
  * @returns {AudioAnalysis}
  */
  constructor(audioElement, audioBuffer = null) {
    this.fftResults = [];
    if (audioBuffer) {
      const { length, sampleRate } = audioBuffer;
      const offlineAudioContext = new OfflineAudioContext({
        length,
        sampleRate
      });
      const source = offlineAudioContext.createBufferSource();
      source.buffer = audioBuffer;
      const analyser = offlineAudioContext.createAnalyser();
      analyser.fftSize = 8192;
      analyser.smoothingTimeConstant = 0.1;
      source.connect(analyser);
      const renderQuantumInSeconds = 1 / 60;
      const durationInSeconds = length / sampleRate;
      const analyze = (index) => {
        const suspendTime = renderQuantumInSeconds * index;
        if (suspendTime < durationInSeconds)
          offlineAudioContext.suspend(suspendTime).then(() => {
            const fftResult = new Float32Array(analyser.frequencyBinCount);
            analyser.getFloatFrequencyData(fftResult);
            this.fftResults.push(fftResult);
            analyze(index + 1);
          });
        if (index === 1)
          offlineAudioContext.startRendering();
        else
          offlineAudioContext.resume();
      };
      source.start(0);
      analyze(1);
      this.audio = audioElement;
      this.context = offlineAudioContext;
      this.analyser = analyser;
      this.sampleRate = sampleRate;
      this.audioBuffer = audioBuffer;
    } else {
      const audioContext = new AudioContext();
      const track2 = audioContext.createMediaElementSource(audioElement);
      const analyser = audioContext.createAnalyser();
      analyser.fftSize = 8192;
      analyser.smoothingTimeConstant = 0.1;
      track2.connect(analyser);
      analyser.connect(audioContext.destination);
      this.audio = audioElement;
      this.context = audioContext;
      this.analyser = analyser;
      this.sampleRate = this.context.sampleRate;
      this.audioBuffer = null;
    }
  }
  /**
  * Gets the current frequency domain data from the playing audio track
  * @param {"frequency"|"music"|"voice"} [analysisType]
  * @param {number} [minDecibels] default -100
  * @param {number} [maxDecibels] default -30
  * @returns {AudioAnalysisOutputType}
  */
  getFrequencies(analysisType = "frequency", minDecibels = -100, maxDecibels = -30) {
    let fftResult = null;
    if (this.audioBuffer && this.fftResults.length) {
      const pct = this.audio.currentTime / this.audio.duration;
      const index = Math.min(pct * this.fftResults.length | 0, this.fftResults.length - 1);
      fftResult = this.fftResults[index];
    }
    return _$f32f064564ee62f6$export$2c3136da0bf130f9.getFrequencies(this.analyser, this.sampleRate, fftResult, analysisType, minDecibels, maxDecibels);
  }
  /**
  * Resume the internal AudioContext if it was suspended due to the lack of
  * user interaction when the AudioAnalysis was instantiated.
  * @returns {Promise<true>}
  */
  async resumeIfSuspended() {
    if (this.context.state === "suspended")
      await this.context.resume();
    return true;
  }
};
globalThis.AudioAnalysis = $f32f064564ee62f6$export$2c3136da0bf130f9;
var $29a8a70a9466b14f$export$50b76700e2b15e9 = `
class StreamProcessor extends AudioWorkletProcessor {
  constructor() {
    super();
    this.hasStarted = false;
    this.hasInterrupted = false;
    this.outputBuffers = [];
    this.bufferLength = 128;
    this.write = { buffer: new Float32Array(this.bufferLength), trackId: null };
    this.writeOffset = 0;
    this.trackSampleOffsets = {};
    this.port.onmessage = (event) => {
      if (event.data) {
        const payload = event.data;
        if (payload.event === 'write') {
          const int16Array = payload.buffer;
          const float32Array = new Float32Array(int16Array.length);
          for (let i = 0; i < int16Array.length; i++) {
            float32Array[i] = int16Array[i] / 0x8000; // Convert Int16 to Float32
          }
          this.writeData(float32Array, payload.trackId);
        } else if (
          payload.event === 'offset' ||
          payload.event === 'interrupt'
        ) {
          const requestId = payload.requestId;
          const trackId = this.write.trackId;
          const offset = this.trackSampleOffsets[trackId] || 0;
          this.port.postMessage({
            event: 'offset',
            requestId,
            trackId,
            offset,
          });
          if (payload.event === 'interrupt') {
            this.hasInterrupted = true;
          }
        } else {
          throw new Error(\`Unhandled event "\${payload.event}"\`);
        }
      }
    };
  }

  writeData(float32Array, trackId = null) {
    let { buffer } = this.write;
    let offset = this.writeOffset;
    for (let i = 0; i < float32Array.length; i++) {
      buffer[offset++] = float32Array[i];
      if (offset >= buffer.length) {
        this.outputBuffers.push(this.write);
        this.write = { buffer: new Float32Array(this.bufferLength), trackId };
        buffer = this.write.buffer;
        offset = 0;
      }
    }
    this.writeOffset = offset;
    return true;
  }

  process(inputs, outputs, parameters) {
    const output = outputs[0];
    const outputChannelData = output[0];
    const outputBuffers = this.outputBuffers;
    if (this.hasInterrupted) {
      this.port.postMessage({ event: 'stop' });
      return false;
    } else if (outputBuffers.length) {
      this.hasStarted = true;
      const { buffer, trackId } = outputBuffers.shift();
      for (let i = 0; i < outputChannelData.length; i++) {
        outputChannelData[i] = buffer[i] || 0;
      }
      if (trackId) {
        this.trackSampleOffsets[trackId] =
          this.trackSampleOffsets[trackId] || 0;
        this.trackSampleOffsets[trackId] += buffer.length;
      }
      return true;
    } else if (this.hasStarted) {
      this.port.postMessage({ event: 'stop' });
      return false;
    } else {
      return true;
    }
  }
}

registerProcessor('stream_processor', StreamProcessor);
`;
var $29a8a70a9466b14f$var$script = new Blob([
  $29a8a70a9466b14f$export$50b76700e2b15e9
], {
  type: "application/javascript"
});
var $29a8a70a9466b14f$var$src = URL.createObjectURL($29a8a70a9466b14f$var$script);
var $29a8a70a9466b14f$export$bfa8c596114d74df = $29a8a70a9466b14f$var$src;
var $d0a969833958d9e7$export$9698d62c78b8f366 = class {
  /**
  * Creates a new WavStreamPlayer instance
  * @param {{sampleRate?: number}} options
  * @returns {WavStreamPlayer}
  */
  constructor({ sampleRate = 44100 } = {}) {
    this.scriptSrc = (0, $29a8a70a9466b14f$export$bfa8c596114d74df);
    this.sampleRate = sampleRate;
    this.context = null;
    this.stream = null;
    this.analyser = null;
    this.trackSampleOffsets = {};
    this.interruptedTrackIds = {};
  }
  /**
  * Connects the audio context and enables output to speakers
  * @returns {Promise<true>}
  */
  async connect() {
    this.context = new AudioContext({
      sampleRate: this.sampleRate
    });
    if (this._speakerID)
      this.context.setSinkId(this._speakerID);
    if (this.context.state === "suspended")
      await this.context.resume();
    try {
      await this.context.audioWorklet.addModule(this.scriptSrc);
    } catch (e3) {
      console.error(e3);
      throw new Error(`Could not add audioWorklet module: ${this.scriptSrc}`);
    }
    const analyser = this.context.createAnalyser();
    analyser.fftSize = 8192;
    analyser.smoothingTimeConstant = 0.1;
    this.analyser = analyser;
    return true;
  }
  /**
  * Gets the current frequency domain data from the playing track
  * @param {"frequency"|"music"|"voice"} [analysisType]
  * @param {number} [minDecibels] default -100
  * @param {number} [maxDecibels] default -30
  * @returns {import('./analysis/audio_analysis.js').AudioAnalysisOutputType}
  */
  getFrequencies(analysisType = "frequency", minDecibels = -100, maxDecibels = -30) {
    if (!this.analyser)
      throw new Error("Not connected, please call .connect() first");
    return (0, $f32f064564ee62f6$export$2c3136da0bf130f9).getFrequencies(this.analyser, this.sampleRate, null, analysisType, minDecibels, maxDecibels);
  }
  /**
  * @param {string} speaker deviceId
  */
  async updateSpeaker(speaker) {
    const _prevSpeaker = this._speakerID;
    this._speakerID = speaker;
    if (this.context)
      try {
        if (speaker === "default")
          await this.context.setSinkId();
        else
          await this.context.setSinkId(speaker);
      } catch (e3) {
        console.error(`Could not set sinkId to ${speaker}: ${e3}`);
        this._speakerID = _prevSpeaker;
      }
  }
  /**
  * Starts audio streaming
  * @private
  * @returns {Promise<true>}
  */
  _start() {
    const streamNode = new AudioWorkletNode(this.context, "stream_processor");
    streamNode.connect(this.context.destination);
    streamNode.port.onmessage = (e3) => {
      const { event } = e3.data;
      if (event === "stop") {
        streamNode.disconnect();
        this.stream = null;
      } else if (event === "offset") {
        const { requestId, trackId, offset } = e3.data;
        const currentTime = offset / this.sampleRate;
        this.trackSampleOffsets[requestId] = {
          trackId,
          offset,
          currentTime
        };
      }
    };
    this.analyser.disconnect();
    streamNode.connect(this.analyser);
    this.stream = streamNode;
    return true;
  }
  /**
  * Adds 16BitPCM data to the currently playing audio stream
  * You can add chunks beyond the current play point and they will be queued for play
  * @param {ArrayBuffer|Int16Array} arrayBuffer
  * @param {string} [trackId]
  * @returns {Int16Array}
  */
  add16BitPCM(arrayBuffer, trackId = "default") {
    if (typeof trackId !== "string")
      throw new Error(`trackId must be a string`);
    else if (this.interruptedTrackIds[trackId])
      return;
    if (!this.stream)
      this._start();
    let buffer;
    if (arrayBuffer instanceof Int16Array)
      buffer = arrayBuffer;
    else if (arrayBuffer instanceof ArrayBuffer)
      buffer = new Int16Array(arrayBuffer);
    else
      throw new Error(`argument must be Int16Array or ArrayBuffer`);
    this.stream.port.postMessage({
      event: "write",
      buffer,
      trackId
    });
    return buffer;
  }
  /**
  * Gets the offset (sample count) of the currently playing stream
  * @param {boolean} [interrupt]
  * @returns {{trackId: string|null, offset: number, currentTime: number}}
  */
  async getTrackSampleOffset(interrupt = false) {
    if (!this.stream)
      return null;
    const requestId = crypto.randomUUID();
    this.stream.port.postMessage({
      event: interrupt ? "interrupt" : "offset",
      requestId
    });
    let trackSampleOffset;
    while (!trackSampleOffset) {
      trackSampleOffset = this.trackSampleOffsets[requestId];
      await new Promise((r3) => setTimeout(() => r3(), 1));
    }
    const { trackId } = trackSampleOffset;
    if (interrupt && trackId)
      this.interruptedTrackIds[trackId] = true;
    return trackSampleOffset;
  }
  /**
  * Strips the current stream and returns the sample offset of the audio
  * @param {boolean} [interrupt]
  * @returns {{trackId: string|null, offset: number, currentTime: number}}
  */
  async interrupt() {
    return this.getTrackSampleOffset(true);
  }
};
globalThis.WavStreamPlayer = $d0a969833958d9e7$export$9698d62c78b8f366;
var $8e1d1e6ff08f6fb5$var$AudioProcessorWorklet = `
class AudioProcessor extends AudioWorkletProcessor {

  constructor() {
    super();
    this.port.onmessage = this.receive.bind(this);
    this.initialize();
  }

  initialize() {
    this.foundAudio = false;
    this.recording = false;
    this.chunks = [];
  }

  /**
   * Concatenates sampled chunks into channels
   * Format is chunk[Left[], Right[]]
   */
  readChannelData(chunks, channel = -1, maxChannels = 9) {
    let channelLimit;
    if (channel !== -1) {
      if (chunks[0] && chunks[0].length - 1 < channel) {
        throw new Error(
          \`Channel \${channel} out of range: max \${chunks[0].length}\`
        );
      }
      channelLimit = channel + 1;
    } else {
      channel = 0;
      channelLimit = Math.min(chunks[0] ? chunks[0].length : 1, maxChannels);
    }
    const channels = [];
    for (let n = channel; n < channelLimit; n++) {
      const length = chunks.reduce((sum, chunk) => {
        return sum + chunk[n].length;
      }, 0);
      const buffers = chunks.map((chunk) => chunk[n]);
      const result = new Float32Array(length);
      let offset = 0;
      for (let i = 0; i < buffers.length; i++) {
        result.set(buffers[i], offset);
        offset += buffers[i].length;
      }
      channels[n] = result;
    }
    return channels;
  }

  /**
   * Combines parallel audio data into correct format,
   * channels[Left[], Right[]] to float32Array[LRLRLRLR...]
   */
  formatAudioData(channels) {
    if (channels.length === 1) {
      // Simple case is only one channel
      const float32Array = channels[0].slice();
      const meanValues = channels[0].slice();
      return { float32Array, meanValues };
    } else {
      const float32Array = new Float32Array(
        channels[0].length * channels.length
      );
      const meanValues = new Float32Array(channels[0].length);
      for (let i = 0; i < channels[0].length; i++) {
        const offset = i * channels.length;
        let meanValue = 0;
        for (let n = 0; n < channels.length; n++) {
          float32Array[offset + n] = channels[n][i];
          meanValue += channels[n][i];
        }
        meanValues[i] = meanValue / channels.length;
      }
      return { float32Array, meanValues };
    }
  }

  /**
   * Converts 32-bit float data to 16-bit integers
   */
  floatTo16BitPCM(float32Array) {
    const buffer = new ArrayBuffer(float32Array.length * 2);
    const view = new DataView(buffer);
    let offset = 0;
    for (let i = 0; i < float32Array.length; i++, offset += 2) {
      let s = Math.max(-1, Math.min(1, float32Array[i]));
      view.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7fff, true);
    }
    return buffer;
  }

  /**
   * Retrieves the most recent amplitude values from the audio stream
   * @param {number} channel
   */
  getValues(channel = -1) {
    const channels = this.readChannelData(this.chunks, channel);
    const { meanValues } = this.formatAudioData(channels);
    return { meanValues, channels };
  }

  /**
   * Exports chunks as an audio/wav file
   */
  export() {
    const channels = this.readChannelData(this.chunks);
    const { float32Array, meanValues } = this.formatAudioData(channels);
    const audioData = this.floatTo16BitPCM(float32Array);
    return {
      meanValues: meanValues,
      audio: {
        bitsPerSample: 16,
        channels: channels,
        data: audioData,
      },
    };
  }

  receive(e) {
    const { event, id } = e.data;
    let receiptData = {};
    switch (event) {
      case 'start':
        this.recording = true;
        break;
      case 'stop':
        this.recording = false;
        break;
      case 'clear':
        this.initialize();
        break;
      case 'export':
        receiptData = this.export();
        break;
      case 'read':
        receiptData = this.getValues();
        break;
      default:
        break;
    }
    // Always send back receipt
    this.port.postMessage({ event: 'receipt', id, data: receiptData });
  }

  sendChunk(chunk) {
    const channels = this.readChannelData([chunk]);
    const { float32Array, meanValues } = this.formatAudioData(channels);
    const rawAudioData = this.floatTo16BitPCM(float32Array);
    const monoAudioData = this.floatTo16BitPCM(meanValues);
    this.port.postMessage({
      event: 'chunk',
      data: {
        mono: monoAudioData,
        raw: rawAudioData,
      },
    });
  }

  process(inputList, outputList, parameters) {
    // Copy input to output (e.g. speakers)
    // Note that this creates choppy sounds with Mac products
    const sourceLimit = Math.min(inputList.length, outputList.length);
    for (let inputNum = 0; inputNum < sourceLimit; inputNum++) {
      const input = inputList[inputNum];
      const output = outputList[inputNum];
      const channelCount = Math.min(input.length, output.length);
      for (let channelNum = 0; channelNum < channelCount; channelNum++) {
        input[channelNum].forEach((sample, i) => {
          output[channelNum][i] = sample;
        });
      }
    }
    const inputs = inputList[0];
    // There's latency at the beginning of a stream before recording starts
    // Make sure we actually receive audio data before we start storing chunks
    let sliceIndex = 0;
    if (!this.foundAudio) {
      for (const channel of inputs) {
        sliceIndex = 0; // reset for each channel
        if (this.foundAudio) {
          break;
        }
        if (channel) {
          for (const value of channel) {
            if (value !== 0) {
              // find only one non-zero entry in any channel
              this.foundAudio = true;
              break;
            } else {
              sliceIndex++;
            }
          }
        }
      }
    }
    if (inputs && inputs[0] && this.foundAudio && this.recording) {
      // We need to copy the TypedArray, because the \`process\`
      // internals will reuse the same buffer to hold each input
      const chunk = inputs.map((input) => input.slice(sliceIndex));
      this.chunks.push(chunk);
      this.sendChunk(chunk);
    }
    return true;
  }
}

registerProcessor('audio_processor', AudioProcessor);
`;
var $8e1d1e6ff08f6fb5$var$script = new Blob([
  $8e1d1e6ff08f6fb5$var$AudioProcessorWorklet
], {
  type: "application/javascript"
});
var $8e1d1e6ff08f6fb5$var$src = URL.createObjectURL($8e1d1e6ff08f6fb5$var$script);
var $8e1d1e6ff08f6fb5$export$1f65f50a8cbff43c = $8e1d1e6ff08f6fb5$var$src;
var $62bc376044a05513$export$439b217ca659a877 = class {
  /**
  * Create a new WavRecorder instance
  * @param {{sampleRate?: number, outputToSpeakers?: boolean, debug?: boolean}} [options]
  * @returns {WavRecorder}
  */
  constructor({ sampleRate = 44100, outputToSpeakers = false, debug = false } = {}) {
    this.scriptSrc = (0, $8e1d1e6ff08f6fb5$export$1f65f50a8cbff43c);
    this.sampleRate = sampleRate;
    this.outputToSpeakers = outputToSpeakers;
    this.debug = !!debug;
    this._deviceChangeCallback = null;
    this._devices = [];
    this.deviceSelection = null;
    this.stream = null;
    this.processor = null;
    this.source = null;
    this.node = null;
    this.recording = false;
    this._lastEventId = 0;
    this.eventReceipts = {};
    this.eventTimeout = 5e3;
    this._chunkProcessor = () => {
    };
    this._chunkProcessorSize = void 0;
    this._chunkProcessorBuffer = {
      raw: new ArrayBuffer(0),
      mono: new ArrayBuffer(0)
    };
  }
  /**
  * Decodes audio data from multiple formats to a Blob, url, Float32Array and AudioBuffer
  * @param {Blob|Float32Array|Int16Array|ArrayBuffer|number[]} audioData
  * @param {number} sampleRate
  * @param {number} fromSampleRate
  * @returns {Promise<DecodedAudioType>}
  */
  static async decode(audioData, sampleRate = 44100, fromSampleRate = -1) {
    const context = new AudioContext({
      sampleRate
    });
    let arrayBuffer;
    let blob;
    if (audioData instanceof Blob) {
      if (fromSampleRate !== -1)
        throw new Error(`Can not specify "fromSampleRate" when reading from Blob`);
      blob = audioData;
      arrayBuffer = await blob.arrayBuffer();
    } else if (audioData instanceof ArrayBuffer) {
      if (fromSampleRate !== -1)
        throw new Error(`Can not specify "fromSampleRate" when reading from ArrayBuffer`);
      arrayBuffer = audioData;
      blob = new Blob([
        arrayBuffer
      ], {
        type: "audio/wav"
      });
    } else {
      let float32Array;
      let data;
      if (audioData instanceof Int16Array) {
        data = audioData;
        float32Array = new Float32Array(audioData.length);
        for (let i3 = 0; i3 < audioData.length; i3++)
          float32Array[i3] = audioData[i3] / 32768;
      } else if (audioData instanceof Float32Array)
        float32Array = audioData;
      else if (audioData instanceof Array)
        float32Array = new Float32Array(audioData);
      else
        throw new Error(`"audioData" must be one of: Blob, Float32Arrray, Int16Array, ArrayBuffer, Array<number>`);
      if (fromSampleRate === -1)
        throw new Error(`Must specify "fromSampleRate" when reading from Float32Array, In16Array or Array`);
      else if (fromSampleRate < 3e3)
        throw new Error(`Minimum "fromSampleRate" is 3000 (3kHz)`);
      if (!data)
        data = (0, $6d4b7449a1e1544a$export$13afda237b1c9846).floatTo16BitPCM(float32Array);
      const audio = {
        bitsPerSample: 16,
        channels: [
          float32Array
        ],
        data
      };
      const packer = new (0, $6d4b7449a1e1544a$export$13afda237b1c9846)();
      const result = packer.pack(fromSampleRate, audio);
      blob = result.blob;
      arrayBuffer = await blob.arrayBuffer();
    }
    const audioBuffer = await context.decodeAudioData(arrayBuffer);
    const values = audioBuffer.getChannelData(0);
    const url = URL.createObjectURL(blob);
    return {
      blob,
      url,
      values,
      audioBuffer
    };
  }
  /**
  * Logs data in debug mode
  * @param {...any} arguments
  * @returns {true}
  */
  log() {
    if (this.debug)
      this.log(...arguments);
    return true;
  }
  /**
  * Retrieves the current sampleRate for the recorder
  * @returns {number}
  */
  getSampleRate() {
    return this.sampleRate;
  }
  /**
  * Retrieves the current status of the recording
  * @returns {"ended"|"paused"|"recording"}
  */
  getStatus() {
    if (!this.processor)
      return "ended";
    else if (!this.recording)
      return "paused";
    else
      return "recording";
  }
  /**
  * Sends an event to the AudioWorklet
  * @private
  * @param {string} name
  * @param {{[key: string]: any}} data
  * @param {AudioWorkletNode} [_processor]
  * @returns {Promise<{[key: string]: any}>}
  */
  async _event(name, data = {}, _processor = null) {
    _processor = _processor || this.processor;
    if (!_processor)
      throw new Error("Can not send events without recording first");
    const message = {
      event: name,
      id: this._lastEventId++,
      data
    };
    _processor.port.postMessage(message);
    const t0 = (/* @__PURE__ */ new Date()).valueOf();
    while (!this.eventReceipts[message.id]) {
      if ((/* @__PURE__ */ new Date()).valueOf() - t0 > this.eventTimeout)
        throw new Error(`Timeout waiting for "${name}" event`);
      await new Promise((res) => setTimeout(() => res(true), 1));
    }
    const payload = this.eventReceipts[message.id];
    delete this.eventReceipts[message.id];
    return payload;
  }
  /**
  * Sets device change callback, remove if callback provided is `null`
  * @param {(Array<MediaDeviceInfo & {default: boolean}>): void|null} callback
  * @returns {true}
  */
  listenForDeviceChange(callback) {
    if (callback === null && this._deviceChangeCallback) {
      navigator.mediaDevices.removeEventListener("devicechange", this._deviceChangeCallback);
      this._deviceChangeCallback = null;
    } else if (callback !== null) {
      let lastId = 0;
      let lastDevices = [];
      const serializeDevices = (devices) => devices.map((d3) => d3.deviceId).sort().join(",");
      const cb = async () => {
        let id = ++lastId;
        const devices = await this.listDevices();
        if (id === lastId) {
          if (serializeDevices(lastDevices) !== serializeDevices(devices)) {
            lastDevices = devices;
            callback(devices.slice());
          }
        }
      };
      navigator.mediaDevices.addEventListener("devicechange", cb);
      cb();
      this._deviceChangeCallback = cb;
    }
    return true;
  }
  /**
  * Manually request permission to use the microphone
  * @returns {Promise<true>}
  */
  async requestPermission() {
    const permissionStatus = await navigator.permissions.query({
      name: "microphone"
    });
    if (permissionStatus.state === "denied")
      window.alert("You must grant microphone access to use this feature.");
    else if (permissionStatus.state === "prompt")
      try {
        const stream = await navigator.mediaDevices.getUserMedia({
          audio: true
        });
        const tracks = stream.getTracks();
        tracks.forEach((track2) => track2.stop());
      } catch (e3) {
        window.alert("You must grant microphone access to use this feature.");
      }
    return true;
  }
  /**
  * List all eligible devices for recording, will request permission to use microphone
  * @returns {Promise<Array<MediaDeviceInfo & {default: boolean}>>}
  */
  async listDevices() {
    if (!navigator.mediaDevices || !("enumerateDevices" in navigator.mediaDevices))
      throw new Error("Could not request user devices");
    await this.requestPermission();
    const devices = await navigator.mediaDevices.enumerateDevices();
    const audioDevices = devices.filter((device) => device.kind === "audioinput");
    return audioDevices;
  }
  /**
  * Begins a recording session and requests microphone permissions if not already granted
  * Microphone recording indicator will appear on browser tab but status will be "paused"
  * @param {string} [deviceId] if no device provided, default device will be used
  * @returns {Promise<true>}
  */
  async begin(deviceId) {
    if (this.processor)
      throw new Error(`Already connected: please call .end() to start a new session`);
    if (!navigator.mediaDevices || !("getUserMedia" in navigator.mediaDevices))
      throw new Error("Could not request user media");
    deviceId = deviceId ?? this.deviceSelection?.deviceId;
    try {
      const config = {
        audio: true
      };
      if (deviceId)
        config.audio = {
          deviceId: {
            exact: deviceId
          }
        };
      this.stream = await navigator.mediaDevices.getUserMedia(config);
    } catch (err) {
      throw new Error("Could not start media stream");
    }
    this.listDevices().then((devices) => {
      deviceId = this.stream.getAudioTracks()[0].getSettings().deviceId;
      console.log("find current device", devices, deviceId, this.stream.getAudioTracks()[0].getSettings());
      this.deviceSelection = devices.find((d3) => d3.deviceId === deviceId);
      console.log("current device", this.deviceSelection);
    });
    const context = new AudioContext({
      sampleRate: this.sampleRate
    });
    const source = context.createMediaStreamSource(this.stream);
    try {
      await context.audioWorklet.addModule(this.scriptSrc);
    } catch (e3) {
      console.error(e3);
      throw new Error(`Could not add audioWorklet module: ${this.scriptSrc}`);
    }
    const processor = new AudioWorkletNode(context, "audio_processor");
    processor.port.onmessage = (e3) => {
      const { event, id, data } = e3.data;
      if (event === "receipt")
        this.eventReceipts[id] = data;
      else if (event === "chunk") {
        if (this._chunkProcessorSize) {
          const buffer = this._chunkProcessorBuffer;
          this._chunkProcessorBuffer = {
            raw: (0, $6d4b7449a1e1544a$export$13afda237b1c9846).mergeBuffers(buffer.raw, data.raw),
            mono: (0, $6d4b7449a1e1544a$export$13afda237b1c9846).mergeBuffers(buffer.mono, data.mono)
          };
          if (this._chunkProcessorBuffer.mono.byteLength >= this._chunkProcessorSize) {
            this._chunkProcessor(this._chunkProcessorBuffer);
            this._chunkProcessorBuffer = {
              raw: new ArrayBuffer(0),
              mono: new ArrayBuffer(0)
            };
          }
        } else
          this._chunkProcessor(data);
      }
    };
    const node = source.connect(processor);
    const analyser = context.createAnalyser();
    analyser.fftSize = 8192;
    analyser.smoothingTimeConstant = 0.1;
    node.connect(analyser);
    if (this.outputToSpeakers) {
      console.warn("Warning: Output to speakers may affect sound quality,\nespecially due to system audio feedback preventative measures.\nuse only for debugging");
      analyser.connect(context.destination);
    }
    this.source = source;
    this.node = node;
    this.analyser = analyser;
    this.processor = processor;
    console.log("begin completed");
    return true;
  }
  /**
  * Gets the current frequency domain data from the recording track
  * @param {"frequency"|"music"|"voice"} [analysisType]
  * @param {number} [minDecibels] default -100
  * @param {number} [maxDecibels] default -30
  * @returns {import('./analysis/audio_analysis.js').AudioAnalysisOutputType}
  */
  getFrequencies(analysisType = "frequency", minDecibels = -100, maxDecibels = -30) {
    if (!this.processor)
      throw new Error("Session ended: please call .begin() first");
    return (0, $f32f064564ee62f6$export$2c3136da0bf130f9).getFrequencies(this.analyser, this.sampleRate, null, analysisType, minDecibels, maxDecibels);
  }
  /**
  * Pauses the recording
  * Keeps microphone stream open but halts storage of audio
  * @returns {Promise<true>}
  */
  async pause() {
    if (!this.processor)
      throw new Error("Session ended: please call .begin() first");
    else if (!this.recording)
      throw new Error("Already paused: please call .record() first");
    if (this._chunkProcessorBuffer.raw.byteLength)
      this._chunkProcessor(this._chunkProcessorBuffer);
    this.log("Pausing ...");
    await this._event("stop");
    this.recording = false;
    return true;
  }
  /**
  * Start recording stream and storing to memory from the connected audio source
  * @param {(data: { mono: Int16Array; raw: Int16Array }) => any} [chunkProcessor]
  * @param {number} [chunkSize] chunkProcessor will not be triggered until this size threshold met in mono audio
  * @returns {Promise<true>}
  */
  async record(chunkProcessor = () => {
  }, chunkSize = 8192) {
    if (!this.processor)
      throw new Error("Session ended: please call .begin() first");
    else if (this.recording)
      throw new Error("Already recording: please call .pause() first");
    else if (typeof chunkProcessor !== "function")
      throw new Error(`chunkProcessor must be a function`);
    this._chunkProcessor = chunkProcessor;
    this._chunkProcessorSize = chunkSize;
    this._chunkProcessorBuffer = {
      raw: new ArrayBuffer(0),
      mono: new ArrayBuffer(0)
    };
    this.log("Recording ...");
    await this._event("start");
    this.recording = true;
    return true;
  }
  /**
  * Clears the audio buffer, empties stored recording
  * @returns {Promise<true>}
  */
  async clear() {
    if (!this.processor)
      throw new Error("Session ended: please call .begin() first");
    await this._event("clear");
    return true;
  }
  /**
  * Reads the current audio stream data
  * @returns {Promise<{meanValues: Float32Array, channels: Array<Float32Array>}>}
  */
  async read() {
    if (!this.processor)
      throw new Error("Session ended: please call .begin() first");
    this.log("Reading ...");
    const result = await this._event("read");
    return result;
  }
  /**
  * Saves the current audio stream to a file
  * @param {boolean} [force] Force saving while still recording
  * @returns {Promise<import('./wav_packer.js').WavPackerAudioType>}
  */
  async save(force = false) {
    if (!this.processor)
      throw new Error("Session ended: please call .begin() first");
    if (!force && this.recording)
      throw new Error("Currently recording: please call .pause() first, or call .save(true) to force");
    this.log("Exporting ...");
    const exportData = await this._event("export");
    const packer = new (0, $6d4b7449a1e1544a$export$13afda237b1c9846)();
    const result = packer.pack(this.sampleRate, exportData.audio);
    return result;
  }
  /**
  * Ends the current recording session and saves the result
  * @returns {Promise<import('./wav_packer.js').WavPackerAudioType>}
  */
  async end() {
    if (!this.processor)
      throw new Error("Session ended: please call .begin() first");
    const _processor = this.processor;
    this.log("Stopping ...");
    await this._event("stop");
    this.recording = false;
    const tracks = this.stream.getTracks();
    tracks.forEach((track2) => track2.stop());
    this.log("Exporting ...");
    const exportData = await this._event("export", {}, _processor);
    this.processor.disconnect();
    this.source.disconnect();
    this.node.disconnect();
    this.analyser.disconnect();
    this.stream = null;
    this.processor = null;
    this.source = null;
    this.node = null;
    const packer = new (0, $6d4b7449a1e1544a$export$13afda237b1c9846)();
    const result = packer.pack(this.sampleRate, exportData.audio);
    return result;
  }
  /**
  * Performs a full cleanup of WavRecorder instance
  * Stops actively listening via microphone and removes existing listeners
  * @returns {Promise<true>}
  */
  async quit() {
    this.listenForDeviceChange(null);
    this.deviceSelection = null;
    if (this.processor)
      await this.end();
    return true;
  }
};
globalThis.WavRecorder = $62bc376044a05513$export$439b217ca659a877;
var $5fc11d7bc0d20724$export$2934cf2d25c67a48 = class {
  /**
  * Create a new MediaStreamRecorder instance
  * @param {{sampleRate?: number, outputToSpeakers?: boolean, debug?: boolean}} [options]
  * @returns {MediaStreamRecorder}
  */
  constructor({ sampleRate = 44100, outputToSpeakers = false, debug = false } = {}) {
    this.scriptSrc = (0, $8e1d1e6ff08f6fb5$export$1f65f50a8cbff43c);
    this.sampleRate = sampleRate;
    this.outputToSpeakers = outputToSpeakers;
    this.debug = !!debug;
    this.stream = null;
    this.processor = null;
    this.source = null;
    this.node = null;
    this.recording = false;
    this._lastEventId = 0;
    this.eventReceipts = {};
    this.eventTimeout = 5e3;
    this._chunkProcessor = () => {
    };
    this._chunkProcessorSize = void 0;
    this._chunkProcessorBuffer = {
      raw: new ArrayBuffer(0),
      mono: new ArrayBuffer(0)
    };
  }
  /**
  * Logs data in debug mode
  * @param {...any} arguments
  * @returns {true}
  */
  log() {
    if (this.debug)
      this.log(...arguments);
    return true;
  }
  /**
  * Retrieves the current sampleRate for the recorder
  * @returns {number}
  */
  getSampleRate() {
    return this.sampleRate;
  }
  /**
  * Retrieves the current status of the recording
  * @returns {"ended"|"paused"|"recording"}
  */
  getStatus() {
    if (!this.processor)
      return "ended";
    else if (!this.recording)
      return "paused";
    else
      return "recording";
  }
  /**
  * Sends an event to the AudioWorklet
  * @private
  * @param {string} name
  * @param {{[key: string]: any}} data
  * @param {AudioWorkletNode} [_processor]
  * @returns {Promise<{[key: string]: any}>}
  */
  async _event(name, data = {}, _processor = null) {
    _processor = _processor || this.processor;
    if (!_processor)
      throw new Error("Can not send events without recording first");
    const message = {
      event: name,
      id: this._lastEventId++,
      data
    };
    _processor.port.postMessage(message);
    const t0 = (/* @__PURE__ */ new Date()).valueOf();
    while (!this.eventReceipts[message.id]) {
      if ((/* @__PURE__ */ new Date()).valueOf() - t0 > this.eventTimeout)
        throw new Error(`Timeout waiting for "${name}" event`);
      await new Promise((res) => setTimeout(() => res(true), 1));
    }
    const payload = this.eventReceipts[message.id];
    delete this.eventReceipts[message.id];
    return payload;
  }
  /**
  * Begins a recording session for the given audioTrack
  * Microphone recording indicator will appear on browser tab but status will be "paused"
  * @param {MediaStreamTrack} [audioTrack] if no device provided, default device will be used
  * @returns {Promise<true>}
  */
  async begin(audioTrack) {
    if (this.processor)
      throw new Error(`Already connected: please call .end() to start a new session`);
    if (!audioTrack || audioTrack.kind !== "audio")
      throw new Error("No audio track provided");
    this.stream = new MediaStream([
      audioTrack
    ]);
    const context = new AudioContext({
      sampleRate: this.sampleRate
    });
    const source = context.createMediaStreamSource(this.stream);
    try {
      await context.audioWorklet.addModule(this.scriptSrc);
    } catch (e3) {
      console.error(e3);
      throw new Error(`Could not add audioWorklet module: ${this.scriptSrc}`);
    }
    const processor = new AudioWorkletNode(context, "audio_processor");
    processor.port.onmessage = (e3) => {
      const { event, id, data } = e3.data;
      if (event === "receipt")
        this.eventReceipts[id] = data;
      else if (event === "chunk") {
        if (this._chunkProcessorSize) {
          const buffer = this._chunkProcessorBuffer;
          this._chunkProcessorBuffer = {
            raw: (0, $6d4b7449a1e1544a$export$13afda237b1c9846).mergeBuffers(buffer.raw, data.raw),
            mono: (0, $6d4b7449a1e1544a$export$13afda237b1c9846).mergeBuffers(buffer.mono, data.mono)
          };
          if (this._chunkProcessorBuffer.mono.byteLength >= this._chunkProcessorSize) {
            this._chunkProcessor(this._chunkProcessorBuffer);
            this._chunkProcessorBuffer = {
              raw: new ArrayBuffer(0),
              mono: new ArrayBuffer(0)
            };
          }
        } else
          this._chunkProcessor(data);
      }
    };
    const node = source.connect(processor);
    const analyser = context.createAnalyser();
    analyser.fftSize = 8192;
    analyser.smoothingTimeConstant = 0.1;
    node.connect(analyser);
    if (this.outputToSpeakers) {
      console.warn("Warning: Output to speakers may affect sound quality,\nespecially due to system audio feedback preventative measures.\nuse only for debugging");
      analyser.connect(context.destination);
    }
    this.source = source;
    this.node = node;
    this.analyser = analyser;
    this.processor = processor;
    return true;
  }
  /**
  * Gets the current frequency domain data from the recording track
  * @param {"frequency"|"music"|"voice"} [analysisType]
  * @param {number} [minDecibels] default -100
  * @param {number} [maxDecibels] default -30
  * @returns {import('./analysis/audio_analysis.js').AudioAnalysisOutputType}
  */
  getFrequencies(analysisType = "frequency", minDecibels = -100, maxDecibels = -30) {
    if (!this.processor)
      throw new Error("Session ended: please call .begin() first");
    return (0, $f32f064564ee62f6$export$2c3136da0bf130f9).getFrequencies(this.analyser, this.sampleRate, null, analysisType, minDecibels, maxDecibels);
  }
  /**
  * Pauses the recording
  * Keeps microphone stream open but halts storage of audio
  * @returns {Promise<true>}
  */
  async pause() {
    if (!this.processor)
      throw new Error("Session ended: please call .begin() first");
    else if (!this.recording)
      throw new Error("Already paused: please call .record() first");
    if (this._chunkProcessorBuffer.raw.byteLength)
      this._chunkProcessor(this._chunkProcessorBuffer);
    this.log("Pausing ...");
    await this._event("stop");
    this.recording = false;
    return true;
  }
  /**
  * Start recording stream and storing to memory from the connected audio source
  * @param {(data: { mono: Int16Array; raw: Int16Array }) => any} [chunkProcessor]
  * @param {number} [chunkSize] chunkProcessor will not be triggered until this size threshold met in mono audio
  * @returns {Promise<true>}
  */
  async record(chunkProcessor = () => {
  }, chunkSize = 8192) {
    if (!this.processor)
      throw new Error("Session ended: please call .begin() first");
    else if (this.recording)
      throw new Error("Already recording: HELLO please call .pause() first");
    else if (typeof chunkProcessor !== "function")
      throw new Error(`chunkProcessor must be a function`);
    this._chunkProcessor = chunkProcessor;
    this._chunkProcessorSize = chunkSize;
    this._chunkProcessorBuffer = {
      raw: new ArrayBuffer(0),
      mono: new ArrayBuffer(0)
    };
    this.log("Recording ...");
    await this._event("start");
    this.recording = true;
    return true;
  }
  /**
  * Clears the audio buffer, empties stored recording
  * @returns {Promise<true>}
  */
  async clear() {
    if (!this.processor)
      throw new Error("Session ended: please call .begin() first");
    await this._event("clear");
    return true;
  }
  /**
  * Reads the current audio stream data
  * @returns {Promise<{meanValues: Float32Array, channels: Array<Float32Array>}>}
  */
  async read() {
    if (!this.processor)
      throw new Error("Session ended: please call .begin() first");
    this.log("Reading ...");
    const result = await this._event("read");
    return result;
  }
  /**
  * Saves the current audio stream to a file
  * @param {boolean} [force] Force saving while still recording
  * @returns {Promise<import('./wav_packer.js').WavPackerAudioType>}
  */
  async save(force = false) {
    if (!this.processor)
      throw new Error("Session ended: please call .begin() first");
    if (!force && this.recording)
      throw new Error("Currently recording: please call .pause() first, or call .save(true) to force");
    this.log("Exporting ...");
    const exportData = await this._event("export");
    const packer = new (0, $6d4b7449a1e1544a$export$13afda237b1c9846)();
    const result = packer.pack(this.sampleRate, exportData.audio);
    return result;
  }
  /**
  * Ends the current recording session and saves the result
  * @returns {Promise<import('./wav_packer.js').WavPackerAudioType>}
  */
  async end() {
    if (!this.processor)
      throw new Error("Session ended: please call .begin() first");
    const _processor = this.processor;
    this.log("Stopping ...");
    await this._event("stop");
    this.recording = false;
    this.log("Exporting ...");
    const exportData = await this._event("export", {}, _processor);
    this.processor.disconnect();
    this.source.disconnect();
    this.node.disconnect();
    this.analyser.disconnect();
    this.stream = null;
    this.processor = null;
    this.source = null;
    this.node = null;
    const packer = new (0, $6d4b7449a1e1544a$export$13afda237b1c9846)();
    const result = packer.pack(this.sampleRate, exportData.audio);
    return result;
  }
  /**
  * Performs a full cleanup of WavRecorder instance
  * Stops actively listening via microphone and removes existing listeners
  * @returns {Promise<true>}
  */
  async quit() {
    this.listenForDeviceChange(null);
    if (this.processor)
      await this.end();
    return true;
  }
};
globalThis.WavRecorder = WavRecorder;
var $58d19ff082af5e5c$exports = {};
$58d19ff082af5e5c$exports = JSON.parse('{"name":"@pipecat-ai/daily-transport","version":"0.4.0","license":"BSD-2-Clause","main":"dist/index.js","module":"dist/index.module.js","types":"dist/index.d.ts","source":"src/index.ts","repository":{"type":"git","url":"git+https://github.com/pipecat-ai/pipecat-client-web-transports.git"},"files":["dist","package.json","README.md"],"scripts":{"build":"parcel build --no-cache","dev":"parcel watch","lint":"eslint . --ext ts --report-unused-disable-directives --max-warnings 0"},"devDependencies":{"@pipecat-ai/client-js":"^0.4.0","eslint":"9.11.1","eslint-config-prettier":"^9.1.0","eslint-plugin-simple-import-sort":"^12.1.1"},"peerDependencies":{"@pipecat-ai/client-js":"~0.4.0"},"dependencies":{"@daily-co/daily-js":"^0.77.0"},"description":"Pipecat Daily Transport Package","author":"Daily.co","bugs":{"url":"https://github.com/pipecat-ai/pipecat-client-web-transports/issues"},"homepage":"https://github.com/pipecat-ai/pipecat-client-web-transports/blob/main/transports/daily-webrtc/README.md"}');
var $683f111f61e07358$export$ef180de88fd317cc;
(function(DailyRTVIMessageType) {
  DailyRTVIMessageType["AUDIO_BUFFERING_STARTED"] = "audio-buffering-started";
  DailyRTVIMessageType["AUDIO_BUFFERING_STOPPED"] = "audio-buffering-stopped";
})($683f111f61e07358$export$ef180de88fd317cc || ($683f111f61e07358$export$ef180de88fd317cc = {}));
var $683f111f61e07358$var$DailyCallWrapper = class {
  constructor(daily) {
    this._daily = daily;
    this._proxy = new Proxy(this._daily, {
      get: (target, prop, receiver) => {
        if (typeof target[prop] === "function") {
          let errMsg;
          switch (String(prop)) {
            case "preAuth":
              errMsg = `Calls to preAuth() are disabled. Please use Transport.preAuth()`;
              break;
            case "startCamera":
              errMsg = `Calls to startCamera() are disabled. Please use RTVIClient.initDevices()`;
              break;
            case "join":
              errMsg = `Calls to join() are disabled. Please use RTVIClient.connect()`;
              break;
            case "leave":
              errMsg = `Calls to leave() are disabled. Please use RTVIClient.disconnect()`;
              break;
            case "destroy":
              errMsg = `Calls to destroy() are disabled.`;
              break;
          }
          if (errMsg)
            return () => {
              throw new Error(errMsg);
            };
          return (...args) => {
            return target[prop](...args);
          };
        }
        return Reflect.get(target, prop, receiver);
      }
    });
  }
  get proxy() {
    return this._proxy;
  }
};
var $683f111f61e07358$export$b1ca982aa1e488c1 = class _$683f111f61e07358$export$b1ca982aa1e488c1 extends (0, $4086f06442fcb7d7$export$86495b081fef8e52) {
  constructor({ dailyFactoryOptions = {}, bufferLocalAudioUntilBotReady = false } = {}) {
    super();
    this._botId = "";
    this._selectedCam = {};
    this._selectedMic = {};
    this._selectedSpeaker = {};
    this._currentAudioTrack = null;
    this._audioQueue = [];
    this._callbacks = {};
    this._dailyFactoryOptions = dailyFactoryOptions;
    this._bufferLocalAudioUntilBotReady = bufferLocalAudioUntilBotReady;
    this._daily = (0, ic).createCallObject({
      ...this._dailyFactoryOptions,
      allowMultipleCallInstances: true
    });
    this._dailyWrapper = new $683f111f61e07358$var$DailyCallWrapper(this._daily);
  }
  setupRecorder() {
    this._mediaStreamRecorder = new (0, $5fc11d7bc0d20724$export$2934cf2d25c67a48)({
      sampleRate: _$683f111f61e07358$export$b1ca982aa1e488c1.RECORDER_SAMPLE_RATE
    });
  }
  handleUserAudioStream(data) {
    this._audioQueue.push(data);
  }
  flushAudioQueue() {
    const batchSize = 10;
    if (this._audioQueue.length === 0)
      return;
    (0, $7afbbd59ebaa42bf$export$af88d00dbe7f521).debug(`Will flush audio queue: ${this._audioQueue.length}`);
    while (this._audioQueue.length > 0) {
      const batch = [];
      while (batch.length < batchSize && this._audioQueue.length > 0) {
        const queuedData = this._audioQueue.shift();
        if (queuedData)
          batch.push(queuedData);
      }
      if (batch.length > 0)
        this._sendAudioBatch(batch);
    }
  }
  _sendAudioBatch(dataBatch) {
    const encodedBatch = dataBatch.map((data) => {
      const pcmByteArray = new Uint8Array(data);
      return btoa(String.fromCharCode(...pcmByteArray));
    });
    const rtviMessage = {
      id: "raw-audio-batch",
      label: "rtvi-ai",
      type: "raw-audio-batch",
      data: {
        base64AudioBatch: encodedBatch,
        sampleRate: _$683f111f61e07358$export$b1ca982aa1e488c1.RECORDER_SAMPLE_RATE,
        numChannels: 1
      }
    };
    this.sendMessage(rtviMessage);
  }
  initialize(options, messageHandler) {
    if (this._bufferLocalAudioUntilBotReady)
      this.setupRecorder();
    this._callbacks = options.callbacks ?? {};
    this._onMessage = messageHandler;
    if (this._dailyFactoryOptions.startVideoOff == null || options.enableCam != null)
      this._dailyFactoryOptions.startVideoOff = !(options.enableCam ?? false);
    if (this._dailyFactoryOptions.startAudioOff == null || options.enableMic != null)
      this._dailyFactoryOptions.startAudioOff = !(options.enableMic ?? true);
    this.attachEventListeners();
    this.state = "disconnected";
    (0, $7afbbd59ebaa42bf$export$af88d00dbe7f521).debug("[RTVI Transport] Initialized", (0, /* @__PURE__ */ $parcel$interopDefault2($58d19ff082af5e5c$exports)).version);
  }
  get dailyCallClient() {
    return this._dailyWrapper.proxy;
  }
  get state() {
    return this._state;
  }
  set state(state) {
    if (this._state === state)
      return;
    this._state = state;
    this._callbacks.onTransportStateChanged?.(state);
  }
  async getAllCams() {
    const { devices } = await this._daily.enumerateDevices();
    return devices.filter((d3) => d3.kind === "videoinput");
  }
  updateCam(camId) {
    this._daily.setInputDevicesAsync({
      videoDeviceId: camId
    }).then((infos) => {
      this._selectedCam = infos.camera;
    });
  }
  get selectedCam() {
    return this._selectedCam;
  }
  async getAllMics() {
    const { devices } = await this._daily.enumerateDevices();
    return devices.filter((d3) => d3.kind === "audioinput");
  }
  updateMic(micId) {
    this._daily.setInputDevicesAsync({
      audioDeviceId: micId
    }).then((infos) => {
      this._selectedMic = infos.mic;
    });
  }
  get selectedMic() {
    return this._selectedMic;
  }
  async getAllSpeakers() {
    const { devices } = await this._daily.enumerateDevices();
    return devices.filter((d3) => d3.kind === "audiooutput");
  }
  updateSpeaker(speakerId) {
    this._daily.setOutputDeviceAsync({
      outputDeviceId: speakerId
    }).then((infos) => {
      this._selectedSpeaker = infos.speaker;
    });
  }
  get selectedSpeaker() {
    return this._selectedSpeaker;
  }
  enableMic(enable) {
    this._daily.setLocalAudio(enable);
  }
  get isMicEnabled() {
    return this._daily.localAudio();
  }
  enableCam(enable) {
    this._daily.setLocalVideo(enable);
  }
  get isCamEnabled() {
    return this._daily.localVideo();
  }
  enableScreenShare(enable) {
    if (enable)
      this._daily.startScreenShare();
    else
      this._daily.stopScreenShare();
  }
  get isSharingScreen() {
    return this._daily.localScreenAudio() || this._daily.localScreenVideo();
  }
  tracks() {
    const participants = this._daily.participants() ?? {};
    const bot = participants?.[this._botId];
    const tracks = {
      local: {
        audio: participants?.local?.tracks?.audio?.persistentTrack,
        screenAudio: participants?.local?.tracks?.screenAudio?.persistentTrack,
        screenVideo: participants?.local?.tracks?.screenVideo?.persistentTrack,
        video: participants?.local?.tracks?.video?.persistentTrack
      }
    };
    if (bot)
      tracks.bot = {
        audio: bot?.tracks?.audio?.persistentTrack,
        video: bot?.tracks?.video?.persistentTrack
      };
    return tracks;
  }
  async startRecording() {
    try {
      (0, $7afbbd59ebaa42bf$export$af88d00dbe7f521).info("[RTVI Transport] Initializing recording");
      await this._mediaStreamRecorder.record((data) => {
        this.handleUserAudioStream(data.mono);
      }, _$683f111f61e07358$export$b1ca982aa1e488c1.RECORDER_CHUNK_SIZE);
      this._onMessage({
        type: $683f111f61e07358$export$ef180de88fd317cc.AUDIO_BUFFERING_STARTED,
        data: {}
      });
      (0, $7afbbd59ebaa42bf$export$af88d00dbe7f521).info("[RTVI Transport] Recording Initialized");
    } catch (e3) {
      const err = e3;
      if (!err.message.includes("Already recording"))
        (0, $7afbbd59ebaa42bf$export$af88d00dbe7f521).error("Error starting recording", e3);
    }
  }
  async preAuth(dailyFactoryOptions) {
    this._dailyFactoryOptions = dailyFactoryOptions;
    await this._daily.preAuth(dailyFactoryOptions);
  }
  async initDevices() {
    if (!this._daily)
      throw new (0, $8ead7b33b8402751$export$59b4786f333aac02)("Transport instance not initialized");
    this.state = "initializing";
    const infos = await this._daily.startCamera(this._dailyFactoryOptions);
    const { devices } = await this._daily.enumerateDevices();
    const cams = devices.filter((d3) => d3.kind === "videoinput");
    const mics = devices.filter((d3) => d3.kind === "audioinput");
    const speakers = devices.filter((d3) => d3.kind === "audiooutput");
    this._selectedCam = infos.camera;
    this._selectedMic = infos.mic;
    this._selectedSpeaker = infos.speaker;
    this._callbacks.onAvailableCamsUpdated?.(cams);
    this._callbacks.onAvailableMicsUpdated?.(mics);
    this._callbacks.onAvailableSpeakersUpdated?.(speakers);
    this._callbacks.onCamUpdated?.(infos.camera);
    this._callbacks.onMicUpdated?.(infos.mic);
    this._callbacks.onSpeakerUpdated?.(infos.speaker);
    if (!this._daily.isLocalAudioLevelObserverRunning())
      await this._daily.startLocalAudioLevelObserver(100);
    if (!this._daily.isRemoteParticipantsAudioLevelObserverRunning())
      await this._daily.startRemoteParticipantsAudioLevelObserver(100);
    this.state = "initialized";
  }
  async connect(authBundle, abortController) {
    if (!this._daily)
      throw new (0, $8ead7b33b8402751$export$59b4786f333aac02)("Transport instance not initialized");
    if (abortController.signal.aborted)
      return;
    this.state = "connecting";
    const opts = this._dailyFactoryOptions;
    opts.url = authBundle.room_url ?? opts.url;
    if (authBundle.token != null)
      opts.token = authBundle.token;
    try {
      await this._daily.join(opts);
      const room = await this._daily.room();
      if (room && "id" in room)
        this._expiry = room.config?.exp;
    } catch (e3) {
      (0, $7afbbd59ebaa42bf$export$af88d00dbe7f521).error("Failed to join room", e3);
      this.state = "error";
      throw new (0, $8ead7b33b8402751$export$e0624a511a2c4e9)();
    }
    if (abortController.signal.aborted)
      return;
    this.state = "connected";
    this._callbacks.onConnected?.();
  }
  async sendReadyMessage() {
    return new Promise((resolve) => {
      const isIOS = () => {
        const userAgent = navigator.userAgent;
        return /iPad|iPhone|iPod/.test(userAgent) || /Macintosh/.test(userAgent) && "ontouchend" in document;
      };
      const sendReadyMessage = () => {
        this.state = "ready";
        this.flushAudioQueue();
        this.sendMessage((0, $b48f893ed1354c1e$export$69aa9ab0334b212).clientReady());
        this.stopRecording();
        resolve();
      };
      const readyHandler = (ev) => {
        if (!ev.participant?.local) {
          this._daily.off("track-started", readyHandler);
          if (isIOS()) {
            (0, $7afbbd59ebaa42bf$export$af88d00dbe7f521).debug("[RTVI Transport] iOS device detected, adding 0.5 second delay before sending ready message");
            setTimeout(sendReadyMessage, 500);
          } else
            sendReadyMessage();
        }
      };
      this._daily.on("track-started", readyHandler);
    });
  }
  stopRecording() {
    if (this._mediaStreamRecorder && this._mediaStreamRecorder.getStatus() !== "ended") {
      this._mediaStreamRecorder.end();
      this._onMessage({
        type: $683f111f61e07358$export$ef180de88fd317cc.AUDIO_BUFFERING_STOPPED,
        data: {}
      });
    }
  }
  attachEventListeners() {
    this._daily.on("available-devices-updated", this.handleAvailableDevicesUpdated.bind(this));
    this._daily.on("selected-devices-updated", this.handleSelectedDevicesUpdated.bind(this));
    this._daily.on("track-started", this.handleTrackStarted.bind(this));
    this._daily.on("track-stopped", this.handleTrackStopped.bind(this));
    this._daily.on("participant-joined", this.handleParticipantJoined.bind(this));
    this._daily.on("participant-left", this.handleParticipantLeft.bind(this));
    this._daily.on("local-audio-level", this.handleLocalAudioLevel.bind(this));
    this._daily.on("remote-participants-audio-level", this.handleRemoteAudioLevel.bind(this));
    this._daily.on("app-message", this.handleAppMessage.bind(this));
    this._daily.on("left-meeting", this.handleLeftMeeting.bind(this));
    this._daily.on("error", this.handleFatalError.bind(this));
    this._daily.on("nonfatal-error", this.handleNonFatalError.bind(this));
  }
  async disconnect() {
    this.state = "disconnecting";
    this._daily.stopLocalAudioLevelObserver();
    this._daily.stopRemoteParticipantsAudioLevelObserver();
    this._audioQueue = [];
    this._currentAudioTrack = null;
    this.stopRecording();
    await this._daily.leave();
  }
  sendMessage(message) {
    this._daily.sendAppMessage(message, "*");
  }
  handleAppMessage(ev) {
    if (ev.data.label === "rtvi-ai")
      this._onMessage({
        id: ev.data.id,
        type: ev.data.type,
        data: ev.data.data
      });
  }
  handleAvailableDevicesUpdated(ev) {
    this._callbacks.onAvailableCamsUpdated?.(ev.availableDevices.filter((d3) => d3.kind === "videoinput"));
    this._callbacks.onAvailableMicsUpdated?.(ev.availableDevices.filter((d3) => d3.kind === "audioinput"));
    this._callbacks.onAvailableSpeakersUpdated?.(ev.availableDevices.filter((d3) => d3.kind === "audiooutput"));
  }
  handleSelectedDevicesUpdated(ev) {
    if (this._selectedCam?.deviceId !== ev.devices.camera) {
      this._selectedCam = ev.devices.camera;
      this._callbacks.onCamUpdated?.(ev.devices.camera);
    }
    if (this._selectedMic?.deviceId !== ev.devices.mic) {
      this._selectedMic = ev.devices.mic;
      this._callbacks.onMicUpdated?.(ev.devices.mic);
    }
    if (this._selectedSpeaker?.deviceId !== ev.devices.speaker) {
      this._selectedSpeaker = ev.devices.speaker;
      this._callbacks.onSpeakerUpdated?.(ev.devices.speaker);
    }
  }
  async handleLocalAudioTrack(track2) {
    if (this.state == "ready" || !this._bufferLocalAudioUntilBotReady)
      return;
    const status = this._mediaStreamRecorder.getStatus();
    switch (status) {
      case "ended":
        await this._mediaStreamRecorder.begin(track2);
        await this.startRecording();
        break;
      case "paused":
        await this.startRecording();
        break;
      case "recording":
      default:
        if (this._currentAudioTrack !== track2) {
          await this._mediaStreamRecorder.end();
          await this._mediaStreamRecorder.begin(track2);
          await this.startRecording();
        } else
          (0, $7afbbd59ebaa42bf$export$af88d00dbe7f521).warn("track-started event received for current track and already recording");
        break;
    }
    this._currentAudioTrack = track2;
  }
  handleTrackStarted(ev) {
    if (ev.type === "screenAudio" || ev.type === "screenVideo")
      this._callbacks.onScreenTrackStarted?.(ev.track, ev.participant ? $683f111f61e07358$var$dailyParticipantToParticipant(ev.participant) : void 0);
    else {
      if (ev.participant?.local && ev.track.kind === "audio")
        this.handleLocalAudioTrack(ev.track);
      this._callbacks.onTrackStarted?.(ev.track, ev.participant ? $683f111f61e07358$var$dailyParticipantToParticipant(ev.participant) : void 0);
    }
  }
  handleTrackStopped(ev) {
    if (ev.type === "screenAudio" || ev.type === "screenVideo")
      this._callbacks.onScreenTrackStopped?.(ev.track, ev.participant ? $683f111f61e07358$var$dailyParticipantToParticipant(ev.participant) : void 0);
    else
      this._callbacks.onTrackStopped?.(ev.track, ev.participant ? $683f111f61e07358$var$dailyParticipantToParticipant(ev.participant) : void 0);
  }
  handleParticipantJoined(ev) {
    const p3 = $683f111f61e07358$var$dailyParticipantToParticipant(ev.participant);
    this._callbacks.onParticipantJoined?.(p3);
    if (p3.local)
      return;
    this._botId = ev.participant.session_id;
    this._callbacks.onBotConnected?.(p3);
  }
  handleParticipantLeft(ev) {
    const p3 = $683f111f61e07358$var$dailyParticipantToParticipant(ev.participant);
    this._callbacks.onParticipantLeft?.(p3);
    if (p3.local)
      return;
    this._botId = "";
    this._callbacks.onBotDisconnected?.(p3);
  }
  handleLocalAudioLevel(ev) {
    this._callbacks.onLocalAudioLevel?.(ev.audioLevel);
  }
  handleRemoteAudioLevel(ev) {
    const participants = this._daily.participants();
    const ids = Object.keys(ev.participantsAudioLevel);
    for (let i3 = 0; i3 < ids.length; i3++) {
      const id = ids[i3];
      const level = ev.participantsAudioLevel[id];
      this._callbacks.onRemoteAudioLevel?.(level, $683f111f61e07358$var$dailyParticipantToParticipant(participants[id]));
    }
  }
  handleLeftMeeting() {
    this.state = "disconnected";
    this._botId = "";
    this._callbacks.onDisconnected?.();
  }
  handleFatalError(ev) {
    (0, $7afbbd59ebaa42bf$export$af88d00dbe7f521).error("Daily fatal error", ev.errorMsg);
    this.state = "error";
    this._botId = "";
    this._callbacks.onError?.((0, $b48f893ed1354c1e$export$69aa9ab0334b212).error(ev.errorMsg, true));
  }
  handleNonFatalError(ev) {
    switch (ev.type) {
      case "screen-share-error":
        this._callbacks.onScreenShareError?.(ev.errorMsg);
        break;
    }
  }
};
$683f111f61e07358$export$b1ca982aa1e488c1.RECORDER_SAMPLE_RATE = 16e3;
$683f111f61e07358$export$b1ca982aa1e488c1.RECORDER_CHUNK_SIZE = 512;
var $683f111f61e07358$var$dailyParticipantToParticipant = (p3) => ({
  id: p3.user_id,
  local: p3.local,
  name: p3.user_name
});

// ../node_modules/@pipecat-ai/small-webrtc-transport/dist/index.module.js
function $parcel$export3(e3, n3, v3, s3) {
  Object.defineProperty(e3, n3, { get: v3, set: s3, enumerable: true, configurable: true });
}
var $b31644dc78dca54a$exports = {};
$parcel$export3($b31644dc78dca54a$exports, "SmallWebRTCTransport", () => $b31644dc78dca54a$export$62043589d053a879);
var $6d4b7449a1e1544a$export$13afda237b1c98462 = class {
  /**
  * Converts Float32Array of amplitude data to ArrayBuffer in Int16Array format
  * @param {Float32Array} float32Array
  * @returns {ArrayBuffer}
  */
  static floatTo16BitPCM(float32Array) {
    const buffer = new ArrayBuffer(float32Array.length * 2);
    const view = new DataView(buffer);
    let offset = 0;
    for (let i3 = 0; i3 < float32Array.length; i3++, offset += 2) {
      let s3 = Math.max(-1, Math.min(1, float32Array[i3]));
      view.setInt16(offset, s3 < 0 ? s3 * 32768 : s3 * 32767, true);
    }
    return buffer;
  }
  /**
  * Concatenates two ArrayBuffers
  * @param {ArrayBuffer} leftBuffer
  * @param {ArrayBuffer} rightBuffer
  * @returns {ArrayBuffer}
  */
  static mergeBuffers(leftBuffer, rightBuffer) {
    const tmpArray = new Uint8Array(leftBuffer.byteLength + rightBuffer.byteLength);
    tmpArray.set(new Uint8Array(leftBuffer), 0);
    tmpArray.set(new Uint8Array(rightBuffer), leftBuffer.byteLength);
    return tmpArray.buffer;
  }
  /**
  * Packs data into an Int16 format
  * @private
  * @param {number} size 0 = 1x Int16, 1 = 2x Int16
  * @param {number} arg value to pack
  * @returns
  */
  _packData(size, arg) {
    return [
      new Uint8Array([
        arg,
        arg >> 8
      ]),
      new Uint8Array([
        arg,
        arg >> 8,
        arg >> 16,
        arg >> 24
      ])
    ][size];
  }
  /**
  * Packs audio into "audio/wav" Blob
  * @param {number} sampleRate
  * @param {{bitsPerSample: number, channels: Array<Float32Array>, data: Int16Array}} audio
  * @returns {WavPackerAudioType}
  */
  pack(sampleRate, audio) {
    if (!audio?.bitsPerSample)
      throw new Error(`Missing "bitsPerSample"`);
    else if (!audio?.channels)
      throw new Error(`Missing "channels"`);
    else if (!audio?.data)
      throw new Error(`Missing "data"`);
    const { bitsPerSample, channels, data } = audio;
    const output = [
      // Header
      "RIFF",
      this._packData(1, 52),
      "WAVE",
      // chunk 1
      "fmt ",
      this._packData(1, 16),
      this._packData(0, 1),
      this._packData(0, channels.length),
      this._packData(1, sampleRate),
      this._packData(1, sampleRate * channels.length * bitsPerSample / 8),
      this._packData(0, channels.length * bitsPerSample / 8),
      this._packData(0, bitsPerSample),
      // chunk 2
      "data",
      this._packData(1, channels[0].length * channels.length * bitsPerSample / 8),
      data
    ];
    const blob = new Blob(output, {
      type: "audio/mpeg"
    });
    const url = URL.createObjectURL(blob);
    return {
      blob,
      url,
      channelCount: channels.length,
      sampleRate,
      duration: data.byteLength / (channels.length * sampleRate * 2)
    };
  }
};
globalThis.WavPacker = $6d4b7449a1e1544a$export$13afda237b1c98462;
var $03f71ce85e00ada6$var$octave8Frequencies2 = [
  4186.01,
  4434.92,
  4698.63,
  4978.03,
  5274.04,
  5587.65,
  5919.91,
  6271.93,
  6644.88,
  7040,
  7458.62,
  7902.13
];
var $03f71ce85e00ada6$var$octave8FrequencyLabels2 = [
  "C",
  "C#",
  "D",
  "D#",
  "E",
  "F",
  "F#",
  "G",
  "G#",
  "A",
  "A#",
  "B"
];
var $03f71ce85e00ada6$export$776c63898ae5b6362 = [];
var $03f71ce85e00ada6$export$facd167cc27ea9b02 = [];
for (let i3 = 1; i3 <= 8; i3++)
  for (let f3 = 0; f3 < $03f71ce85e00ada6$var$octave8Frequencies2.length; f3++) {
    const freq = $03f71ce85e00ada6$var$octave8Frequencies2[f3];
    $03f71ce85e00ada6$export$776c63898ae5b6362.push(freq / Math.pow(2, 8 - i3));
    $03f71ce85e00ada6$export$facd167cc27ea9b02.push($03f71ce85e00ada6$var$octave8FrequencyLabels2[f3] + i3);
  }
var $03f71ce85e00ada6$var$voiceFrequencyRange2 = [
  32,
  2e3
];
var $03f71ce85e00ada6$export$dbc1581ed2cfa1832 = $03f71ce85e00ada6$export$776c63898ae5b6362.filter((_3, i3) => {
  return $03f71ce85e00ada6$export$776c63898ae5b6362[i3] > $03f71ce85e00ada6$var$voiceFrequencyRange2[0] && $03f71ce85e00ada6$export$776c63898ae5b6362[i3] < $03f71ce85e00ada6$var$voiceFrequencyRange2[1];
});
var $03f71ce85e00ada6$export$30a6f2881311088f2 = $03f71ce85e00ada6$export$facd167cc27ea9b02.filter((_3, i3) => {
  return $03f71ce85e00ada6$export$776c63898ae5b6362[i3] > $03f71ce85e00ada6$var$voiceFrequencyRange2[0] && $03f71ce85e00ada6$export$776c63898ae5b6362[i3] < $03f71ce85e00ada6$var$voiceFrequencyRange2[1];
});
var $f32f064564ee62f6$export$2c3136da0bf130f92 = class _$f32f064564ee62f6$export$2c3136da0bf130f9 {
  /**
  * Retrieves frequency domain data from an AnalyserNode adjusted to a decibel range
  * returns human-readable formatting and labels
  * @param {AnalyserNode} analyser
  * @param {number} sampleRate
  * @param {Float32Array} [fftResult]
  * @param {"frequency"|"music"|"voice"} [analysisType]
  * @param {number} [minDecibels] default -100
  * @param {number} [maxDecibels] default -30
  * @returns {AudioAnalysisOutputType}
  */
  static getFrequencies(analyser, sampleRate, fftResult, analysisType = "frequency", minDecibels = -100, maxDecibels = -30) {
    if (!fftResult) {
      fftResult = new Float32Array(analyser.frequencyBinCount);
      analyser.getFloatFrequencyData(fftResult);
    }
    const nyquistFrequency = sampleRate / 2;
    const frequencyStep = 1 / fftResult.length * nyquistFrequency;
    let outputValues;
    let frequencies;
    let labels;
    if (analysisType === "music" || analysisType === "voice") {
      const useFrequencies = analysisType === "voice" ? (0, $03f71ce85e00ada6$export$dbc1581ed2cfa1832) : (0, $03f71ce85e00ada6$export$776c63898ae5b6362);
      const aggregateOutput = Array(useFrequencies.length).fill(minDecibels);
      for (let i3 = 0; i3 < fftResult.length; i3++) {
        const frequency = i3 * frequencyStep;
        const amplitude = fftResult[i3];
        for (let n3 = useFrequencies.length - 1; n3 >= 0; n3--)
          if (frequency > useFrequencies[n3]) {
            aggregateOutput[n3] = Math.max(aggregateOutput[n3], amplitude);
            break;
          }
      }
      outputValues = aggregateOutput;
      frequencies = analysisType === "voice" ? (0, $03f71ce85e00ada6$export$dbc1581ed2cfa1832) : (0, $03f71ce85e00ada6$export$776c63898ae5b6362);
      labels = analysisType === "voice" ? (0, $03f71ce85e00ada6$export$30a6f2881311088f2) : (0, $03f71ce85e00ada6$export$facd167cc27ea9b02);
    } else {
      outputValues = Array.from(fftResult);
      frequencies = outputValues.map((_3, i3) => frequencyStep * i3);
      labels = frequencies.map((f3) => `${f3.toFixed(2)} Hz`);
    }
    const normalizedOutput = outputValues.map((v3) => {
      return Math.max(0, Math.min((v3 - minDecibels) / (maxDecibels - minDecibels), 1));
    });
    const values = new Float32Array(normalizedOutput);
    return {
      values,
      frequencies,
      labels
    };
  }
  /**
  * Creates a new AudioAnalysis instance for an HTMLAudioElement
  * @param {HTMLAudioElement} audioElement
  * @param {AudioBuffer|null} [audioBuffer] If provided, will cache all frequency domain data from the buffer
  * @returns {AudioAnalysis}
  */
  constructor(audioElement, audioBuffer = null) {
    this.fftResults = [];
    if (audioBuffer) {
      const { length, sampleRate } = audioBuffer;
      const offlineAudioContext = new OfflineAudioContext({
        length,
        sampleRate
      });
      const source = offlineAudioContext.createBufferSource();
      source.buffer = audioBuffer;
      const analyser = offlineAudioContext.createAnalyser();
      analyser.fftSize = 8192;
      analyser.smoothingTimeConstant = 0.1;
      source.connect(analyser);
      const renderQuantumInSeconds = 1 / 60;
      const durationInSeconds = length / sampleRate;
      const analyze = (index) => {
        const suspendTime = renderQuantumInSeconds * index;
        if (suspendTime < durationInSeconds)
          offlineAudioContext.suspend(suspendTime).then(() => {
            const fftResult = new Float32Array(analyser.frequencyBinCount);
            analyser.getFloatFrequencyData(fftResult);
            this.fftResults.push(fftResult);
            analyze(index + 1);
          });
        if (index === 1)
          offlineAudioContext.startRendering();
        else
          offlineAudioContext.resume();
      };
      source.start(0);
      analyze(1);
      this.audio = audioElement;
      this.context = offlineAudioContext;
      this.analyser = analyser;
      this.sampleRate = sampleRate;
      this.audioBuffer = audioBuffer;
    } else {
      const audioContext = new AudioContext();
      const track2 = audioContext.createMediaElementSource(audioElement);
      const analyser = audioContext.createAnalyser();
      analyser.fftSize = 8192;
      analyser.smoothingTimeConstant = 0.1;
      track2.connect(analyser);
      analyser.connect(audioContext.destination);
      this.audio = audioElement;
      this.context = audioContext;
      this.analyser = analyser;
      this.sampleRate = this.context.sampleRate;
      this.audioBuffer = null;
    }
  }
  /**
  * Gets the current frequency domain data from the playing audio track
  * @param {"frequency"|"music"|"voice"} [analysisType]
  * @param {number} [minDecibels] default -100
  * @param {number} [maxDecibels] default -30
  * @returns {AudioAnalysisOutputType}
  */
  getFrequencies(analysisType = "frequency", minDecibels = -100, maxDecibels = -30) {
    let fftResult = null;
    if (this.audioBuffer && this.fftResults.length) {
      const pct = this.audio.currentTime / this.audio.duration;
      const index = Math.min(pct * this.fftResults.length | 0, this.fftResults.length - 1);
      fftResult = this.fftResults[index];
    }
    return _$f32f064564ee62f6$export$2c3136da0bf130f9.getFrequencies(this.analyser, this.sampleRate, fftResult, analysisType, minDecibels, maxDecibels);
  }
  /**
  * Resume the internal AudioContext if it was suspended due to the lack of
  * user interaction when the AudioAnalysis was instantiated.
  * @returns {Promise<true>}
  */
  async resumeIfSuspended() {
    if (this.context.state === "suspended")
      await this.context.resume();
    return true;
  }
};
globalThis.AudioAnalysis = $f32f064564ee62f6$export$2c3136da0bf130f92;
var $29a8a70a9466b14f$export$50b76700e2b15e92 = `
class StreamProcessor extends AudioWorkletProcessor {
  constructor() {
    super();
    this.hasStarted = false;
    this.hasInterrupted = false;
    this.outputBuffers = [];
    this.bufferLength = 128;
    this.write = { buffer: new Float32Array(this.bufferLength), trackId: null };
    this.writeOffset = 0;
    this.trackSampleOffsets = {};
    this.port.onmessage = (event) => {
      if (event.data) {
        const payload = event.data;
        if (payload.event === 'write') {
          const int16Array = payload.buffer;
          const float32Array = new Float32Array(int16Array.length);
          for (let i = 0; i < int16Array.length; i++) {
            float32Array[i] = int16Array[i] / 0x8000; // Convert Int16 to Float32
          }
          this.writeData(float32Array, payload.trackId);
        } else if (
          payload.event === 'offset' ||
          payload.event === 'interrupt'
        ) {
          const requestId = payload.requestId;
          const trackId = this.write.trackId;
          const offset = this.trackSampleOffsets[trackId] || 0;
          this.port.postMessage({
            event: 'offset',
            requestId,
            trackId,
            offset,
          });
          if (payload.event === 'interrupt') {
            this.hasInterrupted = true;
          }
        } else {
          throw new Error(\`Unhandled event "\${payload.event}"\`);
        }
      }
    };
  }

  writeData(float32Array, trackId = null) {
    let { buffer } = this.write;
    let offset = this.writeOffset;
    for (let i = 0; i < float32Array.length; i++) {
      buffer[offset++] = float32Array[i];
      if (offset >= buffer.length) {
        this.outputBuffers.push(this.write);
        this.write = { buffer: new Float32Array(this.bufferLength), trackId };
        buffer = this.write.buffer;
        offset = 0;
      }
    }
    this.writeOffset = offset;
    return true;
  }

  process(inputs, outputs, parameters) {
    const output = outputs[0];
    const outputChannelData = output[0];
    const outputBuffers = this.outputBuffers;
    if (this.hasInterrupted) {
      this.port.postMessage({ event: 'stop' });
      return false;
    } else if (outputBuffers.length) {
      this.hasStarted = true;
      const { buffer, trackId } = outputBuffers.shift();
      for (let i = 0; i < outputChannelData.length; i++) {
        outputChannelData[i] = buffer[i] || 0;
      }
      if (trackId) {
        this.trackSampleOffsets[trackId] =
          this.trackSampleOffsets[trackId] || 0;
        this.trackSampleOffsets[trackId] += buffer.length;
      }
      return true;
    } else if (this.hasStarted) {
      this.port.postMessage({ event: 'stop' });
      return false;
    } else {
      return true;
    }
  }
}

registerProcessor('stream_processor', StreamProcessor);
`;
var $29a8a70a9466b14f$var$script2 = new Blob([
  $29a8a70a9466b14f$export$50b76700e2b15e92
], {
  type: "application/javascript"
});
var $29a8a70a9466b14f$var$src2 = URL.createObjectURL($29a8a70a9466b14f$var$script2);
var $29a8a70a9466b14f$export$bfa8c596114d74df2 = $29a8a70a9466b14f$var$src2;
var $d0a969833958d9e7$export$9698d62c78b8f3662 = class {
  /**
  * Creates a new WavStreamPlayer instance
  * @param {{sampleRate?: number}} options
  * @returns {WavStreamPlayer}
  */
  constructor({ sampleRate = 44100 } = {}) {
    this.scriptSrc = (0, $29a8a70a9466b14f$export$bfa8c596114d74df2);
    this.sampleRate = sampleRate;
    this.context = null;
    this.stream = null;
    this.analyser = null;
    this.trackSampleOffsets = {};
    this.interruptedTrackIds = {};
  }
  /**
  * Connects the audio context and enables output to speakers
  * @returns {Promise<true>}
  */
  async connect() {
    this.context = new AudioContext({
      sampleRate: this.sampleRate
    });
    if (this._speakerID)
      this.context.setSinkId(this._speakerID);
    if (this.context.state === "suspended")
      await this.context.resume();
    try {
      await this.context.audioWorklet.addModule(this.scriptSrc);
    } catch (e3) {
      console.error(e3);
      throw new Error(`Could not add audioWorklet module: ${this.scriptSrc}`);
    }
    const analyser = this.context.createAnalyser();
    analyser.fftSize = 8192;
    analyser.smoothingTimeConstant = 0.1;
    this.analyser = analyser;
    return true;
  }
  /**
  * Gets the current frequency domain data from the playing track
  * @param {"frequency"|"music"|"voice"} [analysisType]
  * @param {number} [minDecibels] default -100
  * @param {number} [maxDecibels] default -30
  * @returns {import('./analysis/audio_analysis.js').AudioAnalysisOutputType}
  */
  getFrequencies(analysisType = "frequency", minDecibels = -100, maxDecibels = -30) {
    if (!this.analyser)
      throw new Error("Not connected, please call .connect() first");
    return (0, $f32f064564ee62f6$export$2c3136da0bf130f92).getFrequencies(this.analyser, this.sampleRate, null, analysisType, minDecibels, maxDecibels);
  }
  /**
  * @param {string} speaker deviceId
  */
  async updateSpeaker(speaker) {
    const _prevSpeaker = this._speakerID;
    this._speakerID = speaker;
    if (this.context)
      try {
        if (speaker === "default")
          await this.context.setSinkId();
        else
          await this.context.setSinkId(speaker);
      } catch (e3) {
        console.error(`Could not set sinkId to ${speaker}: ${e3}`);
        this._speakerID = _prevSpeaker;
      }
  }
  /**
  * Starts audio streaming
  * @private
  * @returns {Promise<true>}
  */
  _start() {
    const streamNode = new AudioWorkletNode(this.context, "stream_processor");
    streamNode.connect(this.context.destination);
    streamNode.port.onmessage = (e3) => {
      const { event } = e3.data;
      if (event === "stop") {
        streamNode.disconnect();
        this.stream = null;
      } else if (event === "offset") {
        const { requestId, trackId, offset } = e3.data;
        const currentTime = offset / this.sampleRate;
        this.trackSampleOffsets[requestId] = {
          trackId,
          offset,
          currentTime
        };
      }
    };
    this.analyser.disconnect();
    streamNode.connect(this.analyser);
    this.stream = streamNode;
    return true;
  }
  /**
  * Adds 16BitPCM data to the currently playing audio stream
  * You can add chunks beyond the current play point and they will be queued for play
  * @param {ArrayBuffer|Int16Array} arrayBuffer
  * @param {string} [trackId]
  * @returns {Int16Array}
  */
  add16BitPCM(arrayBuffer, trackId = "default") {
    if (typeof trackId !== "string")
      throw new Error(`trackId must be a string`);
    else if (this.interruptedTrackIds[trackId])
      return;
    if (!this.stream)
      this._start();
    let buffer;
    if (arrayBuffer instanceof Int16Array)
      buffer = arrayBuffer;
    else if (arrayBuffer instanceof ArrayBuffer)
      buffer = new Int16Array(arrayBuffer);
    else
      throw new Error(`argument must be Int16Array or ArrayBuffer`);
    this.stream.port.postMessage({
      event: "write",
      buffer,
      trackId
    });
    return buffer;
  }
  /**
  * Gets the offset (sample count) of the currently playing stream
  * @param {boolean} [interrupt]
  * @returns {{trackId: string|null, offset: number, currentTime: number}}
  */
  async getTrackSampleOffset(interrupt = false) {
    if (!this.stream)
      return null;
    const requestId = crypto.randomUUID();
    this.stream.port.postMessage({
      event: interrupt ? "interrupt" : "offset",
      requestId
    });
    let trackSampleOffset;
    while (!trackSampleOffset) {
      trackSampleOffset = this.trackSampleOffsets[requestId];
      await new Promise((r3) => setTimeout(() => r3(), 1));
    }
    const { trackId } = trackSampleOffset;
    if (interrupt && trackId)
      this.interruptedTrackIds[trackId] = true;
    return trackSampleOffset;
  }
  /**
  * Strips the current stream and returns the sample offset of the audio
  * @param {boolean} [interrupt]
  * @returns {{trackId: string|null, offset: number, currentTime: number}}
  */
  async interrupt() {
    return this.getTrackSampleOffset(true);
  }
};
globalThis.WavStreamPlayer = $d0a969833958d9e7$export$9698d62c78b8f3662;
var $8e1d1e6ff08f6fb5$var$AudioProcessorWorklet2 = `
class AudioProcessor extends AudioWorkletProcessor {

  constructor() {
    super();
    this.port.onmessage = this.receive.bind(this);
    this.initialize();
  }

  initialize() {
    this.foundAudio = false;
    this.recording = false;
    this.chunks = [];
  }

  /**
   * Concatenates sampled chunks into channels
   * Format is chunk[Left[], Right[]]
   */
  readChannelData(chunks, channel = -1, maxChannels = 9) {
    let channelLimit;
    if (channel !== -1) {
      if (chunks[0] && chunks[0].length - 1 < channel) {
        throw new Error(
          \`Channel \${channel} out of range: max \${chunks[0].length}\`
        );
      }
      channelLimit = channel + 1;
    } else {
      channel = 0;
      channelLimit = Math.min(chunks[0] ? chunks[0].length : 1, maxChannels);
    }
    const channels = [];
    for (let n = channel; n < channelLimit; n++) {
      const length = chunks.reduce((sum, chunk) => {
        return sum + chunk[n].length;
      }, 0);
      const buffers = chunks.map((chunk) => chunk[n]);
      const result = new Float32Array(length);
      let offset = 0;
      for (let i = 0; i < buffers.length; i++) {
        result.set(buffers[i], offset);
        offset += buffers[i].length;
      }
      channels[n] = result;
    }
    return channels;
  }

  /**
   * Combines parallel audio data into correct format,
   * channels[Left[], Right[]] to float32Array[LRLRLRLR...]
   */
  formatAudioData(channels) {
    if (channels.length === 1) {
      // Simple case is only one channel
      const float32Array = channels[0].slice();
      const meanValues = channels[0].slice();
      return { float32Array, meanValues };
    } else {
      const float32Array = new Float32Array(
        channels[0].length * channels.length
      );
      const meanValues = new Float32Array(channels[0].length);
      for (let i = 0; i < channels[0].length; i++) {
        const offset = i * channels.length;
        let meanValue = 0;
        for (let n = 0; n < channels.length; n++) {
          float32Array[offset + n] = channels[n][i];
          meanValue += channels[n][i];
        }
        meanValues[i] = meanValue / channels.length;
      }
      return { float32Array, meanValues };
    }
  }

  /**
   * Converts 32-bit float data to 16-bit integers
   */
  floatTo16BitPCM(float32Array) {
    const buffer = new ArrayBuffer(float32Array.length * 2);
    const view = new DataView(buffer);
    let offset = 0;
    for (let i = 0; i < float32Array.length; i++, offset += 2) {
      let s = Math.max(-1, Math.min(1, float32Array[i]));
      view.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7fff, true);
    }
    return buffer;
  }

  /**
   * Retrieves the most recent amplitude values from the audio stream
   * @param {number} channel
   */
  getValues(channel = -1) {
    const channels = this.readChannelData(this.chunks, channel);
    const { meanValues } = this.formatAudioData(channels);
    return { meanValues, channels };
  }

  /**
   * Exports chunks as an audio/wav file
   */
  export() {
    const channels = this.readChannelData(this.chunks);
    const { float32Array, meanValues } = this.formatAudioData(channels);
    const audioData = this.floatTo16BitPCM(float32Array);
    return {
      meanValues: meanValues,
      audio: {
        bitsPerSample: 16,
        channels: channels,
        data: audioData,
      },
    };
  }

  receive(e) {
    const { event, id } = e.data;
    let receiptData = {};
    switch (event) {
      case 'start':
        this.recording = true;
        break;
      case 'stop':
        this.recording = false;
        break;
      case 'clear':
        this.initialize();
        break;
      case 'export':
        receiptData = this.export();
        break;
      case 'read':
        receiptData = this.getValues();
        break;
      default:
        break;
    }
    // Always send back receipt
    this.port.postMessage({ event: 'receipt', id, data: receiptData });
  }

  sendChunk(chunk) {
    const channels = this.readChannelData([chunk]);
    const { float32Array, meanValues } = this.formatAudioData(channels);
    const rawAudioData = this.floatTo16BitPCM(float32Array);
    const monoAudioData = this.floatTo16BitPCM(meanValues);
    this.port.postMessage({
      event: 'chunk',
      data: {
        mono: monoAudioData,
        raw: rawAudioData,
      },
    });
  }

  process(inputList, outputList, parameters) {
    // Copy input to output (e.g. speakers)
    // Note that this creates choppy sounds with Mac products
    const sourceLimit = Math.min(inputList.length, outputList.length);
    for (let inputNum = 0; inputNum < sourceLimit; inputNum++) {
      const input = inputList[inputNum];
      const output = outputList[inputNum];
      const channelCount = Math.min(input.length, output.length);
      for (let channelNum = 0; channelNum < channelCount; channelNum++) {
        input[channelNum].forEach((sample, i) => {
          output[channelNum][i] = sample;
        });
      }
    }
    const inputs = inputList[0];
    // There's latency at the beginning of a stream before recording starts
    // Make sure we actually receive audio data before we start storing chunks
    let sliceIndex = 0;
    if (!this.foundAudio) {
      for (const channel of inputs) {
        sliceIndex = 0; // reset for each channel
        if (this.foundAudio) {
          break;
        }
        if (channel) {
          for (const value of channel) {
            if (value !== 0) {
              // find only one non-zero entry in any channel
              this.foundAudio = true;
              break;
            } else {
              sliceIndex++;
            }
          }
        }
      }
    }
    if (inputs && inputs[0] && this.foundAudio && this.recording) {
      // We need to copy the TypedArray, because the \`process\`
      // internals will reuse the same buffer to hold each input
      const chunk = inputs.map((input) => input.slice(sliceIndex));
      this.chunks.push(chunk);
      this.sendChunk(chunk);
    }
    return true;
  }
}

registerProcessor('audio_processor', AudioProcessor);
`;
var $8e1d1e6ff08f6fb5$var$script2 = new Blob([
  $8e1d1e6ff08f6fb5$var$AudioProcessorWorklet2
], {
  type: "application/javascript"
});
var $8e1d1e6ff08f6fb5$var$src2 = URL.createObjectURL($8e1d1e6ff08f6fb5$var$script2);
var $8e1d1e6ff08f6fb5$export$1f65f50a8cbff43c2 = $8e1d1e6ff08f6fb5$var$src2;
var $62bc376044a05513$export$439b217ca659a8772 = class {
  /**
  * Create a new WavRecorder instance
  * @param {{sampleRate?: number, outputToSpeakers?: boolean, debug?: boolean}} [options]
  * @returns {WavRecorder}
  */
  constructor({ sampleRate = 44100, outputToSpeakers = false, debug = false } = {}) {
    this.scriptSrc = (0, $8e1d1e6ff08f6fb5$export$1f65f50a8cbff43c2);
    this.sampleRate = sampleRate;
    this.outputToSpeakers = outputToSpeakers;
    this.debug = !!debug;
    this._deviceChangeCallback = null;
    this._devices = [];
    this.deviceSelection = null;
    this.stream = null;
    this.processor = null;
    this.source = null;
    this.node = null;
    this.recording = false;
    this._lastEventId = 0;
    this.eventReceipts = {};
    this.eventTimeout = 5e3;
    this._chunkProcessor = () => {
    };
    this._chunkProcessorSize = void 0;
    this._chunkProcessorBuffer = {
      raw: new ArrayBuffer(0),
      mono: new ArrayBuffer(0)
    };
  }
  /**
  * Decodes audio data from multiple formats to a Blob, url, Float32Array and AudioBuffer
  * @param {Blob|Float32Array|Int16Array|ArrayBuffer|number[]} audioData
  * @param {number} sampleRate
  * @param {number} fromSampleRate
  * @returns {Promise<DecodedAudioType>}
  */
  static async decode(audioData, sampleRate = 44100, fromSampleRate = -1) {
    const context = new AudioContext({
      sampleRate
    });
    let arrayBuffer;
    let blob;
    if (audioData instanceof Blob) {
      if (fromSampleRate !== -1)
        throw new Error(`Can not specify "fromSampleRate" when reading from Blob`);
      blob = audioData;
      arrayBuffer = await blob.arrayBuffer();
    } else if (audioData instanceof ArrayBuffer) {
      if (fromSampleRate !== -1)
        throw new Error(`Can not specify "fromSampleRate" when reading from ArrayBuffer`);
      arrayBuffer = audioData;
      blob = new Blob([
        arrayBuffer
      ], {
        type: "audio/wav"
      });
    } else {
      let float32Array;
      let data;
      if (audioData instanceof Int16Array) {
        data = audioData;
        float32Array = new Float32Array(audioData.length);
        for (let i3 = 0; i3 < audioData.length; i3++)
          float32Array[i3] = audioData[i3] / 32768;
      } else if (audioData instanceof Float32Array)
        float32Array = audioData;
      else if (audioData instanceof Array)
        float32Array = new Float32Array(audioData);
      else
        throw new Error(`"audioData" must be one of: Blob, Float32Arrray, Int16Array, ArrayBuffer, Array<number>`);
      if (fromSampleRate === -1)
        throw new Error(`Must specify "fromSampleRate" when reading from Float32Array, In16Array or Array`);
      else if (fromSampleRate < 3e3)
        throw new Error(`Minimum "fromSampleRate" is 3000 (3kHz)`);
      if (!data)
        data = (0, $6d4b7449a1e1544a$export$13afda237b1c98462).floatTo16BitPCM(float32Array);
      const audio = {
        bitsPerSample: 16,
        channels: [
          float32Array
        ],
        data
      };
      const packer = new (0, $6d4b7449a1e1544a$export$13afda237b1c98462)();
      const result = packer.pack(fromSampleRate, audio);
      blob = result.blob;
      arrayBuffer = await blob.arrayBuffer();
    }
    const audioBuffer = await context.decodeAudioData(arrayBuffer);
    const values = audioBuffer.getChannelData(0);
    const url = URL.createObjectURL(blob);
    return {
      blob,
      url,
      values,
      audioBuffer
    };
  }
  /**
  * Logs data in debug mode
  * @param {...any} arguments
  * @returns {true}
  */
  log() {
    if (this.debug)
      this.log(...arguments);
    return true;
  }
  /**
  * Retrieves the current sampleRate for the recorder
  * @returns {number}
  */
  getSampleRate() {
    return this.sampleRate;
  }
  /**
  * Retrieves the current status of the recording
  * @returns {"ended"|"paused"|"recording"}
  */
  getStatus() {
    if (!this.processor)
      return "ended";
    else if (!this.recording)
      return "paused";
    else
      return "recording";
  }
  /**
  * Sends an event to the AudioWorklet
  * @private
  * @param {string} name
  * @param {{[key: string]: any}} data
  * @param {AudioWorkletNode} [_processor]
  * @returns {Promise<{[key: string]: any}>}
  */
  async _event(name, data = {}, _processor = null) {
    _processor = _processor || this.processor;
    if (!_processor)
      throw new Error("Can not send events without recording first");
    const message = {
      event: name,
      id: this._lastEventId++,
      data
    };
    _processor.port.postMessage(message);
    const t0 = (/* @__PURE__ */ new Date()).valueOf();
    while (!this.eventReceipts[message.id]) {
      if ((/* @__PURE__ */ new Date()).valueOf() - t0 > this.eventTimeout)
        throw new Error(`Timeout waiting for "${name}" event`);
      await new Promise((res) => setTimeout(() => res(true), 1));
    }
    const payload = this.eventReceipts[message.id];
    delete this.eventReceipts[message.id];
    return payload;
  }
  /**
  * Sets device change callback, remove if callback provided is `null`
  * @param {(Array<MediaDeviceInfo & {default: boolean}>): void|null} callback
  * @returns {true}
  */
  listenForDeviceChange(callback) {
    if (callback === null && this._deviceChangeCallback) {
      navigator.mediaDevices.removeEventListener("devicechange", this._deviceChangeCallback);
      this._deviceChangeCallback = null;
    } else if (callback !== null) {
      let lastId = 0;
      let lastDevices = [];
      const serializeDevices = (devices) => devices.map((d3) => d3.deviceId).sort().join(",");
      const cb = async () => {
        let id = ++lastId;
        const devices = await this.listDevices();
        if (id === lastId) {
          if (serializeDevices(lastDevices) !== serializeDevices(devices)) {
            lastDevices = devices;
            callback(devices.slice());
          }
        }
      };
      navigator.mediaDevices.addEventListener("devicechange", cb);
      cb();
      this._deviceChangeCallback = cb;
    }
    return true;
  }
  /**
  * Manually request permission to use the microphone
  * @returns {Promise<true>}
  */
  async requestPermission() {
    const permissionStatus = await navigator.permissions.query({
      name: "microphone"
    });
    if (permissionStatus.state === "denied")
      window.alert("You must grant microphone access to use this feature.");
    else if (permissionStatus.state === "prompt")
      try {
        const stream = await navigator.mediaDevices.getUserMedia({
          audio: true
        });
        const tracks = stream.getTracks();
        tracks.forEach((track2) => track2.stop());
      } catch (e3) {
        window.alert("You must grant microphone access to use this feature.");
      }
    return true;
  }
  /**
  * List all eligible devices for recording, will request permission to use microphone
  * @returns {Promise<Array<MediaDeviceInfo & {default: boolean}>>}
  */
  async listDevices() {
    if (!navigator.mediaDevices || !("enumerateDevices" in navigator.mediaDevices))
      throw new Error("Could not request user devices");
    await this.requestPermission();
    const devices = await navigator.mediaDevices.enumerateDevices();
    const audioDevices = devices.filter((device) => device.kind === "audioinput");
    return audioDevices;
  }
  /**
  * Begins a recording session and requests microphone permissions if not already granted
  * Microphone recording indicator will appear on browser tab but status will be "paused"
  * @param {string} [deviceId] if no device provided, default device will be used
  * @returns {Promise<true>}
  */
  async begin(deviceId) {
    if (this.processor)
      throw new Error(`Already connected: please call .end() to start a new session`);
    if (!navigator.mediaDevices || !("getUserMedia" in navigator.mediaDevices))
      throw new Error("Could not request user media");
    deviceId = deviceId ?? this.deviceSelection?.deviceId;
    try {
      const config = {
        audio: true
      };
      if (deviceId)
        config.audio = {
          deviceId: {
            exact: deviceId
          }
        };
      this.stream = await navigator.mediaDevices.getUserMedia(config);
    } catch (err) {
      throw new Error("Could not start media stream");
    }
    this.listDevices().then((devices) => {
      deviceId = this.stream.getAudioTracks()[0].getSettings().deviceId;
      console.log("find current device", devices, deviceId, this.stream.getAudioTracks()[0].getSettings());
      this.deviceSelection = devices.find((d3) => d3.deviceId === deviceId);
      console.log("current device", this.deviceSelection);
    });
    const context = new AudioContext({
      sampleRate: this.sampleRate
    });
    const source = context.createMediaStreamSource(this.stream);
    try {
      await context.audioWorklet.addModule(this.scriptSrc);
    } catch (e3) {
      console.error(e3);
      throw new Error(`Could not add audioWorklet module: ${this.scriptSrc}`);
    }
    const processor = new AudioWorkletNode(context, "audio_processor");
    processor.port.onmessage = (e3) => {
      const { event, id, data } = e3.data;
      if (event === "receipt")
        this.eventReceipts[id] = data;
      else if (event === "chunk") {
        if (this._chunkProcessorSize) {
          const buffer = this._chunkProcessorBuffer;
          this._chunkProcessorBuffer = {
            raw: (0, $6d4b7449a1e1544a$export$13afda237b1c98462).mergeBuffers(buffer.raw, data.raw),
            mono: (0, $6d4b7449a1e1544a$export$13afda237b1c98462).mergeBuffers(buffer.mono, data.mono)
          };
          if (this._chunkProcessorBuffer.mono.byteLength >= this._chunkProcessorSize) {
            this._chunkProcessor(this._chunkProcessorBuffer);
            this._chunkProcessorBuffer = {
              raw: new ArrayBuffer(0),
              mono: new ArrayBuffer(0)
            };
          }
        } else
          this._chunkProcessor(data);
      }
    };
    const node = source.connect(processor);
    const analyser = context.createAnalyser();
    analyser.fftSize = 8192;
    analyser.smoothingTimeConstant = 0.1;
    node.connect(analyser);
    if (this.outputToSpeakers) {
      console.warn("Warning: Output to speakers may affect sound quality,\nespecially due to system audio feedback preventative measures.\nuse only for debugging");
      analyser.connect(context.destination);
    }
    this.source = source;
    this.node = node;
    this.analyser = analyser;
    this.processor = processor;
    console.log("begin completed");
    return true;
  }
  /**
  * Gets the current frequency domain data from the recording track
  * @param {"frequency"|"music"|"voice"} [analysisType]
  * @param {number} [minDecibels] default -100
  * @param {number} [maxDecibels] default -30
  * @returns {import('./analysis/audio_analysis.js').AudioAnalysisOutputType}
  */
  getFrequencies(analysisType = "frequency", minDecibels = -100, maxDecibels = -30) {
    if (!this.processor)
      throw new Error("Session ended: please call .begin() first");
    return (0, $f32f064564ee62f6$export$2c3136da0bf130f92).getFrequencies(this.analyser, this.sampleRate, null, analysisType, minDecibels, maxDecibels);
  }
  /**
  * Pauses the recording
  * Keeps microphone stream open but halts storage of audio
  * @returns {Promise<true>}
  */
  async pause() {
    if (!this.processor)
      throw new Error("Session ended: please call .begin() first");
    else if (!this.recording)
      throw new Error("Already paused: please call .record() first");
    if (this._chunkProcessorBuffer.raw.byteLength)
      this._chunkProcessor(this._chunkProcessorBuffer);
    this.log("Pausing ...");
    await this._event("stop");
    this.recording = false;
    return true;
  }
  /**
  * Start recording stream and storing to memory from the connected audio source
  * @param {(data: { mono: Int16Array; raw: Int16Array }) => any} [chunkProcessor]
  * @param {number} [chunkSize] chunkProcessor will not be triggered until this size threshold met in mono audio
  * @returns {Promise<true>}
  */
  async record(chunkProcessor = () => {
  }, chunkSize = 8192) {
    if (!this.processor)
      throw new Error("Session ended: please call .begin() first");
    else if (this.recording)
      throw new Error("Already recording: please call .pause() first");
    else if (typeof chunkProcessor !== "function")
      throw new Error(`chunkProcessor must be a function`);
    this._chunkProcessor = chunkProcessor;
    this._chunkProcessorSize = chunkSize;
    this._chunkProcessorBuffer = {
      raw: new ArrayBuffer(0),
      mono: new ArrayBuffer(0)
    };
    this.log("Recording ...");
    await this._event("start");
    this.recording = true;
    return true;
  }
  /**
  * Clears the audio buffer, empties stored recording
  * @returns {Promise<true>}
  */
  async clear() {
    if (!this.processor)
      throw new Error("Session ended: please call .begin() first");
    await this._event("clear");
    return true;
  }
  /**
  * Reads the current audio stream data
  * @returns {Promise<{meanValues: Float32Array, channels: Array<Float32Array>}>}
  */
  async read() {
    if (!this.processor)
      throw new Error("Session ended: please call .begin() first");
    this.log("Reading ...");
    const result = await this._event("read");
    return result;
  }
  /**
  * Saves the current audio stream to a file
  * @param {boolean} [force] Force saving while still recording
  * @returns {Promise<import('./wav_packer.js').WavPackerAudioType>}
  */
  async save(force = false) {
    if (!this.processor)
      throw new Error("Session ended: please call .begin() first");
    if (!force && this.recording)
      throw new Error("Currently recording: please call .pause() first, or call .save(true) to force");
    this.log("Exporting ...");
    const exportData = await this._event("export");
    const packer = new (0, $6d4b7449a1e1544a$export$13afda237b1c98462)();
    const result = packer.pack(this.sampleRate, exportData.audio);
    return result;
  }
  /**
  * Ends the current recording session and saves the result
  * @returns {Promise<import('./wav_packer.js').WavPackerAudioType>}
  */
  async end() {
    if (!this.processor)
      throw new Error("Session ended: please call .begin() first");
    const _processor = this.processor;
    this.log("Stopping ...");
    await this._event("stop");
    this.recording = false;
    const tracks = this.stream.getTracks();
    tracks.forEach((track2) => track2.stop());
    this.log("Exporting ...");
    const exportData = await this._event("export", {}, _processor);
    this.processor.disconnect();
    this.source.disconnect();
    this.node.disconnect();
    this.analyser.disconnect();
    this.stream = null;
    this.processor = null;
    this.source = null;
    this.node = null;
    const packer = new (0, $6d4b7449a1e1544a$export$13afda237b1c98462)();
    const result = packer.pack(this.sampleRate, exportData.audio);
    return result;
  }
  /**
  * Performs a full cleanup of WavRecorder instance
  * Stops actively listening via microphone and removes existing listeners
  * @returns {Promise<true>}
  */
  async quit() {
    this.listenForDeviceChange(null);
    this.deviceSelection = null;
    if (this.processor)
      await this.end();
    return true;
  }
};
globalThis.WavRecorder = $62bc376044a05513$export$439b217ca659a8772;
var $5fc11d7bc0d20724$export$2934cf2d25c67a482 = class {
  /**
  * Create a new MediaStreamRecorder instance
  * @param {{sampleRate?: number, outputToSpeakers?: boolean, debug?: boolean}} [options]
  * @returns {MediaStreamRecorder}
  */
  constructor({ sampleRate = 44100, outputToSpeakers = false, debug = false } = {}) {
    this.scriptSrc = (0, $8e1d1e6ff08f6fb5$export$1f65f50a8cbff43c2);
    this.sampleRate = sampleRate;
    this.outputToSpeakers = outputToSpeakers;
    this.debug = !!debug;
    this.stream = null;
    this.processor = null;
    this.source = null;
    this.node = null;
    this.recording = false;
    this._lastEventId = 0;
    this.eventReceipts = {};
    this.eventTimeout = 5e3;
    this._chunkProcessor = () => {
    };
    this._chunkProcessorSize = void 0;
    this._chunkProcessorBuffer = {
      raw: new ArrayBuffer(0),
      mono: new ArrayBuffer(0)
    };
  }
  /**
  * Logs data in debug mode
  * @param {...any} arguments
  * @returns {true}
  */
  log() {
    if (this.debug)
      this.log(...arguments);
    return true;
  }
  /**
  * Retrieves the current sampleRate for the recorder
  * @returns {number}
  */
  getSampleRate() {
    return this.sampleRate;
  }
  /**
  * Retrieves the current status of the recording
  * @returns {"ended"|"paused"|"recording"}
  */
  getStatus() {
    if (!this.processor)
      return "ended";
    else if (!this.recording)
      return "paused";
    else
      return "recording";
  }
  /**
  * Sends an event to the AudioWorklet
  * @private
  * @param {string} name
  * @param {{[key: string]: any}} data
  * @param {AudioWorkletNode} [_processor]
  * @returns {Promise<{[key: string]: any}>}
  */
  async _event(name, data = {}, _processor = null) {
    _processor = _processor || this.processor;
    if (!_processor)
      throw new Error("Can not send events without recording first");
    const message = {
      event: name,
      id: this._lastEventId++,
      data
    };
    _processor.port.postMessage(message);
    const t0 = (/* @__PURE__ */ new Date()).valueOf();
    while (!this.eventReceipts[message.id]) {
      if ((/* @__PURE__ */ new Date()).valueOf() - t0 > this.eventTimeout)
        throw new Error(`Timeout waiting for "${name}" event`);
      await new Promise((res) => setTimeout(() => res(true), 1));
    }
    const payload = this.eventReceipts[message.id];
    delete this.eventReceipts[message.id];
    return payload;
  }
  /**
  * Begins a recording session for the given audioTrack
  * Microphone recording indicator will appear on browser tab but status will be "paused"
  * @param {MediaStreamTrack} [audioTrack] if no device provided, default device will be used
  * @returns {Promise<true>}
  */
  async begin(audioTrack) {
    if (this.processor)
      throw new Error(`Already connected: please call .end() to start a new session`);
    if (!audioTrack || audioTrack.kind !== "audio")
      throw new Error("No audio track provided");
    this.stream = new MediaStream([
      audioTrack
    ]);
    const context = new AudioContext({
      sampleRate: this.sampleRate
    });
    const source = context.createMediaStreamSource(this.stream);
    try {
      await context.audioWorklet.addModule(this.scriptSrc);
    } catch (e3) {
      console.error(e3);
      throw new Error(`Could not add audioWorklet module: ${this.scriptSrc}`);
    }
    const processor = new AudioWorkletNode(context, "audio_processor");
    processor.port.onmessage = (e3) => {
      const { event, id, data } = e3.data;
      if (event === "receipt")
        this.eventReceipts[id] = data;
      else if (event === "chunk") {
        if (this._chunkProcessorSize) {
          const buffer = this._chunkProcessorBuffer;
          this._chunkProcessorBuffer = {
            raw: (0, $6d4b7449a1e1544a$export$13afda237b1c98462).mergeBuffers(buffer.raw, data.raw),
            mono: (0, $6d4b7449a1e1544a$export$13afda237b1c98462).mergeBuffers(buffer.mono, data.mono)
          };
          if (this._chunkProcessorBuffer.mono.byteLength >= this._chunkProcessorSize) {
            this._chunkProcessor(this._chunkProcessorBuffer);
            this._chunkProcessorBuffer = {
              raw: new ArrayBuffer(0),
              mono: new ArrayBuffer(0)
            };
          }
        } else
          this._chunkProcessor(data);
      }
    };
    const node = source.connect(processor);
    const analyser = context.createAnalyser();
    analyser.fftSize = 8192;
    analyser.smoothingTimeConstant = 0.1;
    node.connect(analyser);
    if (this.outputToSpeakers) {
      console.warn("Warning: Output to speakers may affect sound quality,\nespecially due to system audio feedback preventative measures.\nuse only for debugging");
      analyser.connect(context.destination);
    }
    this.source = source;
    this.node = node;
    this.analyser = analyser;
    this.processor = processor;
    return true;
  }
  /**
  * Gets the current frequency domain data from the recording track
  * @param {"frequency"|"music"|"voice"} [analysisType]
  * @param {number} [minDecibels] default -100
  * @param {number} [maxDecibels] default -30
  * @returns {import('./analysis/audio_analysis.js').AudioAnalysisOutputType}
  */
  getFrequencies(analysisType = "frequency", minDecibels = -100, maxDecibels = -30) {
    if (!this.processor)
      throw new Error("Session ended: please call .begin() first");
    return (0, $f32f064564ee62f6$export$2c3136da0bf130f92).getFrequencies(this.analyser, this.sampleRate, null, analysisType, minDecibels, maxDecibels);
  }
  /**
  * Pauses the recording
  * Keeps microphone stream open but halts storage of audio
  * @returns {Promise<true>}
  */
  async pause() {
    if (!this.processor)
      throw new Error("Session ended: please call .begin() first");
    else if (!this.recording)
      throw new Error("Already paused: please call .record() first");
    if (this._chunkProcessorBuffer.raw.byteLength)
      this._chunkProcessor(this._chunkProcessorBuffer);
    this.log("Pausing ...");
    await this._event("stop");
    this.recording = false;
    return true;
  }
  /**
  * Start recording stream and storing to memory from the connected audio source
  * @param {(data: { mono: Int16Array; raw: Int16Array }) => any} [chunkProcessor]
  * @param {number} [chunkSize] chunkProcessor will not be triggered until this size threshold met in mono audio
  * @returns {Promise<true>}
  */
  async record(chunkProcessor = () => {
  }, chunkSize = 8192) {
    if (!this.processor)
      throw new Error("Session ended: please call .begin() first");
    else if (this.recording)
      throw new Error("Already recording: HELLO please call .pause() first");
    else if (typeof chunkProcessor !== "function")
      throw new Error(`chunkProcessor must be a function`);
    this._chunkProcessor = chunkProcessor;
    this._chunkProcessorSize = chunkSize;
    this._chunkProcessorBuffer = {
      raw: new ArrayBuffer(0),
      mono: new ArrayBuffer(0)
    };
    this.log("Recording ...");
    await this._event("start");
    this.recording = true;
    return true;
  }
  /**
  * Clears the audio buffer, empties stored recording
  * @returns {Promise<true>}
  */
  async clear() {
    if (!this.processor)
      throw new Error("Session ended: please call .begin() first");
    await this._event("clear");
    return true;
  }
  /**
  * Reads the current audio stream data
  * @returns {Promise<{meanValues: Float32Array, channels: Array<Float32Array>}>}
  */
  async read() {
    if (!this.processor)
      throw new Error("Session ended: please call .begin() first");
    this.log("Reading ...");
    const result = await this._event("read");
    return result;
  }
  /**
  * Saves the current audio stream to a file
  * @param {boolean} [force] Force saving while still recording
  * @returns {Promise<import('./wav_packer.js').WavPackerAudioType>}
  */
  async save(force = false) {
    if (!this.processor)
      throw new Error("Session ended: please call .begin() first");
    if (!force && this.recording)
      throw new Error("Currently recording: please call .pause() first, or call .save(true) to force");
    this.log("Exporting ...");
    const exportData = await this._event("export");
    const packer = new (0, $6d4b7449a1e1544a$export$13afda237b1c98462)();
    const result = packer.pack(this.sampleRate, exportData.audio);
    return result;
  }
  /**
  * Ends the current recording session and saves the result
  * @returns {Promise<import('./wav_packer.js').WavPackerAudioType>}
  */
  async end() {
    if (!this.processor)
      throw new Error("Session ended: please call .begin() first");
    const _processor = this.processor;
    this.log("Stopping ...");
    await this._event("stop");
    this.recording = false;
    this.log("Exporting ...");
    const exportData = await this._event("export", {}, _processor);
    this.processor.disconnect();
    this.source.disconnect();
    this.node.disconnect();
    this.analyser.disconnect();
    this.stream = null;
    this.processor = null;
    this.source = null;
    this.node = null;
    const packer = new (0, $6d4b7449a1e1544a$export$13afda237b1c98462)();
    const result = packer.pack(this.sampleRate, exportData.audio);
    return result;
  }
  /**
  * Performs a full cleanup of WavRecorder instance
  * Stops actively listening via microphone and removes existing listeners
  * @returns {Promise<true>}
  */
  async quit() {
    this.listenForDeviceChange(null);
    if (this.processor)
      await this.end();
    return true;
  }
};
globalThis.WavRecorder = WavRecorder;
var $fc49a56cd8739127$var$__extends = function() {
  var extendStatics = function(d3, b3) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d4, b4) {
      d4.__proto__ = b4;
    } || function(d4, b4) {
      for (var p3 in b4)
        if (Object.prototype.hasOwnProperty.call(b4, p3))
          d4[p3] = b4[p3];
    };
    return extendStatics(d3, b3);
  };
  return function(d3, b3) {
    if (typeof b3 !== "function" && b3 !== null)
      throw new TypeError("Class extends value " + String(b3) + " is not a constructor or null");
    extendStatics(d3, b3);
    function __() {
      this.constructor = d3;
    }
    d3.prototype = b3 === null ? Object.create(b3) : (__.prototype = b3.prototype, new __());
  };
}();
var $fc49a56cd8739127$var$__awaiter = function(thisArg, _arguments, P3, generator) {
  function adopt(value) {
    return value instanceof P3 ? value : new P3(function(resolve) {
      resolve(value);
    });
  }
  return new (P3 || (P3 = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e3) {
        reject(e3);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e3) {
        reject(e3);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var $fc49a56cd8739127$var$__generator = function(thisArg, body) {
  var _3 = {
    label: 0,
    sent: function() {
      if (t3[0] & 1)
        throw t3[1];
      return t3[1];
    },
    trys: [],
    ops: []
  }, f3, y3, t3, g3 = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
  return g3.next = verb(0), g3["throw"] = verb(1), g3["return"] = verb(2), typeof Symbol === "function" && (g3[Symbol.iterator] = function() {
    return this;
  }), g3;
  function verb(n3) {
    return function(v3) {
      return step([
        n3,
        v3
      ]);
    };
  }
  function step(op) {
    if (f3)
      throw new TypeError("Generator is already executing.");
    while (g3 && (g3 = 0, op[0] && (_3 = 0)), _3)
      try {
        if (f3 = 1, y3 && (t3 = op[0] & 2 ? y3["return"] : op[0] ? y3["throw"] || ((t3 = y3["return"]) && t3.call(y3), 0) : y3.next) && !(t3 = t3.call(y3, op[1])).done)
          return t3;
        if (y3 = 0, t3)
          op = [
            op[0] & 2,
            t3.value
          ];
        switch (op[0]) {
          case 0:
          case 1:
            t3 = op;
            break;
          case 4:
            _3.label++;
            return {
              value: op[1],
              done: false
            };
          case 5:
            _3.label++;
            y3 = op[1];
            op = [
              0
            ];
            continue;
          case 7:
            op = _3.ops.pop();
            _3.trys.pop();
            continue;
          default:
            if (!(t3 = _3.trys, t3 = t3.length > 0 && t3[t3.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _3 = 0;
              continue;
            }
            if (op[0] === 3 && (!t3 || op[1] > t3[0] && op[1] < t3[3])) {
              _3.label = op[1];
              break;
            }
            if (op[0] === 6 && _3.label < t3[1]) {
              _3.label = t3[1];
              t3 = op;
              break;
            }
            if (t3 && _3.label < t3[2]) {
              _3.label = t3[2];
              _3.ops.push(op);
              break;
            }
            if (t3[2])
              _3.ops.pop();
            _3.trys.pop();
            continue;
        }
        op = body.call(thisArg, _3);
      } catch (e3) {
        op = [
          6,
          e3
        ];
        y3 = 0;
      } finally {
        f3 = t3 = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return {
      value: op[0] ? op[1] : void 0,
      done: true
    };
  }
};
var $fc49a56cd8739127$export$4a0c46dbbe2ddb67 = (
  /** @class */
  function() {
    function MediaManager() {
      this._callbacks = {};
      this._micEnabled = true;
      this._camEnabled = false;
    }
    MediaManager.prototype.setUserAudioCallback = function(userAudioCallback) {
      this._userAudioCallback = userAudioCallback;
    };
    MediaManager.prototype.setRTVIOptions = function(options, override) {
      var _a3, _b, _c3;
      if (override === void 0)
        override = false;
      if (this._options && !override)
        return;
      this._options = options;
      this._callbacks = (_a3 = options.callbacks) !== null && _a3 !== void 0 ? _a3 : {};
      this._micEnabled = (_b = options.enableMic) !== null && _b !== void 0 ? _b : true;
      this._camEnabled = (_c3 = options.enableCam) !== null && _c3 !== void 0 ? _c3 : false;
    };
    return MediaManager;
  }()
);
var $fc49a56cd8739127$export$45c5b9bfba2f6304 = (
  /** @class */
  function(_super) {
    $fc49a56cd8739127$var$__extends(WavMediaManager, _super);
    function WavMediaManager(recorderChunkSize, recorderSampleRate) {
      if (recorderChunkSize === void 0)
        recorderChunkSize = void 0;
      if (recorderSampleRate === void 0)
        recorderSampleRate = 24e3;
      var _this = _super.call(this) || this;
      _this._initialized = false;
      _this._recorderChunkSize = void 0;
      _this._recorderChunkSize = recorderChunkSize;
      _this._wavRecorder = new (0, $62bc376044a05513$export$439b217ca659a8772)({
        sampleRate: recorderSampleRate
      });
      _this._wavStreamPlayer = new (0, $d0a969833958d9e7$export$9698d62c78b8f3662)({
        sampleRate: 24e3
      });
      return _this;
    }
    WavMediaManager.prototype.initialize = function() {
      return $fc49a56cd8739127$var$__awaiter(this, void 0, Promise, function() {
        return $fc49a56cd8739127$var$__generator(this, function(_a3) {
          switch (_a3.label) {
            case 0:
              return [
                4,
                this._wavRecorder.begin()
              ];
            case 1:
              _a3.sent();
              this._wavRecorder.listenForDeviceChange(null);
              this._wavRecorder.listenForDeviceChange(this._handleAvailableDevicesUpdated.bind(this));
              return [
                4,
                this._wavStreamPlayer.connect()
              ];
            case 2:
              _a3.sent();
              this._initialized = true;
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    WavMediaManager.prototype.connect = function() {
      return $fc49a56cd8739127$var$__awaiter(this, void 0, Promise, function() {
        var isAlreadyRecording;
        return $fc49a56cd8739127$var$__generator(this, function(_a3) {
          switch (_a3.label) {
            case 0:
              if (!!this._initialized)
                return [
                  3,
                  2
                ];
              return [
                4,
                this.initialize()
              ];
            case 1:
              _a3.sent();
              _a3.label = 2;
            case 2:
              isAlreadyRecording = this._wavRecorder.getStatus() == "recording";
              if (!(this._micEnabled && !isAlreadyRecording))
                return [
                  3,
                  4
                ];
              return [
                4,
                this._startRecording()
              ];
            case 3:
              _a3.sent();
              _a3.label = 4;
            case 4:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    WavMediaManager.prototype.disconnect = function() {
      return $fc49a56cd8739127$var$__awaiter(this, void 0, Promise, function() {
        return $fc49a56cd8739127$var$__generator(this, function(_a3) {
          switch (_a3.label) {
            case 0:
              if (!this._initialized)
                return [
                  2
                  /*return*/
                ];
              return [
                4,
                this._wavRecorder.end()
              ];
            case 1:
              _a3.sent();
              return [
                4,
                this._wavStreamPlayer.interrupt()
              ];
            case 2:
              _a3.sent();
              this._initialized = false;
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    WavMediaManager.prototype.userStartedSpeaking = function() {
      return $fc49a56cd8739127$var$__awaiter(this, void 0, Promise, function() {
        return $fc49a56cd8739127$var$__generator(this, function(_a3) {
          return [
            2,
            this._wavStreamPlayer.interrupt()
          ];
        });
      });
    };
    WavMediaManager.prototype.bufferBotAudio = function(data, id) {
      return this._wavStreamPlayer.add16BitPCM(data, id);
    };
    WavMediaManager.prototype.getAllMics = function() {
      return this._wavRecorder.listDevices();
    };
    WavMediaManager.prototype.getAllCams = function() {
      return Promise.resolve([]);
    };
    WavMediaManager.prototype.getAllSpeakers = function() {
      return Promise.resolve([]);
    };
    WavMediaManager.prototype.updateMic = function(micId) {
      return $fc49a56cd8739127$var$__awaiter(this, void 0, Promise, function() {
        var prevMic, curMic;
        var _a3, _b;
        return $fc49a56cd8739127$var$__generator(this, function(_c3) {
          switch (_c3.label) {
            case 0:
              prevMic = this._wavRecorder.deviceSelection;
              return [
                4,
                this._wavRecorder.end()
              ];
            case 1:
              _c3.sent();
              return [
                4,
                this._wavRecorder.begin(micId)
              ];
            case 2:
              _c3.sent();
              if (!this._micEnabled)
                return [
                  3,
                  4
                ];
              return [
                4,
                this._startRecording()
              ];
            case 3:
              _c3.sent();
              _c3.label = 4;
            case 4:
              curMic = this._wavRecorder.deviceSelection;
              if (curMic && prevMic && prevMic.label !== curMic.label)
                (_b = (_a3 = this._callbacks).onMicUpdated) === null || _b === void 0 || _b.call(_a3, curMic);
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    WavMediaManager.prototype.updateCam = function(camId) {
    };
    WavMediaManager.prototype.updateSpeaker = function(speakerId) {
    };
    Object.defineProperty(WavMediaManager.prototype, "selectedMic", {
      get: function() {
        var _a3;
        return (_a3 = this._wavRecorder.deviceSelection) !== null && _a3 !== void 0 ? _a3 : {};
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(WavMediaManager.prototype, "selectedCam", {
      get: function() {
        return {};
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(WavMediaManager.prototype, "selectedSpeaker", {
      get: function() {
        return {};
      },
      enumerable: false,
      configurable: true
    });
    WavMediaManager.prototype.enableMic = function(enable) {
      return $fc49a56cd8739127$var$__awaiter(this, void 0, Promise, function() {
        var _this = this;
        return $fc49a56cd8739127$var$__generator(this, function(_a3) {
          switch (_a3.label) {
            case 0:
              this._micEnabled = enable;
              if (!this._wavRecorder.stream)
                return [
                  2
                  /*return*/
                ];
              this._wavRecorder.stream.getAudioTracks().forEach(function(track2) {
                var _a4, _b;
                track2.enabled = enable;
                if (!enable)
                  (_b = (_a4 = _this._callbacks).onTrackStopped) === null || _b === void 0 || _b.call(_a4, track2, $fc49a56cd8739127$var$localParticipant());
              });
              if (!enable)
                return [
                  3,
                  2
                ];
              return [
                4,
                this._startRecording()
              ];
            case 1:
              _a3.sent();
              return [
                3,
                4
              ];
            case 2:
              return [
                4,
                this._wavRecorder.pause()
              ];
            case 3:
              _a3.sent();
              _a3.label = 4;
            case 4:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    WavMediaManager.prototype.enableCam = function(enable) {
    };
    Object.defineProperty(WavMediaManager.prototype, "isCamEnabled", {
      get: function() {
        return false;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(WavMediaManager.prototype, "isMicEnabled", {
      get: function() {
        return this._micEnabled;
      },
      enumerable: false,
      configurable: true
    });
    WavMediaManager.prototype.tracks = function() {
      var _a3;
      var tracks = (_a3 = this._wavRecorder.stream) === null || _a3 === void 0 ? void 0 : _a3.getTracks()[0];
      return {
        local: tracks ? {
          audio: tracks
        } : {}
      };
    };
    WavMediaManager.prototype._startRecording = function() {
      return $fc49a56cd8739127$var$__awaiter(this, void 0, void 0, function() {
        var track2;
        var _this = this;
        var _a3, _b, _c3;
        return $fc49a56cd8739127$var$__generator(this, function(_d) {
          switch (_d.label) {
            case 0:
              return [
                4,
                this._wavRecorder.record(function(data) {
                  _this._userAudioCallback(data.mono);
                }, this._recorderChunkSize)
              ];
            case 1:
              _d.sent();
              track2 = (_a3 = this._wavRecorder.stream) === null || _a3 === void 0 ? void 0 : _a3.getAudioTracks()[0];
              if (track2)
                (_c3 = (_b = this._callbacks).onTrackStarted) === null || _c3 === void 0 || _c3.call(_b, track2, $fc49a56cd8739127$var$localParticipant());
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    WavMediaManager.prototype._handleAvailableDevicesUpdated = function(devices) {
      var _a3, _b, _c3, _d;
      (_b = (_a3 = this._callbacks).onAvailableCamsUpdated) === null || _b === void 0 || _b.call(_a3, devices.filter(function(d3) {
        return d3.kind === "videoinput";
      }));
      (_d = (_c3 = this._callbacks).onAvailableMicsUpdated) === null || _d === void 0 || _d.call(_c3, devices.filter(function(d3) {
        return d3.kind === "audioinput";
      }));
      var defaultDevice = devices.find(function(d3) {
        return d3.deviceId === "default";
      });
      var currentDevice = this._wavRecorder.deviceSelection;
      if (currentDevice && (!devices.some(function(d3) {
        return d3.deviceId === currentDevice.deviceId;
      }) || currentDevice.deviceId === "default" && currentDevice.label !== (defaultDevice === null || defaultDevice === void 0 ? void 0 : defaultDevice.label)))
        this.updateMic("");
    };
    return WavMediaManager;
  }($fc49a56cd8739127$export$4a0c46dbbe2ddb67)
);
var $fc49a56cd8739127$var$localParticipant = function() {
  return {
    id: "local",
    name: "",
    local: true
  };
};
var $22ece045290c996a$var$__extends = function() {
  var extendStatics = function(d3, b3) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d4, b4) {
      d4.__proto__ = b4;
    } || function(d4, b4) {
      for (var p3 in b4)
        if (Object.prototype.hasOwnProperty.call(b4, p3))
          d4[p3] = b4[p3];
    };
    return extendStatics(d3, b3);
  };
  return function(d3, b3) {
    if (typeof b3 !== "function" && b3 !== null)
      throw new TypeError("Class extends value " + String(b3) + " is not a constructor or null");
    extendStatics(d3, b3);
    function __() {
      this.constructor = d3;
    }
    d3.prototype = b3 === null ? Object.create(b3) : (__.prototype = b3.prototype, new __());
  };
}();
var $22ece045290c996a$var$__awaiter = function(thisArg, _arguments, P3, generator) {
  function adopt(value) {
    return value instanceof P3 ? value : new P3(function(resolve) {
      resolve(value);
    });
  }
  return new (P3 || (P3 = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e3) {
        reject(e3);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e3) {
        reject(e3);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var $22ece045290c996a$var$__generator = function(thisArg, body) {
  var _3 = {
    label: 0,
    sent: function() {
      if (t3[0] & 1)
        throw t3[1];
      return t3[1];
    },
    trys: [],
    ops: []
  }, f3, y3, t3, g3 = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
  return g3.next = verb(0), g3["throw"] = verb(1), g3["return"] = verb(2), typeof Symbol === "function" && (g3[Symbol.iterator] = function() {
    return this;
  }), g3;
  function verb(n3) {
    return function(v3) {
      return step([
        n3,
        v3
      ]);
    };
  }
  function step(op) {
    if (f3)
      throw new TypeError("Generator is already executing.");
    while (g3 && (g3 = 0, op[0] && (_3 = 0)), _3)
      try {
        if (f3 = 1, y3 && (t3 = op[0] & 2 ? y3["return"] : op[0] ? y3["throw"] || ((t3 = y3["return"]) && t3.call(y3), 0) : y3.next) && !(t3 = t3.call(y3, op[1])).done)
          return t3;
        if (y3 = 0, t3)
          op = [
            op[0] & 2,
            t3.value
          ];
        switch (op[0]) {
          case 0:
          case 1:
            t3 = op;
            break;
          case 4:
            _3.label++;
            return {
              value: op[1],
              done: false
            };
          case 5:
            _3.label++;
            y3 = op[1];
            op = [
              0
            ];
            continue;
          case 7:
            op = _3.ops.pop();
            _3.trys.pop();
            continue;
          default:
            if (!(t3 = _3.trys, t3 = t3.length > 0 && t3[t3.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _3 = 0;
              continue;
            }
            if (op[0] === 3 && (!t3 || op[1] > t3[0] && op[1] < t3[3])) {
              _3.label = op[1];
              break;
            }
            if (op[0] === 6 && _3.label < t3[1]) {
              _3.label = t3[1];
              t3 = op;
              break;
            }
            if (t3 && _3.label < t3[2]) {
              _3.label = t3[2];
              _3.ops.push(op);
              break;
            }
            if (t3[2])
              _3.ops.pop();
            _3.trys.pop();
            continue;
        }
        op = body.call(thisArg, _3);
      } catch (e3) {
        op = [
          6,
          e3
        ];
        y3 = 0;
      } finally {
        f3 = t3 = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return {
      value: op[0] ? op[1] : void 0,
      done: true
    };
  }
};
var $22ece045290c996a$export$c95c65abc5f47125 = (
  /** @class */
  function(_super) {
    $22ece045290c996a$var$__extends(DailyMediaManager, _super);
    function DailyMediaManager(enablePlayer, enableRecording, onTrackStartedCallback, onTrackStoppedCallback, recorderChunkSize, recorderSampleRate) {
      if (enablePlayer === void 0)
        enablePlayer = true;
      if (enableRecording === void 0)
        enableRecording = true;
      if (recorderChunkSize === void 0)
        recorderChunkSize = void 0;
      if (recorderSampleRate === void 0)
        recorderSampleRate = 24e3;
      var _a3;
      var _this = _super.call(this) || this;
      _this._selectedCam = {};
      _this._selectedMic = {};
      _this._selectedSpeaker = {};
      _this._remoteAudioLevelInterval = null;
      _this._recorderChunkSize = void 0;
      _this._initialized = false;
      _this._connected = false;
      _this._currentAudioTrack = null;
      _this._connectResolve = null;
      _this.onTrackStartedCallback = onTrackStartedCallback;
      _this.onTrackStoppedCallback = onTrackStoppedCallback;
      _this._recorderChunkSize = recorderChunkSize;
      _this._daily = (_a3 = (0, ic).getCallInstance()) !== null && _a3 !== void 0 ? _a3 : (0, ic).createCallObject();
      if (enableRecording)
        _this._mediaStreamRecorder = new (0, $5fc11d7bc0d20724$export$2934cf2d25c67a482)({
          sampleRate: recorderSampleRate
        });
      if (enablePlayer)
        _this._wavStreamPlayer = new (0, $d0a969833958d9e7$export$9698d62c78b8f3662)({
          sampleRate: 24e3
        });
      _this._daily.on("track-started", _this.handleTrackStarted.bind(_this));
      _this._daily.on("track-stopped", _this.handleTrackStopped.bind(_this));
      _this._daily.on("available-devices-updated", _this._handleAvailableDevicesUpdated.bind(_this));
      _this._daily.on("selected-devices-updated", _this._handleSelectedDevicesUpdated.bind(_this));
      _this._daily.on("local-audio-level", _this._handleLocalAudioLevel.bind(_this));
      return _this;
    }
    DailyMediaManager.prototype.initialize = function() {
      return $22ece045290c996a$var$__awaiter(this, void 0, Promise, function() {
        var infos, devices, cams, mics, speakers;
        var _this = this;
        var _a3, _b, _c3, _d, _e3, _f, _g, _h, _j, _k, _l, _m;
        return $22ece045290c996a$var$__generator(this, function(_o3) {
          switch (_o3.label) {
            case 0:
              if (this._initialized) {
                console.warn("DailyMediaManager already initialized");
                return [
                  2
                  /*return*/
                ];
              }
              return [
                4,
                this._daily.startCamera({
                  startVideoOff: !this._camEnabled,
                  startAudioOff: !this._micEnabled
                })
              ];
            case 1:
              infos = _o3.sent();
              return [
                4,
                this._daily.enumerateDevices()
              ];
            case 2:
              devices = _o3.sent().devices;
              cams = devices.filter(function(d3) {
                return d3.kind === "videoinput";
              });
              mics = devices.filter(function(d3) {
                return d3.kind === "audioinput";
              });
              speakers = devices.filter(function(d3) {
                return d3.kind === "audiooutput";
              });
              (_b = (_a3 = this._callbacks).onAvailableCamsUpdated) === null || _b === void 0 || _b.call(_a3, cams);
              (_d = (_c3 = this._callbacks).onAvailableMicsUpdated) === null || _d === void 0 || _d.call(_c3, mics);
              (_f = (_e3 = this._callbacks).onAvailableSpeakersUpdated) === null || _f === void 0 || _f.call(_e3, speakers);
              this._selectedCam = infos.camera;
              (_h = (_g = this._callbacks).onCamUpdated) === null || _h === void 0 || _h.call(_g, infos.camera);
              this._selectedMic = infos.mic;
              (_k = (_j = this._callbacks).onMicUpdated) === null || _k === void 0 || _k.call(_j, infos.mic);
              this._selectedSpeaker = infos.speaker;
              (_m = (_l = this._callbacks).onSpeakerUpdated) === null || _m === void 0 || _m.call(_l, infos.speaker);
              if (!!this._daily.isLocalAudioLevelObserverRunning())
                return [
                  3,
                  4
                ];
              return [
                4,
                this._daily.startLocalAudioLevelObserver(100)
              ];
            case 3:
              _o3.sent();
              _o3.label = 4;
            case 4:
              if (!this._wavStreamPlayer)
                return [
                  3,
                  6
                ];
              return [
                4,
                this._wavStreamPlayer.connect()
              ];
            case 5:
              _o3.sent();
              if (!this._remoteAudioLevelInterval)
                this._remoteAudioLevelInterval = setInterval(function() {
                  var _a4;
                  var frequencies = _this._wavStreamPlayer.getFrequencies();
                  var aveVal = 0;
                  if ((_a4 = frequencies.values) === null || _a4 === void 0 ? void 0 : _a4.length)
                    aveVal = frequencies.values.reduce(function(a3, c3) {
                      return a3 + c3;
                    }, 0) / frequencies.values.length;
                  _this._handleRemoteAudioLevel(aveVal);
                }, 100);
              _o3.label = 6;
            case 6:
              this._initialized = true;
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    DailyMediaManager.prototype.connect = function() {
      return $22ece045290c996a$var$__awaiter(this, void 0, Promise, function() {
        var _this = this;
        return $22ece045290c996a$var$__generator(this, function(_a3) {
          if (this._connected) {
            console.warn("DailyMediaManager already connected");
            return [
              2
              /*return*/
            ];
          }
          this._connected = true;
          if (!this._initialized)
            return [
              2,
              new Promise(function(resolve) {
                (function() {
                  return $22ece045290c996a$var$__awaiter(_this, void 0, void 0, function() {
                    return $22ece045290c996a$var$__generator(this, function(_a4) {
                      switch (_a4.label) {
                        case 0:
                          this._connectResolve = resolve;
                          return [
                            4,
                            this.initialize()
                          ];
                        case 1:
                          _a4.sent();
                          return [
                            2
                            /*return*/
                          ];
                      }
                    });
                  });
                })();
              })
            ];
          if (this._micEnabled)
            this._startRecording();
          return [
            2
            /*return*/
          ];
        });
      });
    };
    DailyMediaManager.prototype.disconnect = function() {
      return $22ece045290c996a$var$__awaiter(this, void 0, Promise, function() {
        var _a3, _b;
        return $22ece045290c996a$var$__generator(this, function(_c3) {
          switch (_c3.label) {
            case 0:
              if (this._remoteAudioLevelInterval)
                clearInterval(this._remoteAudioLevelInterval);
              this._remoteAudioLevelInterval = null;
              this._daily.leave();
              this._currentAudioTrack = null;
              return [
                4,
                (_a3 = this._mediaStreamRecorder) === null || _a3 === void 0 ? void 0 : _a3.end()
              ];
            case 1:
              _c3.sent();
              (_b = this._wavStreamPlayer) === null || _b === void 0 || _b.interrupt();
              this._initialized = false;
              this._connected = false;
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    DailyMediaManager.prototype.userStartedSpeaking = function() {
      return $22ece045290c996a$var$__awaiter(this, void 0, Promise, function() {
        var _a3;
        return $22ece045290c996a$var$__generator(this, function(_b) {
          return [
            2,
            (_a3 = this._wavStreamPlayer) === null || _a3 === void 0 ? void 0 : _a3.interrupt()
          ];
        });
      });
    };
    DailyMediaManager.prototype.bufferBotAudio = function(data, id) {
      var _a3;
      return (_a3 = this._wavStreamPlayer) === null || _a3 === void 0 ? void 0 : _a3.add16BitPCM(data, id);
    };
    DailyMediaManager.prototype.getAllMics = function() {
      return $22ece045290c996a$var$__awaiter(this, void 0, Promise, function() {
        var devices;
        return $22ece045290c996a$var$__generator(this, function(_a3) {
          switch (_a3.label) {
            case 0:
              return [
                4,
                this._daily.enumerateDevices()
              ];
            case 1:
              devices = _a3.sent().devices;
              return [
                2,
                devices.filter(function(device) {
                  return device.kind === "audioinput";
                })
              ];
          }
        });
      });
    };
    DailyMediaManager.prototype.getAllCams = function() {
      return $22ece045290c996a$var$__awaiter(this, void 0, Promise, function() {
        var devices;
        return $22ece045290c996a$var$__generator(this, function(_a3) {
          switch (_a3.label) {
            case 0:
              return [
                4,
                this._daily.enumerateDevices()
              ];
            case 1:
              devices = _a3.sent().devices;
              return [
                2,
                devices.filter(function(device) {
                  return device.kind === "videoinput";
                })
              ];
          }
        });
      });
    };
    DailyMediaManager.prototype.getAllSpeakers = function() {
      return $22ece045290c996a$var$__awaiter(this, void 0, Promise, function() {
        var devices;
        return $22ece045290c996a$var$__generator(this, function(_a3) {
          switch (_a3.label) {
            case 0:
              return [
                4,
                this._daily.enumerateDevices()
              ];
            case 1:
              devices = _a3.sent().devices;
              return [
                2,
                devices.filter(function(device) {
                  return device.kind === "audiooutput";
                })
              ];
          }
        });
      });
    };
    DailyMediaManager.prototype.updateMic = function(micId) {
      var _this = this;
      this._daily.setInputDevicesAsync({
        audioDeviceId: micId
      }).then(function(deviceInfo) {
        _this._selectedMic = deviceInfo.mic;
      });
    };
    DailyMediaManager.prototype.updateCam = function(camId) {
      var _this = this;
      this._daily.setInputDevicesAsync({
        videoDeviceId: camId
      }).then(function(deviceInfo) {
        _this._selectedCam = deviceInfo.camera;
      });
    };
    DailyMediaManager.prototype.updateSpeaker = function(speakerId) {
      return $22ece045290c996a$var$__awaiter(this, void 0, Promise, function() {
        var sID, speakers, defaultSpeaker_1, defaultSpeakerCp;
        var _this = this;
        var _a3, _b;
        return $22ece045290c996a$var$__generator(this, function(_c3) {
          switch (_c3.label) {
            case 0:
              if (speakerId !== "default" && this._selectedSpeaker.deviceId === speakerId)
                return [
                  2
                  /*return*/
                ];
              sID = speakerId;
              if (!(sID === "default"))
                return [
                  3,
                  2
                ];
              return [
                4,
                this.getAllSpeakers()
              ];
            case 1:
              speakers = _c3.sent();
              defaultSpeaker_1 = speakers.find(function(s3) {
                return s3.deviceId === "default";
              });
              if (!defaultSpeaker_1) {
                console.warn("No default speaker found");
                return [
                  2
                  /*return*/
                ];
              }
              speakers.splice(speakers.indexOf(defaultSpeaker_1), 1);
              defaultSpeakerCp = speakers.find(function(s3) {
                return defaultSpeaker_1.label.includes(s3.label);
              });
              sID = (_a3 = defaultSpeakerCp === null || defaultSpeakerCp === void 0 ? void 0 : defaultSpeakerCp.deviceId) !== null && _a3 !== void 0 ? _a3 : speakerId;
              _c3.label = 2;
            case 2:
              (_b = this._wavStreamPlayer) === null || _b === void 0 || _b.updateSpeaker(sID).then(function() {
                var _a4, _b2;
                _this._selectedSpeaker = {
                  deviceId: speakerId
                };
                (_b2 = (_a4 = _this._callbacks).onSpeakerUpdated) === null || _b2 === void 0 || _b2.call(_a4, _this._selectedSpeaker);
              });
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    Object.defineProperty(DailyMediaManager.prototype, "selectedMic", {
      get: function() {
        return this._selectedMic;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(DailyMediaManager.prototype, "selectedCam", {
      get: function() {
        return this._selectedCam;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(DailyMediaManager.prototype, "selectedSpeaker", {
      get: function() {
        return this._selectedSpeaker;
      },
      enumerable: false,
      configurable: true
    });
    DailyMediaManager.prototype.enableMic = function(enable) {
      return $22ece045290c996a$var$__awaiter(this, void 0, Promise, function() {
        var _a3;
        return $22ece045290c996a$var$__generator(this, function(_b) {
          this._micEnabled = enable;
          if (!((_a3 = this._daily.participants()) === null || _a3 === void 0 ? void 0 : _a3.local))
            return [
              2
              /*return*/
            ];
          this._daily.setLocalAudio(enable);
          if (this._mediaStreamRecorder) {
            if (enable) {
              if (this._mediaStreamRecorder.getStatus() === "paused")
                this._startRecording();
            } else if (this._mediaStreamRecorder.getStatus() === "recording")
              this._mediaStreamRecorder.pause();
          }
          return [
            2
            /*return*/
          ];
        });
      });
    };
    DailyMediaManager.prototype.enableCam = function(enable) {
      this._camEnabled = enable;
      this._daily.setLocalVideo(enable);
    };
    Object.defineProperty(DailyMediaManager.prototype, "isCamEnabled", {
      get: function() {
        return this._daily.localVideo();
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(DailyMediaManager.prototype, "isMicEnabled", {
      get: function() {
        return this._daily.localAudio();
      },
      enumerable: false,
      configurable: true
    });
    DailyMediaManager.prototype.tracks = function() {
      var _a3, _b, _c3, _d, _e3, _f;
      var participants = this._daily.participants();
      return {
        local: {
          audio: (_c3 = (_b = (_a3 = participants === null || participants === void 0 ? void 0 : participants.local) === null || _a3 === void 0 ? void 0 : _a3.tracks) === null || _b === void 0 ? void 0 : _b.audio) === null || _c3 === void 0 ? void 0 : _c3.persistentTrack,
          video: (_f = (_e3 = (_d = participants === null || participants === void 0 ? void 0 : participants.local) === null || _d === void 0 ? void 0 : _d.tracks) === null || _e3 === void 0 ? void 0 : _e3.video) === null || _f === void 0 ? void 0 : _f.persistentTrack
        }
      };
    };
    DailyMediaManager.prototype._startRecording = function() {
      var _this = this;
      if (!this._connected || !this._mediaStreamRecorder)
        return;
      try {
        this._mediaStreamRecorder.record(function(data) {
          _this._userAudioCallback(data.mono);
        }, this._recorderChunkSize);
      } catch (e3) {
        var err = e3;
        if (!err.message.includes("Already recording"))
          console.error("Error starting recording", e3);
      }
    };
    DailyMediaManager.prototype._handleAvailableDevicesUpdated = function(event) {
      var _a3, _b, _c3, _d, _e3, _f;
      (_b = (_a3 = this._callbacks).onAvailableCamsUpdated) === null || _b === void 0 || _b.call(_a3, event.availableDevices.filter(function(d3) {
        return d3.kind === "videoinput";
      }));
      (_d = (_c3 = this._callbacks).onAvailableMicsUpdated) === null || _d === void 0 || _d.call(_c3, event.availableDevices.filter(function(d3) {
        return d3.kind === "audioinput";
      }));
      (_f = (_e3 = this._callbacks).onAvailableSpeakersUpdated) === null || _f === void 0 || _f.call(_e3, event.availableDevices.filter(function(d3) {
        return d3.kind === "audiooutput";
      }));
      if (this._selectedSpeaker.deviceId === "default")
        this.updateSpeaker("default");
    };
    DailyMediaManager.prototype._handleSelectedDevicesUpdated = function(event) {
      var _a3, _b, _c3, _d, _e3, _f;
      if (((_a3 = this._selectedCam) === null || _a3 === void 0 ? void 0 : _a3.deviceId) !== event.devices.camera) {
        this._selectedCam = event.devices.camera;
        (_c3 = (_b = this._callbacks).onCamUpdated) === null || _c3 === void 0 || _c3.call(_b, event.devices.camera);
      }
      if (((_d = this._selectedMic) === null || _d === void 0 ? void 0 : _d.deviceId) !== event.devices.mic) {
        this._selectedMic = event.devices.mic;
        (_f = (_e3 = this._callbacks).onMicUpdated) === null || _f === void 0 || _f.call(_e3, event.devices.mic);
      }
    };
    DailyMediaManager.prototype._handleLocalAudioLevel = function(ev) {
      var _a3, _b;
      (_b = (_a3 = this._callbacks).onLocalAudioLevel) === null || _b === void 0 || _b.call(_a3, ev.audioLevel);
    };
    DailyMediaManager.prototype._handleRemoteAudioLevel = function(audioLevel) {
      var _a3, _b;
      (_b = (_a3 = this._callbacks).onRemoteAudioLevel) === null || _b === void 0 || _b.call(_a3, audioLevel, $22ece045290c996a$var$botParticipant());
    };
    DailyMediaManager.prototype.handleTrackStarted = function(event) {
      return $22ece045290c996a$var$__awaiter(this, void 0, void 0, function() {
        var status, _a3;
        var _b, _c3, _d, _e3;
        return $22ece045290c996a$var$__generator(this, function(_f) {
          switch (_f.label) {
            case 0:
              if (!((_b = event.participant) === null || _b === void 0 ? void 0 : _b.local))
                return [
                  2
                  /*return*/
                ];
              if (!(event.track.kind === "audio"))
                return [
                  3,
                  10
                ];
              if (!this._mediaStreamRecorder)
                return [
                  3,
                  9
                ];
              status = this._mediaStreamRecorder.getStatus();
              _a3 = status;
              switch (_a3) {
                case "ended":
                  return [
                    3,
                    1
                  ];
                case "paused":
                  return [
                    3,
                    3
                  ];
                case "recording":
                  return [
                    3,
                    4
                  ];
              }
              return [
                3,
                4
              ];
            case 1:
              return [
                4,
                this._mediaStreamRecorder.begin(event.track)
              ];
            case 2:
              _f.sent();
              if (this._connected) {
                this._startRecording();
                if (this._connectResolve) {
                  this._connectResolve();
                  this._connectResolve = null;
                }
              }
              return [
                3,
                9
              ];
            case 3:
              this._startRecording();
              return [
                3,
                9
              ];
            case 4:
              if (!(this._currentAudioTrack !== event.track))
                return [
                  3,
                  7
                ];
              return [
                4,
                this._mediaStreamRecorder.end()
              ];
            case 5:
              _f.sent();
              return [
                4,
                this._mediaStreamRecorder.begin(event.track)
              ];
            case 6:
              _f.sent();
              this._startRecording();
              return [
                3,
                8
              ];
            case 7:
              console.warn("track-started event received for current track and already recording");
              _f.label = 8;
            case 8:
              return [
                3,
                9
              ];
            case 9:
              this._currentAudioTrack = event.track;
              _f.label = 10;
            case 10:
              (_d = (_c3 = this._callbacks).onTrackStarted) === null || _d === void 0 || _d.call(_c3, event.track, event.participant ? $22ece045290c996a$var$dailyParticipantToParticipant(event.participant) : void 0);
              (_e3 = this.onTrackStartedCallback) === null || _e3 === void 0 || _e3.call(this, event);
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    DailyMediaManager.prototype.handleTrackStopped = function(event) {
      var _a3, _b, _c3, _d;
      if (!((_a3 = event.participant) === null || _a3 === void 0 ? void 0 : _a3.local))
        return;
      if (event.track.kind === "audio") {
        if (this._mediaStreamRecorder && this._mediaStreamRecorder.getStatus() === "recording")
          this._mediaStreamRecorder.pause();
      }
      (_c3 = (_b = this._callbacks).onTrackStopped) === null || _c3 === void 0 || _c3.call(_b, event.track, event.participant ? $22ece045290c996a$var$dailyParticipantToParticipant(event.participant) : void 0);
      (_d = this.onTrackStoppedCallback) === null || _d === void 0 || _d.call(this, event);
    };
    return DailyMediaManager;
  }((0, $fc49a56cd8739127$export$4a0c46dbbe2ddb67))
);
var $22ece045290c996a$var$dailyParticipantToParticipant = function(p3) {
  return {
    id: p3.user_id,
    local: p3.local,
    name: p3.user_name
  };
};
var $22ece045290c996a$var$botParticipant = function() {
  return {
    id: "bot",
    local: false,
    name: "Bot"
  };
};
var $b31644dc78dca54a$var$TrackStatusMessage = class {
  constructor(receiver_index, enabled) {
    this.type = "trackStatus";
    this.receiver_index = receiver_index;
    this.enabled = enabled;
  }
};
var $b31644dc78dca54a$var$RENEGOTIATE_TYPE = "renegotiate";
var $b31644dc78dca54a$var$PEER_LEFT_TYPE = "peerLeft";
var $b31644dc78dca54a$var$SIGNALLING_TYPE = "signalling";
var $b31644dc78dca54a$var$SignallingMessageObject = class {
  constructor(message) {
    this.type = $b31644dc78dca54a$var$SIGNALLING_TYPE;
    this.message = message;
  }
};
var $b31644dc78dca54a$var$AUDIO_TRANSCEIVER_INDEX = 0;
var $b31644dc78dca54a$var$VIDEO_TRANSCEIVER_INDEX = 1;
var $b31644dc78dca54a$export$62043589d053a879 = class _$b31644dc78dca54a$export$62043589d053a879 extends (0, $4086f06442fcb7d7$export$86495b081fef8e52) {
  constructor({ iceServers = [], waitForICEGathering = false } = {}) {
    super();
    this._connectResolved = null;
    this._connectFailed = null;
    this.pc = null;
    this.dc = null;
    this.audioCodec = null;
    this.videoCodec = null;
    this.pc_id = null;
    this.reconnectionAttempts = 0;
    this.maxReconnectionAttempts = 3;
    this.isReconnecting = false;
    this.keepAliveInterval = null;
    this._iceServers = [];
    this._iceServers = iceServers;
    this._waitForICEGathering = waitForICEGathering;
    this.mediaManager = new (0, $22ece045290c996a$export$c95c65abc5f47125)(false, false, async (event) => {
      if (!this.pc)
        return;
      if (event.type == "audio") {
        (0, $7afbbd59ebaa42bf$export$af88d00dbe7f521).info("SmallWebRTCMediaManager replacing audio track");
        await this.getAudioTransceiver().sender.replaceTrack(event.track);
      } else if (event.type == "video") {
        (0, $7afbbd59ebaa42bf$export$af88d00dbe7f521).info("SmallWebRTCMediaManager replacing video track");
        await this.getVideoTransceiver().sender.replaceTrack(event.track);
      }
    }, (event) => (0, $7afbbd59ebaa42bf$export$af88d00dbe7f521).debug("SmallWebRTCMediaManager Track stopped:", event));
  }
  initialize(options, messageHandler) {
    this._options = options;
    this._callbacks = options.callbacks ?? {};
    this._onMessage = messageHandler;
    this.mediaManager.setRTVIOptions(options);
    if (this._options.params.config?.length || false) {
      let config = this._options.params.config[0];
      if (config.service == _$b31644dc78dca54a$export$62043589d053a879.SERVICE_NAME && config.options.length > 0)
        config.options.forEach((option) => {
          if (option.name == "audioCodec")
            this.audioCodec = option.value;
          else if (option.name == "videoCodec")
            this.videoCodec = option.value;
        });
    }
    this.state = "disconnected";
    (0, $7afbbd59ebaa42bf$export$af88d00dbe7f521).debug("[RTVI Transport] Initialized");
  }
  async initDevices() {
    this.state = "initializing";
    await this.mediaManager.initialize();
    this.state = "initialized";
  }
  setAudioCodec(audioCodec) {
    this.audioCodec = audioCodec;
  }
  setVideoCodec(videoCodec) {
    this.videoCodec = videoCodec;
  }
  async connect(authBundle, abortController) {
    if (abortController.signal.aborted)
      return;
    this.state = "connecting";
    await this.mediaManager.connect();
    await this.startNewPeerConnection();
    if (abortController.signal.aborted)
      return;
    await new Promise((resolve, reject) => {
      this._connectResolved = resolve;
      this._connectFailed = reject;
    });
    this.state = "connected";
    this._callbacks.onConnected?.();
  }
  syncTrackStatus() {
    this.sendSignallingMessage(new $b31644dc78dca54a$var$TrackStatusMessage($b31644dc78dca54a$var$AUDIO_TRANSCEIVER_INDEX, this.mediaManager.isMicEnabled));
    this.sendSignallingMessage(new $b31644dc78dca54a$var$TrackStatusMessage($b31644dc78dca54a$var$VIDEO_TRANSCEIVER_INDEX, this.mediaManager.isCamEnabled));
  }
  sendReadyMessage() {
    this.state = "ready";
    this.sendMessage((0, $b48f893ed1354c1e$export$69aa9ab0334b212).clientReady());
  }
  sendMessage(message) {
    if (!this.dc || this.dc.readyState !== "open") {
      (0, $7afbbd59ebaa42bf$export$af88d00dbe7f521).warn(`Datachannel is not ready. Message not sent: ${message}`);
      return;
    }
    this.dc?.send(JSON.stringify(message));
  }
  sendSignallingMessage(message) {
    if (!this.dc || this.dc.readyState !== "open") {
      (0, $7afbbd59ebaa42bf$export$af88d00dbe7f521).warn(`Datachannel is not ready. Message not sent: ${message}`);
      return;
    }
    const signallingMessage = new $b31644dc78dca54a$var$SignallingMessageObject(message);
    this.dc?.send(JSON.stringify(signallingMessage));
  }
  async disconnect() {
    this.state = "disconnecting";
    await this.stop();
    this.state = "disconnected";
  }
  createPeerConnection() {
    const config = {
      iceServers: this._iceServers
    };
    let pc3 = new RTCPeerConnection(config);
    pc3.addEventListener("icegatheringstatechange", () => {
      (0, $7afbbd59ebaa42bf$export$af88d00dbe7f521).debug(`iceGatheringState: ${this.pc.iceGatheringState}`);
    });
    (0, $7afbbd59ebaa42bf$export$af88d00dbe7f521).debug(`iceGatheringState: ${pc3.iceGatheringState}`);
    pc3.addEventListener("iceconnectionstatechange", () => this.handleICEConnectionStateChange());
    (0, $7afbbd59ebaa42bf$export$af88d00dbe7f521).debug(`iceConnectionState: ${pc3.iceConnectionState}`);
    pc3.addEventListener("signalingstatechange", () => {
      (0, $7afbbd59ebaa42bf$export$af88d00dbe7f521).debug(`signalingState: ${this.pc.signalingState}`);
      if (this.pc.signalingState == "stable")
        this.handleReconnectionCompleted();
    });
    (0, $7afbbd59ebaa42bf$export$af88d00dbe7f521).debug(`signalingState: ${pc3.signalingState}`);
    pc3.addEventListener("track", (evt) => {
      (0, $7afbbd59ebaa42bf$export$af88d00dbe7f521).debug(`Received new track ${evt.track.kind}`);
      this._callbacks.onTrackStarted?.(evt.track);
    });
    return pc3;
  }
  handleICEConnectionStateChange() {
    if (!this.pc)
      return;
    (0, $7afbbd59ebaa42bf$export$af88d00dbe7f521).debug(`ICE Connection State: ${this.pc.iceConnectionState}`);
    if (this.pc.iceConnectionState === "failed") {
      (0, $7afbbd59ebaa42bf$export$af88d00dbe7f521).debug("ICE connection failed, attempting restart.");
      this.attemptReconnection(true);
    } else if (this.pc.iceConnectionState === "disconnected")
      setTimeout(() => {
        if (this.pc?.iceConnectionState === "disconnected") {
          (0, $7afbbd59ebaa42bf$export$af88d00dbe7f521).debug("Still disconnected, attempting reconnection.");
          this.attemptReconnection(true);
        }
      }, 5e3);
  }
  handleReconnectionCompleted() {
    this.reconnectionAttempts = 0;
    this.isReconnecting = false;
  }
  async attemptReconnection(recreatePeerConnection = false) {
    if (this.isReconnecting) {
      (0, $7afbbd59ebaa42bf$export$af88d00dbe7f521).debug("Reconnection already in progress, skipping.");
      return;
    }
    if (this.reconnectionAttempts >= this.maxReconnectionAttempts) {
      (0, $7afbbd59ebaa42bf$export$af88d00dbe7f521).debug("Max reconnection attempts reached. Stopping transport.");
      await this.stop();
      return;
    }
    this.isReconnecting = true;
    this.reconnectionAttempts++;
    (0, $7afbbd59ebaa42bf$export$af88d00dbe7f521).debug(`Reconnection attempt ${this.reconnectionAttempts}...`);
    if (recreatePeerConnection) {
      const oldPC = this.pc;
      await this.startNewPeerConnection(recreatePeerConnection);
      if (oldPC) {
        (0, $7afbbd59ebaa42bf$export$af88d00dbe7f521).debug("closing old peer connection");
        this.closePeerConnection(oldPC);
      }
    } else
      await this.negotiate();
  }
  async negotiate(recreatePeerConnection = false) {
    if (!this.pc)
      return Promise.reject("Peer connection is not initialized");
    try {
      const offer = await this.pc.createOffer();
      await this.pc.setLocalDescription(offer);
      if (this._waitForICEGathering)
        await new Promise((resolve) => {
          if (this.pc.iceGatheringState === "complete")
            resolve();
          else {
            const checkState = () => {
              if (this.pc.iceGatheringState === "complete") {
                this.pc.removeEventListener("icegatheringstatechange", checkState);
                resolve();
              }
            };
            this.pc.addEventListener("icegatheringstatechange", checkState);
          }
        });
      let offerSdp = this.pc.localDescription;
      if (this.audioCodec && this.audioCodec !== "default")
        offerSdp.sdp = this.sdpFilterCodec("audio", this.audioCodec, offerSdp.sdp);
      if (this.videoCodec && this.videoCodec !== "default")
        offerSdp.sdp = this.sdpFilterCodec("video", this.videoCodec, offerSdp.sdp);
      (0, $7afbbd59ebaa42bf$export$af88d00dbe7f521).debug(`Will create offer for peerId: ${this.pc_id}`);
      const url = `${this._options.params.baseUrl}${this._options.params.endpoints?.connect || ""}`;
      const response = await fetch(url, {
        body: JSON.stringify({
          sdp: offerSdp.sdp,
          type: offerSdp.type,
          pc_id: this.pc_id,
          restart_pc: recreatePeerConnection
        }),
        headers: {
          "Content-Type": "application/json"
        },
        method: "POST"
      });
      const answer = await response.json();
      this.pc_id = answer.pc_id;
      (0, $7afbbd59ebaa42bf$export$af88d00dbe7f521).debug(`Received answer for peer connection id ${answer.pc_id}`);
      await this.pc.setRemoteDescription(answer);
      (0, $7afbbd59ebaa42bf$export$af88d00dbe7f521).debug(`Remote candidate supports trickle ice: ${this.pc.canTrickleIceCandidates}`);
    } catch (e3) {
      (0, $7afbbd59ebaa42bf$export$af88d00dbe7f521).debug(`Reconnection attempt ${this.reconnectionAttempts} failed: ${e3}`);
      this.isReconnecting = false;
      setTimeout(() => this.attemptReconnection(true), 2e3);
    }
  }
  addInitialTransceivers() {
    this.pc.addTransceiver("audio", {
      direction: "sendrecv"
    });
    this.pc.addTransceiver("video", {
      direction: "sendrecv"
    });
  }
  getAudioTransceiver() {
    return this.pc.getTransceivers()[$b31644dc78dca54a$var$AUDIO_TRANSCEIVER_INDEX];
  }
  getVideoTransceiver() {
    return this.pc.getTransceivers()[$b31644dc78dca54a$var$VIDEO_TRANSCEIVER_INDEX];
  }
  async startNewPeerConnection(recreatePeerConnection = false) {
    this.pc = this.createPeerConnection();
    this.addInitialTransceivers();
    this.dc = this.createDataChannel("chat", {
      ordered: true
    });
    await this.addUserMedia();
    await this.negotiate(recreatePeerConnection);
  }
  async addUserMedia() {
    (0, $7afbbd59ebaa42bf$export$af88d00dbe7f521).debug(`addUserMedia this.tracks(): ${this.tracks()}`);
    let audioTrack = this.tracks().local.audio;
    (0, $7afbbd59ebaa42bf$export$af88d00dbe7f521).debug(`addUserMedia audioTrack: ${audioTrack}`);
    if (audioTrack)
      await this.getAudioTransceiver().sender.replaceTrack(audioTrack);
    let videoTrack = this.tracks().local.video;
    (0, $7afbbd59ebaa42bf$export$af88d00dbe7f521).debug(`addUserMedia videoTrack: ${videoTrack}`);
    if (videoTrack)
      await this.getVideoTransceiver().sender.replaceTrack(videoTrack);
  }
  // Method to handle a general message (this can be expanded for other types of messages)
  handleMessage(message) {
    try {
      const messageObj = JSON.parse(message);
      (0, $7afbbd59ebaa42bf$export$af88d00dbe7f521).debug("received message:", messageObj);
      if (messageObj.type === $b31644dc78dca54a$var$SIGNALLING_TYPE)
        this.handleSignallingMessage(messageObj);
      else if (messageObj.label === "rtvi-ai")
        this._onMessage({
          id: messageObj.id,
          type: messageObj.type,
          data: messageObj.data
        });
    } catch (error) {
      console.error("Failed to parse JSON message:", error);
    }
  }
  // Method to handle signalling messages specifically
  async handleSignallingMessage(messageObj) {
    const signallingMessage = messageObj;
    switch (signallingMessage.message.type) {
      case $b31644dc78dca54a$var$RENEGOTIATE_TYPE:
        this.attemptReconnection(false);
        break;
      case $b31644dc78dca54a$var$PEER_LEFT_TYPE:
        this.disconnect();
        break;
      default:
        console.warn("Unknown signalling message:", signallingMessage.message);
    }
  }
  createDataChannel(label, options) {
    const dc3 = this.pc.createDataChannel(label, options);
    dc3.addEventListener("close", () => {
      (0, $7afbbd59ebaa42bf$export$af88d00dbe7f521).debug("datachannel closed");
      if (this.keepAliveInterval) {
        clearInterval(this.keepAliveInterval);
        this.keepAliveInterval = null;
      }
    });
    dc3.addEventListener("open", () => {
      (0, $7afbbd59ebaa42bf$export$af88d00dbe7f521).debug("datachannel opened");
      if (this._connectResolved) {
        this.syncTrackStatus();
        this._connectResolved();
        this._connectResolved = null;
        this._connectFailed = null;
      }
      this.keepAliveInterval = setInterval(() => {
        const message = "ping: " + (/* @__PURE__ */ new Date()).getTime();
        dc3.send(message);
      }, 1e3);
    });
    dc3.addEventListener("message", (evt) => {
      let message = evt.data;
      this.handleMessage(message);
    });
    return dc3;
  }
  closePeerConnection(pc3) {
    pc3.getTransceivers().forEach((transceiver) => {
      if (transceiver.stop)
        transceiver.stop();
    });
    pc3.getSenders().forEach((sender) => {
      sender.track?.stop();
    });
    pc3.close();
  }
  async stop() {
    if (!this.pc) {
      (0, $7afbbd59ebaa42bf$export$af88d00dbe7f521).debug("Peer connection is already closed or null.");
      return;
    }
    if (this.dc)
      this.dc.close();
    this.closePeerConnection(this.pc);
    this.pc = null;
    await this.mediaManager.disconnect();
    this.pc_id = null;
    this.reconnectionAttempts = 0;
    this.isReconnecting = false;
    this._callbacks.onDisconnected?.();
    if (this._connectFailed)
      this._connectFailed();
    this._connectFailed = null;
    this._connectResolved = null;
  }
  getAllMics() {
    return this.mediaManager.getAllMics();
  }
  getAllCams() {
    return this.mediaManager.getAllCams();
  }
  getAllSpeakers() {
    return this.mediaManager.getAllSpeakers();
  }
  async updateMic(micId) {
    return this.mediaManager.updateMic(micId);
  }
  updateCam(camId) {
    return this.mediaManager.updateCam(camId);
  }
  updateSpeaker(speakerId) {
    return this.mediaManager.updateSpeaker(speakerId);
  }
  get selectedMic() {
    return this.mediaManager.selectedMic;
  }
  get selectedCam() {
    return this.mediaManager.selectedCam;
  }
  get selectedSpeaker() {
    return this.mediaManager.selectedSpeaker;
  }
  set iceServers(iceServers) {
    this._iceServers = iceServers;
  }
  get iceServers() {
    return this._iceServers;
  }
  enableMic(enable) {
    this.mediaManager.enableMic(enable);
    this.sendSignallingMessage(new $b31644dc78dca54a$var$TrackStatusMessage($b31644dc78dca54a$var$AUDIO_TRANSCEIVER_INDEX, enable));
  }
  enableCam(enable) {
    this.mediaManager.enableCam(enable);
    this.sendSignallingMessage(new $b31644dc78dca54a$var$TrackStatusMessage($b31644dc78dca54a$var$VIDEO_TRANSCEIVER_INDEX, enable));
  }
  get isCamEnabled() {
    return this.mediaManager.isCamEnabled;
  }
  get isMicEnabled() {
    return this.mediaManager.isMicEnabled;
  }
  get state() {
    return this._state;
  }
  set state(state) {
    if (this._state === state)
      return;
    this._state = state;
    this._callbacks.onTransportStateChanged?.(state);
  }
  get expiry() {
    return this._expiry;
  }
  tracks() {
    return this.mediaManager.tracks();
  }
  // Not implemented
  enableScreenShare(enable) {
    (0, $7afbbd59ebaa42bf$export$af88d00dbe7f521).error("startScreenShare not implemented for SmallWebRTCTransport");
    throw new Error("Not implemented");
  }
  get isSharingScreen() {
    (0, $7afbbd59ebaa42bf$export$af88d00dbe7f521).error("isSharingScreen not implemented for SmallWebRTCTransport");
    return false;
  }
  sdpFilterCodec(kind, codec, realSdp) {
    const allowed = [];
    const rtxRegex = new RegExp("a=fmtp:(\\d+) apt=(\\d+)\\r$");
    const codecRegex = new RegExp("a=rtpmap:([0-9]+) " + this.escapeRegExp(codec));
    const videoRegex = new RegExp("(m=" + kind + " .*?)( ([0-9]+))*\\s*$");
    const lines = realSdp.split("\n");
    let isKind = false;
    for (let i3 = 0; i3 < lines.length; i3++) {
      if (lines[i3].startsWith("m=" + kind + " "))
        isKind = true;
      else if (lines[i3].startsWith("m="))
        isKind = false;
      if (isKind) {
        const match = lines[i3].match(codecRegex);
        if (match)
          allowed.push(parseInt(match[1]));
        const matchRtx = lines[i3].match(rtxRegex);
        if (matchRtx && allowed.includes(parseInt(matchRtx[2])))
          allowed.push(parseInt(matchRtx[1]));
      }
    }
    const skipRegex = "a=(fmtp|rtcp-fb|rtpmap):([0-9]+)";
    let sdp = "";
    isKind = false;
    for (let i3 = 0; i3 < lines.length; i3++) {
      if (lines[i3].startsWith("m=" + kind + " "))
        isKind = true;
      else if (lines[i3].startsWith("m="))
        isKind = false;
      if (isKind) {
        const skipMatch = lines[i3].match(skipRegex);
        if (skipMatch && !allowed.includes(parseInt(skipMatch[2])))
          continue;
        else if (lines[i3].match(videoRegex))
          sdp += lines[i3].replace(videoRegex, "$1 " + allowed.join(" ")) + "\n";
        else
          sdp += lines[i3] + "\n";
      } else
        sdp += lines[i3] + "\n";
    }
    return sdp;
  }
  escapeRegExp(string) {
    return string.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
  }
};
$b31644dc78dca54a$export$62043589d053a879.SERVICE_NAME = "small-webrtc-transport";

// ../node_modules/@pipecat-ai/gemini-live-websocket-transport/node_modules/@daily-co/daily-js/dist/daily-esm.js
function e2(e3, t3) {
  if (null == e3)
    return {};
  var n3, r3, i3 = function(e4, t4) {
    if (null == e4)
      return {};
    var n4 = {};
    for (var r4 in e4)
      if ({}.hasOwnProperty.call(e4, r4)) {
        if (-1 !== t4.indexOf(r4))
          continue;
        n4[r4] = e4[r4];
      }
    return n4;
  }(e3, t3);
  if (Object.getOwnPropertySymbols) {
    var o3 = Object.getOwnPropertySymbols(e3);
    for (r3 = 0; r3 < o3.length; r3++)
      n3 = o3[r3], -1 === t3.indexOf(n3) && {}.propertyIsEnumerable.call(e3, n3) && (i3[n3] = e3[n3]);
  }
  return i3;
}
function t2(e3, t3) {
  if (!(e3 instanceof t3))
    throw new TypeError("Cannot call a class as a function");
}
function n2(e3) {
  return n2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e4) {
    return typeof e4;
  } : function(e4) {
    return e4 && "function" == typeof Symbol && e4.constructor === Symbol && e4 !== Symbol.prototype ? "symbol" : typeof e4;
  }, n2(e3);
}
function r2(e3) {
  var t3 = function(e4, t4) {
    if ("object" != n2(e4) || !e4)
      return e4;
    var r3 = e4[Symbol.toPrimitive];
    if (void 0 !== r3) {
      var i3 = r3.call(e4, t4 || "default");
      if ("object" != n2(i3))
        return i3;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === t4 ? String : Number)(e4);
  }(e3, "string");
  return "symbol" == n2(t3) ? t3 : t3 + "";
}
function i2(e3, t3) {
  for (var n3 = 0; n3 < t3.length; n3++) {
    var i3 = t3[n3];
    i3.enumerable = i3.enumerable || false, i3.configurable = true, "value" in i3 && (i3.writable = true), Object.defineProperty(e3, r2(i3.key), i3);
  }
}
function o2(e3, t3, n3) {
  return t3 && i2(e3.prototype, t3), n3 && i2(e3, n3), Object.defineProperty(e3, "prototype", { writable: false }), e3;
}
function s2(e3, t3) {
  if (t3 && ("object" == n2(t3) || "function" == typeof t3))
    return t3;
  if (void 0 !== t3)
    throw new TypeError("Derived constructors may only return object or undefined");
  return function(e4) {
    if (void 0 === e4)
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return e4;
  }(e3);
}
function a2(e3) {
  return a2 = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(e4) {
    return e4.__proto__ || Object.getPrototypeOf(e4);
  }, a2(e3);
}
function c2(e3, t3) {
  return c2 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(e4, t4) {
    return e4.__proto__ = t4, e4;
  }, c2(e3, t3);
}
function l2(e3, t3) {
  if ("function" != typeof t3 && null !== t3)
    throw new TypeError("Super expression must either be null or a function");
  e3.prototype = Object.create(t3 && t3.prototype, { constructor: { value: e3, writable: true, configurable: true } }), Object.defineProperty(e3, "prototype", { writable: false }), t3 && c2(e3, t3);
}
function u2(e3, t3, n3) {
  return (t3 = r2(t3)) in e3 ? Object.defineProperty(e3, t3, { value: n3, enumerable: true, configurable: true, writable: true }) : e3[t3] = n3, e3;
}
function d2(e3, t3, n3, r3, i3, o3, s3) {
  try {
    var a3 = e3[o3](s3), c3 = a3.value;
  } catch (e4) {
    return void n3(e4);
  }
  a3.done ? t3(c3) : Promise.resolve(c3).then(r3, i3);
}
function h2(e3) {
  return function() {
    var t3 = this, n3 = arguments;
    return new Promise(function(r3, i3) {
      var o3 = e3.apply(t3, n3);
      function s3(e4) {
        d2(o3, r3, i3, s3, a3, "next", e4);
      }
      function a3(e4) {
        d2(o3, r3, i3, s3, a3, "throw", e4);
      }
      s3(void 0);
    });
  };
}
function p2(e3, t3) {
  (null == t3 || t3 > e3.length) && (t3 = e3.length);
  for (var n3 = 0, r3 = Array(t3); n3 < t3; n3++)
    r3[n3] = e3[n3];
  return r3;
}
function f2(e3, t3) {
  return function(e4) {
    if (Array.isArray(e4))
      return e4;
  }(e3) || function(e4, t4) {
    var n3 = null == e4 ? null : "undefined" != typeof Symbol && e4[Symbol.iterator] || e4["@@iterator"];
    if (null != n3) {
      var r3, i3, o3, s3, a3 = [], c3 = true, l3 = false;
      try {
        if (o3 = (n3 = n3.call(e4)).next, 0 === t4) {
          if (Object(n3) !== n3)
            return;
          c3 = false;
        } else
          for (; !(c3 = (r3 = o3.call(n3)).done) && (a3.push(r3.value), a3.length !== t4); c3 = true)
            ;
      } catch (e5) {
        l3 = true, i3 = e5;
      } finally {
        try {
          if (!c3 && null != n3.return && (s3 = n3.return(), Object(s3) !== s3))
            return;
        } finally {
          if (l3)
            throw i3;
        }
      }
      return a3;
    }
  }(e3, t3) || function(e4, t4) {
    if (e4) {
      if ("string" == typeof e4)
        return p2(e4, t4);
      var n3 = {}.toString.call(e4).slice(8, -1);
      return "Object" === n3 && e4.constructor && (n3 = e4.constructor.name), "Map" === n3 || "Set" === n3 ? Array.from(e4) : "Arguments" === n3 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n3) ? p2(e4, t4) : void 0;
    }
  }(e3, t3) || function() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }();
}
function v2(e3) {
  return e3 && e3.__esModule && Object.prototype.hasOwnProperty.call(e3, "default") ? e3.default : e3;
}
var g2;
var m2 = { exports: {} };
var y2 = "object" == typeof Reflect ? Reflect : null;
var b2 = y2 && "function" == typeof y2.apply ? y2.apply : function(e3, t3, n3) {
  return Function.prototype.apply.call(e3, t3, n3);
};
g2 = y2 && "function" == typeof y2.ownKeys ? y2.ownKeys : Object.getOwnPropertySymbols ? function(e3) {
  return Object.getOwnPropertyNames(e3).concat(Object.getOwnPropertySymbols(e3));
} : function(e3) {
  return Object.getOwnPropertyNames(e3);
};
var _2 = Number.isNaN || function(e3) {
  return e3 != e3;
};
function w2() {
  w2.init.call(this);
}
m2.exports = w2, m2.exports.once = function(e3, t3) {
  return new Promise(function(n3, r3) {
    function i3(n4) {
      e3.removeListener(t3, o3), r3(n4);
    }
    function o3() {
      "function" == typeof e3.removeListener && e3.removeListener("error", i3), n3([].slice.call(arguments));
    }
    j2(e3, t3, o3, { once: true }), "error" !== t3 && function(e4, t4, n4) {
      "function" == typeof e4.on && j2(e4, "error", t4, n4);
    }(e3, i3, { once: true });
  });
}, w2.EventEmitter = w2, w2.prototype._events = void 0, w2.prototype._eventsCount = 0, w2.prototype._maxListeners = void 0;
var S2 = 10;
function k2(e3) {
  if ("function" != typeof e3)
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof e3);
}
function M2(e3) {
  return void 0 === e3._maxListeners ? w2.defaultMaxListeners : e3._maxListeners;
}
function C2(e3, t3, n3, r3) {
  var i3, o3, s3, a3;
  if (k2(n3), void 0 === (o3 = e3._events) ? (o3 = e3._events = /* @__PURE__ */ Object.create(null), e3._eventsCount = 0) : (void 0 !== o3.newListener && (e3.emit("newListener", t3, n3.listener ? n3.listener : n3), o3 = e3._events), s3 = o3[t3]), void 0 === s3)
    s3 = o3[t3] = n3, ++e3._eventsCount;
  else if ("function" == typeof s3 ? s3 = o3[t3] = r3 ? [n3, s3] : [s3, n3] : r3 ? s3.unshift(n3) : s3.push(n3), (i3 = M2(e3)) > 0 && s3.length > i3 && !s3.warned) {
    s3.warned = true;
    var c3 = new Error("Possible EventEmitter memory leak detected. " + s3.length + " " + String(t3) + " listeners added. Use emitter.setMaxListeners() to increase limit");
    c3.name = "MaxListenersExceededWarning", c3.emitter = e3, c3.type = t3, c3.count = s3.length, a3 = c3, console && console.warn && console.warn(a3);
  }
  return e3;
}
function E2() {
  if (!this.fired)
    return this.target.removeListener(this.type, this.wrapFn), this.fired = true, 0 === arguments.length ? this.listener.call(this.target) : this.listener.apply(this.target, arguments);
}
function T2(e3, t3, n3) {
  var r3 = { fired: false, wrapFn: void 0, target: e3, type: t3, listener: n3 }, i3 = E2.bind(r3);
  return i3.listener = n3, r3.wrapFn = i3, i3;
}
function O2(e3, t3, n3) {
  var r3 = e3._events;
  if (void 0 === r3)
    return [];
  var i3 = r3[t3];
  return void 0 === i3 ? [] : "function" == typeof i3 ? n3 ? [i3.listener || i3] : [i3] : n3 ? function(e4) {
    for (var t4 = new Array(e4.length), n4 = 0; n4 < t4.length; ++n4)
      t4[n4] = e4[n4].listener || e4[n4];
    return t4;
  }(i3) : A2(i3, i3.length);
}
function P2(e3) {
  var t3 = this._events;
  if (void 0 !== t3) {
    var n3 = t3[e3];
    if ("function" == typeof n3)
      return 1;
    if (void 0 !== n3)
      return n3.length;
  }
  return 0;
}
function A2(e3, t3) {
  for (var n3 = new Array(t3), r3 = 0; r3 < t3; ++r3)
    n3[r3] = e3[r3];
  return n3;
}
function j2(e3, t3, n3, r3) {
  if ("function" == typeof e3.on)
    r3.once ? e3.once(t3, n3) : e3.on(t3, n3);
  else {
    if ("function" != typeof e3.addEventListener)
      throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof e3);
    e3.addEventListener(t3, function i3(o3) {
      r3.once && e3.removeEventListener(t3, i3), n3(o3);
    });
  }
}
Object.defineProperty(w2, "defaultMaxListeners", { enumerable: true, get: function() {
  return S2;
}, set: function(e3) {
  if ("number" != typeof e3 || e3 < 0 || _2(e3))
    throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + e3 + ".");
  S2 = e3;
} }), w2.init = function() {
  void 0 !== this._events && this._events !== Object.getPrototypeOf(this)._events || (this._events = /* @__PURE__ */ Object.create(null), this._eventsCount = 0), this._maxListeners = this._maxListeners || void 0;
}, w2.prototype.setMaxListeners = function(e3) {
  if ("number" != typeof e3 || e3 < 0 || _2(e3))
    throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + e3 + ".");
  return this._maxListeners = e3, this;
}, w2.prototype.getMaxListeners = function() {
  return M2(this);
}, w2.prototype.emit = function(e3) {
  for (var t3 = [], n3 = 1; n3 < arguments.length; n3++)
    t3.push(arguments[n3]);
  var r3 = "error" === e3, i3 = this._events;
  if (void 0 !== i3)
    r3 = r3 && void 0 === i3.error;
  else if (!r3)
    return false;
  if (r3) {
    var o3;
    if (t3.length > 0 && (o3 = t3[0]), o3 instanceof Error)
      throw o3;
    var s3 = new Error("Unhandled error." + (o3 ? " (" + o3.message + ")" : ""));
    throw s3.context = o3, s3;
  }
  var a3 = i3[e3];
  if (void 0 === a3)
    return false;
  if ("function" == typeof a3)
    b2(a3, this, t3);
  else {
    var c3 = a3.length, l3 = A2(a3, c3);
    for (n3 = 0; n3 < c3; ++n3)
      b2(l3[n3], this, t3);
  }
  return true;
}, w2.prototype.addListener = function(e3, t3) {
  return C2(this, e3, t3, false);
}, w2.prototype.on = w2.prototype.addListener, w2.prototype.prependListener = function(e3, t3) {
  return C2(this, e3, t3, true);
}, w2.prototype.once = function(e3, t3) {
  return k2(t3), this.on(e3, T2(this, e3, t3)), this;
}, w2.prototype.prependOnceListener = function(e3, t3) {
  return k2(t3), this.prependListener(e3, T2(this, e3, t3)), this;
}, w2.prototype.removeListener = function(e3, t3) {
  var n3, r3, i3, o3, s3;
  if (k2(t3), void 0 === (r3 = this._events))
    return this;
  if (void 0 === (n3 = r3[e3]))
    return this;
  if (n3 === t3 || n3.listener === t3)
    0 == --this._eventsCount ? this._events = /* @__PURE__ */ Object.create(null) : (delete r3[e3], r3.removeListener && this.emit("removeListener", e3, n3.listener || t3));
  else if ("function" != typeof n3) {
    for (i3 = -1, o3 = n3.length - 1; o3 >= 0; o3--)
      if (n3[o3] === t3 || n3[o3].listener === t3) {
        s3 = n3[o3].listener, i3 = o3;
        break;
      }
    if (i3 < 0)
      return this;
    0 === i3 ? n3.shift() : function(e4, t4) {
      for (; t4 + 1 < e4.length; t4++)
        e4[t4] = e4[t4 + 1];
      e4.pop();
    }(n3, i3), 1 === n3.length && (r3[e3] = n3[0]), void 0 !== r3.removeListener && this.emit("removeListener", e3, s3 || t3);
  }
  return this;
}, w2.prototype.off = w2.prototype.removeListener, w2.prototype.removeAllListeners = function(e3) {
  var t3, n3, r3;
  if (void 0 === (n3 = this._events))
    return this;
  if (void 0 === n3.removeListener)
    return 0 === arguments.length ? (this._events = /* @__PURE__ */ Object.create(null), this._eventsCount = 0) : void 0 !== n3[e3] && (0 == --this._eventsCount ? this._events = /* @__PURE__ */ Object.create(null) : delete n3[e3]), this;
  if (0 === arguments.length) {
    var i3, o3 = Object.keys(n3);
    for (r3 = 0; r3 < o3.length; ++r3)
      "removeListener" !== (i3 = o3[r3]) && this.removeAllListeners(i3);
    return this.removeAllListeners("removeListener"), this._events = /* @__PURE__ */ Object.create(null), this._eventsCount = 0, this;
  }
  if ("function" == typeof (t3 = n3[e3]))
    this.removeListener(e3, t3);
  else if (void 0 !== t3)
    for (r3 = t3.length - 1; r3 >= 0; r3--)
      this.removeListener(e3, t3[r3]);
  return this;
}, w2.prototype.listeners = function(e3) {
  return O2(this, e3, true);
}, w2.prototype.rawListeners = function(e3) {
  return O2(this, e3, false);
}, w2.listenerCount = function(e3, t3) {
  return "function" == typeof e3.listenerCount ? e3.listenerCount(t3) : P2.call(e3, t3);
}, w2.prototype.listenerCount = P2, w2.prototype.eventNames = function() {
  return this._eventsCount > 0 ? g2(this._events) : [];
};
var I2 = m2.exports;
var x2 = v2(I2);
var L2 = Object.prototype.hasOwnProperty;
function D2(e3, t3, n3) {
  for (n3 of e3.keys())
    if (N2(n3, t3))
      return n3;
}
function N2(e3, t3) {
  var n3, r3, i3;
  if (e3 === t3)
    return true;
  if (e3 && t3 && (n3 = e3.constructor) === t3.constructor) {
    if (n3 === Date)
      return e3.getTime() === t3.getTime();
    if (n3 === RegExp)
      return e3.toString() === t3.toString();
    if (n3 === Array) {
      if ((r3 = e3.length) === t3.length)
        for (; r3-- && N2(e3[r3], t3[r3]); )
          ;
      return -1 === r3;
    }
    if (n3 === Set) {
      if (e3.size !== t3.size)
        return false;
      for (r3 of e3) {
        if ((i3 = r3) && "object" == typeof i3 && !(i3 = D2(t3, i3)))
          return false;
        if (!t3.has(i3))
          return false;
      }
      return true;
    }
    if (n3 === Map) {
      if (e3.size !== t3.size)
        return false;
      for (r3 of e3) {
        if ((i3 = r3[0]) && "object" == typeof i3 && !(i3 = D2(t3, i3)))
          return false;
        if (!N2(r3[1], t3.get(i3)))
          return false;
      }
      return true;
    }
    if (n3 === ArrayBuffer)
      e3 = new Uint8Array(e3), t3 = new Uint8Array(t3);
    else if (n3 === DataView) {
      if ((r3 = e3.byteLength) === t3.byteLength)
        for (; r3-- && e3.getInt8(r3) === t3.getInt8(r3); )
          ;
      return -1 === r3;
    }
    if (ArrayBuffer.isView(e3)) {
      if ((r3 = e3.byteLength) === t3.byteLength)
        for (; r3-- && e3[r3] === t3[r3]; )
          ;
      return -1 === r3;
    }
    if (!n3 || "object" == typeof e3) {
      for (n3 in r3 = 0, e3) {
        if (L2.call(e3, n3) && ++r3 && !L2.call(t3, n3))
          return false;
        if (!(n3 in t3) || !N2(e3[n3], t3[n3]))
          return false;
      }
      return Object.keys(t3).length === r3;
    }
  }
  return e3 != e3 && t3 != t3;
}
var R2 = { "Amazon Silk": "amazon_silk", "Android Browser": "android", Bada: "bada", BlackBerry: "blackberry", Chrome: "chrome", Chromium: "chromium", Electron: "electron", Epiphany: "epiphany", Firefox: "firefox", Focus: "focus", Generic: "generic", "Google Search": "google_search", Googlebot: "googlebot", "Internet Explorer": "ie", "K-Meleon": "k_meleon", Maxthon: "maxthon", "Microsoft Edge": "edge", "MZ Browser": "mz", "NAVER Whale Browser": "naver", Opera: "opera", "Opera Coast": "opera_coast", PhantomJS: "phantomjs", Puffin: "puffin", QupZilla: "qupzilla", QQ: "qq", QQLite: "qqlite", Safari: "safari", Sailfish: "sailfish", "Samsung Internet for Android": "samsung_internet", SeaMonkey: "seamonkey", Sleipnir: "sleipnir", Swing: "swing", Tizen: "tizen", "UC Browser": "uc", Vivaldi: "vivaldi", "WebOS Browser": "webos", WeChat: "wechat", "Yandex Browser": "yandex", Roku: "roku" };
var F2 = { amazon_silk: "Amazon Silk", android: "Android Browser", bada: "Bada", blackberry: "BlackBerry", chrome: "Chrome", chromium: "Chromium", electron: "Electron", epiphany: "Epiphany", firefox: "Firefox", focus: "Focus", generic: "Generic", googlebot: "Googlebot", google_search: "Google Search", ie: "Internet Explorer", k_meleon: "K-Meleon", maxthon: "Maxthon", edge: "Microsoft Edge", mz: "MZ Browser", naver: "NAVER Whale Browser", opera: "Opera", opera_coast: "Opera Coast", phantomjs: "PhantomJS", puffin: "Puffin", qupzilla: "QupZilla", qq: "QQ Browser", qqlite: "QQ Browser Lite", safari: "Safari", sailfish: "Sailfish", samsung_internet: "Samsung Internet for Android", seamonkey: "SeaMonkey", sleipnir: "Sleipnir", swing: "Swing", tizen: "Tizen", uc: "UC Browser", vivaldi: "Vivaldi", webos: "WebOS Browser", wechat: "WeChat", yandex: "Yandex Browser" };
var B2 = { tablet: "tablet", mobile: "mobile", desktop: "desktop", tv: "tv" };
var U2 = { WindowsPhone: "Windows Phone", Windows: "Windows", MacOS: "macOS", iOS: "iOS", Android: "Android", WebOS: "WebOS", BlackBerry: "BlackBerry", Bada: "Bada", Tizen: "Tizen", Linux: "Linux", ChromeOS: "Chrome OS", PlayStation4: "PlayStation 4", Roku: "Roku" };
var V2 = { EdgeHTML: "EdgeHTML", Blink: "Blink", Trident: "Trident", Presto: "Presto", Gecko: "Gecko", WebKit: "WebKit" };
var J2 = class _J {
  static getFirstMatch(e3, t3) {
    const n3 = t3.match(e3);
    return n3 && n3.length > 0 && n3[1] || "";
  }
  static getSecondMatch(e3, t3) {
    const n3 = t3.match(e3);
    return n3 && n3.length > 1 && n3[2] || "";
  }
  static matchAndReturnConst(e3, t3, n3) {
    if (e3.test(t3))
      return n3;
  }
  static getWindowsVersionName(e3) {
    switch (e3) {
      case "NT":
        return "NT";
      case "XP":
      case "NT 5.1":
        return "XP";
      case "NT 5.0":
        return "2000";
      case "NT 5.2":
        return "2003";
      case "NT 6.0":
        return "Vista";
      case "NT 6.1":
        return "7";
      case "NT 6.2":
        return "8";
      case "NT 6.3":
        return "8.1";
      case "NT 10.0":
        return "10";
      default:
        return;
    }
  }
  static getMacOSVersionName(e3) {
    const t3 = e3.split(".").splice(0, 2).map((e4) => parseInt(e4, 10) || 0);
    if (t3.push(0), 10 === t3[0])
      switch (t3[1]) {
        case 5:
          return "Leopard";
        case 6:
          return "Snow Leopard";
        case 7:
          return "Lion";
        case 8:
          return "Mountain Lion";
        case 9:
          return "Mavericks";
        case 10:
          return "Yosemite";
        case 11:
          return "El Capitan";
        case 12:
          return "Sierra";
        case 13:
          return "High Sierra";
        case 14:
          return "Mojave";
        case 15:
          return "Catalina";
        default:
          return;
      }
  }
  static getAndroidVersionName(e3) {
    const t3 = e3.split(".").splice(0, 2).map((e4) => parseInt(e4, 10) || 0);
    if (t3.push(0), !(1 === t3[0] && t3[1] < 5))
      return 1 === t3[0] && t3[1] < 6 ? "Cupcake" : 1 === t3[0] && t3[1] >= 6 ? "Donut" : 2 === t3[0] && t3[1] < 2 ? "Eclair" : 2 === t3[0] && 2 === t3[1] ? "Froyo" : 2 === t3[0] && t3[1] > 2 ? "Gingerbread" : 3 === t3[0] ? "Honeycomb" : 4 === t3[0] && t3[1] < 1 ? "Ice Cream Sandwich" : 4 === t3[0] && t3[1] < 4 ? "Jelly Bean" : 4 === t3[0] && t3[1] >= 4 ? "KitKat" : 5 === t3[0] ? "Lollipop" : 6 === t3[0] ? "Marshmallow" : 7 === t3[0] ? "Nougat" : 8 === t3[0] ? "Oreo" : 9 === t3[0] ? "Pie" : void 0;
  }
  static getVersionPrecision(e3) {
    return e3.split(".").length;
  }
  static compareVersions(e3, t3, n3 = false) {
    const r3 = _J.getVersionPrecision(e3), i3 = _J.getVersionPrecision(t3);
    let o3 = Math.max(r3, i3), s3 = 0;
    const a3 = _J.map([e3, t3], (e4) => {
      const t4 = o3 - _J.getVersionPrecision(e4), n4 = e4 + new Array(t4 + 1).join(".0");
      return _J.map(n4.split("."), (e5) => new Array(20 - e5.length).join("0") + e5).reverse();
    });
    for (n3 && (s3 = o3 - Math.min(r3, i3)), o3 -= 1; o3 >= s3; ) {
      if (a3[0][o3] > a3[1][o3])
        return 1;
      if (a3[0][o3] === a3[1][o3]) {
        if (o3 === s3)
          return 0;
        o3 -= 1;
      } else if (a3[0][o3] < a3[1][o3])
        return -1;
    }
  }
  static map(e3, t3) {
    const n3 = [];
    let r3;
    if (Array.prototype.map)
      return Array.prototype.map.call(e3, t3);
    for (r3 = 0; r3 < e3.length; r3 += 1)
      n3.push(t3(e3[r3]));
    return n3;
  }
  static find(e3, t3) {
    let n3, r3;
    if (Array.prototype.find)
      return Array.prototype.find.call(e3, t3);
    for (n3 = 0, r3 = e3.length; n3 < r3; n3 += 1) {
      const r4 = e3[n3];
      if (t3(r4, n3))
        return r4;
    }
  }
  static assign(e3, ...t3) {
    const n3 = e3;
    let r3, i3;
    if (Object.assign)
      return Object.assign(e3, ...t3);
    for (r3 = 0, i3 = t3.length; r3 < i3; r3 += 1) {
      const e4 = t3[r3];
      if ("object" == typeof e4 && null !== e4) {
        Object.keys(e4).forEach((t4) => {
          n3[t4] = e4[t4];
        });
      }
    }
    return e3;
  }
  static getBrowserAlias(e3) {
    return R2[e3];
  }
  static getBrowserTypeByAlias(e3) {
    return F2[e3] || "";
  }
};
var $2 = /version\/(\d+(\.?_?\d+)+)/i;
var q2 = [{ test: [/googlebot/i], describe(e3) {
  const t3 = { name: "Googlebot" }, n3 = J2.getFirstMatch(/googlebot\/(\d+(\.\d+))/i, e3) || J2.getFirstMatch($2, e3);
  return n3 && (t3.version = n3), t3;
} }, { test: [/opera/i], describe(e3) {
  const t3 = { name: "Opera" }, n3 = J2.getFirstMatch($2, e3) || J2.getFirstMatch(/(?:opera)[\s/](\d+(\.?_?\d+)+)/i, e3);
  return n3 && (t3.version = n3), t3;
} }, { test: [/opr\/|opios/i], describe(e3) {
  const t3 = { name: "Opera" }, n3 = J2.getFirstMatch(/(?:opr|opios)[\s/](\S+)/i, e3) || J2.getFirstMatch($2, e3);
  return n3 && (t3.version = n3), t3;
} }, { test: [/SamsungBrowser/i], describe(e3) {
  const t3 = { name: "Samsung Internet for Android" }, n3 = J2.getFirstMatch($2, e3) || J2.getFirstMatch(/(?:SamsungBrowser)[\s/](\d+(\.?_?\d+)+)/i, e3);
  return n3 && (t3.version = n3), t3;
} }, { test: [/Whale/i], describe(e3) {
  const t3 = { name: "NAVER Whale Browser" }, n3 = J2.getFirstMatch($2, e3) || J2.getFirstMatch(/(?:whale)[\s/](\d+(?:\.\d+)+)/i, e3);
  return n3 && (t3.version = n3), t3;
} }, { test: [/MZBrowser/i], describe(e3) {
  const t3 = { name: "MZ Browser" }, n3 = J2.getFirstMatch(/(?:MZBrowser)[\s/](\d+(?:\.\d+)+)/i, e3) || J2.getFirstMatch($2, e3);
  return n3 && (t3.version = n3), t3;
} }, { test: [/focus/i], describe(e3) {
  const t3 = { name: "Focus" }, n3 = J2.getFirstMatch(/(?:focus)[\s/](\d+(?:\.\d+)+)/i, e3) || J2.getFirstMatch($2, e3);
  return n3 && (t3.version = n3), t3;
} }, { test: [/swing/i], describe(e3) {
  const t3 = { name: "Swing" }, n3 = J2.getFirstMatch(/(?:swing)[\s/](\d+(?:\.\d+)+)/i, e3) || J2.getFirstMatch($2, e3);
  return n3 && (t3.version = n3), t3;
} }, { test: [/coast/i], describe(e3) {
  const t3 = { name: "Opera Coast" }, n3 = J2.getFirstMatch($2, e3) || J2.getFirstMatch(/(?:coast)[\s/](\d+(\.?_?\d+)+)/i, e3);
  return n3 && (t3.version = n3), t3;
} }, { test: [/opt\/\d+(?:.?_?\d+)+/i], describe(e3) {
  const t3 = { name: "Opera Touch" }, n3 = J2.getFirstMatch(/(?:opt)[\s/](\d+(\.?_?\d+)+)/i, e3) || J2.getFirstMatch($2, e3);
  return n3 && (t3.version = n3), t3;
} }, { test: [/yabrowser/i], describe(e3) {
  const t3 = { name: "Yandex Browser" }, n3 = J2.getFirstMatch(/(?:yabrowser)[\s/](\d+(\.?_?\d+)+)/i, e3) || J2.getFirstMatch($2, e3);
  return n3 && (t3.version = n3), t3;
} }, { test: [/ucbrowser/i], describe(e3) {
  const t3 = { name: "UC Browser" }, n3 = J2.getFirstMatch($2, e3) || J2.getFirstMatch(/(?:ucbrowser)[\s/](\d+(\.?_?\d+)+)/i, e3);
  return n3 && (t3.version = n3), t3;
} }, { test: [/Maxthon|mxios/i], describe(e3) {
  const t3 = { name: "Maxthon" }, n3 = J2.getFirstMatch($2, e3) || J2.getFirstMatch(/(?:Maxthon|mxios)[\s/](\d+(\.?_?\d+)+)/i, e3);
  return n3 && (t3.version = n3), t3;
} }, { test: [/epiphany/i], describe(e3) {
  const t3 = { name: "Epiphany" }, n3 = J2.getFirstMatch($2, e3) || J2.getFirstMatch(/(?:epiphany)[\s/](\d+(\.?_?\d+)+)/i, e3);
  return n3 && (t3.version = n3), t3;
} }, { test: [/puffin/i], describe(e3) {
  const t3 = { name: "Puffin" }, n3 = J2.getFirstMatch($2, e3) || J2.getFirstMatch(/(?:puffin)[\s/](\d+(\.?_?\d+)+)/i, e3);
  return n3 && (t3.version = n3), t3;
} }, { test: [/sleipnir/i], describe(e3) {
  const t3 = { name: "Sleipnir" }, n3 = J2.getFirstMatch($2, e3) || J2.getFirstMatch(/(?:sleipnir)[\s/](\d+(\.?_?\d+)+)/i, e3);
  return n3 && (t3.version = n3), t3;
} }, { test: [/k-meleon/i], describe(e3) {
  const t3 = { name: "K-Meleon" }, n3 = J2.getFirstMatch($2, e3) || J2.getFirstMatch(/(?:k-meleon)[\s/](\d+(\.?_?\d+)+)/i, e3);
  return n3 && (t3.version = n3), t3;
} }, { test: [/micromessenger/i], describe(e3) {
  const t3 = { name: "WeChat" }, n3 = J2.getFirstMatch(/(?:micromessenger)[\s/](\d+(\.?_?\d+)+)/i, e3) || J2.getFirstMatch($2, e3);
  return n3 && (t3.version = n3), t3;
} }, { test: [/qqbrowser/i], describe(e3) {
  const t3 = { name: /qqbrowserlite/i.test(e3) ? "QQ Browser Lite" : "QQ Browser" }, n3 = J2.getFirstMatch(/(?:qqbrowserlite|qqbrowser)[/](\d+(\.?_?\d+)+)/i, e3) || J2.getFirstMatch($2, e3);
  return n3 && (t3.version = n3), t3;
} }, { test: [/msie|trident/i], describe(e3) {
  const t3 = { name: "Internet Explorer" }, n3 = J2.getFirstMatch(/(?:msie |rv:)(\d+(\.?_?\d+)+)/i, e3);
  return n3 && (t3.version = n3), t3;
} }, { test: [/\sedg\//i], describe(e3) {
  const t3 = { name: "Microsoft Edge" }, n3 = J2.getFirstMatch(/\sedg\/(\d+(\.?_?\d+)+)/i, e3);
  return n3 && (t3.version = n3), t3;
} }, { test: [/edg([ea]|ios)/i], describe(e3) {
  const t3 = { name: "Microsoft Edge" }, n3 = J2.getSecondMatch(/edg([ea]|ios)\/(\d+(\.?_?\d+)+)/i, e3);
  return n3 && (t3.version = n3), t3;
} }, { test: [/vivaldi/i], describe(e3) {
  const t3 = { name: "Vivaldi" }, n3 = J2.getFirstMatch(/vivaldi\/(\d+(\.?_?\d+)+)/i, e3);
  return n3 && (t3.version = n3), t3;
} }, { test: [/seamonkey/i], describe(e3) {
  const t3 = { name: "SeaMonkey" }, n3 = J2.getFirstMatch(/seamonkey\/(\d+(\.?_?\d+)+)/i, e3);
  return n3 && (t3.version = n3), t3;
} }, { test: [/sailfish/i], describe(e3) {
  const t3 = { name: "Sailfish" }, n3 = J2.getFirstMatch(/sailfish\s?browser\/(\d+(\.\d+)?)/i, e3);
  return n3 && (t3.version = n3), t3;
} }, { test: [/silk/i], describe(e3) {
  const t3 = { name: "Amazon Silk" }, n3 = J2.getFirstMatch(/silk\/(\d+(\.?_?\d+)+)/i, e3);
  return n3 && (t3.version = n3), t3;
} }, { test: [/phantom/i], describe(e3) {
  const t3 = { name: "PhantomJS" }, n3 = J2.getFirstMatch(/phantomjs\/(\d+(\.?_?\d+)+)/i, e3);
  return n3 && (t3.version = n3), t3;
} }, { test: [/slimerjs/i], describe(e3) {
  const t3 = { name: "SlimerJS" }, n3 = J2.getFirstMatch(/slimerjs\/(\d+(\.?_?\d+)+)/i, e3);
  return n3 && (t3.version = n3), t3;
} }, { test: [/blackberry|\bbb\d+/i, /rim\stablet/i], describe(e3) {
  const t3 = { name: "BlackBerry" }, n3 = J2.getFirstMatch($2, e3) || J2.getFirstMatch(/blackberry[\d]+\/(\d+(\.?_?\d+)+)/i, e3);
  return n3 && (t3.version = n3), t3;
} }, { test: [/(web|hpw)[o0]s/i], describe(e3) {
  const t3 = { name: "WebOS Browser" }, n3 = J2.getFirstMatch($2, e3) || J2.getFirstMatch(/w(?:eb)?[o0]sbrowser\/(\d+(\.?_?\d+)+)/i, e3);
  return n3 && (t3.version = n3), t3;
} }, { test: [/bada/i], describe(e3) {
  const t3 = { name: "Bada" }, n3 = J2.getFirstMatch(/dolfin\/(\d+(\.?_?\d+)+)/i, e3);
  return n3 && (t3.version = n3), t3;
} }, { test: [/tizen/i], describe(e3) {
  const t3 = { name: "Tizen" }, n3 = J2.getFirstMatch(/(?:tizen\s?)?browser\/(\d+(\.?_?\d+)+)/i, e3) || J2.getFirstMatch($2, e3);
  return n3 && (t3.version = n3), t3;
} }, { test: [/qupzilla/i], describe(e3) {
  const t3 = { name: "QupZilla" }, n3 = J2.getFirstMatch(/(?:qupzilla)[\s/](\d+(\.?_?\d+)+)/i, e3) || J2.getFirstMatch($2, e3);
  return n3 && (t3.version = n3), t3;
} }, { test: [/firefox|iceweasel|fxios/i], describe(e3) {
  const t3 = { name: "Firefox" }, n3 = J2.getFirstMatch(/(?:firefox|iceweasel|fxios)[\s/](\d+(\.?_?\d+)+)/i, e3);
  return n3 && (t3.version = n3), t3;
} }, { test: [/electron/i], describe(e3) {
  const t3 = { name: "Electron" }, n3 = J2.getFirstMatch(/(?:electron)\/(\d+(\.?_?\d+)+)/i, e3);
  return n3 && (t3.version = n3), t3;
} }, { test: [/MiuiBrowser/i], describe(e3) {
  const t3 = { name: "Miui" }, n3 = J2.getFirstMatch(/(?:MiuiBrowser)[\s/](\d+(\.?_?\d+)+)/i, e3);
  return n3 && (t3.version = n3), t3;
} }, { test: [/chromium/i], describe(e3) {
  const t3 = { name: "Chromium" }, n3 = J2.getFirstMatch(/(?:chromium)[\s/](\d+(\.?_?\d+)+)/i, e3) || J2.getFirstMatch($2, e3);
  return n3 && (t3.version = n3), t3;
} }, { test: [/chrome|crios|crmo/i], describe(e3) {
  const t3 = { name: "Chrome" }, n3 = J2.getFirstMatch(/(?:chrome|crios|crmo)\/(\d+(\.?_?\d+)+)/i, e3);
  return n3 && (t3.version = n3), t3;
} }, { test: [/GSA/i], describe(e3) {
  const t3 = { name: "Google Search" }, n3 = J2.getFirstMatch(/(?:GSA)\/(\d+(\.?_?\d+)+)/i, e3);
  return n3 && (t3.version = n3), t3;
} }, { test(e3) {
  const t3 = !e3.test(/like android/i), n3 = e3.test(/android/i);
  return t3 && n3;
}, describe(e3) {
  const t3 = { name: "Android Browser" }, n3 = J2.getFirstMatch($2, e3);
  return n3 && (t3.version = n3), t3;
} }, { test: [/playstation 4/i], describe(e3) {
  const t3 = { name: "PlayStation 4" }, n3 = J2.getFirstMatch($2, e3);
  return n3 && (t3.version = n3), t3;
} }, { test: [/safari|applewebkit/i], describe(e3) {
  const t3 = { name: "Safari" }, n3 = J2.getFirstMatch($2, e3);
  return n3 && (t3.version = n3), t3;
} }, { test: [/.*/i], describe(e3) {
  const t3 = -1 !== e3.search("\\(") ? /^(.*)\/(.*)[ \t]\((.*)/ : /^(.*)\/(.*) /;
  return { name: J2.getFirstMatch(t3, e3), version: J2.getSecondMatch(t3, e3) };
} }];
var z2 = [{ test: [/Roku\/DVP/], describe(e3) {
  const t3 = J2.getFirstMatch(/Roku\/DVP-(\d+\.\d+)/i, e3);
  return { name: U2.Roku, version: t3 };
} }, { test: [/windows phone/i], describe(e3) {
  const t3 = J2.getFirstMatch(/windows phone (?:os)?\s?(\d+(\.\d+)*)/i, e3);
  return { name: U2.WindowsPhone, version: t3 };
} }, { test: [/windows /i], describe(e3) {
  const t3 = J2.getFirstMatch(/Windows ((NT|XP)( \d\d?.\d)?)/i, e3), n3 = J2.getWindowsVersionName(t3);
  return { name: U2.Windows, version: t3, versionName: n3 };
} }, { test: [/Macintosh(.*?) FxiOS(.*?)\//], describe(e3) {
  const t3 = { name: U2.iOS }, n3 = J2.getSecondMatch(/(Version\/)(\d[\d.]+)/, e3);
  return n3 && (t3.version = n3), t3;
} }, { test: [/macintosh/i], describe(e3) {
  const t3 = J2.getFirstMatch(/mac os x (\d+(\.?_?\d+)+)/i, e3).replace(/[_\s]/g, "."), n3 = J2.getMacOSVersionName(t3), r3 = { name: U2.MacOS, version: t3 };
  return n3 && (r3.versionName = n3), r3;
} }, { test: [/(ipod|iphone|ipad)/i], describe(e3) {
  const t3 = J2.getFirstMatch(/os (\d+([_\s]\d+)*) like mac os x/i, e3).replace(/[_\s]/g, ".");
  return { name: U2.iOS, version: t3 };
} }, { test(e3) {
  const t3 = !e3.test(/like android/i), n3 = e3.test(/android/i);
  return t3 && n3;
}, describe(e3) {
  const t3 = J2.getFirstMatch(/android[\s/-](\d+(\.\d+)*)/i, e3), n3 = J2.getAndroidVersionName(t3), r3 = { name: U2.Android, version: t3 };
  return n3 && (r3.versionName = n3), r3;
} }, { test: [/(web|hpw)[o0]s/i], describe(e3) {
  const t3 = J2.getFirstMatch(/(?:web|hpw)[o0]s\/(\d+(\.\d+)*)/i, e3), n3 = { name: U2.WebOS };
  return t3 && t3.length && (n3.version = t3), n3;
} }, { test: [/blackberry|\bbb\d+/i, /rim\stablet/i], describe(e3) {
  const t3 = J2.getFirstMatch(/rim\stablet\sos\s(\d+(\.\d+)*)/i, e3) || J2.getFirstMatch(/blackberry\d+\/(\d+([_\s]\d+)*)/i, e3) || J2.getFirstMatch(/\bbb(\d+)/i, e3);
  return { name: U2.BlackBerry, version: t3 };
} }, { test: [/bada/i], describe(e3) {
  const t3 = J2.getFirstMatch(/bada\/(\d+(\.\d+)*)/i, e3);
  return { name: U2.Bada, version: t3 };
} }, { test: [/tizen/i], describe(e3) {
  const t3 = J2.getFirstMatch(/tizen[/\s](\d+(\.\d+)*)/i, e3);
  return { name: U2.Tizen, version: t3 };
} }, { test: [/linux/i], describe: () => ({ name: U2.Linux }) }, { test: [/CrOS/], describe: () => ({ name: U2.ChromeOS }) }, { test: [/PlayStation 4/], describe(e3) {
  const t3 = J2.getFirstMatch(/PlayStation 4[/\s](\d+(\.\d+)*)/i, e3);
  return { name: U2.PlayStation4, version: t3 };
} }];
var W2 = [{ test: [/googlebot/i], describe: () => ({ type: "bot", vendor: "Google" }) }, { test: [/huawei/i], describe(e3) {
  const t3 = J2.getFirstMatch(/(can-l01)/i, e3) && "Nova", n3 = { type: B2.mobile, vendor: "Huawei" };
  return t3 && (n3.model = t3), n3;
} }, { test: [/nexus\s*(?:7|8|9|10).*/i], describe: () => ({ type: B2.tablet, vendor: "Nexus" }) }, { test: [/ipad/i], describe: () => ({ type: B2.tablet, vendor: "Apple", model: "iPad" }) }, { test: [/Macintosh(.*?) FxiOS(.*?)\//], describe: () => ({ type: B2.tablet, vendor: "Apple", model: "iPad" }) }, { test: [/kftt build/i], describe: () => ({ type: B2.tablet, vendor: "Amazon", model: "Kindle Fire HD 7" }) }, { test: [/silk/i], describe: () => ({ type: B2.tablet, vendor: "Amazon" }) }, { test: [/tablet(?! pc)/i], describe: () => ({ type: B2.tablet }) }, { test(e3) {
  const t3 = e3.test(/ipod|iphone/i), n3 = e3.test(/like (ipod|iphone)/i);
  return t3 && !n3;
}, describe(e3) {
  const t3 = J2.getFirstMatch(/(ipod|iphone)/i, e3);
  return { type: B2.mobile, vendor: "Apple", model: t3 };
} }, { test: [/nexus\s*[0-6].*/i, /galaxy nexus/i], describe: () => ({ type: B2.mobile, vendor: "Nexus" }) }, { test: [/[^-]mobi/i], describe: () => ({ type: B2.mobile }) }, { test: (e3) => "blackberry" === e3.getBrowserName(true), describe: () => ({ type: B2.mobile, vendor: "BlackBerry" }) }, { test: (e3) => "bada" === e3.getBrowserName(true), describe: () => ({ type: B2.mobile }) }, { test: (e3) => "windows phone" === e3.getBrowserName(), describe: () => ({ type: B2.mobile, vendor: "Microsoft" }) }, { test(e3) {
  const t3 = Number(String(e3.getOSVersion()).split(".")[0]);
  return "android" === e3.getOSName(true) && t3 >= 3;
}, describe: () => ({ type: B2.tablet }) }, { test: (e3) => "android" === e3.getOSName(true), describe: () => ({ type: B2.mobile }) }, { test: (e3) => "macos" === e3.getOSName(true), describe: () => ({ type: B2.desktop, vendor: "Apple" }) }, { test: (e3) => "windows" === e3.getOSName(true), describe: () => ({ type: B2.desktop }) }, { test: (e3) => "linux" === e3.getOSName(true), describe: () => ({ type: B2.desktop }) }, { test: (e3) => "playstation 4" === e3.getOSName(true), describe: () => ({ type: B2.tv }) }, { test: (e3) => "roku" === e3.getOSName(true), describe: () => ({ type: B2.tv }) }];
var H2 = [{ test: (e3) => "microsoft edge" === e3.getBrowserName(true), describe(e3) {
  if (/\sedg\//i.test(e3))
    return { name: V2.Blink };
  const t3 = J2.getFirstMatch(/edge\/(\d+(\.?_?\d+)+)/i, e3);
  return { name: V2.EdgeHTML, version: t3 };
} }, { test: [/trident/i], describe(e3) {
  const t3 = { name: V2.Trident }, n3 = J2.getFirstMatch(/trident\/(\d+(\.?_?\d+)+)/i, e3);
  return n3 && (t3.version = n3), t3;
} }, { test: (e3) => e3.test(/presto/i), describe(e3) {
  const t3 = { name: V2.Presto }, n3 = J2.getFirstMatch(/presto\/(\d+(\.?_?\d+)+)/i, e3);
  return n3 && (t3.version = n3), t3;
} }, { test(e3) {
  const t3 = e3.test(/gecko/i), n3 = e3.test(/like gecko/i);
  return t3 && !n3;
}, describe(e3) {
  const t3 = { name: V2.Gecko }, n3 = J2.getFirstMatch(/gecko\/(\d+(\.?_?\d+)+)/i, e3);
  return n3 && (t3.version = n3), t3;
} }, { test: [/(apple)?webkit\/537\.36/i], describe: () => ({ name: V2.Blink }) }, { test: [/(apple)?webkit/i], describe(e3) {
  const t3 = { name: V2.WebKit }, n3 = J2.getFirstMatch(/webkit\/(\d+(\.?_?\d+)+)/i, e3);
  return n3 && (t3.version = n3), t3;
} }];
var G2 = class {
  constructor(e3, t3 = false) {
    if (null == e3 || "" === e3)
      throw new Error("UserAgent parameter can't be empty");
    this._ua = e3, this.parsedResult = {}, true !== t3 && this.parse();
  }
  getUA() {
    return this._ua;
  }
  test(e3) {
    return e3.test(this._ua);
  }
  parseBrowser() {
    this.parsedResult.browser = {};
    const e3 = J2.find(q2, (e4) => {
      if ("function" == typeof e4.test)
        return e4.test(this);
      if (e4.test instanceof Array)
        return e4.test.some((e5) => this.test(e5));
      throw new Error("Browser's test function is not valid");
    });
    return e3 && (this.parsedResult.browser = e3.describe(this.getUA())), this.parsedResult.browser;
  }
  getBrowser() {
    return this.parsedResult.browser ? this.parsedResult.browser : this.parseBrowser();
  }
  getBrowserName(e3) {
    return e3 ? String(this.getBrowser().name).toLowerCase() || "" : this.getBrowser().name || "";
  }
  getBrowserVersion() {
    return this.getBrowser().version;
  }
  getOS() {
    return this.parsedResult.os ? this.parsedResult.os : this.parseOS();
  }
  parseOS() {
    this.parsedResult.os = {};
    const e3 = J2.find(z2, (e4) => {
      if ("function" == typeof e4.test)
        return e4.test(this);
      if (e4.test instanceof Array)
        return e4.test.some((e5) => this.test(e5));
      throw new Error("Browser's test function is not valid");
    });
    return e3 && (this.parsedResult.os = e3.describe(this.getUA())), this.parsedResult.os;
  }
  getOSName(e3) {
    const { name: t3 } = this.getOS();
    return e3 ? String(t3).toLowerCase() || "" : t3 || "";
  }
  getOSVersion() {
    return this.getOS().version;
  }
  getPlatform() {
    return this.parsedResult.platform ? this.parsedResult.platform : this.parsePlatform();
  }
  getPlatformType(e3 = false) {
    const { type: t3 } = this.getPlatform();
    return e3 ? String(t3).toLowerCase() || "" : t3 || "";
  }
  parsePlatform() {
    this.parsedResult.platform = {};
    const e3 = J2.find(W2, (e4) => {
      if ("function" == typeof e4.test)
        return e4.test(this);
      if (e4.test instanceof Array)
        return e4.test.some((e5) => this.test(e5));
      throw new Error("Browser's test function is not valid");
    });
    return e3 && (this.parsedResult.platform = e3.describe(this.getUA())), this.parsedResult.platform;
  }
  getEngine() {
    return this.parsedResult.engine ? this.parsedResult.engine : this.parseEngine();
  }
  getEngineName(e3) {
    return e3 ? String(this.getEngine().name).toLowerCase() || "" : this.getEngine().name || "";
  }
  parseEngine() {
    this.parsedResult.engine = {};
    const e3 = J2.find(H2, (e4) => {
      if ("function" == typeof e4.test)
        return e4.test(this);
      if (e4.test instanceof Array)
        return e4.test.some((e5) => this.test(e5));
      throw new Error("Browser's test function is not valid");
    });
    return e3 && (this.parsedResult.engine = e3.describe(this.getUA())), this.parsedResult.engine;
  }
  parse() {
    return this.parseBrowser(), this.parseOS(), this.parsePlatform(), this.parseEngine(), this;
  }
  getResult() {
    return J2.assign({}, this.parsedResult);
  }
  satisfies(e3) {
    const t3 = {};
    let n3 = 0;
    const r3 = {};
    let i3 = 0;
    if (Object.keys(e3).forEach((o3) => {
      const s3 = e3[o3];
      "string" == typeof s3 ? (r3[o3] = s3, i3 += 1) : "object" == typeof s3 && (t3[o3] = s3, n3 += 1);
    }), n3 > 0) {
      const e4 = Object.keys(t3), n4 = J2.find(e4, (e5) => this.isOS(e5));
      if (n4) {
        const e5 = this.satisfies(t3[n4]);
        if (void 0 !== e5)
          return e5;
      }
      const r4 = J2.find(e4, (e5) => this.isPlatform(e5));
      if (r4) {
        const e5 = this.satisfies(t3[r4]);
        if (void 0 !== e5)
          return e5;
      }
    }
    if (i3 > 0) {
      const e4 = Object.keys(r3), t4 = J2.find(e4, (e5) => this.isBrowser(e5, true));
      if (void 0 !== t4)
        return this.compareVersion(r3[t4]);
    }
  }
  isBrowser(e3, t3 = false) {
    const n3 = this.getBrowserName().toLowerCase();
    let r3 = e3.toLowerCase();
    const i3 = J2.getBrowserTypeByAlias(r3);
    return t3 && i3 && (r3 = i3.toLowerCase()), r3 === n3;
  }
  compareVersion(e3) {
    let t3 = [0], n3 = e3, r3 = false;
    const i3 = this.getBrowserVersion();
    if ("string" == typeof i3)
      return ">" === e3[0] || "<" === e3[0] ? (n3 = e3.substr(1), "=" === e3[1] ? (r3 = true, n3 = e3.substr(2)) : t3 = [], ">" === e3[0] ? t3.push(1) : t3.push(-1)) : "=" === e3[0] ? n3 = e3.substr(1) : "~" === e3[0] && (r3 = true, n3 = e3.substr(1)), t3.indexOf(J2.compareVersions(i3, n3, r3)) > -1;
  }
  isOS(e3) {
    return this.getOSName(true) === String(e3).toLowerCase();
  }
  isPlatform(e3) {
    return this.getPlatformType(true) === String(e3).toLowerCase();
  }
  isEngine(e3) {
    return this.getEngineName(true) === String(e3).toLowerCase();
  }
  is(e3, t3 = false) {
    return this.isBrowser(e3, t3) || this.isOS(e3) || this.isPlatform(e3);
  }
  some(e3 = []) {
    return e3.some((e4) => this.is(e4));
  }
};
var Q2 = class {
  static getParser(e3, t3 = false) {
    if ("string" != typeof e3)
      throw new Error("UserAgent should be a string");
    return new G2(e3, t3);
  }
  static parse(e3) {
    return new G2(e3).getResult();
  }
  static get BROWSER_MAP() {
    return F2;
  }
  static get ENGINE_MAP() {
    return V2;
  }
  static get OS_MAP() {
    return U2;
  }
  static get PLATFORMS_MAP() {
    return B2;
  }
};
function K2() {
  return Date.now() + Math.random().toString();
}
function Y2() {
  throw new Error("Method must be implemented in subclass");
}
function X2(e3, t3) {
  return null != t3 && t3.proxyUrl ? t3.proxyUrl + ("/" === t3.proxyUrl.slice(-1) ? "" : "/") + e3.substring(8) : e3;
}
function Z2(e3) {
  return null != e3 && e3.callObjectBundleUrlOverride ? e3.callObjectBundleUrlOverride : X2("https://c.daily.co/call-machine/versioned/".concat("0.79.0", "/static/call-machine-object-bundle.js"), e3);
}
function ee2(e3) {
  try {
    new URL(e3);
  } catch (e4) {
    return false;
  }
  return true;
}
var te2 = "undefined" == typeof __SENTRY_DEBUG__ || __SENTRY_DEBUG__;
var ne2 = "8.55.0";
var re2 = globalThis;
function ie2(e3, t3, n3) {
  const r3 = n3 || re2, i3 = r3.__SENTRY__ = r3.__SENTRY__ || {}, o3 = i3[ne2] = i3[ne2] || {};
  return o3[e3] || (o3[e3] = t3());
}
var oe2 = "undefined" == typeof __SENTRY_DEBUG__ || __SENTRY_DEBUG__;
var se2 = ["debug", "info", "warn", "error", "log", "assert", "trace"];
var ae2 = {};
function ce2(e3) {
  if (!("console" in re2))
    return e3();
  const t3 = re2.console, n3 = {}, r3 = Object.keys(ae2);
  r3.forEach((e4) => {
    const r4 = ae2[e4];
    n3[e4] = t3[e4], t3[e4] = r4;
  });
  try {
    return e3();
  } finally {
    r3.forEach((e4) => {
      t3[e4] = n3[e4];
    });
  }
}
var le2 = ie2("logger", function() {
  let e3 = false;
  const t3 = { enable: () => {
    e3 = true;
  }, disable: () => {
    e3 = false;
  }, isEnabled: () => e3 };
  return oe2 ? se2.forEach((n3) => {
    t3[n3] = (...t4) => {
      e3 && ce2(() => {
        re2.console[n3](`Sentry Logger [${n3}]:`, ...t4);
      });
    };
  }) : se2.forEach((e4) => {
    t3[e4] = () => {
    };
  }), t3;
});
var ue2 = "?";
var de2 = /\(error: (.*)\)/;
var he2 = /captureMessage|captureException/;
function pe2(e3) {
  return e3[e3.length - 1] || {};
}
var fe2 = "<anonymous>";
function ve2(e3) {
  try {
    return e3 && "function" == typeof e3 && e3.name || fe2;
  } catch (e4) {
    return fe2;
  }
}
function ge2(e3) {
  const t3 = e3.exception;
  if (t3) {
    const e4 = [];
    try {
      return t3.values.forEach((t4) => {
        t4.stacktrace.frames && e4.push(...t4.stacktrace.frames);
      }), e4;
    } catch (e5) {
      return;
    }
  }
}
var me2 = {};
var ye2 = {};
function be2(e3, t3) {
  me2[e3] = me2[e3] || [], me2[e3].push(t3);
}
function _e2(e3, t3) {
  if (!ye2[e3]) {
    ye2[e3] = true;
    try {
      t3();
    } catch (t4) {
      oe2 && le2.error(`Error while instrumenting ${e3}`, t4);
    }
  }
}
function we2(e3, t3) {
  const n3 = e3 && me2[e3];
  if (n3)
    for (const r3 of n3)
      try {
        r3(t3);
      } catch (t4) {
        oe2 && le2.error(`Error while triggering instrumentation handler.
Type: ${e3}
Name: ${ve2(r3)}
Error:`, t4);
      }
}
var Se2 = null;
function ke2() {
  Se2 = re2.onerror, re2.onerror = function(e3, t3, n3, r3, i3) {
    return we2("error", { column: r3, error: i3, line: n3, msg: e3, url: t3 }), !!Se2 && Se2.apply(this, arguments);
  }, re2.onerror.__SENTRY_INSTRUMENTED__ = true;
}
var Me2 = null;
function Ce2() {
  Me2 = re2.onunhandledrejection, re2.onunhandledrejection = function(e3) {
    return we2("unhandledrejection", e3), !Me2 || Me2.apply(this, arguments);
  }, re2.onunhandledrejection.__SENTRY_INSTRUMENTED__ = true;
}
function Ee2() {
  return Te2(re2), re2;
}
function Te2(e3) {
  const t3 = e3.__SENTRY__ = e3.__SENTRY__ || {};
  return t3.version = t3.version || ne2, t3[ne2] = t3[ne2] || {};
}
var Oe2 = Object.prototype.toString;
function Pe2(e3) {
  switch (Oe2.call(e3)) {
    case "[object Error]":
    case "[object Exception]":
    case "[object DOMException]":
    case "[object WebAssembly.Exception]":
      return true;
    default:
      return Be2(e3, Error);
  }
}
function Ae2(e3, t3) {
  return Oe2.call(e3) === `[object ${t3}]`;
}
function je2(e3) {
  return Ae2(e3, "ErrorEvent");
}
function Ie2(e3) {
  return Ae2(e3, "DOMError");
}
function xe2(e3) {
  return Ae2(e3, "String");
}
function Le2(e3) {
  return "object" == typeof e3 && null !== e3 && "__sentry_template_string__" in e3 && "__sentry_template_values__" in e3;
}
function De2(e3) {
  return null === e3 || Le2(e3) || "object" != typeof e3 && "function" != typeof e3;
}
function Ne2(e3) {
  return Ae2(e3, "Object");
}
function Re2(e3) {
  return "undefined" != typeof Event && Be2(e3, Event);
}
function Fe2(e3) {
  return Boolean(e3 && e3.then && "function" == typeof e3.then);
}
function Be2(e3, t3) {
  try {
    return e3 instanceof t3;
  } catch (e4) {
    return false;
  }
}
function Ue2(e3) {
  return !("object" != typeof e3 || null === e3 || !e3.__isVue && !e3._isVue);
}
var Ve2 = re2;
function Je2(e3, t3 = {}) {
  if (!e3)
    return "<unknown>";
  try {
    let n3 = e3;
    const r3 = 5, i3 = [];
    let o3 = 0, s3 = 0;
    const a3 = " > ", c3 = a3.length;
    let l3;
    const u3 = Array.isArray(t3) ? t3 : t3.keyAttrs, d3 = !Array.isArray(t3) && t3.maxStringLength || 80;
    for (; n3 && o3++ < r3 && (l3 = $e2(n3, u3), !("html" === l3 || o3 > 1 && s3 + i3.length * c3 + l3.length >= d3)); )
      i3.push(l3), s3 += l3.length, n3 = n3.parentNode;
    return i3.reverse().join(a3);
  } catch (e4) {
    return "<unknown>";
  }
}
function $e2(e3, t3) {
  const n3 = e3, r3 = [];
  if (!n3 || !n3.tagName)
    return "";
  if (Ve2.HTMLElement && n3 instanceof HTMLElement && n3.dataset) {
    if (n3.dataset.sentryComponent)
      return n3.dataset.sentryComponent;
    if (n3.dataset.sentryElement)
      return n3.dataset.sentryElement;
  }
  r3.push(n3.tagName.toLowerCase());
  const i3 = t3 && t3.length ? t3.filter((e4) => n3.getAttribute(e4)).map((e4) => [e4, n3.getAttribute(e4)]) : null;
  if (i3 && i3.length)
    i3.forEach((e4) => {
      r3.push(`[${e4[0]}="${e4[1]}"]`);
    });
  else {
    n3.id && r3.push(`#${n3.id}`);
    const e4 = n3.className;
    if (e4 && xe2(e4)) {
      const t4 = e4.split(/\s+/);
      for (const e5 of t4)
        r3.push(`.${e5}`);
    }
  }
  const o3 = ["aria-label", "type", "name", "title", "alt"];
  for (const e4 of o3) {
    const t4 = n3.getAttribute(e4);
    t4 && r3.push(`[${e4}="${t4}"]`);
  }
  return r3.join("");
}
function qe2(e3, t3 = 0) {
  return "string" != typeof e3 || 0 === t3 || e3.length <= t3 ? e3 : `${e3.slice(0, t3)}...`;
}
function ze2(e3, t3) {
  if (!Array.isArray(e3))
    return "";
  const n3 = [];
  for (let t4 = 0; t4 < e3.length; t4++) {
    const r3 = e3[t4];
    try {
      Ue2(r3) ? n3.push("[VueViewModel]") : n3.push(String(r3));
    } catch (e4) {
      n3.push("[value cannot be serialized]");
    }
  }
  return n3.join(t3);
}
function We2(e3, t3, n3 = false) {
  return !!xe2(e3) && (Ae2(t3, "RegExp") ? t3.test(e3) : !!xe2(t3) && (n3 ? e3 === t3 : e3.includes(t3)));
}
function He2(e3, t3 = [], n3 = false) {
  return t3.some((t4) => We2(e3, t4, n3));
}
function Ge2(e3, t3, n3) {
  if (!(t3 in e3))
    return;
  const r3 = e3[t3], i3 = n3(r3);
  "function" == typeof i3 && Ke2(i3, r3);
  try {
    e3[t3] = i3;
  } catch (n4) {
    oe2 && le2.log(`Failed to replace method "${t3}" in object`, e3);
  }
}
function Qe2(e3, t3, n3) {
  try {
    Object.defineProperty(e3, t3, { value: n3, writable: true, configurable: true });
  } catch (n4) {
    oe2 && le2.log(`Failed to add non-enumerable property "${t3}" to object`, e3);
  }
}
function Ke2(e3, t3) {
  try {
    const n3 = t3.prototype || {};
    e3.prototype = t3.prototype = n3, Qe2(e3, "__sentry_original__", t3);
  } catch (e4) {
  }
}
function Ye2(e3) {
  return e3.__sentry_original__;
}
function Xe2(e3) {
  if (Pe2(e3))
    return { message: e3.message, name: e3.name, stack: e3.stack, ...et2(e3) };
  if (Re2(e3)) {
    const t3 = { type: e3.type, target: Ze2(e3.target), currentTarget: Ze2(e3.currentTarget), ...et2(e3) };
    return "undefined" != typeof CustomEvent && Be2(e3, CustomEvent) && (t3.detail = e3.detail), t3;
  }
  return e3;
}
function Ze2(e3) {
  try {
    return t3 = e3, "undefined" != typeof Element && Be2(t3, Element) ? Je2(e3) : Object.prototype.toString.call(e3);
  } catch (e4) {
    return "<unknown>";
  }
  var t3;
}
function et2(e3) {
  if ("object" == typeof e3 && null !== e3) {
    const t3 = {};
    for (const n3 in e3)
      Object.prototype.hasOwnProperty.call(e3, n3) && (t3[n3] = e3[n3]);
    return t3;
  }
  return {};
}
function tt2(e3) {
  return nt2(e3, /* @__PURE__ */ new Map());
}
function nt2(e3, t3) {
  if (function(e4) {
    if (!Ne2(e4))
      return false;
    try {
      const t4 = Object.getPrototypeOf(e4).constructor.name;
      return !t4 || "Object" === t4;
    } catch (e5) {
      return true;
    }
  }(e3)) {
    const n3 = t3.get(e3);
    if (void 0 !== n3)
      return n3;
    const r3 = {};
    t3.set(e3, r3);
    for (const n4 of Object.getOwnPropertyNames(e3))
      void 0 !== e3[n4] && (r3[n4] = nt2(e3[n4], t3));
    return r3;
  }
  if (Array.isArray(e3)) {
    const n3 = t3.get(e3);
    if (void 0 !== n3)
      return n3;
    const r3 = [];
    return t3.set(e3, r3), e3.forEach((e4) => {
      r3.push(nt2(e4, t3));
    }), r3;
  }
  return e3;
}
function rt2() {
  return Date.now() / 1e3;
}
var it2 = function() {
  const { performance: e3 } = re2;
  if (!e3 || !e3.now)
    return rt2;
  const t3 = Date.now() - e3.now(), n3 = null == e3.timeOrigin ? t3 : e3.timeOrigin;
  return () => (n3 + e3.now()) / 1e3;
}();
function ot2() {
  const e3 = re2, t3 = e3.crypto || e3.msCrypto;
  let n3 = () => 16 * Math.random();
  try {
    if (t3 && t3.randomUUID)
      return t3.randomUUID().replace(/-/g, "");
    t3 && t3.getRandomValues && (n3 = () => {
      const e4 = new Uint8Array(1);
      return t3.getRandomValues(e4), e4[0];
    });
  } catch (e4) {
  }
  return ([1e7] + 1e3 + 4e3 + 8e3 + 1e11).replace(/[018]/g, (e4) => (e4 ^ (15 & n3()) >> e4 / 4).toString(16));
}
function st2(e3) {
  return e3.exception && e3.exception.values ? e3.exception.values[0] : void 0;
}
function at2(e3) {
  const { message: t3, event_id: n3 } = e3;
  if (t3)
    return t3;
  const r3 = st2(e3);
  return r3 ? r3.type && r3.value ? `${r3.type}: ${r3.value}` : r3.type || r3.value || n3 || "<unknown>" : n3 || "<unknown>";
}
function ct2(e3, t3, n3) {
  const r3 = e3.exception = e3.exception || {}, i3 = r3.values = r3.values || [], o3 = i3[0] = i3[0] || {};
  o3.value || (o3.value = t3 || ""), o3.type || (o3.type = n3 || "Error");
}
function lt2(e3, t3) {
  const n3 = st2(e3);
  if (!n3)
    return;
  const r3 = n3.mechanism;
  if (n3.mechanism = { type: "generic", handled: true, ...r3, ...t3 }, t3 && "data" in t3) {
    const e4 = { ...r3 && r3.data, ...t3.data };
    n3.mechanism.data = e4;
  }
}
function ut2(e3) {
  if (function(e4) {
    try {
      return e4.__sentry_captured__;
    } catch (e5) {
    }
  }(e3))
    return true;
  try {
    Qe2(e3, "__sentry_captured__", true);
  } catch (e4) {
  }
  return false;
}
var dt2;
function ht2(e3) {
  return new ft2((t3) => {
    t3(e3);
  });
}
function pt2(e3) {
  return new ft2((t3, n3) => {
    n3(e3);
  });
}
(() => {
  const { performance: e3 } = re2;
  if (!e3 || !e3.now)
    return;
  const t3 = 36e5, n3 = e3.now(), r3 = Date.now(), i3 = e3.timeOrigin ? Math.abs(e3.timeOrigin + n3 - r3) : t3, o3 = i3 < t3, s3 = e3.timing && e3.timing.navigationStart, a3 = "number" == typeof s3 ? Math.abs(s3 + n3 - r3) : t3;
  (o3 || a3 < t3) && (i3 <= a3 && e3.timeOrigin);
})(), function(e3) {
  e3[e3.PENDING = 0] = "PENDING";
  e3[e3.RESOLVED = 1] = "RESOLVED";
  e3[e3.REJECTED = 2] = "REJECTED";
}(dt2 || (dt2 = {}));
var ft2 = class _ft {
  constructor(e3) {
    _ft.prototype.__init.call(this), _ft.prototype.__init2.call(this), _ft.prototype.__init3.call(this), _ft.prototype.__init4.call(this), this._state = dt2.PENDING, this._handlers = [];
    try {
      e3(this._resolve, this._reject);
    } catch (e4) {
      this._reject(e4);
    }
  }
  then(e3, t3) {
    return new _ft((n3, r3) => {
      this._handlers.push([false, (t4) => {
        if (e3)
          try {
            n3(e3(t4));
          } catch (e4) {
            r3(e4);
          }
        else
          n3(t4);
      }, (e4) => {
        if (t3)
          try {
            n3(t3(e4));
          } catch (e5) {
            r3(e5);
          }
        else
          r3(e4);
      }]), this._executeHandlers();
    });
  }
  catch(e3) {
    return this.then((e4) => e4, e3);
  }
  finally(e3) {
    return new _ft((t3, n3) => {
      let r3, i3;
      return this.then((t4) => {
        i3 = false, r3 = t4, e3 && e3();
      }, (t4) => {
        i3 = true, r3 = t4, e3 && e3();
      }).then(() => {
        i3 ? n3(r3) : t3(r3);
      });
    });
  }
  __init() {
    this._resolve = (e3) => {
      this._setResult(dt2.RESOLVED, e3);
    };
  }
  __init2() {
    this._reject = (e3) => {
      this._setResult(dt2.REJECTED, e3);
    };
  }
  __init3() {
    this._setResult = (e3, t3) => {
      this._state === dt2.PENDING && (Fe2(t3) ? t3.then(this._resolve, this._reject) : (this._state = e3, this._value = t3, this._executeHandlers()));
    };
  }
  __init4() {
    this._executeHandlers = () => {
      if (this._state === dt2.PENDING)
        return;
      const e3 = this._handlers.slice();
      this._handlers = [], e3.forEach((e4) => {
        e4[0] || (this._state === dt2.RESOLVED && e4[1](this._value), this._state === dt2.REJECTED && e4[2](this._value), e4[0] = true);
      });
    };
  }
};
function vt2(e3) {
  const t3 = it2(), n3 = { sid: ot2(), init: true, timestamp: t3, started: t3, duration: 0, status: "ok", errors: 0, ignoreDuration: false, toJSON: () => function(e4) {
    return tt2({ sid: `${e4.sid}`, init: e4.init, started: new Date(1e3 * e4.started).toISOString(), timestamp: new Date(1e3 * e4.timestamp).toISOString(), status: e4.status, errors: e4.errors, did: "number" == typeof e4.did || "string" == typeof e4.did ? `${e4.did}` : void 0, duration: e4.duration, abnormal_mechanism: e4.abnormal_mechanism, attrs: { release: e4.release, environment: e4.environment, ip_address: e4.ipAddress, user_agent: e4.userAgent } });
  }(n3) };
  return e3 && gt2(n3, e3), n3;
}
function gt2(e3, t3 = {}) {
  if (t3.user && (!e3.ipAddress && t3.user.ip_address && (e3.ipAddress = t3.user.ip_address), e3.did || t3.did || (e3.did = t3.user.id || t3.user.email || t3.user.username)), e3.timestamp = t3.timestamp || it2(), t3.abnormal_mechanism && (e3.abnormal_mechanism = t3.abnormal_mechanism), t3.ignoreDuration && (e3.ignoreDuration = t3.ignoreDuration), t3.sid && (e3.sid = 32 === t3.sid.length ? t3.sid : ot2()), void 0 !== t3.init && (e3.init = t3.init), !e3.did && t3.did && (e3.did = `${t3.did}`), "number" == typeof t3.started && (e3.started = t3.started), e3.ignoreDuration)
    e3.duration = void 0;
  else if ("number" == typeof t3.duration)
    e3.duration = t3.duration;
  else {
    const t4 = e3.timestamp - e3.started;
    e3.duration = t4 >= 0 ? t4 : 0;
  }
  t3.release && (e3.release = t3.release), t3.environment && (e3.environment = t3.environment), !e3.ipAddress && t3.ipAddress && (e3.ipAddress = t3.ipAddress), !e3.userAgent && t3.userAgent && (e3.userAgent = t3.userAgent), "number" == typeof t3.errors && (e3.errors = t3.errors), t3.status && (e3.status = t3.status);
}
function mt2() {
  return ot2();
}
function yt2() {
  return ot2().substring(16);
}
function bt2(e3, t3, n3 = 2) {
  if (!t3 || "object" != typeof t3 || n3 <= 0)
    return t3;
  if (e3 && t3 && 0 === Object.keys(t3).length)
    return e3;
  const r3 = { ...e3 };
  for (const e4 in t3)
    Object.prototype.hasOwnProperty.call(t3, e4) && (r3[e4] = bt2(r3[e4], t3[e4], n3 - 1));
  return r3;
}
var _t2 = "_sentrySpan";
function wt2(e3, t3) {
  t3 ? Qe2(e3, _t2, t3) : delete e3[_t2];
}
function St2(e3) {
  return e3[_t2];
}
var kt2 = class _kt {
  constructor() {
    this._notifyingListeners = false, this._scopeListeners = [], this._eventProcessors = [], this._breadcrumbs = [], this._attachments = [], this._user = {}, this._tags = {}, this._extra = {}, this._contexts = {}, this._sdkProcessingMetadata = {}, this._propagationContext = { traceId: mt2(), spanId: yt2() };
  }
  clone() {
    const e3 = new _kt();
    return e3._breadcrumbs = [...this._breadcrumbs], e3._tags = { ...this._tags }, e3._extra = { ...this._extra }, e3._contexts = { ...this._contexts }, this._contexts.flags && (e3._contexts.flags = { values: [...this._contexts.flags.values] }), e3._user = this._user, e3._level = this._level, e3._session = this._session, e3._transactionName = this._transactionName, e3._fingerprint = this._fingerprint, e3._eventProcessors = [...this._eventProcessors], e3._requestSession = this._requestSession, e3._attachments = [...this._attachments], e3._sdkProcessingMetadata = { ...this._sdkProcessingMetadata }, e3._propagationContext = { ...this._propagationContext }, e3._client = this._client, e3._lastEventId = this._lastEventId, wt2(e3, St2(this)), e3;
  }
  setClient(e3) {
    this._client = e3;
  }
  setLastEventId(e3) {
    this._lastEventId = e3;
  }
  getClient() {
    return this._client;
  }
  lastEventId() {
    return this._lastEventId;
  }
  addScopeListener(e3) {
    this._scopeListeners.push(e3);
  }
  addEventProcessor(e3) {
    return this._eventProcessors.push(e3), this;
  }
  setUser(e3) {
    return this._user = e3 || { email: void 0, id: void 0, ip_address: void 0, username: void 0 }, this._session && gt2(this._session, { user: e3 }), this._notifyScopeListeners(), this;
  }
  getUser() {
    return this._user;
  }
  getRequestSession() {
    return this._requestSession;
  }
  setRequestSession(e3) {
    return this._requestSession = e3, this;
  }
  setTags(e3) {
    return this._tags = { ...this._tags, ...e3 }, this._notifyScopeListeners(), this;
  }
  setTag(e3, t3) {
    return this._tags = { ...this._tags, [e3]: t3 }, this._notifyScopeListeners(), this;
  }
  setExtras(e3) {
    return this._extra = { ...this._extra, ...e3 }, this._notifyScopeListeners(), this;
  }
  setExtra(e3, t3) {
    return this._extra = { ...this._extra, [e3]: t3 }, this._notifyScopeListeners(), this;
  }
  setFingerprint(e3) {
    return this._fingerprint = e3, this._notifyScopeListeners(), this;
  }
  setLevel(e3) {
    return this._level = e3, this._notifyScopeListeners(), this;
  }
  setTransactionName(e3) {
    return this._transactionName = e3, this._notifyScopeListeners(), this;
  }
  setContext(e3, t3) {
    return null === t3 ? delete this._contexts[e3] : this._contexts[e3] = t3, this._notifyScopeListeners(), this;
  }
  setSession(e3) {
    return e3 ? this._session = e3 : delete this._session, this._notifyScopeListeners(), this;
  }
  getSession() {
    return this._session;
  }
  update(e3) {
    if (!e3)
      return this;
    const t3 = "function" == typeof e3 ? e3(this) : e3, [n3, r3] = t3 instanceof Mt2 ? [t3.getScopeData(), t3.getRequestSession()] : Ne2(t3) ? [e3, e3.requestSession] : [], { tags: i3, extra: o3, user: s3, contexts: a3, level: c3, fingerprint: l3 = [], propagationContext: u3 } = n3 || {};
    return this._tags = { ...this._tags, ...i3 }, this._extra = { ...this._extra, ...o3 }, this._contexts = { ...this._contexts, ...a3 }, s3 && Object.keys(s3).length && (this._user = s3), c3 && (this._level = c3), l3.length && (this._fingerprint = l3), u3 && (this._propagationContext = u3), r3 && (this._requestSession = r3), this;
  }
  clear() {
    return this._breadcrumbs = [], this._tags = {}, this._extra = {}, this._user = {}, this._contexts = {}, this._level = void 0, this._transactionName = void 0, this._fingerprint = void 0, this._requestSession = void 0, this._session = void 0, wt2(this, void 0), this._attachments = [], this.setPropagationContext({ traceId: mt2() }), this._notifyScopeListeners(), this;
  }
  addBreadcrumb(e3, t3) {
    const n3 = "number" == typeof t3 ? t3 : 100;
    if (n3 <= 0)
      return this;
    const r3 = { timestamp: rt2(), ...e3 };
    return this._breadcrumbs.push(r3), this._breadcrumbs.length > n3 && (this._breadcrumbs = this._breadcrumbs.slice(-n3), this._client && this._client.recordDroppedEvent("buffer_overflow", "log_item")), this._notifyScopeListeners(), this;
  }
  getLastBreadcrumb() {
    return this._breadcrumbs[this._breadcrumbs.length - 1];
  }
  clearBreadcrumbs() {
    return this._breadcrumbs = [], this._notifyScopeListeners(), this;
  }
  addAttachment(e3) {
    return this._attachments.push(e3), this;
  }
  clearAttachments() {
    return this._attachments = [], this;
  }
  getScopeData() {
    return { breadcrumbs: this._breadcrumbs, attachments: this._attachments, contexts: this._contexts, tags: this._tags, extra: this._extra, user: this._user, level: this._level, fingerprint: this._fingerprint || [], eventProcessors: this._eventProcessors, propagationContext: this._propagationContext, sdkProcessingMetadata: this._sdkProcessingMetadata, transactionName: this._transactionName, span: St2(this) };
  }
  setSDKProcessingMetadata(e3) {
    return this._sdkProcessingMetadata = bt2(this._sdkProcessingMetadata, e3, 2), this;
  }
  setPropagationContext(e3) {
    return this._propagationContext = { spanId: yt2(), ...e3 }, this;
  }
  getPropagationContext() {
    return this._propagationContext;
  }
  captureException(e3, t3) {
    const n3 = t3 && t3.event_id ? t3.event_id : ot2();
    if (!this._client)
      return le2.warn("No client configured on scope - will not capture exception!"), n3;
    const r3 = new Error("Sentry syntheticException");
    return this._client.captureException(e3, { originalException: e3, syntheticException: r3, ...t3, event_id: n3 }, this), n3;
  }
  captureMessage(e3, t3, n3) {
    const r3 = n3 && n3.event_id ? n3.event_id : ot2();
    if (!this._client)
      return le2.warn("No client configured on scope - will not capture message!"), r3;
    const i3 = new Error(e3);
    return this._client.captureMessage(e3, t3, { originalException: e3, syntheticException: i3, ...n3, event_id: r3 }, this), r3;
  }
  captureEvent(e3, t3) {
    const n3 = t3 && t3.event_id ? t3.event_id : ot2();
    return this._client ? (this._client.captureEvent(e3, { ...t3, event_id: n3 }, this), n3) : (le2.warn("No client configured on scope - will not capture event!"), n3);
  }
  _notifyScopeListeners() {
    this._notifyingListeners || (this._notifyingListeners = true, this._scopeListeners.forEach((e3) => {
      e3(this);
    }), this._notifyingListeners = false);
  }
};
var Mt2 = kt2;
var Ct2 = class {
  constructor(e3, t3) {
    let n3, r3;
    n3 = e3 || new Mt2(), r3 = t3 || new Mt2(), this._stack = [{ scope: n3 }], this._isolationScope = r3;
  }
  withScope(e3) {
    const t3 = this._pushScope();
    let n3;
    try {
      n3 = e3(t3);
    } catch (e4) {
      throw this._popScope(), e4;
    }
    return Fe2(n3) ? n3.then((e4) => (this._popScope(), e4), (e4) => {
      throw this._popScope(), e4;
    }) : (this._popScope(), n3);
  }
  getClient() {
    return this.getStackTop().client;
  }
  getScope() {
    return this.getStackTop().scope;
  }
  getIsolationScope() {
    return this._isolationScope;
  }
  getStackTop() {
    return this._stack[this._stack.length - 1];
  }
  _pushScope() {
    const e3 = this.getScope().clone();
    return this._stack.push({ client: this.getClient(), scope: e3 }), e3;
  }
  _popScope() {
    return !(this._stack.length <= 1) && !!this._stack.pop();
  }
};
function Et2() {
  const e3 = Te2(Ee2());
  return e3.stack = e3.stack || new Ct2(ie2("defaultCurrentScope", () => new Mt2()), ie2("defaultIsolationScope", () => new Mt2()));
}
function Tt2(e3) {
  return Et2().withScope(e3);
}
function Ot2(e3, t3) {
  const n3 = Et2();
  return n3.withScope(() => (n3.getStackTop().scope = e3, t3(e3)));
}
function Pt2(e3) {
  return Et2().withScope(() => e3(Et2().getIsolationScope()));
}
function At2(e3) {
  const t3 = Te2(e3);
  return t3.acs ? t3.acs : { withIsolationScope: Pt2, withScope: Tt2, withSetScope: Ot2, withSetIsolationScope: (e4, t4) => Pt2(t4), getCurrentScope: () => Et2().getScope(), getIsolationScope: () => Et2().getIsolationScope() };
}
function jt2() {
  return At2(Ee2()).getCurrentScope();
}
function It2() {
  return At2(Ee2()).getIsolationScope();
}
function xt2() {
  return jt2().getClient();
}
function Lt2(e3) {
  const t3 = e3.getPropagationContext(), { traceId: n3, spanId: r3, parentSpanId: i3 } = t3;
  return tt2({ trace_id: n3, span_id: r3, parent_span_id: i3 });
}
function Dt2(e3) {
  const t3 = e3._sentryMetrics;
  if (!t3)
    return;
  const n3 = {};
  for (const [, [e4, r3]] of t3) {
    (n3[e4] || (n3[e4] = [])).push(tt2(r3));
  }
  return n3;
}
var Nt2 = /^sentry-/;
function Rt2(e3) {
  const t3 = function(e4) {
    if (!e4 || !xe2(e4) && !Array.isArray(e4))
      return;
    if (Array.isArray(e4))
      return e4.reduce((e5, t4) => {
        const n4 = Ft2(t4);
        return Object.entries(n4).forEach(([t5, n5]) => {
          e5[t5] = n5;
        }), e5;
      }, {});
    return Ft2(e4);
  }(e3);
  if (!t3)
    return;
  const n3 = Object.entries(t3).reduce((e4, [t4, n4]) => {
    if (t4.match(Nt2)) {
      e4[t4.slice(7)] = n4;
    }
    return e4;
  }, {});
  return Object.keys(n3).length > 0 ? n3 : void 0;
}
function Ft2(e3) {
  return e3.split(",").map((e4) => e4.split("=").map((e5) => decodeURIComponent(e5.trim()))).reduce((e4, [t3, n3]) => (t3 && n3 && (e4[t3] = n3), e4), {});
}
var Bt2 = false;
function Ut2(e3) {
  const { spanId: t3, traceId: n3, isRemote: r3 } = e3.spanContext();
  return tt2({ parent_span_id: r3 ? t3 : $t2(e3).parent_span_id, span_id: r3 ? yt2() : t3, trace_id: n3 });
}
function Vt2(e3) {
  return "number" == typeof e3 ? Jt2(e3) : Array.isArray(e3) ? e3[0] + e3[1] / 1e9 : e3 instanceof Date ? Jt2(e3.getTime()) : it2();
}
function Jt2(e3) {
  return e3 > 9999999999 ? e3 / 1e3 : e3;
}
function $t2(e3) {
  if (function(e4) {
    return "function" == typeof e4.getSpanJSON;
  }(e3))
    return e3.getSpanJSON();
  try {
    const { spanId: t3, traceId: n3 } = e3.spanContext();
    if (function(e4) {
      const t4 = e4;
      return !!(t4.attributes && t4.startTime && t4.name && t4.endTime && t4.status);
    }(e3)) {
      const { attributes: r3, startTime: i3, name: o3, endTime: s3, parentSpanId: a3, status: c3 } = e3;
      return tt2({ span_id: t3, trace_id: n3, data: r3, description: o3, parent_span_id: a3, start_timestamp: Vt2(i3), timestamp: Vt2(s3) || void 0, status: qt2(c3), op: r3["sentry.op"], origin: r3["sentry.origin"], _metrics_summary: Dt2(e3) });
    }
    return { span_id: t3, trace_id: n3 };
  } catch (e4) {
    return {};
  }
}
function qt2(e3) {
  if (e3 && 0 !== e3.code)
    return 1 === e3.code ? "ok" : e3.message || "unknown_error";
}
function zt2(e3) {
  return e3._sentryRootSpan || e3;
}
function Wt2() {
  Bt2 || (ce2(() => {
    console.warn("[Sentry] Deprecation warning: Returning null from `beforeSendSpan` will be disallowed from SDK version 9.0.0 onwards. The callback will only support mutating spans. To drop certain spans, configure the respective integrations directly.");
  }), Bt2 = true);
}
var Ht2 = "production";
function Gt2(e3, t3) {
  const n3 = t3.getOptions(), { publicKey: r3 } = t3.getDsn() || {}, i3 = tt2({ environment: n3.environment || Ht2, release: n3.release, public_key: r3, trace_id: e3 });
  return t3.emit("createDsc", i3), i3;
}
function Qt2(e3) {
  const t3 = xt2();
  if (!t3)
    return {};
  const n3 = zt2(e3), r3 = n3._frozenDsc;
  if (r3)
    return r3;
  const i3 = n3.spanContext().traceState, o3 = i3 && i3.get("sentry.dsc"), s3 = o3 && Rt2(o3);
  if (s3)
    return s3;
  const a3 = Gt2(e3.spanContext().traceId, t3), c3 = $t2(n3), l3 = c3.data || {}, u3 = l3["sentry.sample_rate"];
  null != u3 && (a3.sample_rate = `${u3}`);
  const d3 = l3["sentry.source"], h3 = c3.description;
  return "url" !== d3 && h3 && (a3.transaction = h3), function(e4) {
    if ("boolean" == typeof __SENTRY_TRACING__ && !__SENTRY_TRACING__)
      return false;
    const t4 = xt2(), n4 = e4 || t4 && t4.getOptions();
    return !!n4 && (n4.enableTracing || "tracesSampleRate" in n4 || "tracesSampler" in n4);
  }() && (a3.sampled = String(function(e4) {
    const { traceFlags: t4 } = e4.spanContext();
    return 1 === t4;
  }(n3))), t3.emit("createDsc", a3, n3), a3;
}
var Kt2 = /^(?:(\w+):)\/\/(?:(\w+)(?::(\w+)?)?@)([\w.-]+)(?::(\d+))?\/(.+)/;
function Yt2(e3, t3 = false) {
  const { host: n3, path: r3, pass: i3, port: o3, projectId: s3, protocol: a3, publicKey: c3 } = e3;
  return `${a3}://${c3}${t3 && i3 ? `:${i3}` : ""}@${n3}${o3 ? `:${o3}` : ""}/${r3 ? `${r3}/` : r3}${s3}`;
}
function Xt2(e3) {
  return { protocol: e3.protocol, publicKey: e3.publicKey || "", pass: e3.pass || "", host: e3.host, port: e3.port || "", path: e3.path || "", projectId: e3.projectId };
}
function Zt2(e3) {
  const t3 = "string" == typeof e3 ? function(e4) {
    const t4 = Kt2.exec(e4);
    if (!t4)
      return void ce2(() => {
        console.error(`Invalid Sentry Dsn: ${e4}`);
      });
    const [n3, r3, i3 = "", o3 = "", s3 = "", a3 = ""] = t4.slice(1);
    let c3 = "", l3 = a3;
    const u3 = l3.split("/");
    if (u3.length > 1 && (c3 = u3.slice(0, -1).join("/"), l3 = u3.pop()), l3) {
      const e5 = l3.match(/^\d+/);
      e5 && (l3 = e5[0]);
    }
    return Xt2({ host: o3, pass: i3, path: c3, projectId: l3, port: s3, protocol: n3, publicKey: r3 });
  }(e3) : Xt2(e3);
  if (t3 && function(e4) {
    if (!oe2)
      return true;
    const { port: t4, projectId: n3, protocol: r3 } = e4;
    return !(["protocol", "publicKey", "host", "projectId"].find((t5) => !e4[t5] && (le2.error(`Invalid Sentry Dsn: ${t5} missing`), true)) || (n3.match(/^\d+$/) ? function(e5) {
      return "http" === e5 || "https" === e5;
    }(r3) ? t4 && isNaN(parseInt(t4, 10)) && (le2.error(`Invalid Sentry Dsn: Invalid port ${t4}`), 1) : (le2.error(`Invalid Sentry Dsn: Invalid protocol ${r3}`), 1) : (le2.error(`Invalid Sentry Dsn: Invalid projectId ${n3}`), 1)));
  }(t3))
    return t3;
}
function en2(e3, t3 = 100, n3 = 1 / 0) {
  try {
    return nn2("", e3, t3, n3);
  } catch (e4) {
    return { ERROR: `**non-serializable** (${e4})` };
  }
}
function tn2(e3, t3 = 3, n3 = 102400) {
  const r3 = en2(e3, t3);
  return i3 = r3, function(e4) {
    return ~-encodeURI(e4).split(/%..|./).length;
  }(JSON.stringify(i3)) > n3 ? tn2(e3, t3 - 1, n3) : r3;
  var i3;
}
function nn2(e3, t3, n3 = 1 / 0, r3 = 1 / 0, i3 = function() {
  const e4 = "function" == typeof WeakSet, t4 = e4 ? /* @__PURE__ */ new WeakSet() : [];
  return [function(n4) {
    if (e4)
      return !!t4.has(n4) || (t4.add(n4), false);
    for (let e5 = 0; e5 < t4.length; e5++)
      if (t4[e5] === n4)
        return true;
    return t4.push(n4), false;
  }, function(n4) {
    if (e4)
      t4.delete(n4);
    else
      for (let e5 = 0; e5 < t4.length; e5++)
        if (t4[e5] === n4) {
          t4.splice(e5, 1);
          break;
        }
  }];
}()) {
  const [o3, s3] = i3;
  if (null == t3 || ["boolean", "string"].includes(typeof t3) || "number" == typeof t3 && Number.isFinite(t3))
    return t3;
  const a3 = function(e4, t4) {
    try {
      if ("domain" === e4 && t4 && "object" == typeof t4 && t4._events)
        return "[Domain]";
      if ("domainEmitter" === e4)
        return "[DomainEmitter]";
      if ("undefined" != typeof global && t4 === global)
        return "[Global]";
      if ("undefined" != typeof window && t4 === window)
        return "[Window]";
      if ("undefined" != typeof document && t4 === document)
        return "[Document]";
      if (Ue2(t4))
        return "[VueViewModel]";
      if (Ne2(n4 = t4) && "nativeEvent" in n4 && "preventDefault" in n4 && "stopPropagation" in n4)
        return "[SyntheticEvent]";
      if ("number" == typeof t4 && !Number.isFinite(t4))
        return `[${t4}]`;
      if ("function" == typeof t4)
        return `[Function: ${ve2(t4)}]`;
      if ("symbol" == typeof t4)
        return `[${String(t4)}]`;
      if ("bigint" == typeof t4)
        return `[BigInt: ${String(t4)}]`;
      const r4 = function(e5) {
        const t5 = Object.getPrototypeOf(e5);
        return t5 ? t5.constructor.name : "null prototype";
      }(t4);
      return /^HTML(\w*)Element$/.test(r4) ? `[HTMLElement: ${r4}]` : `[object ${r4}]`;
    } catch (e5) {
      return `**non-serializable** (${e5})`;
    }
    var n4;
  }(e3, t3);
  if (!a3.startsWith("[object "))
    return a3;
  if (t3.__sentry_skip_normalization__)
    return t3;
  const c3 = "number" == typeof t3.__sentry_override_normalization_depth__ ? t3.__sentry_override_normalization_depth__ : n3;
  if (0 === c3)
    return a3.replace("object ", "");
  if (o3(t3))
    return "[Circular ~]";
  const l3 = t3;
  if (l3 && "function" == typeof l3.toJSON)
    try {
      return nn2("", l3.toJSON(), c3 - 1, r3, i3);
    } catch (e4) {
    }
  const u3 = Array.isArray(t3) ? [] : {};
  let d3 = 0;
  const h3 = Xe2(t3);
  for (const e4 in h3) {
    if (!Object.prototype.hasOwnProperty.call(h3, e4))
      continue;
    if (d3 >= r3) {
      u3[e4] = "[MaxProperties ~]";
      break;
    }
    const t4 = h3[e4];
    u3[e4] = nn2(e4, t4, c3 - 1, r3, i3), d3++;
  }
  return s3(t3), u3;
}
function rn2(e3, t3 = []) {
  return [e3, t3];
}
function on2(e3, t3) {
  const [n3, r3] = e3;
  return [n3, [...r3, t3]];
}
function sn2(e3, t3) {
  const n3 = e3[1];
  for (const e4 of n3) {
    if (t3(e4, e4[0].type))
      return true;
  }
  return false;
}
function an2(e3) {
  return re2.__SENTRY__ && re2.__SENTRY__.encodePolyfill ? re2.__SENTRY__.encodePolyfill(e3) : new TextEncoder().encode(e3);
}
function cn2(e3) {
  const [t3, n3] = e3;
  let r3 = JSON.stringify(t3);
  function i3(e4) {
    "string" == typeof r3 ? r3 = "string" == typeof e4 ? r3 + e4 : [an2(r3), e4] : r3.push("string" == typeof e4 ? an2(e4) : e4);
  }
  for (const e4 of n3) {
    const [t4, n4] = e4;
    if (i3(`
${JSON.stringify(t4)}
`), "string" == typeof n4 || n4 instanceof Uint8Array)
      i3(n4);
    else {
      let e5;
      try {
        e5 = JSON.stringify(n4);
      } catch (t5) {
        e5 = JSON.stringify(en2(n4));
      }
      i3(e5);
    }
  }
  return "string" == typeof r3 ? r3 : function(e4) {
    const t4 = e4.reduce((e5, t5) => e5 + t5.length, 0), n4 = new Uint8Array(t4);
    let r4 = 0;
    for (const t5 of e4)
      n4.set(t5, r4), r4 += t5.length;
    return n4;
  }(r3);
}
function ln2(e3) {
  const t3 = "string" == typeof e3.data ? an2(e3.data) : e3.data;
  return [tt2({ type: "attachment", length: t3.length, filename: e3.filename, content_type: e3.contentType, attachment_type: e3.attachmentType }), t3];
}
var un2 = { session: "session", sessions: "session", attachment: "attachment", transaction: "transaction", event: "error", client_report: "internal", user_report: "default", profile: "profile", profile_chunk: "profile", replay_event: "replay", replay_recording: "replay", check_in: "monitor", feedback: "feedback", span: "span", statsd: "metric_bucket", raw_security: "security" };
function dn2(e3) {
  return un2[e3];
}
function hn2(e3) {
  if (!e3 || !e3.sdk)
    return;
  const { name: t3, version: n3 } = e3.sdk;
  return { name: t3, version: n3 };
}
function pn2(e3, t3, n3, r3) {
  const i3 = hn2(n3), o3 = e3.type && "replay_event" !== e3.type ? e3.type : "event";
  !function(e4, t4) {
    t4 && (e4.sdk = e4.sdk || {}, e4.sdk.name = e4.sdk.name || t4.name, e4.sdk.version = e4.sdk.version || t4.version, e4.sdk.integrations = [...e4.sdk.integrations || [], ...t4.integrations || []], e4.sdk.packages = [...e4.sdk.packages || [], ...t4.packages || []]);
  }(e3, n3 && n3.sdk);
  const s3 = function(e4, t4, n4, r4) {
    const i4 = e4.sdkProcessingMetadata && e4.sdkProcessingMetadata.dynamicSamplingContext;
    return { event_id: e4.event_id, sent_at: (/* @__PURE__ */ new Date()).toISOString(), ...t4 && { sdk: t4 }, ...!!n4 && r4 && { dsn: Yt2(r4) }, ...i4 && { trace: tt2({ ...i4 }) } };
  }(e3, i3, r3, t3);
  delete e3.sdkProcessingMetadata;
  return rn2(s3, [[{ type: o3 }, e3]]);
}
function fn2(e3, t3, n3, r3 = 0) {
  return new ft2((i3, o3) => {
    const s3 = e3[r3];
    if (null === t3 || "function" != typeof s3)
      i3(t3);
    else {
      const a3 = s3({ ...t3 }, n3);
      te2 && s3.id && null === a3 && le2.log(`Event processor "${s3.id}" dropped event`), Fe2(a3) ? a3.then((t4) => fn2(e3, t4, n3, r3 + 1).then(i3)).then(null, o3) : fn2(e3, a3, n3, r3 + 1).then(i3).then(null, o3);
    }
  });
}
var vn2;
var gn2;
var mn2;
function yn2(e3, t3) {
  const { fingerprint: n3, span: r3, breadcrumbs: i3, sdkProcessingMetadata: o3 } = t3;
  !function(e4, t4) {
    const { extra: n4, tags: r4, user: i4, contexts: o4, level: s3, transactionName: a3 } = t4, c3 = tt2(n4);
    c3 && Object.keys(c3).length && (e4.extra = { ...c3, ...e4.extra });
    const l3 = tt2(r4);
    l3 && Object.keys(l3).length && (e4.tags = { ...l3, ...e4.tags });
    const u3 = tt2(i4);
    u3 && Object.keys(u3).length && (e4.user = { ...u3, ...e4.user });
    const d3 = tt2(o4);
    d3 && Object.keys(d3).length && (e4.contexts = { ...d3, ...e4.contexts });
    s3 && (e4.level = s3);
    a3 && "transaction" !== e4.type && (e4.transaction = a3);
  }(e3, t3), r3 && function(e4, t4) {
    e4.contexts = { trace: Ut2(t4), ...e4.contexts }, e4.sdkProcessingMetadata = { dynamicSamplingContext: Qt2(t4), ...e4.sdkProcessingMetadata };
    const n4 = zt2(t4), r4 = $t2(n4).description;
    r4 && !e4.transaction && "transaction" === e4.type && (e4.transaction = r4);
  }(e3, r3), function(e4, t4) {
    e4.fingerprint = e4.fingerprint ? Array.isArray(e4.fingerprint) ? e4.fingerprint : [e4.fingerprint] : [], t4 && (e4.fingerprint = e4.fingerprint.concat(t4));
    e4.fingerprint && !e4.fingerprint.length && delete e4.fingerprint;
  }(e3, n3), function(e4, t4) {
    const n4 = [...e4.breadcrumbs || [], ...t4];
    e4.breadcrumbs = n4.length ? n4 : void 0;
  }(e3, i3), function(e4, t4) {
    e4.sdkProcessingMetadata = { ...e4.sdkProcessingMetadata, ...t4 };
  }(e3, o3);
}
function bn2(e3, t3) {
  const { extra: n3, tags: r3, user: i3, contexts: o3, level: s3, sdkProcessingMetadata: a3, breadcrumbs: c3, fingerprint: l3, eventProcessors: u3, attachments: d3, propagationContext: h3, transactionName: p3, span: f3 } = t3;
  _n2(e3, "extra", n3), _n2(e3, "tags", r3), _n2(e3, "user", i3), _n2(e3, "contexts", o3), e3.sdkProcessingMetadata = bt2(e3.sdkProcessingMetadata, a3, 2), s3 && (e3.level = s3), p3 && (e3.transactionName = p3), f3 && (e3.span = f3), c3.length && (e3.breadcrumbs = [...e3.breadcrumbs, ...c3]), l3.length && (e3.fingerprint = [...e3.fingerprint, ...l3]), u3.length && (e3.eventProcessors = [...e3.eventProcessors, ...u3]), d3.length && (e3.attachments = [...e3.attachments, ...d3]), e3.propagationContext = { ...e3.propagationContext, ...h3 };
}
function _n2(e3, t3, n3) {
  e3[t3] = bt2(e3[t3], n3, 1);
}
function wn2(e3, t3, n3, r3, i3, o3) {
  const { normalizeDepth: s3 = 3, normalizeMaxBreadth: a3 = 1e3 } = e3, c3 = { ...t3, event_id: t3.event_id || n3.event_id || ot2(), timestamp: t3.timestamp || rt2() }, l3 = n3.integrations || e3.integrations.map((e4) => e4.name);
  !function(e4, t4) {
    const { environment: n4, release: r4, dist: i4, maxValueLength: o4 = 250 } = t4;
    e4.environment = e4.environment || n4 || Ht2, !e4.release && r4 && (e4.release = r4);
    !e4.dist && i4 && (e4.dist = i4);
    e4.message && (e4.message = qe2(e4.message, o4));
    const s4 = e4.exception && e4.exception.values && e4.exception.values[0];
    s4 && s4.value && (s4.value = qe2(s4.value, o4));
    const a4 = e4.request;
    a4 && a4.url && (a4.url = qe2(a4.url, o4));
  }(c3, e3), function(e4, t4) {
    t4.length > 0 && (e4.sdk = e4.sdk || {}, e4.sdk.integrations = [...e4.sdk.integrations || [], ...t4]);
  }(c3, l3), i3 && i3.emit("applyFrameMetadata", t3), void 0 === t3.type && function(e4, t4) {
    const n4 = function(e5) {
      const t5 = re2._sentryDebugIds;
      if (!t5)
        return {};
      const n5 = Object.keys(t5);
      return mn2 && n5.length === gn2 || (gn2 = n5.length, mn2 = n5.reduce((n6, r4) => {
        vn2 || (vn2 = {});
        const i4 = vn2[r4];
        if (i4)
          n6[i4[0]] = i4[1];
        else {
          const i5 = e5(r4);
          for (let e6 = i5.length - 1; e6 >= 0; e6--) {
            const o4 = i5[e6], s4 = o4 && o4.filename, a4 = t5[r4];
            if (s4 && a4) {
              n6[s4] = a4, vn2[r4] = [s4, a4];
              break;
            }
          }
        }
        return n6;
      }, {})), mn2;
    }(t4);
    try {
      e4.exception.values.forEach((e5) => {
        e5.stacktrace.frames.forEach((e6) => {
          n4 && e6.filename && (e6.debug_id = n4[e6.filename]);
        });
      });
    } catch (e5) {
    }
  }(c3, e3.stackParser);
  const u3 = function(e4, t4) {
    if (!t4)
      return e4;
    const n4 = e4 ? e4.clone() : new Mt2();
    return n4.update(t4), n4;
  }(r3, n3.captureContext);
  n3.mechanism && lt2(c3, n3.mechanism);
  const d3 = i3 ? i3.getEventProcessors() : [], h3 = ie2("globalScope", () => new Mt2()).getScopeData();
  if (o3) {
    bn2(h3, o3.getScopeData());
  }
  if (u3) {
    bn2(h3, u3.getScopeData());
  }
  const p3 = [...n3.attachments || [], ...h3.attachments];
  p3.length && (n3.attachments = p3), yn2(c3, h3);
  return fn2([...d3, ...h3.eventProcessors], c3, n3).then((e4) => (e4 && function(e5) {
    const t4 = {};
    try {
      e5.exception.values.forEach((e6) => {
        e6.stacktrace.frames.forEach((e7) => {
          e7.debug_id && (e7.abs_path ? t4[e7.abs_path] = e7.debug_id : e7.filename && (t4[e7.filename] = e7.debug_id), delete e7.debug_id);
        });
      });
    } catch (e6) {
    }
    if (0 === Object.keys(t4).length)
      return;
    e5.debug_meta = e5.debug_meta || {}, e5.debug_meta.images = e5.debug_meta.images || [];
    const n4 = e5.debug_meta.images;
    Object.entries(t4).forEach(([e6, t5]) => {
      n4.push({ type: "sourcemap", code_file: e6, debug_id: t5 });
    });
  }(e4), "number" == typeof s3 && s3 > 0 ? function(e5, t4, n4) {
    if (!e5)
      return null;
    const r4 = { ...e5, ...e5.breadcrumbs && { breadcrumbs: e5.breadcrumbs.map((e6) => ({ ...e6, ...e6.data && { data: en2(e6.data, t4, n4) } })) }, ...e5.user && { user: en2(e5.user, t4, n4) }, ...e5.contexts && { contexts: en2(e5.contexts, t4, n4) }, ...e5.extra && { extra: en2(e5.extra, t4, n4) } };
    e5.contexts && e5.contexts.trace && r4.contexts && (r4.contexts.trace = e5.contexts.trace, e5.contexts.trace.data && (r4.contexts.trace.data = en2(e5.contexts.trace.data, t4, n4)));
    e5.spans && (r4.spans = e5.spans.map((e6) => ({ ...e6, ...e6.data && { data: en2(e6.data, t4, n4) } })));
    e5.contexts && e5.contexts.flags && r4.contexts && (r4.contexts.flags = en2(e5.contexts.flags, 3, n4));
    return r4;
  }(e4, s3, a3) : e4));
}
function Sn2(e3) {
  if (e3)
    return function(e4) {
      return e4 instanceof Mt2 || "function" == typeof e4;
    }(e3) || function(e4) {
      return Object.keys(e4).some((e5) => kn2.includes(e5));
    }(e3) ? { captureContext: e3 } : e3;
}
var kn2 = ["user", "level", "extra", "contexts", "tags", "fingerprint", "requestSession", "propagationContext"];
function Mn2(e3, t3) {
  return jt2().captureEvent(e3, t3);
}
function Cn2(e3) {
  const t3 = xt2(), n3 = It2(), r3 = jt2(), { release: i3, environment: o3 = Ht2 } = t3 && t3.getOptions() || {}, { userAgent: s3 } = re2.navigator || {}, a3 = vt2({ release: i3, environment: o3, user: r3.getUser() || n3.getUser(), ...s3 && { userAgent: s3 }, ...e3 }), c3 = n3.getSession();
  return c3 && "ok" === c3.status && gt2(c3, { status: "exited" }), En2(), n3.setSession(a3), r3.setSession(a3), a3;
}
function En2() {
  const e3 = It2(), t3 = jt2(), n3 = t3.getSession() || e3.getSession();
  n3 && function(e4, t4) {
    let n4 = {};
    t4 ? n4 = { status: t4 } : "ok" === e4.status && (n4 = { status: "exited" }), gt2(e4, n4);
  }(n3), Tn2(), e3.setSession(), t3.setSession();
}
function Tn2() {
  const e3 = It2(), t3 = jt2(), n3 = xt2(), r3 = t3.getSession() || e3.getSession();
  r3 && n3 && n3.captureSession(r3);
}
function On2(e3 = false) {
  e3 ? En2() : Tn2();
}
function Pn2(e3, t3, n3) {
  return t3 || `${function(e4) {
    return `${function(e5) {
      const t4 = e5.protocol ? `${e5.protocol}:` : "", n4 = e5.port ? `:${e5.port}` : "";
      return `${t4}//${e5.host}${n4}${e5.path ? `/${e5.path}` : ""}/api/`;
    }(e4)}${e4.projectId}/envelope/`;
  }(e3)}?${function(e4, t4) {
    const n4 = { sentry_version: "7" };
    return e4.publicKey && (n4.sentry_key = e4.publicKey), t4 && (n4.sentry_client = `${t4.name}/${t4.version}`), new URLSearchParams(n4).toString();
  }(e3, n3)}`;
}
var An2 = [];
function jn2(e3, t3) {
  for (const n3 of t3)
    n3 && n3.afterAllSetup && n3.afterAllSetup(e3);
}
function In2(e3, t3, n3) {
  if (n3[t3.name])
    te2 && le2.log(`Integration skipped because it was already installed: ${t3.name}`);
  else {
    if (n3[t3.name] = t3, -1 === An2.indexOf(t3.name) && "function" == typeof t3.setupOnce && (t3.setupOnce(), An2.push(t3.name)), t3.setup && "function" == typeof t3.setup && t3.setup(e3), "function" == typeof t3.preprocessEvent) {
      const n4 = t3.preprocessEvent.bind(t3);
      e3.on("preprocessEvent", (t4, r3) => n4(t4, r3, e3));
    }
    if ("function" == typeof t3.processEvent) {
      const n4 = t3.processEvent.bind(t3), r3 = Object.assign((t4, r4) => n4(t4, r4, e3), { id: t3.name });
      e3.addEventProcessor(r3);
    }
    te2 && le2.log(`Integration installed: ${t3.name}`);
  }
}
var xn2 = class extends Error {
  constructor(e3, t3 = "warn") {
    super(e3), this.message = e3, this.logLevel = t3;
  }
};
var Ln2 = "Not capturing exception because it's already been captured.";
var Dn2 = class {
  constructor(e3) {
    if (this._options = e3, this._integrations = {}, this._numProcessing = 0, this._outcomes = {}, this._hooks = {}, this._eventProcessors = [], e3.dsn ? this._dsn = Zt2(e3.dsn) : te2 && le2.warn("No DSN provided, client will not send events."), this._dsn) {
      const t4 = Pn2(this._dsn, e3.tunnel, e3._metadata ? e3._metadata.sdk : void 0);
      this._transport = e3.transport({ tunnel: this._options.tunnel, recordDroppedEvent: this.recordDroppedEvent.bind(this), ...e3.transportOptions, url: t4 });
    }
    const t3 = ["enableTracing", "tracesSampleRate", "tracesSampler"].find((t4) => t4 in e3 && null == e3[t4]);
    t3 && ce2(() => {
      console.warn(`[Sentry] Deprecation warning: \`${t3}\` is set to undefined, which leads to tracing being enabled. In v9, a value of \`undefined\` will result in tracing being disabled.`);
    });
  }
  captureException(e3, t3, n3) {
    const r3 = ot2();
    if (ut2(e3))
      return te2 && le2.log(Ln2), r3;
    const i3 = { event_id: r3, ...t3 };
    return this._process(this.eventFromException(e3, i3).then((e4) => this._captureEvent(e4, i3, n3))), i3.event_id;
  }
  captureMessage(e3, t3, n3, r3) {
    const i3 = { event_id: ot2(), ...n3 }, o3 = Le2(e3) ? e3 : String(e3), s3 = De2(e3) ? this.eventFromMessage(o3, t3, i3) : this.eventFromException(e3, i3);
    return this._process(s3.then((e4) => this._captureEvent(e4, i3, r3))), i3.event_id;
  }
  captureEvent(e3, t3, n3) {
    const r3 = ot2();
    if (t3 && t3.originalException && ut2(t3.originalException))
      return te2 && le2.log(Ln2), r3;
    const i3 = { event_id: r3, ...t3 }, o3 = (e3.sdkProcessingMetadata || {}).capturedSpanScope;
    return this._process(this._captureEvent(e3, i3, o3 || n3)), i3.event_id;
  }
  captureSession(e3) {
    "string" != typeof e3.release ? te2 && le2.warn("Discarded session because of missing or non-string release") : (this.sendSession(e3), gt2(e3, { init: false }));
  }
  getDsn() {
    return this._dsn;
  }
  getOptions() {
    return this._options;
  }
  getSdkMetadata() {
    return this._options._metadata;
  }
  getTransport() {
    return this._transport;
  }
  flush(e3) {
    const t3 = this._transport;
    return t3 ? (this.emit("flush"), this._isClientDoneProcessing(e3).then((n3) => t3.flush(e3).then((e4) => n3 && e4))) : ht2(true);
  }
  close(e3) {
    return this.flush(e3).then((e4) => (this.getOptions().enabled = false, this.emit("close"), e4));
  }
  getEventProcessors() {
    return this._eventProcessors;
  }
  addEventProcessor(e3) {
    this._eventProcessors.push(e3);
  }
  init() {
    (this._isEnabled() || this._options.integrations.some(({ name: e3 }) => e3.startsWith("Spotlight"))) && this._setupIntegrations();
  }
  getIntegrationByName(e3) {
    return this._integrations[e3];
  }
  addIntegration(e3) {
    const t3 = this._integrations[e3.name];
    In2(this, e3, this._integrations), t3 || jn2(this, [e3]);
  }
  sendEvent(e3, t3 = {}) {
    this.emit("beforeSendEvent", e3, t3);
    let n3 = pn2(e3, this._dsn, this._options._metadata, this._options.tunnel);
    for (const e4 of t3.attachments || [])
      n3 = on2(n3, ln2(e4));
    const r3 = this.sendEnvelope(n3);
    r3 && r3.then((t4) => this.emit("afterSendEvent", e3, t4), null);
  }
  sendSession(e3) {
    const t3 = function(e4, t4, n3, r3) {
      const i3 = hn2(n3);
      return rn2({ sent_at: (/* @__PURE__ */ new Date()).toISOString(), ...i3 && { sdk: i3 }, ...!!r3 && t4 && { dsn: Yt2(t4) } }, ["aggregates" in e4 ? [{ type: "sessions" }, e4] : [{ type: "session" }, e4.toJSON()]]);
    }(e3, this._dsn, this._options._metadata, this._options.tunnel);
    this.sendEnvelope(t3);
  }
  recordDroppedEvent(e3, t3, n3) {
    if (this._options.sendClientReports) {
      const r3 = "number" == typeof n3 ? n3 : 1, i3 = `${e3}:${t3}`;
      te2 && le2.log(`Recording outcome: "${i3}"${r3 > 1 ? ` (${r3} times)` : ""}`), this._outcomes[i3] = (this._outcomes[i3] || 0) + r3;
    }
  }
  on(e3, t3) {
    const n3 = this._hooks[e3] = this._hooks[e3] || [];
    return n3.push(t3), () => {
      const e4 = n3.indexOf(t3);
      e4 > -1 && n3.splice(e4, 1);
    };
  }
  emit(e3, ...t3) {
    const n3 = this._hooks[e3];
    n3 && n3.forEach((e4) => e4(...t3));
  }
  sendEnvelope(e3) {
    return this.emit("beforeEnvelope", e3), this._isEnabled() && this._transport ? this._transport.send(e3).then(null, (e4) => (te2 && le2.error("Error while sending envelope:", e4), e4)) : (te2 && le2.error("Transport disabled"), ht2({}));
  }
  _setupIntegrations() {
    const { integrations: e3 } = this._options;
    this._integrations = function(e4, t3) {
      const n3 = {};
      return t3.forEach((t4) => {
        t4 && In2(e4, t4, n3);
      }), n3;
    }(this, e3), jn2(this, e3);
  }
  _updateSessionFromEvent(e3, t3) {
    let n3 = "fatal" === t3.level, r3 = false;
    const i3 = t3.exception && t3.exception.values;
    if (i3) {
      r3 = true;
      for (const e4 of i3) {
        const t4 = e4.mechanism;
        if (t4 && false === t4.handled) {
          n3 = true;
          break;
        }
      }
    }
    const o3 = "ok" === e3.status;
    (o3 && 0 === e3.errors || o3 && n3) && (gt2(e3, { ...n3 && { status: "crashed" }, errors: e3.errors || Number(r3 || n3) }), this.captureSession(e3));
  }
  _isClientDoneProcessing(e3) {
    return new ft2((t3) => {
      let n3 = 0;
      const r3 = setInterval(() => {
        0 == this._numProcessing ? (clearInterval(r3), t3(true)) : (n3 += 1, e3 && n3 >= e3 && (clearInterval(r3), t3(false)));
      }, 1);
    });
  }
  _isEnabled() {
    return false !== this.getOptions().enabled && void 0 !== this._transport;
  }
  _prepareEvent(e3, t3, n3 = jt2(), r3 = It2()) {
    const i3 = this.getOptions(), o3 = Object.keys(this._integrations);
    return !t3.integrations && o3.length > 0 && (t3.integrations = o3), this.emit("preprocessEvent", e3, t3), e3.type || r3.setLastEventId(e3.event_id || t3.event_id), wn2(i3, e3, t3, n3, this, r3).then((e4) => {
      if (null === e4)
        return e4;
      e4.contexts = { trace: Lt2(n3), ...e4.contexts };
      const t4 = function(e5, t5) {
        const n4 = t5.getPropagationContext();
        return n4.dsc || Gt2(n4.traceId, e5);
      }(this, n3);
      return e4.sdkProcessingMetadata = { dynamicSamplingContext: t4, ...e4.sdkProcessingMetadata }, e4;
    });
  }
  _captureEvent(e3, t3 = {}, n3) {
    return this._processEvent(e3, t3, n3).then((e4) => e4.event_id, (e4) => {
      te2 && (e4 instanceof xn2 && "log" === e4.logLevel ? le2.log(e4.message) : le2.warn(e4));
    });
  }
  _processEvent(e3, t3, n3) {
    const r3 = this.getOptions(), { sampleRate: i3 } = r3, o3 = Rn2(e3), s3 = Nn2(e3), a3 = e3.type || "error", c3 = `before send for type \`${a3}\``, l3 = void 0 === i3 ? void 0 : function(e4) {
      if ("boolean" == typeof e4)
        return Number(e4);
      const t4 = "string" == typeof e4 ? parseFloat(e4) : e4;
      if (!("number" != typeof t4 || isNaN(t4) || t4 < 0 || t4 > 1))
        return t4;
      te2 && le2.warn(`[Tracing] Given sample rate is invalid. Sample rate must be a boolean or a number between 0 and 1. Got ${JSON.stringify(e4)} of type ${JSON.stringify(typeof e4)}.`);
    }(i3);
    if (s3 && "number" == typeof l3 && Math.random() > l3)
      return this.recordDroppedEvent("sample_rate", "error", e3), pt2(new xn2(`Discarding event because it's not included in the random sample (sampling rate = ${i3})`, "log"));
    const u3 = "replay_event" === a3 ? "replay" : a3, d3 = (e3.sdkProcessingMetadata || {}).capturedSpanIsolationScope;
    return this._prepareEvent(e3, t3, n3, d3).then((n4) => {
      if (null === n4)
        throw this.recordDroppedEvent("event_processor", u3, e3), new xn2("An event processor returned `null`, will not send event.", "log");
      if (t3.data && true === t3.data.__sentry__)
        return n4;
      const i4 = function(e4, t4, n5, r4) {
        const { beforeSend: i5, beforeSendTransaction: o4, beforeSendSpan: s4 } = t4;
        if (Nn2(n5) && i5)
          return i5(n5, r4);
        if (Rn2(n5)) {
          if (n5.spans && s4) {
            const t5 = [];
            for (const r5 of n5.spans) {
              const n6 = s4(r5);
              n6 ? t5.push(n6) : (Wt2(), e4.recordDroppedEvent("before_send", "span"));
            }
            n5.spans = t5;
          }
          if (o4) {
            if (n5.spans) {
              const e5 = n5.spans.length;
              n5.sdkProcessingMetadata = { ...n5.sdkProcessingMetadata, spanCountBeforeProcessing: e5 };
            }
            return o4(n5, r4);
          }
        }
        return n5;
      }(this, r3, n4, t3);
      return function(e4, t4) {
        const n5 = `${t4} must return \`null\` or a valid event.`;
        if (Fe2(e4))
          return e4.then((e5) => {
            if (!Ne2(e5) && null !== e5)
              throw new xn2(n5);
            return e5;
          }, (e5) => {
            throw new xn2(`${t4} rejected with ${e5}`);
          });
        if (!Ne2(e4) && null !== e4)
          throw new xn2(n5);
        return e4;
      }(i4, c3);
    }).then((r4) => {
      if (null === r4) {
        if (this.recordDroppedEvent("before_send", u3, e3), o3) {
          const t4 = 1 + (e3.spans || []).length;
          this.recordDroppedEvent("before_send", "span", t4);
        }
        throw new xn2(`${c3} returned \`null\`, will not send event.`, "log");
      }
      const i4 = n3 && n3.getSession();
      if (!o3 && i4 && this._updateSessionFromEvent(i4, r4), o3) {
        const e4 = (r4.sdkProcessingMetadata && r4.sdkProcessingMetadata.spanCountBeforeProcessing || 0) - (r4.spans ? r4.spans.length : 0);
        e4 > 0 && this.recordDroppedEvent("before_send", "span", e4);
      }
      const s4 = r4.transaction_info;
      if (o3 && s4 && r4.transaction !== e3.transaction) {
        const e4 = "custom";
        r4.transaction_info = { ...s4, source: e4 };
      }
      return this.sendEvent(r4, t3), r4;
    }).then(null, (e4) => {
      if (e4 instanceof xn2)
        throw e4;
      throw this.captureException(e4, { data: { __sentry__: true }, originalException: e4 }), new xn2(`Event processing pipeline threw an error, original event will not be sent. Details have been sent as a new event.
Reason: ${e4}`);
    });
  }
  _process(e3) {
    this._numProcessing++, e3.then((e4) => (this._numProcessing--, e4), (e4) => (this._numProcessing--, e4));
  }
  _clearOutcomes() {
    const e3 = this._outcomes;
    return this._outcomes = {}, Object.entries(e3).map(([e4, t3]) => {
      const [n3, r3] = e4.split(":");
      return { reason: n3, category: r3, quantity: t3 };
    });
  }
  _flushOutcomes() {
    te2 && le2.log("Flushing outcomes...");
    const e3 = this._clearOutcomes();
    if (0 === e3.length)
      return void (te2 && le2.log("No outcomes to send"));
    if (!this._dsn)
      return void (te2 && le2.log("No dsn provided, will not send outcomes"));
    te2 && le2.log("Sending outcomes:", e3);
    const t3 = (n3 = e3, rn2((r3 = this._options.tunnel && Yt2(this._dsn)) ? { dsn: r3 } : {}, [[{ type: "client_report" }, { timestamp: i3 || rt2(), discarded_events: n3 }]]));
    var n3, r3, i3;
    this.sendEnvelope(t3);
  }
};
function Nn2(e3) {
  return void 0 === e3.type;
}
function Rn2(e3) {
  return "transaction" === e3.type;
}
function Fn2(e3) {
  const t3 = [];
  function n3(e4) {
    return t3.splice(t3.indexOf(e4), 1)[0] || Promise.resolve(void 0);
  }
  return { $: t3, add: function(r3) {
    if (!(void 0 === e3 || t3.length < e3))
      return pt2(new xn2("Not adding Promise because buffer limit was reached."));
    const i3 = r3();
    return -1 === t3.indexOf(i3) && t3.push(i3), i3.then(() => n3(i3)).then(null, () => n3(i3).then(null, () => {
    })), i3;
  }, drain: function(e4) {
    return new ft2((n4, r3) => {
      let i3 = t3.length;
      if (!i3)
        return n4(true);
      const o3 = setTimeout(() => {
        e4 && e4 > 0 && n4(false);
      }, e4);
      t3.forEach((e5) => {
        ht2(e5).then(() => {
          --i3 || (clearTimeout(o3), n4(true));
        }, r3);
      });
    });
  } };
}
function Bn2(e3, { statusCode: t3, headers: n3 }, r3 = Date.now()) {
  const i3 = { ...e3 }, o3 = n3 && n3["x-sentry-rate-limits"], s3 = n3 && n3["retry-after"];
  if (o3)
    for (const e4 of o3.trim().split(",")) {
      const [t4, n4, , , o4] = e4.split(":", 5), s4 = parseInt(t4, 10), a3 = 1e3 * (isNaN(s4) ? 60 : s4);
      if (n4)
        for (const e5 of n4.split(";"))
          "metric_bucket" === e5 && o4 && !o4.split(";").includes("custom") || (i3[e5] = r3 + a3);
      else
        i3.all = r3 + a3;
    }
  else
    s3 ? i3.all = r3 + function(e4, t4 = Date.now()) {
      const n4 = parseInt(`${e4}`, 10);
      if (!isNaN(n4))
        return 1e3 * n4;
      const r4 = Date.parse(`${e4}`);
      return isNaN(r4) ? 6e4 : r4 - t4;
    }(s3, r3) : 429 === t3 && (i3.all = r3 + 6e4);
  return i3;
}
function Un2(e3, t3, n3 = Fn2(e3.bufferSize || 64)) {
  let r3 = {};
  return { send: function(i3) {
    const o3 = [];
    if (sn2(i3, (t4, n4) => {
      const i4 = dn2(n4);
      if (function(e4, t5, n5 = Date.now()) {
        return function(e5, t6) {
          return e5[t6] || e5.all || 0;
        }(e4, t5) > n5;
      }(r3, i4)) {
        const r4 = Vn2(t4, n4);
        e3.recordDroppedEvent("ratelimit_backoff", i4, r4);
      } else
        o3.push(t4);
    }), 0 === o3.length)
      return ht2({});
    const s3 = rn2(i3[0], o3), a3 = (t4) => {
      sn2(s3, (n4, r4) => {
        const i4 = Vn2(n4, r4);
        e3.recordDroppedEvent(t4, dn2(r4), i4);
      });
    };
    return n3.add(() => t3({ body: cn2(s3) }).then((e4) => (void 0 !== e4.statusCode && (e4.statusCode < 200 || e4.statusCode >= 300) && te2 && le2.warn(`Sentry responded with status code ${e4.statusCode} to sent event.`), r3 = Bn2(r3, e4), e4), (e4) => {
      throw a3("network_error"), e4;
    })).then((e4) => e4, (e4) => {
      if (e4 instanceof xn2)
        return te2 && le2.error("Skipped sending event because buffer is full."), a3("queue_overflow"), ht2({});
      throw e4;
    });
  }, flush: (e4) => n3.drain(e4) };
}
function Vn2(e3, t3) {
  if ("event" === t3 || "transaction" === t3)
    return Array.isArray(e3) ? e3[1] : void 0;
}
var Jn2 = 100;
function $n2(e3, t3) {
  const n3 = xt2(), r3 = It2();
  if (!n3)
    return;
  const { beforeBreadcrumb: i3 = null, maxBreadcrumbs: o3 = Jn2 } = n3.getOptions();
  if (o3 <= 0)
    return;
  const s3 = { timestamp: rt2(), ...e3 }, a3 = i3 ? ce2(() => i3(s3, t3)) : s3;
  null !== a3 && (n3.emit && n3.emit("beforeAddBreadcrumb", a3, t3), r3.addBreadcrumb(a3, o3));
}
var qn2;
var zn2 = /* @__PURE__ */ new WeakMap();
var Wn2 = () => ({ name: "FunctionToString", setupOnce() {
  qn2 = Function.prototype.toString;
  try {
    Function.prototype.toString = function(...e3) {
      const t3 = Ye2(this), n3 = zn2.has(xt2()) && void 0 !== t3 ? t3 : this;
      return qn2.apply(n3, e3);
    };
  } catch (e3) {
  }
}, setup(e3) {
  zn2.set(e3, true);
} });
var Hn2 = [/^Script error\.?$/, /^Javascript error: Script error\.? on line 0$/, /^ResizeObserver loop completed with undelivered notifications.$/, /^Cannot redefine property: googletag$/, "undefined is not an object (evaluating 'a.L')", `can't redefine non-configurable property "solana"`, "vv().getRestrictions is not a function. (In 'vv().getRestrictions(1,a)', 'vv().getRestrictions' is undefined)", "Can't find variable: _AutofillCallbackHandler", /^Non-Error promise rejection captured with value: Object Not Found Matching Id:\d+, MethodName:simulateEvent, ParamCount:\d+$/];
var Gn2 = (e3 = {}) => ({ name: "InboundFilters", processEvent(t3, n3, r3) {
  const i3 = r3.getOptions(), o3 = function(e4 = {}, t4 = {}) {
    return { allowUrls: [...e4.allowUrls || [], ...t4.allowUrls || []], denyUrls: [...e4.denyUrls || [], ...t4.denyUrls || []], ignoreErrors: [...e4.ignoreErrors || [], ...t4.ignoreErrors || [], ...e4.disableErrorDefaults ? [] : Hn2], ignoreTransactions: [...e4.ignoreTransactions || [], ...t4.ignoreTransactions || []], ignoreInternal: void 0 === e4.ignoreInternal || e4.ignoreInternal };
  }(e3, i3);
  return function(e4, t4) {
    if (t4.ignoreInternal && function(e5) {
      try {
        return "SentryError" === e5.exception.values[0].type;
      } catch (e6) {
      }
      return false;
    }(e4))
      return te2 && le2.warn(`Event dropped due to being internal Sentry Error.
Event: ${at2(e4)}`), true;
    if (function(e5, t5) {
      if (e5.type || !t5 || !t5.length)
        return false;
      return function(e6) {
        const t6 = [];
        e6.message && t6.push(e6.message);
        let n4;
        try {
          n4 = e6.exception.values[e6.exception.values.length - 1];
        } catch (e7) {
        }
        n4 && n4.value && (t6.push(n4.value), n4.type && t6.push(`${n4.type}: ${n4.value}`));
        return t6;
      }(e5).some((e6) => He2(e6, t5));
    }(e4, t4.ignoreErrors))
      return te2 && le2.warn(`Event dropped due to being matched by \`ignoreErrors\` option.
Event: ${at2(e4)}`), true;
    if (function(e5) {
      if (e5.type)
        return false;
      if (!e5.exception || !e5.exception.values || 0 === e5.exception.values.length)
        return false;
      return !e5.message && !e5.exception.values.some((e6) => e6.stacktrace || e6.type && "Error" !== e6.type || e6.value);
    }(e4))
      return te2 && le2.warn(`Event dropped due to not having an error message, error type or stacktrace.
Event: ${at2(e4)}`), true;
    if (function(e5, t5) {
      if ("transaction" !== e5.type || !t5 || !t5.length)
        return false;
      const n4 = e5.transaction;
      return !!n4 && He2(n4, t5);
    }(e4, t4.ignoreTransactions))
      return te2 && le2.warn(`Event dropped due to being matched by \`ignoreTransactions\` option.
Event: ${at2(e4)}`), true;
    if (function(e5, t5) {
      if (!t5 || !t5.length)
        return false;
      const n4 = Qn2(e5);
      return !!n4 && He2(n4, t5);
    }(e4, t4.denyUrls))
      return te2 && le2.warn(`Event dropped due to being matched by \`denyUrls\` option.
Event: ${at2(e4)}.
Url: ${Qn2(e4)}`), true;
    if (!function(e5, t5) {
      if (!t5 || !t5.length)
        return true;
      const n4 = Qn2(e5);
      return !n4 || He2(n4, t5);
    }(e4, t4.allowUrls))
      return te2 && le2.warn(`Event dropped due to not being matched by \`allowUrls\` option.
Event: ${at2(e4)}.
Url: ${Qn2(e4)}`), true;
    return false;
  }(t3, o3) ? null : t3;
} });
function Qn2(e3) {
  try {
    let t3;
    try {
      t3 = e3.exception.values[0].stacktrace.frames;
    } catch (e4) {
    }
    return t3 ? function(e4 = []) {
      for (let t4 = e4.length - 1; t4 >= 0; t4--) {
        const n3 = e4[t4];
        if (n3 && "<anonymous>" !== n3.filename && "[native code]" !== n3.filename)
          return n3.filename || null;
      }
      return null;
    }(t3) : null;
  } catch (t3) {
    return te2 && le2.error(`Cannot extract url for event ${at2(e3)}`), null;
  }
}
function Kn2(e3, t3, n3 = 250, r3, i3, o3, s3) {
  if (!(o3.exception && o3.exception.values && s3 && Be2(s3.originalException, Error)))
    return;
  const a3 = o3.exception.values.length > 0 ? o3.exception.values[o3.exception.values.length - 1] : void 0;
  var c3, l3;
  a3 && (o3.exception.values = (c3 = Yn2(e3, t3, i3, s3.originalException, r3, o3.exception.values, a3, 0), l3 = n3, c3.map((e4) => (e4.value && (e4.value = qe2(e4.value, l3)), e4))));
}
function Yn2(e3, t3, n3, r3, i3, o3, s3, a3) {
  if (o3.length >= n3 + 1)
    return o3;
  let c3 = [...o3];
  if (Be2(r3[i3], Error)) {
    Xn2(s3, a3);
    const o4 = e3(t3, r3[i3]), l3 = c3.length;
    Zn2(o4, i3, l3, a3), c3 = Yn2(e3, t3, n3, r3[i3], i3, [o4, ...c3], o4, l3);
  }
  return Array.isArray(r3.errors) && r3.errors.forEach((r4, o4) => {
    if (Be2(r4, Error)) {
      Xn2(s3, a3);
      const l3 = e3(t3, r4), u3 = c3.length;
      Zn2(l3, `errors[${o4}]`, u3, a3), c3 = Yn2(e3, t3, n3, r4, i3, [l3, ...c3], l3, u3);
    }
  }), c3;
}
function Xn2(e3, t3) {
  e3.mechanism = e3.mechanism || { type: "generic", handled: true }, e3.mechanism = { ...e3.mechanism, ..."AggregateError" === e3.type && { is_exception_group: true }, exception_id: t3 };
}
function Zn2(e3, t3, n3, r3) {
  e3.mechanism = e3.mechanism || { type: "generic", handled: true }, e3.mechanism = { ...e3.mechanism, type: "chained", source: t3, exception_id: n3, parent_id: r3 };
}
function er2(e3) {
  if (!e3)
    return {};
  const t3 = e3.match(/^(([^:/?#]+):)?(\/\/([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?$/);
  if (!t3)
    return {};
  const n3 = t3[6] || "", r3 = t3[8] || "";
  return { host: t3[4], path: t3[5], protocol: t3[2], search: n3, hash: r3, relative: t3[5] + n3 + r3 };
}
function tr2() {
  "console" in re2 && se2.forEach(function(e3) {
    e3 in re2.console && Ge2(re2.console, e3, function(t3) {
      return ae2[e3] = t3, function(...t4) {
        we2("console", { args: t4, level: e3 });
        const n3 = ae2[e3];
        n3 && n3.apply(re2.console, t4);
      };
    });
  });
}
function nr2(e3) {
  return "warn" === e3 ? "warning" : ["fatal", "error", "warning", "log", "info", "debug"].includes(e3) ? e3 : "log";
}
var rr2 = () => {
  let e3;
  return { name: "Dedupe", processEvent(t3) {
    if (t3.type)
      return t3;
    try {
      if (function(e4, t4) {
        if (!t4)
          return false;
        if (function(e5, t5) {
          const n3 = e5.message, r3 = t5.message;
          if (!n3 && !r3)
            return false;
          if (n3 && !r3 || !n3 && r3)
            return false;
          if (n3 !== r3)
            return false;
          if (!or2(e5, t5))
            return false;
          if (!ir2(e5, t5))
            return false;
          return true;
        }(e4, t4))
          return true;
        if (function(e5, t5) {
          const n3 = sr2(t5), r3 = sr2(e5);
          if (!n3 || !r3)
            return false;
          if (n3.type !== r3.type || n3.value !== r3.value)
            return false;
          if (!or2(e5, t5))
            return false;
          if (!ir2(e5, t5))
            return false;
          return true;
        }(e4, t4))
          return true;
        return false;
      }(t3, e3))
        return te2 && le2.warn("Event dropped due to being a duplicate of previously captured event."), null;
    } catch (e4) {
    }
    return e3 = t3;
  } };
};
function ir2(e3, t3) {
  let n3 = ge2(e3), r3 = ge2(t3);
  if (!n3 && !r3)
    return true;
  if (n3 && !r3 || !n3 && r3)
    return false;
  if (r3.length !== n3.length)
    return false;
  for (let e4 = 0; e4 < r3.length; e4++) {
    const t4 = r3[e4], i3 = n3[e4];
    if (t4.filename !== i3.filename || t4.lineno !== i3.lineno || t4.colno !== i3.colno || t4.function !== i3.function)
      return false;
  }
  return true;
}
function or2(e3, t3) {
  let n3 = e3.fingerprint, r3 = t3.fingerprint;
  if (!n3 && !r3)
    return true;
  if (n3 && !r3 || !n3 && r3)
    return false;
  try {
    return !(n3.join("") !== r3.join(""));
  } catch (e4) {
    return false;
  }
}
function sr2(e3) {
  return e3.exception && e3.exception.values && e3.exception.values[0];
}
function ar2(e3) {
  return void 0 === e3 ? void 0 : e3 >= 400 && e3 < 500 ? "warning" : e3 >= 500 ? "error" : void 0;
}
var cr2 = re2;
function lr2(e3) {
  return e3 && /^function\s+\w+\(\)\s+\{\s+\[native code\]\s+\}$/.test(e3.toString());
}
function ur2() {
  if ("string" == typeof EdgeRuntime)
    return true;
  if (!function() {
    if (!("fetch" in cr2))
      return false;
    try {
      return new Headers(), new Request("http://www.example.com"), new Response(), true;
    } catch (e4) {
      return false;
    }
  }())
    return false;
  if (lr2(cr2.fetch))
    return true;
  let e3 = false;
  const t3 = cr2.document;
  if (t3 && "function" == typeof t3.createElement)
    try {
      const n3 = t3.createElement("iframe");
      n3.hidden = true, t3.head.appendChild(n3), n3.contentWindow && n3.contentWindow.fetch && (e3 = lr2(n3.contentWindow.fetch)), t3.head.removeChild(n3);
    } catch (e4) {
      oe2 && le2.warn("Could not create sandbox iframe for pure fetch check, bailing to window.fetch: ", e4);
    }
  return e3;
}
function dr2(e3, t3) {
  const n3 = "fetch";
  be2(n3, e3), _e2(n3, () => function(e4, t4 = false) {
    if (t4 && !ur2())
      return;
    Ge2(re2, "fetch", function(t5) {
      return function(...n4) {
        const r3 = new Error(), { method: i3, url: o3 } = function(e5) {
          if (0 === e5.length)
            return { method: "GET", url: "" };
          if (2 === e5.length) {
            const [t7, n5] = e5;
            return { url: pr2(t7), method: hr2(n5, "method") ? String(n5.method).toUpperCase() : "GET" };
          }
          const t6 = e5[0];
          return { url: pr2(t6), method: hr2(t6, "method") ? String(t6.method).toUpperCase() : "GET" };
        }(n4), s3 = { args: n4, fetchData: { method: i3, url: o3 }, startTimestamp: 1e3 * it2(), virtualError: r3 };
        return e4 || we2("fetch", { ...s3 }), t5.apply(re2, n4).then(async (t6) => (e4 ? e4(t6) : we2("fetch", { ...s3, endTimestamp: 1e3 * it2(), response: t6 }), t6), (e5) => {
          throw we2("fetch", { ...s3, endTimestamp: 1e3 * it2(), error: e5 }), Pe2(e5) && void 0 === e5.stack && (e5.stack = r3.stack, Qe2(e5, "framesToPop", 1)), e5;
        });
      };
    });
  }(void 0, t3));
}
function hr2(e3, t3) {
  return !!e3 && "object" == typeof e3 && !!e3[t3];
}
function pr2(e3) {
  return "string" == typeof e3 ? e3 : e3 ? hr2(e3, "url") ? e3.url : e3.toString ? e3.toString() : "" : "";
}
var fr2 = re2;
var vr2 = re2;
var gr2 = 0;
function mr2() {
  return gr2 > 0;
}
function yr2(e3, t3 = {}) {
  if (!function(e4) {
    return "function" == typeof e4;
  }(e3))
    return e3;
  try {
    const t4 = e3.__sentry_wrapped__;
    if (t4)
      return "function" == typeof t4 ? t4 : e3;
    if (Ye2(e3))
      return e3;
  } catch (t4) {
    return e3;
  }
  const n3 = function(...n4) {
    try {
      const r3 = n4.map((e4) => yr2(e4, t3));
      return e3.apply(this, r3);
    } catch (e4) {
      throw gr2++, setTimeout(() => {
        gr2--;
      }), function(...e5) {
        const t4 = At2(Ee2());
        if (2 === e5.length) {
          const [n5, r3] = e5;
          return n5 ? t4.withSetScope(n5, r3) : t4.withScope(r3);
        }
        t4.withScope(e5[0]);
      }((r3) => {
        var i3, o3;
        r3.addEventProcessor((e5) => (t3.mechanism && (ct2(e5, void 0, void 0), lt2(e5, t3.mechanism)), e5.extra = { ...e5.extra, arguments: n4 }, e5)), i3 = e4, jt2().captureException(i3, Sn2(o3));
      }), e4;
    }
  };
  try {
    for (const t4 in e3)
      Object.prototype.hasOwnProperty.call(e3, t4) && (n3[t4] = e3[t4]);
  } catch (e4) {
  }
  Ke2(n3, e3), Qe2(e3, "__sentry_wrapped__", n3);
  try {
    Object.getOwnPropertyDescriptor(n3, "name").configurable && Object.defineProperty(n3, "name", { get: () => e3.name });
  } catch (e4) {
  }
  return n3;
}
var br2 = "undefined" == typeof __SENTRY_DEBUG__ || __SENTRY_DEBUG__;
function _r2(e3, t3) {
  const n3 = kr2(e3, t3), r3 = { type: Er2(t3), value: Tr2(t3) };
  return n3.length && (r3.stacktrace = { frames: n3 }), void 0 === r3.type && "" === r3.value && (r3.value = "Unrecoverable error caught"), r3;
}
function wr2(e3, t3, n3, r3) {
  const i3 = xt2(), o3 = i3 && i3.getOptions().normalizeDepth, s3 = function(e4) {
    for (const t4 in e4)
      if (Object.prototype.hasOwnProperty.call(e4, t4)) {
        const n4 = e4[t4];
        if (n4 instanceof Error)
          return n4;
      }
    return;
  }(t3), a3 = { __serialized__: tn2(t3, o3) };
  if (s3)
    return { exception: { values: [_r2(e3, s3)] }, extra: a3 };
  const c3 = { exception: { values: [{ type: Re2(t3) ? t3.constructor.name : r3 ? "UnhandledRejection" : "Error", value: Ar2(t3, { isUnhandledRejection: r3 }) }] }, extra: a3 };
  if (n3) {
    const t4 = kr2(e3, n3);
    t4.length && (c3.exception.values[0].stacktrace = { frames: t4 });
  }
  return c3;
}
function Sr2(e3, t3) {
  return { exception: { values: [_r2(e3, t3)] } };
}
function kr2(e3, t3) {
  const n3 = t3.stacktrace || t3.stack || "", r3 = function(e4) {
    if (e4 && Mr2.test(e4.message))
      return 1;
    return 0;
  }(t3), i3 = function(e4) {
    if ("number" == typeof e4.framesToPop)
      return e4.framesToPop;
    return 0;
  }(t3);
  try {
    return e3(n3, r3, i3);
  } catch (e4) {
  }
  return [];
}
var Mr2 = /Minified React error #\d+;/i;
function Cr2(e3) {
  return "undefined" != typeof WebAssembly && void 0 !== WebAssembly.Exception && e3 instanceof WebAssembly.Exception;
}
function Er2(e3) {
  const t3 = e3 && e3.name;
  if (!t3 && Cr2(e3)) {
    return e3.message && Array.isArray(e3.message) && 2 == e3.message.length ? e3.message[0] : "WebAssembly.Exception";
  }
  return t3;
}
function Tr2(e3) {
  const t3 = e3 && e3.message;
  return t3 ? t3.error && "string" == typeof t3.error.message ? t3.error.message : Cr2(e3) && Array.isArray(e3.message) && 2 == e3.message.length ? e3.message[1] : t3 : "No error message";
}
function Or2(e3, t3, n3, r3, i3) {
  let o3;
  if (je2(t3) && t3.error) {
    return Sr2(e3, t3.error);
  }
  if (Ie2(t3) || Ae2(t3, "DOMException")) {
    const i4 = t3;
    if ("stack" in t3)
      o3 = Sr2(e3, t3);
    else {
      const t4 = i4.name || (Ie2(i4) ? "DOMError" : "DOMException"), s3 = i4.message ? `${t4}: ${i4.message}` : t4;
      o3 = Pr2(e3, s3, n3, r3), ct2(o3, s3);
    }
    return "code" in i4 && (o3.tags = { ...o3.tags, "DOMException.code": `${i4.code}` }), o3;
  }
  if (Pe2(t3))
    return Sr2(e3, t3);
  if (Ne2(t3) || Re2(t3)) {
    return o3 = wr2(e3, t3, n3, i3), lt2(o3, { synthetic: true }), o3;
  }
  return o3 = Pr2(e3, t3, n3, r3), ct2(o3, `${t3}`, void 0), lt2(o3, { synthetic: true }), o3;
}
function Pr2(e3, t3, n3, r3) {
  const i3 = {};
  if (r3 && n3) {
    const r4 = kr2(e3, n3);
    r4.length && (i3.exception = { values: [{ value: t3, stacktrace: { frames: r4 } }] }), lt2(i3, { synthetic: true });
  }
  if (Le2(t3)) {
    const { __sentry_template_string__: e4, __sentry_template_values__: n4 } = t3;
    return i3.logentry = { message: e4, params: n4 }, i3;
  }
  return i3.message = t3, i3;
}
function Ar2(e3, { isUnhandledRejection: t3 }) {
  const n3 = function(e4, t4 = 40) {
    const n4 = Object.keys(Xe2(e4));
    n4.sort();
    const r4 = n4[0];
    if (!r4)
      return "[object has no keys]";
    if (r4.length >= t4)
      return qe2(r4, t4);
    for (let e5 = n4.length; e5 > 0; e5--) {
      const r5 = n4.slice(0, e5).join(", ");
      if (!(r5.length > t4))
        return e5 === n4.length ? r5 : qe2(r5, t4);
    }
    return "";
  }(e3), r3 = t3 ? "promise rejection" : "exception";
  if (je2(e3))
    return `Event \`ErrorEvent\` captured as ${r3} with message \`${e3.message}\``;
  if (Re2(e3)) {
    return `Event \`${function(e4) {
      try {
        const t4 = Object.getPrototypeOf(e4);
        return t4 ? t4.constructor.name : void 0;
      } catch (e5) {
      }
    }(e3)}\` (type=${e3.type}) captured as ${r3}`;
  }
  return `Object captured as ${r3} with keys: ${n3}`;
}
var jr2 = class extends Dn2 {
  constructor(e3) {
    const t3 = { parentSpanIsAlwaysRootSpan: true, ...e3 };
    !function(e4, t4, n3 = [t4], r3 = "npm") {
      const i3 = e4._metadata || {};
      i3.sdk || (i3.sdk = { name: `sentry.javascript.${t4}`, packages: n3.map((e5) => ({ name: `${r3}:@sentry/${e5}`, version: ne2 })), version: ne2 }), e4._metadata = i3;
    }(t3, "browser", ["browser"], vr2.SENTRY_SDK_SOURCE || "npm"), super(t3), t3.sendClientReports && vr2.document && vr2.document.addEventListener("visibilitychange", () => {
      "hidden" === vr2.document.visibilityState && this._flushOutcomes();
    });
  }
  eventFromException(e3, t3) {
    return function(e4, t4, n3, r3) {
      const i3 = Or2(e4, t4, n3 && n3.syntheticException || void 0, r3);
      return lt2(i3), i3.level = "error", n3 && n3.event_id && (i3.event_id = n3.event_id), ht2(i3);
    }(this._options.stackParser, e3, t3, this._options.attachStacktrace);
  }
  eventFromMessage(e3, t3 = "info", n3) {
    return function(e4, t4, n4 = "info", r3, i3) {
      const o3 = Pr2(e4, t4, r3 && r3.syntheticException || void 0, i3);
      return o3.level = n4, r3 && r3.event_id && (o3.event_id = r3.event_id), ht2(o3);
    }(this._options.stackParser, e3, t3, n3, this._options.attachStacktrace);
  }
  captureUserFeedback(e3) {
    if (!this._isEnabled())
      return void (br2 && le2.warn("SDK not enabled, will not capture user feedback."));
    const t3 = function(e4, { metadata: t4, tunnel: n3, dsn: r3 }) {
      const i3 = { event_id: e4.event_id, sent_at: (/* @__PURE__ */ new Date()).toISOString(), ...t4 && t4.sdk && { sdk: { name: t4.sdk.name, version: t4.sdk.version } }, ...!!n3 && !!r3 && { dsn: Yt2(r3) } }, o3 = function(e5) {
        return [{ type: "user_report" }, e5];
      }(e4);
      return rn2(i3, [o3]);
    }(e3, { metadata: this.getSdkMetadata(), dsn: this.getDsn(), tunnel: this.getOptions().tunnel });
    this.sendEnvelope(t3);
  }
  _prepareEvent(e3, t3, n3) {
    return e3.platform = e3.platform || "javascript", super._prepareEvent(e3, t3, n3);
  }
};
var Ir2 = "undefined" == typeof __SENTRY_DEBUG__ || __SENTRY_DEBUG__;
var xr2 = re2;
var Lr2;
var Dr2;
var Nr2;
var Rr2;
function Fr2() {
  if (!xr2.document)
    return;
  const e3 = we2.bind(null, "dom"), t3 = Br2(e3, true);
  xr2.document.addEventListener("click", t3, false), xr2.document.addEventListener("keypress", t3, false), ["EventTarget", "Node"].forEach((t4) => {
    const n3 = xr2[t4], r3 = n3 && n3.prototype;
    r3 && r3.hasOwnProperty && r3.hasOwnProperty("addEventListener") && (Ge2(r3, "addEventListener", function(t5) {
      return function(n4, r4, i3) {
        if ("click" === n4 || "keypress" == n4)
          try {
            const r5 = this.__sentry_instrumentation_handlers__ = this.__sentry_instrumentation_handlers__ || {}, o3 = r5[n4] = r5[n4] || { refCount: 0 };
            if (!o3.handler) {
              const r6 = Br2(e3);
              o3.handler = r6, t5.call(this, n4, r6, i3);
            }
            o3.refCount++;
          } catch (e4) {
          }
        return t5.call(this, n4, r4, i3);
      };
    }), Ge2(r3, "removeEventListener", function(e4) {
      return function(t5, n4, r4) {
        if ("click" === t5 || "keypress" == t5)
          try {
            const n5 = this.__sentry_instrumentation_handlers__ || {}, i3 = n5[t5];
            i3 && (i3.refCount--, i3.refCount <= 0 && (e4.call(this, t5, i3.handler, r4), i3.handler = void 0, delete n5[t5]), 0 === Object.keys(n5).length && delete this.__sentry_instrumentation_handlers__);
          } catch (e5) {
          }
        return e4.call(this, t5, n4, r4);
      };
    }));
  });
}
function Br2(e3, t3 = false) {
  return (n3) => {
    if (!n3 || n3._sentryCaptured)
      return;
    const r3 = function(e4) {
      try {
        return e4.target;
      } catch (e5) {
        return null;
      }
    }(n3);
    if (function(e4, t4) {
      return "keypress" === e4 && (!t4 || !t4.tagName || "INPUT" !== t4.tagName && "TEXTAREA" !== t4.tagName && !t4.isContentEditable);
    }(n3.type, r3))
      return;
    Qe2(n3, "_sentryCaptured", true), r3 && !r3._sentryId && Qe2(r3, "_sentryId", ot2());
    const i3 = "keypress" === n3.type ? "input" : n3.type;
    if (!function(e4) {
      if (e4.type !== Dr2)
        return false;
      try {
        if (!e4.target || e4.target._sentryId !== Nr2)
          return false;
      } catch (e5) {
      }
      return true;
    }(n3)) {
      e3({ event: n3, name: i3, global: t3 }), Dr2 = n3.type, Nr2 = r3 ? r3._sentryId : void 0;
    }
    clearTimeout(Lr2), Lr2 = xr2.setTimeout(() => {
      Nr2 = void 0, Dr2 = void 0;
    }, 1e3);
  };
}
function Ur2(e3) {
  const t3 = "history";
  be2(t3, e3), _e2(t3, Vr2);
}
function Vr2() {
  if (!function() {
    const e4 = fr2.chrome, t4 = e4 && e4.app && e4.app.runtime, n3 = "history" in fr2 && !!fr2.history.pushState && !!fr2.history.replaceState;
    return !t4 && n3;
  }())
    return;
  const e3 = xr2.onpopstate;
  function t3(e4) {
    return function(...t4) {
      const n3 = t4.length > 2 ? t4[2] : void 0;
      if (n3) {
        const e5 = Rr2, t5 = String(n3);
        Rr2 = t5;
        we2("history", { from: e5, to: t5 });
      }
      return e4.apply(this, t4);
    };
  }
  xr2.onpopstate = function(...t4) {
    const n3 = xr2.location.href, r3 = Rr2;
    Rr2 = n3;
    if (we2("history", { from: r3, to: n3 }), e3)
      try {
        return e3.apply(this, t4);
      } catch (e4) {
      }
  }, Ge2(xr2.history, "pushState", t3), Ge2(xr2.history, "replaceState", t3);
}
var Jr2 = {};
function $r2(e3) {
  Jr2[e3] = void 0;
}
var qr2 = "__sentry_xhr_v3__";
function zr2() {
  if (!xr2.XMLHttpRequest)
    return;
  const e3 = XMLHttpRequest.prototype;
  e3.open = new Proxy(e3.open, { apply(e4, t3, n3) {
    const r3 = new Error(), i3 = 1e3 * it2(), o3 = xe2(n3[0]) ? n3[0].toUpperCase() : void 0, s3 = function(e5) {
      if (xe2(e5))
        return e5;
      try {
        return e5.toString();
      } catch (e6) {
      }
      return;
    }(n3[1]);
    if (!o3 || !s3)
      return e4.apply(t3, n3);
    t3[qr2] = { method: o3, url: s3, request_headers: {} }, "POST" === o3 && s3.match(/sentry_key/) && (t3.__sentry_own_request__ = true);
    const a3 = () => {
      const e5 = t3[qr2];
      if (e5 && 4 === t3.readyState) {
        try {
          e5.status_code = t3.status;
        } catch (e6) {
        }
        we2("xhr", { endTimestamp: 1e3 * it2(), startTimestamp: i3, xhr: t3, virtualError: r3 });
      }
    };
    return "onreadystatechange" in t3 && "function" == typeof t3.onreadystatechange ? t3.onreadystatechange = new Proxy(t3.onreadystatechange, { apply: (e5, t4, n4) => (a3(), e5.apply(t4, n4)) }) : t3.addEventListener("readystatechange", a3), t3.setRequestHeader = new Proxy(t3.setRequestHeader, { apply(e5, t4, n4) {
      const [r4, i4] = n4, o4 = t4[qr2];
      return o4 && xe2(r4) && xe2(i4) && (o4.request_headers[r4.toLowerCase()] = i4), e5.apply(t4, n4);
    } }), e4.apply(t3, n3);
  } }), e3.send = new Proxy(e3.send, { apply(e4, t3, n3) {
    const r3 = t3[qr2];
    if (!r3)
      return e4.apply(t3, n3);
    void 0 !== n3[0] && (r3.body = n3[0]);
    return we2("xhr", { startTimestamp: 1e3 * it2(), xhr: t3 }), e4.apply(t3, n3);
  } });
}
function Wr2(e3, t3 = function(e4) {
  const t4 = Jr2[e4];
  if (t4)
    return t4;
  let n3 = xr2[e4];
  if (lr2(n3))
    return Jr2[e4] = n3.bind(xr2);
  const r3 = xr2.document;
  if (r3 && "function" == typeof r3.createElement)
    try {
      const t5 = r3.createElement("iframe");
      t5.hidden = true, r3.head.appendChild(t5);
      const i3 = t5.contentWindow;
      i3 && i3[e4] && (n3 = i3[e4]), r3.head.removeChild(t5);
    } catch (t5) {
      Ir2 && le2.warn(`Could not create sandbox iframe for ${e4} check, bailing to window.${e4}: `, t5);
    }
  return n3 ? Jr2[e4] = n3.bind(xr2) : n3;
}("fetch")) {
  let n3 = 0, r3 = 0;
  return Un2(e3, function(i3) {
    const o3 = i3.body.length;
    n3 += o3, r3++;
    const s3 = { body: i3.body, method: "POST", referrerPolicy: "origin", headers: e3.headers, keepalive: n3 <= 6e4 && r3 < 15, ...e3.fetchOptions };
    if (!t3)
      return $r2("fetch"), pt2("No fetch implementation available");
    try {
      return t3(e3.url, s3).then((e4) => (n3 -= o3, r3--, { statusCode: e4.status, headers: { "x-sentry-rate-limits": e4.headers.get("X-Sentry-Rate-Limits"), "retry-after": e4.headers.get("Retry-After") } }));
    } catch (e4) {
      return $r2("fetch"), n3 -= o3, r3--, pt2(e4);
    }
  });
}
function Hr2(e3, t3, n3, r3) {
  const i3 = { filename: e3, function: "<anonymous>" === t3 ? ue2 : t3, in_app: true };
  return void 0 !== n3 && (i3.lineno = n3), void 0 !== r3 && (i3.colno = r3), i3;
}
var Gr2 = /^\s*at (\S+?)(?::(\d+))(?::(\d+))\s*$/i;
var Qr2 = /^\s*at (?:(.+?\)(?: \[.+\])?|.*?) ?\((?:address at )?)?(?:async )?((?:<anonymous>|[-a-z]+:|.*bundle|\/)?.*?)(?::(\d+))?(?::(\d+))?\)?\s*$/i;
var Kr2 = /\((\S*)(?::(\d+))(?::(\d+))\)/;
var Yr2 = /^\s*(.*?)(?:\((.*?)\))?(?:^|@)?((?:[-a-z]+)?:\/.*?|\[native code\]|[^@]*(?:bundle|\d+\.js)|\/[\w\-. /=]+)(?::(\d+))?(?::(\d+))?\s*$/i;
var Xr2 = /(\S+) line (\d+)(?: > eval line \d+)* > eval/i;
var Zr2 = function(...e3) {
  const t3 = e3.sort((e4, t4) => e4[0] - t4[0]).map((e4) => e4[1]);
  return (e4, n3 = 0, r3 = 0) => {
    const i3 = [], o3 = e4.split("\n");
    for (let e5 = n3; e5 < o3.length; e5++) {
      const n4 = o3[e5];
      if (n4.length > 1024)
        continue;
      const s3 = de2.test(n4) ? n4.replace(de2, "$1") : n4;
      if (!s3.match(/\S*Error: /)) {
        for (const e6 of t3) {
          const t4 = e6(s3);
          if (t4) {
            i3.push(t4);
            break;
          }
        }
        if (i3.length >= 50 + r3)
          break;
      }
    }
    return function(e5) {
      if (!e5.length)
        return [];
      const t4 = Array.from(e5);
      /sentryWrapped/.test(pe2(t4).function || "") && t4.pop();
      t4.reverse(), he2.test(pe2(t4).function || "") && (t4.pop(), he2.test(pe2(t4).function || "") && t4.pop());
      return t4.slice(0, 50).map((e6) => ({ ...e6, filename: e6.filename || pe2(t4).filename, function: e6.function || ue2 }));
    }(i3.slice(r3));
  };
}(...[[30, (e3) => {
  const t3 = Gr2.exec(e3);
  if (t3) {
    const [, e4, n4, r3] = t3;
    return Hr2(e4, ue2, +n4, +r3);
  }
  const n3 = Qr2.exec(e3);
  if (n3) {
    if (n3[2] && 0 === n3[2].indexOf("eval")) {
      const e5 = Kr2.exec(n3[2]);
      e5 && (n3[2] = e5[1], n3[3] = e5[2], n3[4] = e5[3]);
    }
    const [e4, t4] = ei2(n3[1] || ue2, n3[2]);
    return Hr2(t4, e4, n3[3] ? +n3[3] : void 0, n3[4] ? +n3[4] : void 0);
  }
}], [50, (e3) => {
  const t3 = Yr2.exec(e3);
  if (t3) {
    if (t3[3] && t3[3].indexOf(" > eval") > -1) {
      const e5 = Xr2.exec(t3[3]);
      e5 && (t3[1] = t3[1] || "eval", t3[3] = e5[1], t3[4] = e5[2], t3[5] = "");
    }
    let e4 = t3[3], n3 = t3[1] || ue2;
    return [n3, e4] = ei2(n3, e4), Hr2(e4, n3, t3[4] ? +t3[4] : void 0, t3[5] ? +t3[5] : void 0);
  }
}]]);
var ei2 = (e3, t3) => {
  const n3 = -1 !== e3.indexOf("safari-extension"), r3 = -1 !== e3.indexOf("safari-web-extension");
  return n3 || r3 ? [-1 !== e3.indexOf("@") ? e3.split("@")[0] : ue2, n3 ? `safari-extension:${t3}` : `safari-web-extension:${t3}`] : [e3, t3];
};
var ti2 = 1024;
var ni2 = (e3 = {}) => {
  const t3 = { console: true, dom: true, fetch: true, history: true, sentry: true, xhr: true, ...e3 };
  return { name: "Breadcrumbs", setup(e4) {
    var n3;
    t3.console && function(e5) {
      const t4 = "console";
      be2(t4, e5), _e2(t4, tr2);
    }(function(e5) {
      return function(t4) {
        if (xt2() !== e5)
          return;
        const n4 = { category: "console", data: { arguments: t4.args, logger: "console" }, level: nr2(t4.level), message: ze2(t4.args, " ") };
        if ("assert" === t4.level) {
          if (false !== t4.args[0])
            return;
          n4.message = `Assertion failed: ${ze2(t4.args.slice(1), " ") || "console.assert"}`, n4.data.arguments = t4.args.slice(1);
        }
        $n2(n4, { input: t4.args, level: t4.level });
      };
    }(e4)), t3.dom && (n3 = function(e5, t4) {
      return function(n4) {
        if (xt2() !== e5)
          return;
        let r3, i3, o3 = "object" == typeof t4 ? t4.serializeAttribute : void 0, s3 = "object" == typeof t4 && "number" == typeof t4.maxStringLength ? t4.maxStringLength : void 0;
        s3 && s3 > ti2 && (br2 && le2.warn(`\`dom.maxStringLength\` cannot exceed 1024, but a value of ${s3} was configured. Sentry will use 1024 instead.`), s3 = ti2), "string" == typeof o3 && (o3 = [o3]);
        try {
          const e6 = n4.event, t5 = function(e7) {
            return !!e7 && !!e7.target;
          }(e6) ? e6.target : e6;
          r3 = Je2(t5, { keyAttrs: o3, maxStringLength: s3 }), i3 = function(e7) {
            if (!Ve2.HTMLElement)
              return null;
            let t6 = e7;
            for (let e8 = 0; e8 < 5; e8++) {
              if (!t6)
                return null;
              if (t6 instanceof HTMLElement) {
                if (t6.dataset.sentryComponent)
                  return t6.dataset.sentryComponent;
                if (t6.dataset.sentryElement)
                  return t6.dataset.sentryElement;
              }
              t6 = t6.parentNode;
            }
            return null;
          }(t5);
        } catch (e6) {
          r3 = "<unknown>";
        }
        if (0 === r3.length)
          return;
        const a3 = { category: `ui.${n4.name}`, message: r3 };
        i3 && (a3.data = { "ui.component_name": i3 }), $n2(a3, { event: n4.event, name: n4.name, global: n4.global });
      };
    }(e4, t3.dom), be2("dom", n3), _e2("dom", Fr2)), t3.xhr && function(e5) {
      be2("xhr", e5), _e2("xhr", zr2);
    }(function(e5) {
      return function(t4) {
        if (xt2() !== e5)
          return;
        const { startTimestamp: n4, endTimestamp: r3 } = t4, i3 = t4.xhr[qr2];
        if (!n4 || !r3 || !i3)
          return;
        const { method: o3, url: s3, status_code: a3, body: c3 } = i3, l3 = { method: o3, url: s3, status_code: a3 }, u3 = { xhr: t4.xhr, input: c3, startTimestamp: n4, endTimestamp: r3 };
        $n2({ category: "xhr", data: l3, type: "http", level: ar2(a3) }, u3);
      };
    }(e4)), t3.fetch && dr2(function(e5) {
      return function(t4) {
        if (xt2() !== e5)
          return;
        const { startTimestamp: n4, endTimestamp: r3 } = t4;
        if (r3 && (!t4.fetchData.url.match(/sentry_key/) || "POST" !== t4.fetchData.method))
          if (t4.error) {
            $n2({ category: "fetch", data: t4.fetchData, level: "error", type: "http" }, { data: t4.error, input: t4.args, startTimestamp: n4, endTimestamp: r3 });
          } else {
            const e6 = t4.response, i3 = { ...t4.fetchData, status_code: e6 && e6.status }, o3 = { input: t4.args, response: e6, startTimestamp: n4, endTimestamp: r3 };
            $n2({ category: "fetch", data: i3, type: "http", level: ar2(i3.status_code) }, o3);
          }
      };
    }(e4)), t3.history && Ur2(function(e5) {
      return function(t4) {
        if (xt2() !== e5)
          return;
        let n4 = t4.from, r3 = t4.to;
        const i3 = er2(vr2.location.href);
        let o3 = n4 ? er2(n4) : void 0;
        const s3 = er2(r3);
        o3 && o3.path || (o3 = i3), i3.protocol === s3.protocol && i3.host === s3.host && (r3 = s3.relative), i3.protocol === o3.protocol && i3.host === o3.host && (n4 = o3.relative), $n2({ category: "navigation", data: { from: n4, to: r3 } });
      };
    }(e4)), t3.sentry && e4.on("beforeSendEvent", function(e5) {
      return function(t4) {
        xt2() === e5 && $n2({ category: "sentry." + ("transaction" === t4.type ? "transaction" : "event"), event_id: t4.event_id, level: t4.level, message: at2(t4) }, { event: t4 });
      };
    }(e4));
  } };
};
var ri2 = ["EventTarget", "Window", "Node", "ApplicationCache", "AudioTrackList", "BroadcastChannel", "ChannelMergerNode", "CryptoOperation", "EventSource", "FileReader", "HTMLUnknownElement", "IDBDatabase", "IDBRequest", "IDBTransaction", "KeyOperation", "MediaController", "MessagePort", "ModalWindow", "Notification", "SVGElementInstance", "Screen", "SharedWorker", "TextTrack", "TextTrackCue", "TextTrackList", "WebSocket", "WebSocketWorker", "Worker", "XMLHttpRequest", "XMLHttpRequestEventTarget", "XMLHttpRequestUpload"];
var ii2 = (e3 = {}) => {
  const t3 = { XMLHttpRequest: true, eventTarget: true, requestAnimationFrame: true, setInterval: true, setTimeout: true, ...e3 };
  return { name: "BrowserApiErrors", setupOnce() {
    t3.setTimeout && Ge2(vr2, "setTimeout", oi2), t3.setInterval && Ge2(vr2, "setInterval", oi2), t3.requestAnimationFrame && Ge2(vr2, "requestAnimationFrame", si2), t3.XMLHttpRequest && "XMLHttpRequest" in vr2 && Ge2(XMLHttpRequest.prototype, "send", ai2);
    const e4 = t3.eventTarget;
    if (e4) {
      (Array.isArray(e4) ? e4 : ri2).forEach(ci2);
    }
  } };
};
function oi2(e3) {
  return function(...t3) {
    const n3 = t3[0];
    return t3[0] = yr2(n3, { mechanism: { data: { function: ve2(e3) }, handled: false, type: "instrument" } }), e3.apply(this, t3);
  };
}
function si2(e3) {
  return function(t3) {
    return e3.apply(this, [yr2(t3, { mechanism: { data: { function: "requestAnimationFrame", handler: ve2(e3) }, handled: false, type: "instrument" } })]);
  };
}
function ai2(e3) {
  return function(...t3) {
    const n3 = this;
    return ["onload", "onerror", "onprogress", "onreadystatechange"].forEach((e4) => {
      e4 in n3 && "function" == typeof n3[e4] && Ge2(n3, e4, function(t4) {
        const n4 = { mechanism: { data: { function: e4, handler: ve2(t4) }, handled: false, type: "instrument" } }, r3 = Ye2(t4);
        return r3 && (n4.mechanism.data.handler = ve2(r3)), yr2(t4, n4);
      });
    }), e3.apply(this, t3);
  };
}
function ci2(e3) {
  const t3 = vr2[e3], n3 = t3 && t3.prototype;
  n3 && n3.hasOwnProperty && n3.hasOwnProperty("addEventListener") && (Ge2(n3, "addEventListener", function(t4) {
    return function(n4, r3, i3) {
      try {
        "function" == typeof r3.handleEvent && (r3.handleEvent = yr2(r3.handleEvent, { mechanism: { data: { function: "handleEvent", handler: ve2(r3), target: e3 }, handled: false, type: "instrument" } }));
      } catch (e4) {
      }
      return t4.apply(this, [n4, yr2(r3, { mechanism: { data: { function: "addEventListener", handler: ve2(r3), target: e3 }, handled: false, type: "instrument" } }), i3]);
    };
  }), Ge2(n3, "removeEventListener", function(e4) {
    return function(t4, n4, r3) {
      try {
        const i3 = n4.__sentry_wrapped__;
        i3 && e4.call(this, t4, i3, r3);
      } catch (e5) {
      }
      return e4.call(this, t4, n4, r3);
    };
  }));
}
var li2 = () => ({ name: "BrowserSession", setupOnce() {
  void 0 !== vr2.document ? (Cn2({ ignoreDuration: true }), On2(), Ur2(({ from: e3, to: t3 }) => {
    void 0 !== e3 && e3 !== t3 && (Cn2({ ignoreDuration: true }), On2());
  })) : br2 && le2.warn("Using the `browserSessionIntegration` in non-browser environments is not supported.");
} });
var ui2 = (e3 = {}) => {
  const t3 = { onerror: true, onunhandledrejection: true, ...e3 };
  return { name: "GlobalHandlers", setupOnce() {
    Error.stackTraceLimit = 50;
  }, setup(e4) {
    t3.onerror && (!function(e5) {
      !function(e6) {
        const t4 = "error";
        be2(t4, e6), _e2(t4, ke2);
      }((t4) => {
        const { stackParser: n3, attachStacktrace: r3 } = hi2();
        if (xt2() !== e5 || mr2())
          return;
        const { msg: i3, url: o3, line: s3, column: a3, error: c3 } = t4, l3 = function(e6, t5, n4, r4) {
          const i4 = e6.exception = e6.exception || {}, o4 = i4.values = i4.values || [], s4 = o4[0] = o4[0] || {}, a4 = s4.stacktrace = s4.stacktrace || {}, c4 = a4.frames = a4.frames || [], l4 = r4, u3 = n4, d3 = xe2(t5) && t5.length > 0 ? t5 : function() {
            try {
              return Ve2.document.location.href;
            } catch (e7) {
              return "";
            }
          }();
          0 === c4.length && c4.push({ colno: l4, filename: d3, function: ue2, in_app: true, lineno: u3 });
          return e6;
        }(Or2(n3, c3 || i3, void 0, r3, false), o3, s3, a3);
        l3.level = "error", Mn2(l3, { originalException: c3, mechanism: { handled: false, type: "onerror" } });
      });
    }(e4), di2("onerror")), t3.onunhandledrejection && (!function(e5) {
      !function(e6) {
        const t4 = "unhandledrejection";
        be2(t4, e6), _e2(t4, Ce2);
      }((t4) => {
        const { stackParser: n3, attachStacktrace: r3 } = hi2();
        if (xt2() !== e5 || mr2())
          return;
        const i3 = function(e6) {
          if (De2(e6))
            return e6;
          try {
            if ("reason" in e6)
              return e6.reason;
            if ("detail" in e6 && "reason" in e6.detail)
              return e6.detail.reason;
          } catch (e7) {
          }
          return e6;
        }(t4), o3 = De2(i3) ? { exception: { values: [{ type: "UnhandledRejection", value: `Non-Error promise rejection captured with value: ${String(i3)}` }] } } : Or2(n3, i3, void 0, r3, true);
        o3.level = "error", Mn2(o3, { originalException: i3, mechanism: { handled: false, type: "onunhandledrejection" } });
      });
    }(e4), di2("onunhandledrejection"));
  } };
};
function di2(e3) {
  br2 && le2.log(`Global Handler attached: ${e3}`);
}
function hi2() {
  const e3 = xt2();
  return e3 && e3.getOptions() || { stackParser: () => [], attachStacktrace: false };
}
var pi2 = () => ({ name: "HttpContext", preprocessEvent(e3) {
  if (!vr2.navigator && !vr2.location && !vr2.document)
    return;
  const t3 = e3.request && e3.request.url || vr2.location && vr2.location.href, { referrer: n3 } = vr2.document || {}, { userAgent: r3 } = vr2.navigator || {}, i3 = { ...e3.request && e3.request.headers, ...n3 && { Referer: n3 }, ...r3 && { "User-Agent": r3 } }, o3 = { ...e3.request, ...t3 && { url: t3 }, headers: i3 };
  e3.request = o3;
} });
var fi2 = (e3 = {}) => {
  const t3 = e3.limit || 5, n3 = e3.key || "cause";
  return { name: "LinkedErrors", preprocessEvent(e4, r3, i3) {
    const o3 = i3.getOptions();
    Kn2(_r2, o3.stackParser, o3.maxValueLength, n3, t3, e4, r3);
  } };
};
var vi2 = "new";
var gi2 = "loading";
var mi2 = "loaded";
var yi2 = "joining-meeting";
var bi2 = "joined-meeting";
var _i2 = "left-meeting";
var wi2 = "error";
var Ti2 = "playable";
var Oi2 = "unknown";
var Pi2 = "full";
var Ii2 = "base";
var Bi2 = "no-room";
var Vi2 = "end-of-life";
var $i2 = "connection-error";
var Xi2 = "iframe-ready-for-launch-config";
var Zi2 = "iframe-launch-config";
var eo2 = "theme-updated";
var to2 = "loading";
var no2 = "load-attempt-failed";
var ro2 = "loaded";
var io2 = "started-camera";
var oo2 = "camera-error";
var so2 = "joining-meeting";
var ao2 = "joined-meeting";
var co2 = "left-meeting";
var lo2 = "participant-joined";
var uo2 = "participant-updated";
var ho2 = "participant-left";
var po2 = "participant-counts-updated";
var fo2 = "access-state-updated";
var vo2 = "meeting-session-summary-updated";
var go2 = "meeting-session-state-updated";
var yo2 = "waiting-participant-added";
var bo2 = "waiting-participant-updated";
var _o2 = "waiting-participant-removed";
var wo2 = "track-started";
var So2 = "track-stopped";
var ko2 = "transcription-started";
var Mo2 = "transcription-stopped";
var Co2 = "transcription-error";
var Eo2 = "recording-started";
var To2 = "recording-stopped";
var Oo2 = "recording-stats";
var Po2 = "recording-error";
var Ao2 = "recording-upload-completed";
var jo2 = "recording-data";
var Io2 = "app-message";
var xo2 = "transcription-message";
var Lo2 = "remote-media-player-started";
var Do2 = "remote-media-player-updated";
var No2 = "remote-media-player-stopped";
var Ro2 = "local-screen-share-started";
var Fo2 = "local-screen-share-stopped";
var Bo2 = "local-screen-share-canceled";
var Uo2 = "active-speaker-change";
var Vo2 = "active-speaker-mode-change";
var Jo2 = "network-quality-change";
var $o2 = "network-connection";
var qo2 = "cpu-load-change";
var zo2 = "face-counts-updated";
var Wo2 = "fullscreen";
var Ho2 = "exited-fullscreen";
var Go2 = "live-streaming-started";
var Qo2 = "live-streaming-updated";
var Ko2 = "live-streaming-stopped";
var Yo2 = "live-streaming-error";
var Xo2 = "lang-updated";
var Zo2 = "receive-settings-updated";
var es2 = "input-settings-updated";
var ts2 = "nonfatal-error";
var ns2 = "error";
var rs2 = 4096;
var is2 = 102400;
var os2 = "iframe-call-message";
var ss2 = "local-screen-start";
var as2 = "daily-method-update-live-streaming-endpoints";
var cs2 = "transmit-log";
var ls2 = "daily-custom-track";
var us2 = { NONE: "none", BGBLUR: "background-blur", BGIMAGE: "background-image", FACE_DETECTION: "face-detection" };
var ds2 = { NONE: "none", NOISE_CANCELLATION: "noise-cancellation" };
var hs2 = { PLAY: "play", PAUSE: "pause" };
var ps2 = ["jpg", "png", "jpeg"];
var fs2 = "add-endpoints";
var vs2 = "remove-endpoints";
var gs2 = "sip-call-transfer";
function ms2() {
  return !ys2() && "undefined" != typeof window && window.navigator && window.navigator.userAgent ? window.navigator.userAgent : "";
}
function ys2() {
  return "undefined" != typeof navigator && navigator.product && "ReactNative" === navigator.product;
}
function bs2() {
  return navigator && navigator.mediaDevices && navigator.mediaDevices.getUserMedia;
}
function _s2() {
  return !!(navigator && navigator.mediaDevices && navigator.mediaDevices.getDisplayMedia) && (function(e3, t3) {
    if (!e3 || !t3)
      return true;
    switch (e3) {
      case "Chrome":
        return t3.major >= 75;
      case "Safari":
        return RTCRtpTransceiver.prototype.hasOwnProperty("currentDirection") && !(13 === t3.major && 0 === t3.minor && 0 === t3.point);
      case "Firefox":
        return t3.major >= 67;
    }
    return true;
  }(js2(), Is2()) || ys2());
}
function ws2() {
  if (ys2())
    return false;
  if (!document)
    return false;
  var e3 = document.createElement("iframe");
  return !!e3.requestFullscreen || !!e3.webkitRequestFullscreen;
}
var Ss2 = "none";
var ks2 = "software";
var Ms2 = "hardware";
var Cs2 = function() {
  try {
    var e3, t3 = document.createElement("canvas"), n3 = false;
    (e3 = t3.getContext("webgl2", { failIfMajorPerformanceCaveat: true })) || (n3 = true, e3 = t3.getContext("webgl2"));
    var r3 = null != e3;
    return t3.remove(), r3 ? n3 ? ks2 : Ms2 : Ss2;
  } catch (e4) {
    return Ss2;
  }
}();
function Es2() {
  var e3 = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
  return !ys2() && (Cs2 !== Ss2 && (e3 ? function() {
    if (As2())
      return false;
    return ["Chrome", "Firefox"].includes(js2());
  }() : function() {
    if (As2())
      return false;
    var e4 = js2();
    if ("Safari" === e4) {
      var t3 = Ns2();
      if (t3.major < 15 || 15 === t3.major && t3.minor < 4)
        return false;
    }
    if ("Chrome" === e4) {
      return xs2().major >= 77;
    }
    if ("Firefox" === e4) {
      return Rs2().major >= 97;
    }
    return ["Chrome", "Firefox", "Safari"].includes(e4);
  }()));
}
function Ts2() {
  if (ys2())
    return false;
  if (Ps2())
    return false;
  if ("undefined" == typeof AudioWorkletNode)
    return false;
  switch (js2()) {
    case "Chrome":
    case "Firefox":
      return true;
    case "Safari":
      var e3 = Is2();
      return e3.major > 17 || 17 === e3.major && e3.minor >= 4;
  }
  return false;
}
function Os2() {
  return bs2() && !function() {
    var e3, t3 = js2();
    if (!ms2())
      return true;
    switch (t3) {
      case "Chrome":
        return (e3 = xs2()).major && e3.major > 0 && e3.major < 75;
      case "Firefox":
        return (e3 = Rs2()).major < 91;
      case "Safari":
        return (e3 = Ns2()).major < 13 || 13 === e3.major && e3.minor < 1;
      default:
        return true;
    }
  }();
}
function Ps2() {
  return ms2().match(/Linux; Android/);
}
function As2() {
  var e3, t3 = ms2(), n3 = t3.match(/Mac/) && (!ys2() && "undefined" != typeof window && null !== (e3 = window) && void 0 !== e3 && null !== (e3 = e3.navigator) && void 0 !== e3 && e3.maxTouchPoints ? window.navigator.maxTouchPoints : 0) >= 5;
  return !!(t3.match(/Mobi/) || t3.match(/Android/) || n3) || (!!ms2().match(/DailyAnd\//) || void 0);
}
function js2() {
  if ("undefined" != typeof window) {
    var e3 = ms2();
    return Ls2() ? "Safari" : e3.indexOf("Edge") > -1 ? "Edge" : e3.match(/Chrome\//) ? "Chrome" : e3.indexOf("Safari") > -1 || Ds2() ? "Safari" : e3.indexOf("Firefox") > -1 ? "Firefox" : e3.indexOf("MSIE") > -1 || e3.indexOf(".NET") > -1 ? "IE" : "Unknown Browser";
  }
}
function Is2() {
  switch (js2()) {
    case "Chrome":
      return xs2();
    case "Safari":
      return Ns2();
    case "Firefox":
      return Rs2();
    case "Edge":
      return function() {
        var e3 = 0, t3 = 0;
        if ("undefined" != typeof window) {
          var n3 = ms2().match(/Edge\/(\d+).(\d+)/);
          if (n3)
            try {
              e3 = parseInt(n3[1]), t3 = parseInt(n3[2]);
            } catch (e4) {
            }
        }
        return { major: e3, minor: t3 };
      }();
  }
}
function xs2() {
  var e3 = 0, t3 = 0, n3 = 0, r3 = 0, i3 = false;
  if ("undefined" != typeof window) {
    var o3 = ms2(), s3 = o3.match(/Chrome\/(\d+).(\d+).(\d+).(\d+)/);
    if (s3)
      try {
        e3 = parseInt(s3[1]), t3 = parseInt(s3[2]), n3 = parseInt(s3[3]), r3 = parseInt(s3[4]), i3 = o3.indexOf("OPR/") > -1;
      } catch (e4) {
      }
  }
  return { major: e3, minor: t3, build: n3, patch: r3, opera: i3 };
}
function Ls2() {
  return !!ms2().match(/iPad|iPhone|iPod/i) && bs2();
}
function Ds2() {
  return ms2().indexOf("AppleWebKit/605.1.15") > -1;
}
function Ns2() {
  var e3 = 0, t3 = 0, n3 = 0;
  if ("undefined" != typeof window) {
    var r3 = ms2().match(/Version\/(\d+).(\d+)(.(\d+))?/);
    if (r3)
      try {
        e3 = parseInt(r3[1]), t3 = parseInt(r3[2]), n3 = parseInt(r3[4]);
      } catch (e4) {
      }
    else
      (Ls2() || Ds2()) && (e3 = 14, t3 = 0, n3 = 3);
  }
  return { major: e3, minor: t3, point: n3 };
}
function Rs2() {
  var e3 = 0, t3 = 0;
  if ("undefined" != typeof window) {
    var n3 = ms2().match(/Firefox\/(\d+).(\d+)/);
    if (n3)
      try {
        e3 = parseInt(n3[1]), t3 = parseInt(n3[2]);
      } catch (e4) {
      }
  }
  return { major: e3, minor: t3 };
}
var Fs2 = function() {
  return o2(function e3() {
    t2(this, e3);
  }, [{ key: "addListenerForMessagesFromCallMachine", value: function(e3, t3, n3) {
    Y2();
  } }, { key: "addListenerForMessagesFromDailyJs", value: function(e3, t3, n3) {
    Y2();
  } }, { key: "sendMessageToCallMachine", value: function(e3, t3, n3, r3) {
    Y2();
  } }, { key: "sendMessageToDailyJs", value: function(e3, t3) {
    Y2();
  } }, { key: "removeListener", value: function(e3) {
    Y2();
  } }]);
}();
function Bs2(e3, t3) {
  var n3 = Object.keys(e3);
  if (Object.getOwnPropertySymbols) {
    var r3 = Object.getOwnPropertySymbols(e3);
    t3 && (r3 = r3.filter(function(t4) {
      return Object.getOwnPropertyDescriptor(e3, t4).enumerable;
    })), n3.push.apply(n3, r3);
  }
  return n3;
}
function Us2(e3) {
  for (var t3 = 1; t3 < arguments.length; t3++) {
    var n3 = null != arguments[t3] ? arguments[t3] : {};
    t3 % 2 ? Bs2(Object(n3), true).forEach(function(t4) {
      u2(e3, t4, n3[t4]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(n3)) : Bs2(Object(n3)).forEach(function(t4) {
      Object.defineProperty(e3, t4, Object.getOwnPropertyDescriptor(n3, t4));
    });
  }
  return e3;
}
function Vs2() {
  try {
    var e3 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
  } catch (e4) {
  }
  return (Vs2 = function() {
    return !!e3;
  })();
}
var Js2 = function() {
  function e3() {
    var n3, r3, i3, o3;
    return t2(this, e3), r3 = this, i3 = a2(i3 = e3), (n3 = s2(r3, Vs2() ? Reflect.construct(i3, o3 || [], a2(r3).constructor) : i3.apply(r3, o3)))._wrappedListeners = {}, n3._messageCallbacks = {}, n3;
  }
  return l2(e3, Fs2), o2(e3, [{ key: "addListenerForMessagesFromCallMachine", value: function(e4, t3, n3) {
    var r3 = this, i3 = function(i4) {
      if (i4.data && "iframe-call-message" === i4.data.what && (!i4.data.callClientId || i4.data.callClientId === t3) && (!i4.data.from || "module" !== i4.data.from)) {
        var o3 = Us2({}, i4.data);
        if (delete o3.from, o3.callbackStamp && r3._messageCallbacks[o3.callbackStamp]) {
          var s3 = o3.callbackStamp;
          r3._messageCallbacks[s3].call(n3, o3), delete r3._messageCallbacks[s3];
        }
        delete o3.what, delete o3.callbackStamp, e4.call(n3, o3);
      }
    };
    this._wrappedListeners[e4] = i3, window.addEventListener("message", i3);
  } }, { key: "addListenerForMessagesFromDailyJs", value: function(e4, t3, n3) {
    var r3 = function(r4) {
      var i3;
      if (!(!r4.data || r4.data.what !== os2 || !r4.data.action || r4.data.from && "module" !== r4.data.from || r4.data.callClientId && t3 && r4.data.callClientId !== t3 || null != r4 && null !== (i3 = r4.data) && void 0 !== i3 && i3.callFrameId)) {
        var o3 = r4.data;
        e4.call(n3, o3);
      }
    };
    this._wrappedListeners[e4] = r3, window.addEventListener("message", r3);
  } }, { key: "sendMessageToCallMachine", value: function(e4, t3, n3, r3) {
    if (!n3)
      throw new Error("undefined callClientId. Are you trying to use a DailyCall instance previously destroyed?");
    var i3 = Us2({}, e4);
    if (i3.what = os2, i3.from = "module", i3.callClientId = n3, t3) {
      var o3 = K2();
      this._messageCallbacks[o3] = t3, i3.callbackStamp = o3;
    }
    var s3 = r3 ? r3.contentWindow : window, a3 = this._callMachineTargetOrigin(r3);
    a3 && s3.postMessage(i3, a3);
  } }, { key: "sendMessageToDailyJs", value: function(e4, t3) {
    e4.what = os2, e4.callClientId = t3, e4.from = "embedded", window.postMessage(e4, this._targetOriginFromWindowLocation());
  } }, { key: "removeListener", value: function(e4) {
    var t3 = this._wrappedListeners[e4];
    t3 && (window.removeEventListener("message", t3), delete this._wrappedListeners[e4]);
  } }, { key: "forwardPackagedMessageToCallMachine", value: function(e4, t3, n3) {
    var r3 = Us2({}, e4);
    r3.callClientId = n3;
    var i3 = t3 ? t3.contentWindow : window, o3 = this._callMachineTargetOrigin(t3);
    o3 && i3.postMessage(r3, o3);
  } }, { key: "addListenerForPackagedMessagesFromCallMachine", value: function(e4, t3) {
    var n3 = function(n4) {
      if (n4.data && "iframe-call-message" === n4.data.what && (!n4.data.callClientId || n4.data.callClientId === t3) && (!n4.data.from || "module" !== n4.data.from)) {
        var r3 = n4.data;
        e4(r3);
      }
    };
    return this._wrappedListeners[e4] = n3, window.addEventListener("message", n3), e4;
  } }, { key: "removeListenerForPackagedMessagesFromCallMachine", value: function(e4) {
    var t3 = this._wrappedListeners[e4];
    t3 && (window.removeEventListener("message", t3), delete this._wrappedListeners[e4]);
  } }, { key: "_callMachineTargetOrigin", value: function(e4) {
    return e4 ? e4.src ? new URL(e4.src).origin : void 0 : this._targetOriginFromWindowLocation();
  } }, { key: "_targetOriginFromWindowLocation", value: function() {
    return "file:" === window.location.protocol ? "*" : window.location.origin;
  } }]);
}();
function $s2(e3, t3) {
  var n3 = Object.keys(e3);
  if (Object.getOwnPropertySymbols) {
    var r3 = Object.getOwnPropertySymbols(e3);
    t3 && (r3 = r3.filter(function(t4) {
      return Object.getOwnPropertyDescriptor(e3, t4).enumerable;
    })), n3.push.apply(n3, r3);
  }
  return n3;
}
function qs2() {
  try {
    var e3 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
  } catch (e4) {
  }
  return (qs2 = function() {
    return !!e3;
  })();
}
var zs2 = function() {
  function e3() {
    var n3, r3, i3, o3;
    return t2(this, e3), r3 = this, i3 = a2(i3 = e3), n3 = s2(r3, qs2() ? Reflect.construct(i3, o3 || [], a2(r3).constructor) : i3.apply(r3, o3)), global.callMachineToDailyJsEmitter = global.callMachineToDailyJsEmitter || new I2.EventEmitter(), global.dailyJsToCallMachineEmitter = global.dailyJsToCallMachineEmitter || new I2.EventEmitter(), n3._wrappedListeners = {}, n3._messageCallbacks = {}, n3;
  }
  return l2(e3, Fs2), o2(e3, [{ key: "addListenerForMessagesFromCallMachine", value: function(e4, t3, n3) {
    this._addListener(e4, global.callMachineToDailyJsEmitter, t3, n3, "received call machine message");
  } }, { key: "addListenerForMessagesFromDailyJs", value: function(e4, t3, n3) {
    this._addListener(e4, global.dailyJsToCallMachineEmitter, t3, n3, "received daily-js message");
  } }, { key: "sendMessageToCallMachine", value: function(e4, t3, n3) {
    this._sendMessage(e4, global.dailyJsToCallMachineEmitter, n3, t3, "sending message to call machine");
  } }, { key: "sendMessageToDailyJs", value: function(e4, t3) {
    this._sendMessage(e4, global.callMachineToDailyJsEmitter, t3, null, "sending message to daily-js");
  } }, { key: "removeListener", value: function(e4) {
    var t3 = this._wrappedListeners[e4];
    t3 && (global.callMachineToDailyJsEmitter.removeListener("message", t3), global.dailyJsToCallMachineEmitter.removeListener("message", t3), delete this._wrappedListeners[e4]);
  } }, { key: "_addListener", value: function(e4, t3, n3, r3, i3) {
    var o3 = this, s3 = function(t4) {
      if (t4.callClientId === n3) {
        if (t4.callbackStamp && o3._messageCallbacks[t4.callbackStamp]) {
          var i4 = t4.callbackStamp;
          o3._messageCallbacks[i4].call(r3, t4), delete o3._messageCallbacks[i4];
        }
        e4.call(r3, t4);
      }
    };
    this._wrappedListeners[e4] = s3, t3.addListener("message", s3);
  } }, { key: "_sendMessage", value: function(e4, t3, n3, r3, i3) {
    var o3 = function(e5) {
      for (var t4 = 1; t4 < arguments.length; t4++) {
        var n4 = null != arguments[t4] ? arguments[t4] : {};
        t4 % 2 ? $s2(Object(n4), true).forEach(function(t5) {
          u2(e5, t5, n4[t5]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e5, Object.getOwnPropertyDescriptors(n4)) : $s2(Object(n4)).forEach(function(t5) {
          Object.defineProperty(e5, t5, Object.getOwnPropertyDescriptor(n4, t5));
        });
      }
      return e5;
    }({}, e4);
    if (o3.callClientId = n3, r3) {
      var s3 = K2();
      this._messageCallbacks[s3] = r3, o3.callbackStamp = s3;
    }
    t3.emit("message", o3);
  } }]);
}();
var Ws2 = "replace";
var Hs2 = "shallow-merge";
var Gs2 = [Ws2, Hs2];
var Qs2 = function() {
  function e3() {
    var n3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, r3 = n3.data, i3 = n3.mergeStrategy, o3 = void 0 === i3 ? Ws2 : i3;
    t2(this, e3), e3._validateMergeStrategy(o3), e3._validateData(r3, o3), this.mergeStrategy = o3, this.data = r3;
  }
  return o2(e3, [{ key: "isNoOp", value: function() {
    return e3.isNoOpUpdate(this.data, this.mergeStrategy);
  } }], [{ key: "isNoOpUpdate", value: function(e4, t3) {
    return 0 === Object.keys(e4).length && t3 === Hs2;
  } }, { key: "_validateMergeStrategy", value: function(e4) {
    if (!Gs2.includes(e4))
      throw Error("Unrecognized mergeStrategy provided. Options are: [".concat(Gs2, "]"));
  } }, { key: "_validateData", value: function(e4, t3) {
    if (!function(e5) {
      if (null == e5 || "object" !== n2(e5))
        return false;
      var t4 = Object.getPrototypeOf(e5);
      return null == t4 || t4 === Object.prototype;
    }(e4))
      throw Error("Meeting session data must be a plain (map-like) object");
    var r3;
    try {
      if (r3 = JSON.stringify(e4), t3 === Ws2) {
        var i3 = JSON.parse(r3);
        N2(i3, e4) || console.warn("The meeting session data provided will be modified when serialized.", i3, e4);
      } else if (t3 === Hs2) {
        for (var o3 in e4)
          if (Object.hasOwnProperty.call(e4, o3) && void 0 !== e4[o3]) {
            var s3 = JSON.parse(JSON.stringify(e4[o3]));
            N2(e4[o3], s3) || console.warn("At least one key in the meeting session data provided will be modified when serialized.", s3, e4[o3]);
          }
      }
    } catch (e5) {
      throw Error("Meeting session data must be serializable to JSON: ".concat(e5));
    }
    if (r3.length > is2)
      throw Error("Meeting session data is too large (".concat(r3.length, " characters). Maximum size suppported is ").concat(is2, "."));
  } }]);
}();
function Ks2() {
  try {
    var e3 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
  } catch (e4) {
  }
  return (Ks2 = function() {
    return !!e3;
  })();
}
function Ys2(e3) {
  var t3 = "function" == typeof Map ? /* @__PURE__ */ new Map() : void 0;
  return Ys2 = function(e4) {
    if (null === e4 || !function(e5) {
      try {
        return -1 !== Function.toString.call(e5).indexOf("[native code]");
      } catch (t4) {
        return "function" == typeof e5;
      }
    }(e4))
      return e4;
    if ("function" != typeof e4)
      throw new TypeError("Super expression must either be null or a function");
    if (void 0 !== t3) {
      if (t3.has(e4))
        return t3.get(e4);
      t3.set(e4, n3);
    }
    function n3() {
      return function(e5, t4, n4) {
        if (Ks2())
          return Reflect.construct.apply(null, arguments);
        var r3 = [null];
        r3.push.apply(r3, t4);
        var i3 = new (e5.bind.apply(e5, r3))();
        return n4 && c2(i3, n4.prototype), i3;
      }(e4, arguments, a2(this).constructor);
    }
    return n3.prototype = Object.create(e4.prototype, { constructor: { value: n3, enumerable: false, writable: true, configurable: true } }), c2(n3, e4);
  }, Ys2(e3);
}
function Xs2() {
  try {
    var e3 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
  } catch (e4) {
  }
  return (Xs2 = function() {
    return !!e3;
  })();
}
function Zs2(e3) {
  var t3, n3 = null === (t3 = window._daily) || void 0 === t3 ? void 0 : t3.pendings;
  if (n3) {
    var r3 = n3.indexOf(e3);
    -1 !== r3 && n3.splice(r3, 1);
  }
}
var ea2 = function() {
  return o2(function e3(n3) {
    t2(this, e3), this._currentLoad = null, this._callClientId = n3;
  }, [{ key: "load", value: function() {
    var e3, t3 = this, n3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, r3 = arguments.length > 1 ? arguments[1] : void 0, i3 = arguments.length > 2 ? arguments[2] : void 0;
    if (this.loaded)
      return window._daily.instances[this._callClientId].callMachine.reset(), void r3(true);
    e3 = this._callClientId, window._daily.pendings.push(e3), this._currentLoad && this._currentLoad.cancel(), this._currentLoad = new ta2(n3, function() {
      r3(false);
    }, function(e4, n4) {
      n4 || Zs2(t3._callClientId), i3(e4, n4);
    }), this._currentLoad.start();
  } }, { key: "cancel", value: function() {
    this._currentLoad && this._currentLoad.cancel(), Zs2(this._callClientId);
  } }, { key: "loaded", get: function() {
    return this._currentLoad && this._currentLoad.succeeded;
  } }]);
}();
var ta2 = function() {
  return o2(function e3() {
    var n3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, r3 = arguments.length > 1 ? arguments[1] : void 0, i3 = arguments.length > 2 ? arguments[2] : void 0;
    t2(this, e3), this._attemptsRemaining = 3, this._currentAttempt = null, this._dailyConfig = n3, this._successCallback = r3, this._failureCallback = i3;
  }, [{ key: "start", value: function() {
    var e3 = this;
    if (!this._currentAttempt) {
      var t3 = function(n3) {
        e3._currentAttempt.cancelled || (e3._attemptsRemaining--, e3._failureCallback(n3, e3._attemptsRemaining > 0), e3._attemptsRemaining <= 0 || setTimeout(function() {
          e3._currentAttempt.cancelled || (e3._currentAttempt = new ia2(e3._dailyConfig, e3._successCallback, t3), e3._currentAttempt.start());
        }, 3e3));
      };
      this._currentAttempt = new ia2(this._dailyConfig, this._successCallback, t3), this._currentAttempt.start();
    }
  } }, { key: "cancel", value: function() {
    this._currentAttempt && this._currentAttempt.cancel();
  } }, { key: "cancelled", get: function() {
    return this._currentAttempt && this._currentAttempt.cancelled;
  } }, { key: "succeeded", get: function() {
    return this._currentAttempt && this._currentAttempt.succeeded;
  } }]);
}();
var na2 = function() {
  function e3() {
    return t2(this, e3), n3 = this, i3 = arguments, r3 = a2(r3 = e3), s2(n3, Xs2() ? Reflect.construct(r3, i3 || [], a2(n3).constructor) : r3.apply(n3, i3));
    var n3, r3, i3;
  }
  return l2(e3, Ys2(Error)), o2(e3);
}();
var ra2 = 2e4;
var ia2 = function() {
  return o2(function e4(n3, r3, i3) {
    t2(this, e4), this._loadAttemptImpl = ys2() || !n3.avoidEval ? new oa2(n3, r3, i3) : new sa2(n3, r3, i3);
  }, [{ key: "start", value: (e3 = h2(function* () {
    return this._loadAttemptImpl.start();
  }), function() {
    return e3.apply(this, arguments);
  }) }, { key: "cancel", value: function() {
    this._loadAttemptImpl.cancel();
  } }, { key: "cancelled", get: function() {
    return this._loadAttemptImpl.cancelled;
  } }, { key: "succeeded", get: function() {
    return this._loadAttemptImpl.succeeded;
  } }]);
  var e3;
}();
var oa2 = function() {
  return o2(function e4(n4, r4, i4) {
    t2(this, e4), this.cancelled = false, this.succeeded = false, this._networkTimedOut = false, this._networkTimeout = null, this._iosCache = "undefined" != typeof iOSCallObjectBundleCache && iOSCallObjectBundleCache, this._refetchHeaders = null, this._dailyConfig = n4, this._successCallback = r4, this._failureCallback = i4;
  }, [{ key: "start", value: (i3 = h2(function* () {
    var e4 = Z2(this._dailyConfig);
    !(yield this._tryLoadFromIOSCache(e4)) && this._loadFromNetwork(e4);
  }), function() {
    return i3.apply(this, arguments);
  }) }, { key: "cancel", value: function() {
    clearTimeout(this._networkTimeout), this.cancelled = true;
  } }, { key: "_tryLoadFromIOSCache", value: (r3 = h2(function* (e4) {
    if (!this._iosCache)
      return false;
    try {
      var t3 = yield this._iosCache.get(e4);
      return !!this.cancelled || !!t3 && (t3.code ? (Function('"use strict";' + t3.code)(), this.succeeded = true, this._successCallback(), true) : (this._refetchHeaders = t3.refetchHeaders, false));
    } catch (e5) {
      return false;
    }
  }), function(e4) {
    return r3.apply(this, arguments);
  }) }, { key: "_loadFromNetwork", value: (n3 = h2(function* (e4) {
    var t3 = this;
    this._networkTimeout = setTimeout(function() {
      t3._networkTimedOut = true, t3._failureCallback({ msg: "Timed out (>".concat(ra2, " ms) when loading call object bundle ").concat(e4), type: "timeout" });
    }, ra2);
    try {
      var n4 = this._refetchHeaders ? { headers: this._refetchHeaders } : {}, r4 = yield fetch(e4, n4);
      if (clearTimeout(this._networkTimeout), this.cancelled || this._networkTimedOut)
        throw new na2();
      var i4 = yield this._getBundleCodeFromResponse(e4, r4);
      if (this.cancelled)
        throw new na2();
      Function('"use strict";' + i4)(), this._iosCache && this._iosCache.set(e4, i4, r4.headers), this.succeeded = true, this._successCallback();
    } catch (t4) {
      if (clearTimeout(this._networkTimeout), t4 instanceof na2 || this.cancelled || this._networkTimedOut)
        return;
      this._failureCallback({ msg: "Failed to load call object bundle ".concat(e4, ": ").concat(t4), type: t4.message });
    }
  }), function(e4) {
    return n3.apply(this, arguments);
  }) }, { key: "_getBundleCodeFromResponse", value: (e3 = h2(function* (e4, t3) {
    if (t3.ok)
      return yield t3.text();
    if (this._iosCache && 304 === t3.status)
      return (yield this._iosCache.renew(e4, t3.headers)).code;
    throw new Error("Received ".concat(t3.status, " response"));
  }), function(t3, n4) {
    return e3.apply(this, arguments);
  }) }]);
  var e3, n3, r3, i3;
}();
var sa2 = function() {
  return o2(function e3(n3, r3, i3) {
    t2(this, e3), this.cancelled = false, this.succeeded = false, this._dailyConfig = n3, this._successCallback = r3, this._failureCallback = i3, this._attemptId = K2(), this._networkTimeout = null, this._scriptElement = null;
  }, [{ key: "start", value: function() {
    window._dailyCallMachineLoadWaitlist || (window._dailyCallMachineLoadWaitlist = /* @__PURE__ */ new Set());
    var e3 = Z2(this._dailyConfig);
    "object" === ("undefined" == typeof document ? "undefined" : n2(document)) ? this._startLoading(e3) : this._failureCallback({ msg: "Call object bundle must be loaded in a DOM/web context", type: "missing context" });
  } }, { key: "cancel", value: function() {
    this._stopLoading(), this.cancelled = true;
  } }, { key: "_startLoading", value: function(e3) {
    var t3 = this;
    this._signUpForCallMachineLoadWaitlist(), this._networkTimeout = setTimeout(function() {
      t3._stopLoading(), t3._failureCallback({ msg: "Timed out (>".concat(ra2, " ms) when loading call object bundle ").concat(e3), type: "timeout" });
    }, ra2);
    var n3 = document.getElementsByTagName("head")[0], r3 = document.createElement("script");
    this._scriptElement = r3, r3.onload = function() {
      t3._stopLoading(), t3.succeeded = true, t3._successCallback();
    }, r3.onerror = function(e4) {
      t3._stopLoading(), t3._failureCallback({ msg: "Failed to load call object bundle ".concat(e4.target.src), type: e4.message });
    }, r3.src = e3, n3.appendChild(r3);
  } }, { key: "_stopLoading", value: function() {
    this._withdrawFromCallMachineLoadWaitlist(), clearTimeout(this._networkTimeout), this._scriptElement && (this._scriptElement.onload = null, this._scriptElement.onerror = null);
  } }, { key: "_signUpForCallMachineLoadWaitlist", value: function() {
    window._dailyCallMachineLoadWaitlist.add(this._attemptId);
  } }, { key: "_withdrawFromCallMachineLoadWaitlist", value: function() {
    window._dailyCallMachineLoadWaitlist.delete(this._attemptId);
  } }]);
}();
var aa2 = function(e3, t3, n3) {
  return true === ua2(e3.local, t3, n3);
};
var ca2 = function(e3, t3, n3) {
  return e3.local.streams && e3.local.streams[t3] && e3.local.streams[t3].stream && e3.local.streams[t3].stream["get".concat("video" === n3 ? "Video" : "Audio", "Tracks")]()[0];
};
var la2 = function(e3, t3, n3, r3) {
  var i3 = da2(e3, t3, n3, r3);
  return i3 && i3.pendingTrack;
};
var ua2 = function(e3, t3, n3) {
  if (!e3)
    return false;
  var r3 = function(e4) {
    switch (e4) {
      case "avatar":
        return true;
      case "staged":
        return e4;
      default:
        return !!e4;
    }
  }, i3 = e3.public.subscribedTracks;
  return i3 && i3[t3] ? -1 === ["cam-audio", "cam-video", "screen-video", "screen-audio", "rmpAudio", "rmpVideo"].indexOf(n3) && i3[t3].custom ? [true, "staged"].includes(i3[t3].custom) ? r3(i3[t3].custom) : r3(i3[t3].custom[n3]) : r3(i3[t3][n3]) : !i3 || r3(i3.ALL);
};
var da2 = function(e3, t3, n3, r3) {
  var i3 = Object.values(e3.streams || {}).filter(function(e4) {
    return e4.participantId === t3 && e4.type === n3 && e4.pendingTrack && e4.pendingTrack.kind === r3;
  }).sort(function(e4, t4) {
    return new Date(t4.starttime) - new Date(e4.starttime);
  });
  return i3 && i3[0];
};
var ha2 = function(e3, t3) {
  var n3 = e3.local.public.customTracks;
  if (n3 && n3[t3])
    return n3[t3].track;
};
function pa2(e3, t3) {
  for (var n3 = t3.getState(), r3 = 0, i3 = ["cam", "screen"]; r3 < i3.length; r3++)
    for (var o3 = i3[r3], s3 = 0, a3 = ["video", "audio"]; s3 < a3.length; s3++) {
      var c3 = a3[s3], l3 = "cam" === o3 ? c3 : "screen".concat(c3.charAt(0).toUpperCase() + c3.slice(1)), u3 = e3.tracks[l3];
      if (u3) {
        var d3 = e3.local ? ca2(n3, o3, c3) : la2(n3, e3.session_id, o3, c3);
        "playable" === u3.state && (u3.track = d3), u3.persistentTrack = d3;
      }
    }
}
function fa2(e3, t3) {
  try {
    var n3 = t3.getState();
    for (var r3 in e3.tracks)
      if (!va2(r3)) {
        var i3 = e3.tracks[r3].kind;
        if (i3) {
          var o3 = e3.tracks[r3];
          if (o3) {
            var s3 = e3.local ? ha2(n3, r3) : la2(n3, e3.session_id, r3, i3);
            "playable" === o3.state && (e3.tracks[r3].track = s3), o3.persistentTrack = s3;
          }
        } else
          console.error("unknown type for custom track");
      }
  } catch (e4) {
    console.error(e4);
  }
}
function va2(e3) {
  return ["video", "audio", "screenVideo", "screenAudio"].includes(e3);
}
function ga2(e3, t3, n3) {
  var r3 = n3.getState();
  if (e3.local) {
    if (e3.audio)
      try {
        e3.audioTrack = r3.local.streams.cam.stream.getAudioTracks()[0], e3.audioTrack || (e3.audio = false);
      } catch (e4) {
      }
    if (e3.video)
      try {
        e3.videoTrack = r3.local.streams.cam.stream.getVideoTracks()[0], e3.videoTrack || (e3.video = false);
      } catch (e4) {
      }
    if (e3.screen)
      try {
        e3.screenVideoTrack = r3.local.streams.screen.stream.getVideoTracks()[0], e3.screenAudioTrack = r3.local.streams.screen.stream.getAudioTracks()[0], e3.screenVideoTrack || e3.screenAudioTrack || (e3.screen = false);
      } catch (e4) {
      }
  } else {
    var i3 = true;
    try {
      var o3 = r3.participants[e3.session_id];
      o3 && o3.public && o3.public.rtcType && "peer-to-peer" === o3.public.rtcType.impl && o3.private && !["connected", "completed"].includes(o3.private.peeringState) && (i3 = false);
    } catch (e4) {
      console.error(e4);
    }
    if (!i3)
      return e3.audio = false, e3.audioTrack = false, e3.video = false, e3.videoTrack = false, e3.screen = false, void (e3.screenTrack = false);
    try {
      r3.streams;
      if (e3.audio && aa2(r3, e3.session_id, "cam-audio")) {
        var s3 = la2(r3, e3.session_id, "cam", "audio");
        s3 && (t3 && t3.audioTrack && t3.audioTrack.id === s3.id ? e3.audioTrack = s3 : s3.muted || (e3.audioTrack = s3)), e3.audioTrack || (e3.audio = false);
      }
      if (e3.video && aa2(r3, e3.session_id, "cam-video")) {
        var a3 = la2(r3, e3.session_id, "cam", "video");
        a3 && (t3 && t3.videoTrack && t3.videoTrack.id === a3.id ? e3.videoTrack = a3 : a3.muted || (e3.videoTrack = a3)), e3.videoTrack || (e3.video = false);
      }
      if (e3.screen && aa2(r3, e3.session_id, "screen-audio")) {
        var c3 = la2(r3, e3.session_id, "screen", "audio");
        c3 && (t3 && t3.screenAudioTrack && t3.screenAudioTrack.id === c3.id ? e3.screenAudioTrack = c3 : c3.muted || (e3.screenAudioTrack = c3));
      }
      if (e3.screen && aa2(r3, e3.session_id, "screen-video")) {
        var l3 = la2(r3, e3.session_id, "screen", "video");
        l3 && (t3 && t3.screenVideoTrack && t3.screenVideoTrack.id === l3.id ? e3.screenVideoTrack = l3 : l3.muted || (e3.screenVideoTrack = l3));
      }
      e3.screenVideoTrack || e3.screenAudioTrack || (e3.screen = false);
    } catch (e4) {
      console.error("unexpected error matching up tracks", e4);
    }
  }
}
function ma2(e3, t3) {
  var n3 = "undefined" != typeof Symbol && e3[Symbol.iterator] || e3["@@iterator"];
  if (!n3) {
    if (Array.isArray(e3) || (n3 = function(e4, t4) {
      if (e4) {
        if ("string" == typeof e4)
          return ya2(e4, t4);
        var n4 = {}.toString.call(e4).slice(8, -1);
        return "Object" === n4 && e4.constructor && (n4 = e4.constructor.name), "Map" === n4 || "Set" === n4 ? Array.from(e4) : "Arguments" === n4 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n4) ? ya2(e4, t4) : void 0;
      }
    }(e3)) || t3 && e3 && "number" == typeof e3.length) {
      n3 && (e3 = n3);
      var r3 = 0, i3 = function() {
      };
      return { s: i3, n: function() {
        return r3 >= e3.length ? { done: true } : { done: false, value: e3[r3++] };
      }, e: function(e4) {
        throw e4;
      }, f: i3 };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var o3, s3 = true, a3 = false;
  return { s: function() {
    n3 = n3.call(e3);
  }, n: function() {
    var e4 = n3.next();
    return s3 = e4.done, e4;
  }, e: function(e4) {
    a3 = true, o3 = e4;
  }, f: function() {
    try {
      s3 || null == n3.return || n3.return();
    } finally {
      if (a3)
        throw o3;
    }
  } };
}
function ya2(e3, t3) {
  (null == t3 || t3 > e3.length) && (t3 = e3.length);
  for (var n3 = 0, r3 = Array(t3); n3 < t3; n3++)
    r3[n3] = e3[n3];
  return r3;
}
var ba2 = /* @__PURE__ */ new Map();
var _a2 = null;
function wa2(e3, t3) {
  var n3 = "undefined" != typeof Symbol && e3[Symbol.iterator] || e3["@@iterator"];
  if (!n3) {
    if (Array.isArray(e3) || (n3 = function(e4, t4) {
      if (e4) {
        if ("string" == typeof e4)
          return Sa2(e4, t4);
        var n4 = {}.toString.call(e4).slice(8, -1);
        return "Object" === n4 && e4.constructor && (n4 = e4.constructor.name), "Map" === n4 || "Set" === n4 ? Array.from(e4) : "Arguments" === n4 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n4) ? Sa2(e4, t4) : void 0;
      }
    }(e3)) || t3 && e3 && "number" == typeof e3.length) {
      n3 && (e3 = n3);
      var r3 = 0, i3 = function() {
      };
      return { s: i3, n: function() {
        return r3 >= e3.length ? { done: true } : { done: false, value: e3[r3++] };
      }, e: function(e4) {
        throw e4;
      }, f: i3 };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var o3, s3 = true, a3 = false;
  return { s: function() {
    n3 = n3.call(e3);
  }, n: function() {
    var e4 = n3.next();
    return s3 = e4.done, e4;
  }, e: function(e4) {
    a3 = true, o3 = e4;
  }, f: function() {
    try {
      s3 || null == n3.return || n3.return();
    } finally {
      if (a3)
        throw o3;
    }
  } };
}
function Sa2(e3, t3) {
  (null == t3 || t3 > e3.length) && (t3 = e3.length);
  for (var n3 = 0, r3 = Array(t3); n3 < t3; n3++)
    r3[n3] = e3[n3];
  return r3;
}
var ka2 = /* @__PURE__ */ new Map();
var Ma2 = null;
function Ca2(e3) {
  Ta2() ? function(e4) {
    ba2.has(e4) || (ba2.set(e4, {}), navigator.mediaDevices.enumerateDevices().then(function(t3) {
      ba2.has(e4) && (ba2.get(e4).lastDevicesString = JSON.stringify(t3), _a2 || (_a2 = function() {
        var e5 = h2(function* () {
          var e6, t4 = yield navigator.mediaDevices.enumerateDevices(), n3 = ma2(ba2.keys());
          try {
            for (n3.s(); !(e6 = n3.n()).done; ) {
              var r3 = e6.value, i3 = JSON.stringify(t4);
              i3 !== ba2.get(r3).lastDevicesString && (ba2.get(r3).lastDevicesString = i3, r3(t4));
            }
          } catch (e7) {
            n3.e(e7);
          } finally {
            n3.f();
          }
        });
        return function() {
          return e5.apply(this, arguments);
        };
      }(), navigator.mediaDevices.addEventListener("devicechange", _a2)));
    }).catch(function() {
    }));
  }(e3) : function(e4) {
    ka2.has(e4) || (ka2.set(e4, {}), navigator.mediaDevices.enumerateDevices().then(function(t3) {
      ka2.has(e4) && (ka2.get(e4).lastDevicesString = JSON.stringify(t3), Ma2 || (Ma2 = setInterval(h2(function* () {
        var e5, t4 = yield navigator.mediaDevices.enumerateDevices(), n3 = wa2(ka2.keys());
        try {
          for (n3.s(); !(e5 = n3.n()).done; ) {
            var r3 = e5.value, i3 = JSON.stringify(t4);
            i3 !== ka2.get(r3).lastDevicesString && (ka2.get(r3).lastDevicesString = i3, r3(t4));
          }
        } catch (e6) {
          n3.e(e6);
        } finally {
          n3.f();
        }
      }), 3e3)));
    }));
  }(e3);
}
function Ea2(e3) {
  Ta2() ? function(e4) {
    ba2.has(e4) && (ba2.delete(e4), 0 === ba2.size && _a2 && (navigator.mediaDevices.removeEventListener("devicechange", _a2), _a2 = null));
  }(e3) : function(e4) {
    ka2.has(e4) && (ka2.delete(e4), 0 === ka2.size && Ma2 && (clearInterval(Ma2), Ma2 = null));
  }(e3);
}
function Ta2() {
  var e3;
  return ys2() || void 0 !== (null === (e3 = navigator.mediaDevices) || void 0 === e3 ? void 0 : e3.ondevicechange);
}
var Oa2 = /* @__PURE__ */ new Set();
function Pa2(e3, t3) {
  var n3 = t3.isLocalScreenVideo;
  return e3 && "live" === e3.readyState && !function(e4, t4) {
    return (!t4.isLocalScreenVideo || "Chrome" !== js2()) && e4.muted && !Oa2.has(e4.id);
  }(e3, { isLocalScreenVideo: n3 });
}
function Aa2(e3, t3) {
  var n3 = Object.keys(e3);
  if (Object.getOwnPropertySymbols) {
    var r3 = Object.getOwnPropertySymbols(e3);
    t3 && (r3 = r3.filter(function(t4) {
      return Object.getOwnPropertyDescriptor(e3, t4).enumerable;
    })), n3.push.apply(n3, r3);
  }
  return n3;
}
function ja2(e3) {
  for (var t3 = 1; t3 < arguments.length; t3++) {
    var n3 = null != arguments[t3] ? arguments[t3] : {};
    t3 % 2 ? Aa2(Object(n3), true).forEach(function(t4) {
      u2(e3, t4, n3[t4]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(n3)) : Aa2(Object(n3)).forEach(function(t4) {
      Object.defineProperty(e3, t4, Object.getOwnPropertyDescriptor(n3, t4));
    });
  }
  return e3;
}
var Ia2 = Object.freeze({ VIDEO: "video", AUDIO: "audio", SCREEN_VIDEO: "screenVideo", SCREEN_AUDIO: "screenAudio", CUSTOM_VIDEO: "customVideo", CUSTOM_AUDIO: "customAudio" });
var xa2 = Object.freeze({ PARTICIPANTS: "participants", STREAMING: "streaming", TRANSCRIPTION: "transcription" });
var La2 = Object.values(Ia2);
var Da2 = ["v", "a", "sv", "sa", "cv", "ca"];
Object.freeze(La2.reduce(function(e3, t3, n3) {
  return e3[t3] = Da2[n3], e3;
}, {})), Object.freeze(Da2.reduce(function(e3, t3, n3) {
  return e3[t3] = La2[n3], e3;
}, {}));
var Na2 = [Ia2.VIDEO, Ia2.AUDIO, Ia2.SCREEN_VIDEO, Ia2.SCREEN_AUDIO];
var Ra2 = Object.values(xa2);
var Fa2 = ["p", "s", "t"];
Object.freeze(Ra2.reduce(function(e3, t3, n3) {
  return e3[t3] = Fa2[n3], e3;
}, {})), Object.freeze(Fa2.reduce(function(e3, t3, n3) {
  return e3[t3] = Ra2[n3], e3;
}, {}));
var Ba2 = function() {
  function e3() {
    var n3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, r3 = n3.base, i3 = n3.byUserId, o3 = n3.byParticipantId;
    t2(this, e3), this.base = r3, this.byUserId = i3, this.byParticipantId = o3;
  }
  return o2(e3, [{ key: "clone", value: function() {
    var t3 = new e3();
    if (this.base instanceof Ua2 ? t3.base = this.base.clone() : t3.base = this.base, void 0 !== this.byUserId)
      for (var n3 in t3.byUserId = {}, this.byUserId) {
        var r3 = this.byUserId[n3];
        t3.byUserId[n3] = r3 instanceof Ua2 ? r3.clone() : r3;
      }
    if (void 0 !== this.byParticipantId)
      for (var i3 in t3.byParticipantId = {}, this.byParticipantId) {
        var o3 = this.byParticipantId[i3];
        t3.byParticipantId[i3] = o3 instanceof Ua2 ? o3.clone() : o3;
      }
    return t3;
  } }, { key: "toJSONObject", value: function() {
    var e4 = {};
    if ("boolean" == typeof this.base ? e4.base = this.base : this.base instanceof Ua2 && (e4.base = this.base.toJSONObject()), void 0 !== this.byUserId)
      for (var t3 in e4.byUserId = {}, this.byUserId) {
        var n3 = this.byUserId[t3];
        e4.byUserId[t3] = n3 instanceof Ua2 ? n3.toJSONObject() : n3;
      }
    if (void 0 !== this.byParticipantId)
      for (var r3 in e4.byParticipantId = {}, this.byParticipantId) {
        var i3 = this.byParticipantId[r3];
        e4.byParticipantId[r3] = i3 instanceof Ua2 ? i3.toJSONObject() : i3;
      }
    return e4;
  } }, { key: "toMinifiedJSONObject", value: function() {
    var e4 = {};
    if (void 0 !== this.base && ("boolean" == typeof this.base ? e4.b = this.base : e4.b = this.base.toMinifiedJSONObject()), void 0 !== this.byUserId)
      for (var t3 in e4.u = {}, this.byUserId) {
        var n3 = this.byUserId[t3];
        e4.u[t3] = "boolean" == typeof n3 ? n3 : n3.toMinifiedJSONObject();
      }
    if (void 0 !== this.byParticipantId)
      for (var r3 in e4.p = {}, this.byParticipantId) {
        var i3 = this.byParticipantId[r3];
        e4.p[r3] = "boolean" == typeof i3 ? i3 : i3.toMinifiedJSONObject();
      }
    return e4;
  } }, { key: "normalize", value: function() {
    return this.base instanceof Ua2 && (this.base = this.base.normalize()), this.byUserId && (this.byUserId = Object.fromEntries(Object.entries(this.byUserId).map(function(e4) {
      var t3 = f2(e4, 2), n3 = t3[0], r3 = t3[1];
      return [n3, r3 instanceof Ua2 ? r3.normalize() : r3];
    }))), this.byParticipantId && (this.byParticipantId = Object.fromEntries(Object.entries(this.byParticipantId).map(function(e4) {
      var t3 = f2(e4, 2), n3 = t3[0], r3 = t3[1];
      return [n3, r3 instanceof Ua2 ? r3.normalize() : r3];
    }))), this;
  } }], [{ key: "fromJSONObject", value: function(t3) {
    var n3, r3, i3;
    if (void 0 !== t3.base && (n3 = "boolean" == typeof t3.base ? t3.base : Ua2.fromJSONObject(t3.base)), void 0 !== t3.byUserId)
      for (var o3 in r3 = {}, t3.byUserId) {
        var s3 = t3.byUserId[o3];
        r3[o3] = "boolean" == typeof s3 ? s3 : Ua2.fromJSONObject(s3);
      }
    if (void 0 !== t3.byParticipantId)
      for (var a3 in i3 = {}, t3.byParticipantId) {
        var c3 = t3.byParticipantId[a3];
        i3[a3] = "boolean" == typeof c3 ? c3 : Ua2.fromJSONObject(c3);
      }
    return new e3({ base: n3, byUserId: r3, byParticipantId: i3 });
  } }, { key: "fromMinifiedJSONObject", value: function(t3) {
    var n3, r3, i3;
    if (void 0 !== t3.b && (n3 = "boolean" == typeof t3.b ? t3.b : Ua2.fromMinifiedJSONObject(t3.b)), void 0 !== t3.u)
      for (var o3 in r3 = {}, t3.u) {
        var s3 = t3.u[o3];
        r3[o3] = "boolean" == typeof s3 ? s3 : Ua2.fromMinifiedJSONObject(s3);
      }
    if (void 0 !== t3.p)
      for (var a3 in i3 = {}, t3.p) {
        var c3 = t3.p[a3];
        i3[a3] = "boolean" == typeof c3 ? c3 : Ua2.fromMinifiedJSONObject(c3);
      }
    return new e3({ base: n3, byUserId: r3, byParticipantId: i3 });
  } }, { key: "validateJSONObject", value: function(e4) {
    if ("object" !== n2(e4))
      return [false, "canReceive must be an object"];
    for (var t3 = ["base", "byUserId", "byParticipantId"], r3 = 0, i3 = Object.keys(e4); r3 < i3.length; r3++) {
      var o3 = i3[r3];
      if (!t3.includes(o3))
        return [false, "canReceive can only contain keys (".concat(t3.join(", "), ")")];
      if ("base" === o3) {
        var s3 = f2(Ua2.validateJSONObject(e4.base, true), 2), a3 = s3[0], c3 = s3[1];
        if (!a3)
          return [false, c3];
      } else {
        if ("object" !== n2(e4[o3]))
          return [false, "invalid (non-object) value for field '".concat(o3, "' in canReceive")];
        for (var l3 = 0, u3 = Object.values(e4[o3]); l3 < u3.length; l3++) {
          var d3 = u3[l3], h3 = f2(Ua2.validateJSONObject(d3), 2), p3 = h3[0], v3 = h3[1];
          if (!p3)
            return [false, v3];
        }
      }
    }
    return [true];
  } }]);
}();
var Ua2 = function() {
  function e3() {
    var n3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, r3 = n3.video, i3 = n3.audio, o3 = n3.screenVideo, s3 = n3.screenAudio, a3 = n3.customVideo, c3 = n3.customAudio;
    t2(this, e3), this.video = r3, this.audio = i3, this.screenVideo = o3, this.screenAudio = s3, this.customVideo = a3, this.customAudio = c3;
  }
  return o2(e3, [{ key: "clone", value: function() {
    var t3 = new e3();
    return void 0 !== this.video && (t3.video = this.video), void 0 !== this.audio && (t3.audio = this.audio), void 0 !== this.screenVideo && (t3.screenVideo = this.screenVideo), void 0 !== this.screenAudio && (t3.screenAudio = this.screenAudio), void 0 !== this.customVideo && (t3.customVideo = ja2({}, this.customVideo)), void 0 !== this.customAudio && (t3.customAudio = ja2({}, this.customAudio)), t3;
  } }, { key: "toJSONObject", value: function() {
    var e4 = {};
    return void 0 !== this.video && (e4.video = this.video), void 0 !== this.audio && (e4.audio = this.audio), void 0 !== this.screenVideo && (e4.screenVideo = this.screenVideo), void 0 !== this.screenAudio && (e4.screenAudio = this.screenAudio), void 0 !== this.customVideo && (e4.customVideo = ja2({}, this.customVideo)), void 0 !== this.customAudio && (e4.customAudio = ja2({}, this.customAudio)), e4;
  } }, { key: "toMinifiedJSONObject", value: function() {
    var e4 = {};
    return void 0 !== this.video && (e4.v = this.video), void 0 !== this.audio && (e4.a = this.audio), void 0 !== this.screenVideo && (e4.sv = this.screenVideo), void 0 !== this.screenAudio && (e4.sa = this.screenAudio), void 0 !== this.customVideo && (e4.cv = ja2({}, this.customVideo)), void 0 !== this.customAudio && (e4.ca = ja2({}, this.customAudio)), e4;
  } }, { key: "normalize", value: function() {
    function e4(e5, t3) {
      return e5 && 1 === Object.keys(e5).length && e5["*"] === t3;
    }
    return !(true !== this.video || true !== this.audio || true !== this.screenVideo || true !== this.screenAudio || !e4(this.customVideo, true) || !e4(this.customAudio, true)) || (false !== this.video || false !== this.audio || false !== this.screenVideo || false !== this.screenAudio || !e4(this.customVideo, false) || !e4(this.customAudio, false)) && this;
  } }], [{ key: "fromBoolean", value: function(t3) {
    return new e3({ video: t3, audio: t3, screenVideo: t3, screenAudio: t3, customVideo: { "*": t3 }, customAudio: { "*": t3 } });
  } }, { key: "fromJSONObject", value: function(t3) {
    return new e3({ video: t3.video, audio: t3.audio, screenVideo: t3.screenVideo, screenAudio: t3.screenAudio, customVideo: void 0 !== t3.customVideo ? ja2({}, t3.customVideo) : void 0, customAudio: void 0 !== t3.customAudio ? ja2({}, t3.customAudio) : void 0 });
  } }, { key: "fromMinifiedJSONObject", value: function(t3) {
    return new e3({ video: t3.v, audio: t3.a, screenVideo: t3.sv, screenAudio: t3.sa, customVideo: t3.cv, customAudio: t3.ca });
  } }, { key: "validateJSONObject", value: function(e4, t3) {
    if ("boolean" == typeof e4)
      return [true];
    if ("object" !== n2(e4))
      return [false, "invalid (non-object, non-boolean) value in canReceive"];
    for (var r3 = Object.keys(e4), i3 = 0, o3 = r3; i3 < o3.length; i3++) {
      var s3 = o3[i3];
      if (!La2.includes(s3))
        return [false, "invalid media type '".concat(s3, "' in canReceive")];
      if (Na2.includes(s3)) {
        if ("boolean" != typeof e4[s3])
          return [false, "invalid (non-boolean) value for media type '".concat(s3, "' in canReceive")];
      } else {
        if ("object" !== n2(e4[s3]))
          return [false, "invalid (non-object) value for media type '".concat(s3, "' in canReceive")];
        for (var a3 = 0, c3 = Object.values(e4[s3]); a3 < c3.length; a3++) {
          if ("boolean" != typeof c3[a3])
            return [false, "invalid (non-boolean) value for entry within '".concat(s3, "' in canReceive")];
        }
        if (t3 && void 0 === e4[s3]["*"])
          return [false, `canReceive "base" permission must specify "*" as an entry within '`.concat(s3, "'")];
      }
    }
    return t3 && r3.length !== La2.length ? [false, 'canReceive "base" permission must specify all media types: '.concat(La2.join(", "), " (or be set to a boolean shorthand)")] : [true];
  } }]);
}();
var Va2 = ["result"];
var Ja2 = ["preserveIframe"];
function $a2(e3, t3) {
  var n3 = Object.keys(e3);
  if (Object.getOwnPropertySymbols) {
    var r3 = Object.getOwnPropertySymbols(e3);
    t3 && (r3 = r3.filter(function(t4) {
      return Object.getOwnPropertyDescriptor(e3, t4).enumerable;
    })), n3.push.apply(n3, r3);
  }
  return n3;
}
function qa2(e3) {
  for (var t3 = 1; t3 < arguments.length; t3++) {
    var n3 = null != arguments[t3] ? arguments[t3] : {};
    t3 % 2 ? $a2(Object(n3), true).forEach(function(t4) {
      u2(e3, t4, n3[t4]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(n3)) : $a2(Object(n3)).forEach(function(t4) {
      Object.defineProperty(e3, t4, Object.getOwnPropertyDescriptor(n3, t4));
    });
  }
  return e3;
}
function za2() {
  try {
    var e3 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
  } catch (e4) {
  }
  return (za2 = function() {
    return !!e3;
  })();
}
function Wa2(e3, t3) {
  var n3 = "undefined" != typeof Symbol && e3[Symbol.iterator] || e3["@@iterator"];
  if (!n3) {
    if (Array.isArray(e3) || (n3 = function(e4, t4) {
      if (e4) {
        if ("string" == typeof e4)
          return Ha2(e4, t4);
        var n4 = {}.toString.call(e4).slice(8, -1);
        return "Object" === n4 && e4.constructor && (n4 = e4.constructor.name), "Map" === n4 || "Set" === n4 ? Array.from(e4) : "Arguments" === n4 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n4) ? Ha2(e4, t4) : void 0;
      }
    }(e3)) || t3 && e3 && "number" == typeof e3.length) {
      n3 && (e3 = n3);
      var r3 = 0, i3 = function() {
      };
      return { s: i3, n: function() {
        return r3 >= e3.length ? { done: true } : { done: false, value: e3[r3++] };
      }, e: function(e4) {
        throw e4;
      }, f: i3 };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var o3, s3 = true, a3 = false;
  return { s: function() {
    n3 = n3.call(e3);
  }, n: function() {
    var e4 = n3.next();
    return s3 = e4.done, e4;
  }, e: function(e4) {
    a3 = true, o3 = e4;
  }, f: function() {
    try {
      s3 || null == n3.return || n3.return();
    } finally {
      if (a3)
        throw o3;
    }
  } };
}
function Ha2(e3, t3) {
  (null == t3 || t3 > e3.length) && (t3 = e3.length);
  for (var n3 = 0, r3 = Array(t3); n3 < t3; n3++)
    r3[n3] = e3[n3];
  return r3;
}
var Ga2 = {};
var Qa2 = "video";
var Ka2 = "voice";
var Ya2 = ys2() ? { data: {} } : { data: {}, topology: "none" };
var Xa2 = { present: 0, hidden: 0 };
var Za2 = { maxBitrate: { min: 1e5, max: 25e5 }, maxFramerate: { min: 1, max: 30 }, scaleResolutionDownBy: { min: 1, max: 8 } };
var ec2 = Object.keys(Za2);
var tc2 = ["state", "volume", "simulcastEncodings"];
var nc2 = { androidInCallNotification: { title: "string", subtitle: "string", iconName: "string", disableForCustomOverride: "boolean" }, disableAutoDeviceManagement: { audio: "boolean", video: "boolean" } };
var rc2 = { id: { iconPath: "string", iconPathDarkMode: "string", label: "string", tooltip: "string", visualState: "'default' | 'sidebar-open' | 'active'" } };
var ic2 = { id: { allow: "string", controlledBy: "'*' | 'owners' | string[]", csp: "string", iconURL: "string", label: "string", loading: "'eager' | 'lazy'", location: "'main' | 'sidebar'", name: "string", referrerPolicy: "string", sandbox: "string", src: "string", srcdoc: "string", shared: "string[] | 'owners' | boolean" } };
var oc2 = { customIntegrations: { validate: Pc2, help: Tc2() }, customTrayButtons: { validate: Oc2, help: "customTrayButtons should be a dictionary of the type ".concat(JSON.stringify(rc2)) }, url: { validate: function(e3) {
  return "string" == typeof e3;
}, help: "url should be a string" }, baseUrl: { validate: function(e3) {
  return "string" == typeof e3;
}, help: "baseUrl should be a string" }, token: { validate: function(e3) {
  return "string" == typeof e3;
}, help: "token should be a string", queryString: "t" }, dailyConfig: { validate: function(e3, t3) {
  try {
    return t3.validateDailyConfig(e3), true;
  } catch (e4) {
    console.error("Failed to validate dailyConfig", e4);
  }
  return false;
}, help: "Unsupported dailyConfig. Check error logs for detailed info." }, reactNativeConfig: { validate: function(e3) {
  return Ac2(e3, nc2);
}, help: "reactNativeConfig should look like ".concat(JSON.stringify(nc2), ", all fields optional") }, lang: { validate: function(e3) {
  return ["da", "de", "en-us", "en", "es", "fi", "fr", "it", "jp", "ka", "nl", "no", "pl", "pt", "pt-BR", "ru", "sv", "tr", "user"].includes(e3);
}, help: "language not supported. Options are: da, de, en-us, en, es, fi, fr, it, jp, ka, nl, no, pl, pt, pt-BR, ru, sv, tr, user" }, userName: true, userData: { validate: function(e3) {
  try {
    return yc2(e3), true;
  } catch (e4) {
    return console.error(e4), false;
  }
}, help: "invalid userData type provided" }, startVideoOff: true, startAudioOff: true, allowLocalVideo: true, allowLocalAudio: true, activeSpeakerMode: true, showLeaveButton: true, showLocalVideo: true, showParticipantsBar: true, showFullscreenButton: true, showUserNameChangeUI: true, iframeStyle: true, customLayout: true, cssFile: true, cssText: true, bodyClass: true, videoSource: { validate: function(e3, t3) {
  if ("boolean" == typeof e3)
    return t3._preloadCache.allowLocalVideo = e3, true;
  var n3;
  if (e3 instanceof MediaStreamTrack)
    t3._sharedTracks.videoTrack = e3, n3 = { customTrack: ls2 };
  else {
    if (delete t3._sharedTracks.videoTrack, "string" != typeof e3)
      return console.error("videoSource must be a MediaStreamTrack, boolean, or a string"), false;
    n3 = { deviceId: e3 };
  }
  return t3._updatePreloadCacheInputSettings({ video: { settings: n3 } }, false), true;
} }, audioSource: { validate: function(e3, t3) {
  if ("boolean" == typeof e3)
    return t3._preloadCache.allowLocalAudio = e3, true;
  var n3;
  if (e3 instanceof MediaStreamTrack)
    t3._sharedTracks.audioTrack = e3, n3 = { customTrack: ls2 };
  else {
    if (delete t3._sharedTracks.audioTrack, "string" != typeof e3)
      return console.error("audioSource must be a MediaStreamTrack, boolean, or a string"), false;
    n3 = { deviceId: e3 };
  }
  return t3._updatePreloadCacheInputSettings({ audio: { settings: n3 } }, false), true;
} }, subscribeToTracksAutomatically: { validate: function(e3, t3) {
  return t3._preloadCache.subscribeToTracksAutomatically = e3, true;
} }, theme: { validate: function(e3) {
  var t3 = ["accent", "accentText", "background", "backgroundAccent", "baseText", "border", "mainAreaBg", "mainAreaBgAccent", "mainAreaText", "supportiveText"], r3 = function(e4) {
    for (var n3 = 0, r4 = Object.keys(e4); n3 < r4.length; n3++) {
      var i3 = r4[n3];
      if (!t3.includes(i3))
        return console.error('unsupported color "'.concat(i3, '". Valid colors: ').concat(t3.join(", "))), false;
      if (!e4[i3].match(/^#[0-9a-f]{6}|#[0-9a-f]{3}$/i))
        return console.error("".concat(i3, ' theme color should be provided in valid hex color format. Received: "').concat(e4[i3], '"')), false;
    }
    return true;
  };
  return "object" === n2(e3) && ("light" in e3 && "dark" in e3 || "colors" in e3) ? "light" in e3 && "dark" in e3 ? "colors" in e3.light ? "colors" in e3.dark ? r3(e3.light.colors) && r3(e3.dark.colors) : (console.error('Dark theme is missing "colors" property.', e3), false) : (console.error('Light theme is missing "colors" property.', e3), false) : r3(e3.colors) : (console.error('Theme must contain either both "light" and "dark" properties, or "colors".', e3), false);
}, help: "unsupported theme configuration. Check error logs for detailed info." }, layoutConfig: { validate: function(e3) {
  if ("grid" in e3) {
    var t3 = e3.grid;
    if ("maxTilesPerPage" in t3) {
      if (!Number.isInteger(t3.maxTilesPerPage))
        return console.error("grid.maxTilesPerPage should be an integer. You passed ".concat(t3.maxTilesPerPage, ".")), false;
      if (t3.maxTilesPerPage > 49)
        return console.error("grid.maxTilesPerPage can't be larger than 49 without sacrificing browser performance. Please contact us at https://www.daily.co/contact to talk about your use case."), false;
    }
    if ("minTilesPerPage" in t3) {
      if (!Number.isInteger(t3.minTilesPerPage))
        return console.error("grid.minTilesPerPage should be an integer. You passed ".concat(t3.minTilesPerPage, ".")), false;
      if (t3.minTilesPerPage < 1)
        return console.error("grid.minTilesPerPage can't be lower than 1."), false;
      if ("maxTilesPerPage" in t3 && t3.minTilesPerPage > t3.maxTilesPerPage)
        return console.error("grid.minTilesPerPage can't be higher than grid.maxTilesPerPage."), false;
    }
  }
  return true;
}, help: "unsupported layoutConfig. Check error logs for detailed info." }, receiveSettings: { validate: function(e3) {
  return bc2(e3, { allowAllParticipantsKey: false });
}, help: Ec2({ allowAllParticipantsKey: false }) }, sendSettings: { validate: function(e3, t3) {
  return !!function(e4, t4) {
    try {
      return t4.validateUpdateSendSettings(e4), true;
    } catch (e5) {
      return console.error("Failed to validate send settings", e5), false;
    }
  }(e3, t3) && (t3._preloadCache.sendSettings = e3, true);
}, help: "Invalid sendSettings provided. Check error logs for detailed info." }, inputSettings: { validate: function(e3, t3) {
  var n3;
  return !!_c2(e3) && (t3._inputSettings || (t3._inputSettings = {}), wc2(e3, null === (n3 = t3.properties) || void 0 === n3 ? void 0 : n3.dailyConfig, t3._sharedTracks), t3._updatePreloadCacheInputSettings(e3, true), true);
}, help: Cc2() }, layout: { validate: function(e3) {
  return "custom-v1" === e3 || "browser" === e3 || "none" === e3;
}, help: 'layout may only be set to "custom-v1"', queryString: "layout" }, emb: { queryString: "emb" }, embHref: { queryString: "embHref" }, dailyJsVersion: { queryString: "dailyJsVersion" }, proxy: { queryString: "proxy" }, strictMode: true, allowMultipleCallInstances: true };
var sc2 = { styles: { validate: function(e3) {
  for (var t3 in e3)
    if ("cam" !== t3 && "screen" !== t3)
      return false;
  if (e3.cam) {
    for (var n3 in e3.cam)
      if ("div" !== n3 && "video" !== n3)
        return false;
  }
  if (e3.screen) {
    for (var r3 in e3.screen)
      if ("div" !== r3 && "video" !== r3)
        return false;
  }
  return true;
}, help: "styles format should be a subset of: { cam: {div: {}, video: {}}, screen: {div: {}, video: {}} }" }, setSubscribedTracks: { validate: function(e3, t3) {
  if (t3._preloadCache.subscribeToTracksAutomatically)
    return false;
  var n3 = [true, false, "staged"];
  if (n3.includes(e3) || !ys2() && "avatar" === e3)
    return true;
  var r3 = ["audio", "video", "screenAudio", "screenVideo", "rmpAudio", "rmpVideo"], i3 = function(e4) {
    var t4 = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
    for (var o3 in e4)
      if ("custom" === o3) {
        if (!n3.includes(e4[o3]) && !i3(e4[o3], true))
          return false;
      } else {
        var s3 = !t4 && !r3.includes(o3), a3 = !n3.includes(e4[o3]);
        if (s3 || a3)
          return false;
      }
    return true;
  };
  return i3(e3);
}, help: "setSubscribedTracks cannot be used when setSubscribeToTracksAutomatically is enabled, and should be of the form: " + "true".concat(ys2() ? "" : " | 'avatar'", " | false | 'staged' | { [audio: true|false|'staged'], [video: true|false|'staged'], [screenAudio: true|false|'staged'], [screenVideo: true|false|'staged'] }") }, setAudio: true, setVideo: true, setScreenShare: { validate: function(e3) {
  return false === e3;
}, help: "setScreenShare must be false, as it's only meant for stopping remote participants' screen shares" }, eject: true, updatePermissions: { validate: function(e3) {
  for (var t3 = 0, n3 = Object.entries(e3); t3 < n3.length; t3++) {
    var r3 = f2(n3[t3], 2), i3 = r3[0], o3 = r3[1];
    switch (i3) {
      case "hasPresence":
        if ("boolean" != typeof o3)
          return false;
        break;
      case "canSend":
        if (o3 instanceof Set || o3 instanceof Array || Array.isArray(o3)) {
          var s3, a3 = ["video", "audio", "screenVideo", "screenAudio", "customVideo", "customAudio"], c3 = Wa2(o3);
          try {
            for (c3.s(); !(s3 = c3.n()).done; ) {
              var l3 = s3.value;
              if (!a3.includes(l3))
                return false;
            }
          } catch (e4) {
            c3.e(e4);
          } finally {
            c3.f();
          }
        } else if ("boolean" != typeof o3)
          return false;
        (o3 instanceof Array || Array.isArray(o3)) && (e3.canSend = new Set(o3));
        break;
      case "canReceive":
        var u3 = f2(Ba2.validateJSONObject(o3), 2), d3 = u3[0], h3 = u3[1];
        if (!d3)
          return console.error(h3), false;
        break;
      case "canAdmin":
        if (o3 instanceof Set || o3 instanceof Array || Array.isArray(o3)) {
          var p3, v3 = ["participants", "streaming", "transcription"], g3 = Wa2(o3);
          try {
            for (g3.s(); !(p3 = g3.n()).done; ) {
              var m3 = p3.value;
              if (!v3.includes(m3))
                return false;
            }
          } catch (e4) {
            g3.e(e4);
          } finally {
            g3.f();
          }
        } else if ("boolean" != typeof o3)
          return false;
        (o3 instanceof Array || Array.isArray(o3)) && (e3.canAdmin = new Set(o3));
        break;
      default:
        return false;
    }
  }
  return true;
}, help: "updatePermissions can take hasPresence, canSend, canReceive, and canAdmin permissions. hasPresence must be a boolean. canSend can be a boolean or an Array or Set of media types (video, audio, screenVideo, screenAudio, customVideo, customAudio). canReceive must be an object specifying base, byUserId, and/or byParticipantId fields (see documentation for more details). canAdmin can be a boolean or an Array or Set of admin types (participants, streaming, transcription)." } };
Promise.any || (Promise.any = function() {
  var e3 = h2(function* (e4) {
    return new Promise(function(t3, n3) {
      var r3 = [];
      e4.forEach(function(i3) {
        return Promise.resolve(i3).then(function(e5) {
          t3(e5);
        }).catch(function(t4) {
          r3.push(t4), r3.length === e4.length && n3(r3);
        });
      });
    });
  });
  return function(t3) {
    return e3.apply(this, arguments);
  };
}());
var ac2 = function() {
  function r3(e3) {
    var n3, i4, o3, c4, l3, d4, p4 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
    if (t2(this, r3), o3 = this, c4 = a2(c4 = r3), u2(i4 = s2(o3, za2() ? Reflect.construct(c4, l3 || [], a2(o3).constructor) : c4.apply(o3, l3)), "startListeningForDeviceChanges", function() {
      Ca2(i4.handleDeviceChange);
    }), u2(i4, "stopListeningForDeviceChanges", function() {
      Ea2(i4.handleDeviceChange);
    }), u2(i4, "handleDeviceChange", function(e4) {
      e4 = e4.map(function(e5) {
        return JSON.parse(JSON.stringify(e5));
      }), i4.emitDailyJSEvent({ action: "available-devices-updated", availableDevices: e4 });
    }), u2(i4, "handleNativeAppStateChange", function() {
      var e4 = h2(function* (e5) {
        if ("destroyed" === e5)
          return console.warn("App has been destroyed before leaving the meeting. Cleaning up all the resources!"), void (yield i4.destroy());
        var t3 = "active" === e5;
        i4.disableReactNativeAutoDeviceManagement("video") || (t3 ? i4.camUnmutedBeforeLosingNativeActiveState && i4.setLocalVideo(true) : (i4.camUnmutedBeforeLosingNativeActiveState = i4.localVideo(), i4.camUnmutedBeforeLosingNativeActiveState && i4.setLocalVideo(false)));
      });
      return function(t3) {
        return e4.apply(this, arguments);
      };
    }()), u2(i4, "handleNativeAudioFocusChange", function(e4) {
      i4.disableReactNativeAutoDeviceManagement("audio") || (i4._hasNativeAudioFocus = e4, i4.toggleParticipantAudioBasedOnNativeAudioFocus(), i4._hasNativeAudioFocus ? i4.micUnmutedBeforeLosingNativeAudioFocus && i4.setLocalAudio(true) : (i4.micUnmutedBeforeLosingNativeAudioFocus = i4.localAudio(), i4.setLocalAudio(false)));
    }), u2(i4, "handleNativeSystemScreenCaptureStop", function() {
      i4.stopScreenShare();
    }), i4.strictMode = void 0 === p4.strictMode || p4.strictMode, i4.allowMultipleCallInstances = null !== (n3 = p4.allowMultipleCallInstances) && void 0 !== n3 && n3, Object.keys(Ga2).length && (i4._logDuplicateInstanceAttempt(), !i4.allowMultipleCallInstances)) {
      if (i4.strictMode)
        throw new Error("Duplicate DailyIframe instances are not allowed");
      console.warn("Using strictMode: false to allow multiple call instances is now deprecated. Set `allowMultipleCallInstances: true`");
    }
    if (window._daily || (window._daily = { pendings: [], instances: {} }), i4.callClientId = K2(), Ga2[(d4 = i4).callClientId] = d4, window._daily.instances[i4.callClientId] = {}, i4._sharedTracks = {}, window._daily.instances[i4.callClientId].tracks = i4._sharedTracks, p4.dailyJsVersion = r3.version(), i4._iframe = e3, i4._callObjectMode = "none" === p4.layout && !i4._iframe, i4._preloadCache = { subscribeToTracksAutomatically: true, outputDeviceId: null, inputSettings: null, sendSettings: null, videoTrackForNetworkConnectivityTest: null, videoTrackForConnectionQualityTest: null }, void 0 !== p4.showLocalVideo ? i4._callObjectMode ? console.error("showLocalVideo is not available in call object mode") : i4._showLocalVideo = !!p4.showLocalVideo : i4._showLocalVideo = true, void 0 !== p4.showParticipantsBar ? i4._callObjectMode ? console.error("showParticipantsBar is not available in call object mode") : i4._showParticipantsBar = !!p4.showParticipantsBar : i4._showParticipantsBar = true, void 0 !== p4.customIntegrations ? i4._callObjectMode ? console.error("customIntegrations is not available in call object mode") : i4._customIntegrations = p4.customIntegrations : i4._customIntegrations = {}, void 0 !== p4.customTrayButtons ? i4._callObjectMode ? console.error("customTrayButtons is not available in call object mode") : i4._customTrayButtons = p4.customTrayButtons : i4._customTrayButtons = {}, void 0 !== p4.activeSpeakerMode ? i4._callObjectMode ? console.error("activeSpeakerMode is not available in call object mode") : i4._activeSpeakerMode = !!p4.activeSpeakerMode : i4._activeSpeakerMode = false, p4.receiveSettings ? i4._callObjectMode ? i4._receiveSettings = p4.receiveSettings : console.error("receiveSettings is only available in call object mode") : i4._receiveSettings = {}, i4.validateProperties(p4), i4.properties = qa2({}, p4), i4._inputSettings || (i4._inputSettings = {}), i4._callObjectLoader = i4._callObjectMode ? new ea2(i4.callClientId) : null, i4._callState = vi2, i4._isPreparingToJoin = false, i4._accessState = { access: Oi2 }, i4._meetingSessionSummary = {}, i4._finalSummaryOfPrevSession = {}, i4._meetingSessionState = Lc(Ya2, i4._callObjectMode), i4._nativeInCallAudioMode = Qa2, i4._participants = {}, i4._isScreenSharing = false, i4._participantCounts = Xa2, i4._rmpPlayerState = {}, i4._waitingParticipants = {}, i4._network = { threshold: "good", quality: 100, networkState: "unknown", stats: {} }, i4._activeSpeaker = {}, i4._localAudioLevel = 0, i4._isLocalAudioLevelObserverRunning = false, i4._remoteParticipantsAudioLevel = {}, i4._isRemoteParticipantsAudioLevelObserverRunning = false, i4._maxAppMessageSize = rs2, i4._messageChannel = ys2() ? new zs2() : new Js2(), i4._iframe && (i4._iframe.requestFullscreen ? i4._iframe.addEventListener("fullscreenchange", function() {
      document.fullscreenElement === i4._iframe ? (i4.emitDailyJSEvent({ action: Wo2 }), i4.sendMessageToCallMachine({ action: Wo2 })) : (i4.emitDailyJSEvent({ action: Ho2 }), i4.sendMessageToCallMachine({ action: Ho2 }));
    }) : i4._iframe.webkitRequestFullscreen && i4._iframe.addEventListener("webkitfullscreenchange", function() {
      document.webkitFullscreenElement === i4._iframe ? (i4.emitDailyJSEvent({ action: Wo2 }), i4.sendMessageToCallMachine({ action: Wo2 })) : (i4.emitDailyJSEvent({ action: Ho2 }), i4.sendMessageToCallMachine({ action: Ho2 }));
    })), ys2()) {
      var f3 = i4.nativeUtils();
      f3.addAudioFocusChangeListener && f3.removeAudioFocusChangeListener && f3.addAppStateChangeListener && f3.removeAppStateChangeListener && f3.addSystemScreenCaptureStopListener && f3.removeSystemScreenCaptureStopListener || console.warn("expected (add|remove)(AudioFocusChange|AppActiveStateChange|SystemScreenCaptureStop)Listener to be available in React Native"), i4._hasNativeAudioFocus = true, f3.addAudioFocusChangeListener(i4.handleNativeAudioFocusChange), f3.addAppStateChangeListener(i4.handleNativeAppStateChange), f3.addSystemScreenCaptureStopListener(i4.handleNativeSystemScreenCaptureStop);
    }
    return i4._callObjectMode && i4.startListeningForDeviceChanges(), i4._messageChannel.addListenerForMessagesFromCallMachine(i4.handleMessageFromCallMachine, i4.callClientId, i4), i4;
  }
  return l2(r3, x2), o2(r3, [{ key: "destroy", value: (ee3 = h2(function* () {
    var e3;
    try {
      yield this.leave();
    } catch (e4) {
    }
    var t3 = this._iframe;
    if (t3) {
      var n3 = t3.parentElement;
      n3 && n3.removeChild(t3);
    }
    if (this._messageChannel.removeListener(this.handleMessageFromCallMachine), ys2()) {
      var r4 = this.nativeUtils();
      r4.removeAudioFocusChangeListener(this.handleNativeAudioFocusChange), r4.removeAppStateChangeListener(this.handleNativeAppStateChange), r4.removeSystemScreenCaptureStopListener(this.handleNativeSystemScreenCaptureStop);
    }
    this._callObjectMode && this.stopListeningForDeviceChanges(), this.resetMeetingDependentVars(), this._destroyed = true, this.emitDailyJSEvent({ action: "call-instance-destroyed" }), delete Ga2[this.callClientId], (null === (e3 = window) || void 0 === e3 || null === (e3 = e3._daily) || void 0 === e3 ? void 0 : e3.instances) && delete window._daily.instances[this.callClientId], this.strictMode && (this.callClientId = void 0);
  }), function() {
    return ee3.apply(this, arguments);
  }) }, { key: "isDestroyed", value: function() {
    return !!this._destroyed;
  } }, { key: "loadCss", value: function(e3) {
    var t3 = e3.bodyClass, n3 = e3.cssFile, r4 = e3.cssText;
    return gc2(), this.sendMessageToCallMachine({ action: "load-css", cssFile: this.absoluteUrl(n3), bodyClass: t3, cssText: r4 }), this;
  } }, { key: "iframe", value: function() {
    return gc2(), this._iframe;
  } }, { key: "meetingState", value: function() {
    return this._callState;
  } }, { key: "accessState", value: function() {
    return fc2(this._callObjectMode, "accessState()"), this._accessState;
  } }, { key: "participants", value: function() {
    return this._participants;
  } }, { key: "participantCounts", value: function() {
    return this._participantCounts;
  } }, { key: "waitingParticipants", value: function() {
    return fc2(this._callObjectMode, "waitingParticipants()"), this._waitingParticipants;
  } }, { key: "validateParticipantProperties", value: function(e3, t3) {
    for (var n3 in t3) {
      if (!sc2[n3])
        throw new Error("unrecognized updateParticipant property ".concat(n3));
      if (sc2[n3].validate && !sc2[n3].validate(t3[n3], this, this._participants[e3]))
        throw new Error(sc2[n3].help);
    }
  } }, { key: "updateParticipant", value: function(e3, t3) {
    return this._participants.local && this._participants.local.session_id === e3 && (e3 = "local"), e3 && t3 && (this.validateParticipantProperties(e3, t3), this.sendMessageToCallMachine({ action: "update-participant", id: e3, properties: t3 })), this;
  } }, { key: "updateParticipants", value: function(e3) {
    var t3 = this._participants.local && this._participants.local.session_id;
    for (var n3 in e3)
      n3 === t3 && (n3 = "local"), n3 && e3[n3] && this.validateParticipantProperties(n3, e3[n3]);
    return this.sendMessageToCallMachine({ action: "update-participants", participants: e3 }), this;
  } }, { key: "updateWaitingParticipant", value: (Y3 = h2(function* () {
    var e3 = this, t3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "", r4 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
    if (fc2(this._callObjectMode, "updateWaitingParticipant()"), lc2(this._callState, "updateWaitingParticipant()"), "string" != typeof t3 || "object" !== n2(r4))
      throw new Error("updateWaitingParticipant() must take an id string and a updates object");
    return new Promise(function(n3, i4) {
      e3.sendMessageToCallMachine({ action: "daily-method-update-waiting-participant", id: t3, updates: r4 }, function(e4) {
        e4.error && i4(e4.error), e4.id || i4(new Error("unknown error in updateWaitingParticipant()")), n3({ id: e4.id });
      });
    });
  }), function() {
    return Y3.apply(this, arguments);
  }) }, { key: "updateWaitingParticipants", value: (G3 = h2(function* () {
    var e3 = this, t3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
    if (fc2(this._callObjectMode, "updateWaitingParticipants()"), lc2(this._callState, "updateWaitingParticipants()"), "object" !== n2(t3))
      throw new Error("updateWaitingParticipants() must take a mapping between ids and update objects");
    return new Promise(function(n3, r4) {
      e3.sendMessageToCallMachine({ action: "daily-method-update-waiting-participants", updatesById: t3 }, function(e4) {
        e4.error && r4(e4.error), e4.ids || r4(new Error("unknown error in updateWaitingParticipants()")), n3({ ids: e4.ids });
      });
    });
  }), function() {
    return G3.apply(this, arguments);
  }) }, { key: "requestAccess", value: (H3 = h2(function* () {
    var e3 = this, t3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, n3 = t3.access, r4 = void 0 === n3 ? { level: Pi2 } : n3, i4 = t3.name, o3 = void 0 === i4 ? "" : i4;
    return fc2(this._callObjectMode, "requestAccess()"), lc2(this._callState, "requestAccess()"), new Promise(function(t4, n4) {
      e3.sendMessageToCallMachine({ action: "daily-method-request-access", access: r4, name: o3 }, function(e4) {
        e4.error && n4(e4.error), e4.access || n4(new Error("unknown error in requestAccess()")), t4({ access: e4.access, granted: e4.granted });
      });
    });
  }), function() {
    return H3.apply(this, arguments);
  }) }, { key: "localAudio", value: function() {
    return this._participants.local ? !["blocked", "off"].includes(this._participants.local.tracks.audio.state) : null;
  } }, { key: "localVideo", value: function() {
    return this._participants.local ? !["blocked", "off"].includes(this._participants.local.tracks.video.state) : null;
  } }, { key: "setLocalAudio", value: function(e3) {
    var t3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
    return "forceDiscardTrack" in t3 && (ys2() ? (console.warn("forceDiscardTrack option not supported in React Native; ignoring"), t3 = {}) : e3 && (console.warn("forceDiscardTrack option only supported when calling setLocalAudio(false); ignoring"), t3 = {})), this.sendMessageToCallMachine({ action: "local-audio", state: e3, options: t3 }), this;
  } }, { key: "localScreenAudio", value: function() {
    return this._participants.local ? !["blocked", "off"].includes(this._participants.local.tracks.screenAudio.state) : null;
  } }, { key: "localScreenVideo", value: function() {
    return this._participants.local ? !["blocked", "off"].includes(this._participants.local.tracks.screenVideo.state) : null;
  } }, { key: "updateScreenShare", value: function(e3) {
    if (this._isScreenSharing)
      return this.sendMessageToCallMachine({ action: "local-screen-update", options: e3 }), this;
    console.warn("There is no screen share in progress. Try calling startScreenShare first.");
  } }, { key: "setLocalVideo", value: function(e3) {
    return this.sendMessageToCallMachine({ action: "local-video", state: e3 }), this;
  } }, { key: "_setAllowLocalAudio", value: function(e3) {
    if (this._preloadCache.allowLocalAudio = e3, this._callMachineInitialized)
      return this.sendMessageToCallMachine({ action: "set-allow-local-audio", state: e3 }), this;
  } }, { key: "_setAllowLocalVideo", value: function(e3) {
    if (this._preloadCache.allowLocalVideo = e3, this._callMachineInitialized)
      return this.sendMessageToCallMachine({ action: "set-allow-local-video", state: e3 }), this;
  } }, { key: "getReceiveSettings", value: (W3 = h2(function* (e3) {
    var t3 = this, r4 = (arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}).showInheritedValues, i4 = void 0 !== r4 && r4;
    if (fc2(this._callObjectMode, "getReceiveSettings()"), !this._callMachineInitialized)
      return this._receiveSettings;
    switch (n2(e3)) {
      case "string":
        return new Promise(function(n3) {
          t3.sendMessageToCallMachine({ action: "get-single-participant-receive-settings", id: e3, showInheritedValues: i4 }, function(e4) {
            n3(e4.receiveSettings);
          });
        });
      case "undefined":
        return this._receiveSettings;
      default:
        throw new Error('first argument to getReceiveSettings() must be a participant id (or "base"), or there should be no arguments');
    }
  }), function(e3) {
    return W3.apply(this, arguments);
  }) }, { key: "updateReceiveSettings", value: (z3 = h2(function* (e3) {
    var t3 = this;
    if (fc2(this._callObjectMode, "updateReceiveSettings()"), !bc2(e3, { allowAllParticipantsKey: true }))
      throw new Error(Ec2({ allowAllParticipantsKey: true }));
    return lc2(this._callState, "updateReceiveSettings()", "To specify receive settings earlier, use the receiveSettings config property."), new Promise(function(n3) {
      t3.sendMessageToCallMachine({ action: "update-receive-settings", receiveSettings: e3 }, function(e4) {
        n3({ receiveSettings: e4.receiveSettings });
      });
    });
  }), function(e3) {
    return z3.apply(this, arguments);
  }) }, { key: "_prepInputSettingsForSharing", value: function(e3, t3) {
    if (e3) {
      var n3 = {};
      if (e3.audio) {
        var r4, i4, o3;
        e3.audio.settings && (!Object.keys(e3.audio.settings).length && t3 || (n3.audio = { settings: qa2({}, e3.audio.settings) })), t3 && null !== (r4 = n3.audio) && void 0 !== r4 && null !== (r4 = r4.settings) && void 0 !== r4 && r4.customTrack && (n3.audio.settings = { customTrack: this._sharedTracks.audioTrack });
        var s3 = "none" === (null === (i4 = e3.audio.processor) || void 0 === i4 ? void 0 : i4.type) && (null === (o3 = e3.audio.processor) || void 0 === o3 ? void 0 : o3._isDefaultWhenNone);
        if (e3.audio.processor && !s3) {
          var a3 = qa2({}, e3.audio.processor);
          delete a3._isDefaultWhenNone, n3.audio = qa2(qa2({}, n3.audio), {}, { processor: a3 });
        }
      }
      if (e3.video) {
        var c4, l3, u3;
        e3.video.settings && (!Object.keys(e3.video.settings).length && t3 || (n3.video = { settings: qa2({}, e3.video.settings) })), t3 && null !== (c4 = n3.video) && void 0 !== c4 && null !== (c4 = c4.settings) && void 0 !== c4 && c4.customTrack && (n3.video.settings = { customTrack: this._sharedTracks.videoTrack });
        var d4 = "none" === (null === (l3 = e3.video.processor) || void 0 === l3 ? void 0 : l3.type) && (null === (u3 = e3.video.processor) || void 0 === u3 ? void 0 : u3._isDefaultWhenNone);
        if (e3.video.processor && !d4) {
          var h3 = qa2({}, e3.video.processor);
          delete h3._isDefaultWhenNone, n3.video = qa2(qa2({}, n3.video), {}, { processor: h3 });
        }
      }
      return n3;
    }
  } }, { key: "getInputSettings", value: function() {
    var e3 = this;
    return gc2(), new Promise(function(t3) {
      t3(e3._getInputSettings());
    });
  } }, { key: "_getInputSettings", value: function() {
    var e3, t3, n3, r4, i4, o3, s3 = { processor: { type: "none", _isDefaultWhenNone: true } };
    this._inputSettings ? (e3 = (null === (n3 = this._inputSettings) || void 0 === n3 ? void 0 : n3.video) || s3, t3 = (null === (r4 = this._inputSettings) || void 0 === r4 ? void 0 : r4.audio) || s3) : (e3 = (null === (i4 = this._preloadCache) || void 0 === i4 || null === (i4 = i4.inputSettings) || void 0 === i4 ? void 0 : i4.video) || s3, t3 = (null === (o3 = this._preloadCache) || void 0 === o3 || null === (o3 = o3.inputSettings) || void 0 === o3 ? void 0 : o3.audio) || s3);
    var a3 = { audio: t3, video: e3 };
    return this._prepInputSettingsForSharing(a3, true);
  } }, { key: "_updatePreloadCacheInputSettings", value: function(e3, t3) {
    var n3 = this._inputSettings || {}, r4 = {};
    if (e3.video) {
      var i4, o3, s3;
      if (r4.video = {}, e3.video.settings)
        r4.video.settings = {}, t3 || e3.video.settings.customTrack || null === (s3 = n3.video) || void 0 === s3 || !s3.settings ? r4.video.settings = e3.video.settings : r4.video.settings = qa2(qa2({}, n3.video.settings), e3.video.settings), Object.keys(r4.video.settings).length || delete r4.video.settings;
      else
        null !== (i4 = n3.video) && void 0 !== i4 && i4.settings && (r4.video.settings = n3.video.settings);
      e3.video.processor ? r4.video.processor = e3.video.processor : null !== (o3 = n3.video) && void 0 !== o3 && o3.processor && (r4.video.processor = n3.video.processor);
    } else
      n3.video && (r4.video = n3.video);
    if (e3.audio) {
      var a3, c4, l3;
      if (r4.audio = {}, e3.audio.settings)
        r4.audio.settings = {}, t3 || e3.audio.settings.customTrack || null === (l3 = n3.audio) || void 0 === l3 || !l3.settings ? r4.audio.settings = e3.audio.settings : r4.audio.settings = qa2(qa2({}, n3.audio.settings), e3.audio.settings), Object.keys(r4.audio.settings).length || delete r4.audio.settings;
      else
        null !== (a3 = n3.audio) && void 0 !== a3 && a3.settings && (r4.audio.settings = n3.audio.settings);
      e3.audio.processor ? r4.audio.processor = e3.audio.processor : null !== (c4 = n3.audio) && void 0 !== c4 && c4.processor && (r4.audio.processor = n3.audio.processor);
    } else
      n3.audio && (r4.audio = n3.audio);
    this._maybeUpdateInputSettings(r4);
  } }, { key: "_devicesFromInputSettings", value: function(e3) {
    var t3, n3, r4 = (null == e3 || null === (t3 = e3.video) || void 0 === t3 || null === (t3 = t3.settings) || void 0 === t3 ? void 0 : t3.deviceId) || null, i4 = (null == e3 || null === (n3 = e3.audio) || void 0 === n3 || null === (n3 = n3.settings) || void 0 === n3 ? void 0 : n3.deviceId) || null, o3 = this._preloadCache.outputDeviceId || null;
    return { camera: r4 ? { deviceId: r4 } : {}, mic: i4 ? { deviceId: i4 } : {}, speaker: o3 ? { deviceId: o3 } : {} };
  } }, { key: "updateInputSettings", value: (q3 = h2(function* (e3) {
    var t3 = this;
    return gc2(), _c2(e3) ? e3.video || e3.audio ? (wc2(e3, this.properties.dailyConfig, this._sharedTracks), this._callObjectMode && !this._callMachineInitialized ? (this._updatePreloadCacheInputSettings(e3, true), this._getInputSettings()) : new Promise(function(n3, r4) {
      t3.sendMessageToCallMachine({ action: "update-input-settings", inputSettings: e3 }, function(i4) {
        if (i4.error)
          r4(i4.error);
        else {
          if (i4.returnPreloadCache)
            return t3._updatePreloadCacheInputSettings(e3, true), void n3(t3._getInputSettings());
          t3._maybeUpdateInputSettings(i4.inputSettings), n3(t3._prepInputSettingsForSharing(i4.inputSettings, true));
        }
      });
    })) : this._getInputSettings() : (console.error(Cc2()), Promise.reject(Cc2()));
  }), function(e3) {
    return q3.apply(this, arguments);
  }) }, { key: "setBandwidth", value: function(e3) {
    var t3 = e3.kbs, n3 = e3.trackConstraints;
    if (gc2(), this._callMachineInitialized)
      return this.sendMessageToCallMachine({ action: "set-bandwidth", kbs: t3, trackConstraints: n3 }), this;
  } }, { key: "getDailyLang", value: function() {
    var e3 = this;
    if (gc2(), this._callMachineInitialized)
      return new Promise(function(t3) {
        e3.sendMessageToCallMachine({ action: "get-daily-lang" }, function(e4) {
          delete e4.action, delete e4.callbackStamp, t3(e4);
        });
      });
  } }, { key: "setDailyLang", value: function(e3) {
    return gc2(), this.sendMessageToCallMachine({ action: "set-daily-lang", lang: e3 }), this;
  } }, { key: "setProxyUrl", value: function(e3) {
    return this.sendMessageToCallMachine({ action: "set-proxy-url", proxyUrl: e3 }), this;
  } }, { key: "setIceConfig", value: function(e3) {
    return this.sendMessageToCallMachine({ action: "set-ice-config", iceConfig: e3 }), this;
  } }, { key: "meetingSessionSummary", value: function() {
    return [_i2, wi2].includes(this._callState) ? this._finalSummaryOfPrevSession : this._meetingSessionSummary;
  } }, { key: "getMeetingSession", value: ($3 = h2(function* () {
    var e3 = this;
    return console.warn("getMeetingSession() is deprecated: use meetingSessionSummary(), which will return immediately"), lc2(this._callState, "getMeetingSession()"), new Promise(function(t3) {
      e3.sendMessageToCallMachine({ action: "get-meeting-session" }, function(e4) {
        delete e4.action, delete e4.callbackStamp, t3(e4);
      });
    });
  }), function() {
    return $3.apply(this, arguments);
  }) }, { key: "meetingSessionState", value: function() {
    return lc2(this._callState, "meetingSessionState"), this._meetingSessionState;
  } }, { key: "setMeetingSessionData", value: function(e3) {
    var t3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "replace";
    fc2(this._callObjectMode, "setMeetingSessionData()"), lc2(this._callState, "setMeetingSessionData");
    try {
      !function(e4, t4) {
        new Qs2({ data: e4, mergeStrategy: t4 });
      }(e3, t3);
    } catch (e4) {
      throw console.error(e4), e4;
    }
    try {
      this.sendMessageToCallMachine({ action: "set-session-data", data: e3, mergeStrategy: t3 });
    } catch (e4) {
      throw new Error("Error setting meeting session data: ".concat(e4));
    }
  } }, { key: "setUserName", value: function(e3, t3) {
    var n3 = this;
    return this.properties.userName = e3, new Promise(function(r4) {
      n3.sendMessageToCallMachine({ action: "set-user-name", name: null != e3 ? e3 : "", thisMeetingOnly: ys2() || !!t3 && !!t3.thisMeetingOnly }, function(e4) {
        delete e4.action, delete e4.callbackStamp, r4(e4);
      });
    });
  } }, { key: "setUserData", value: (J3 = h2(function* (e3) {
    var t3 = this;
    try {
      yc2(e3);
    } catch (e4) {
      throw console.error(e4), e4;
    }
    if (this.properties.userData = e3, this._callMachineInitialized)
      return new Promise(function(n3) {
        try {
          t3.sendMessageToCallMachine({ action: "set-user-data", userData: e3 }, function(e4) {
            delete e4.action, delete e4.callbackStamp, n3(e4);
          });
        } catch (e4) {
          throw new Error("Error setting user data: ".concat(e4));
        }
      });
  }), function(e3) {
    return J3.apply(this, arguments);
  }) }, { key: "validateAudioLevelInterval", value: function(e3) {
    if (e3 && (e3 < 100 || "number" != typeof e3))
      throw new Error("The interval must be a number greater than or equal to 100 milliseconds.");
  } }, { key: "startLocalAudioLevelObserver", value: function(e3) {
    var t3 = this;
    if ("undefined" == typeof AudioWorkletNode && !ys2())
      throw new Error("startLocalAudioLevelObserver() is not supported on this browser");
    if (this.validateAudioLevelInterval(e3), this._callMachineInitialized)
      return this._isLocalAudioLevelObserverRunning = true, new Promise(function(n3, r4) {
        t3.sendMessageToCallMachine({ action: "start-local-audio-level-observer", interval: e3 }, function(e4) {
          t3._isLocalAudioLevelObserverRunning = !e4.error, e4.error ? r4({ error: e4.error }) : n3();
        });
      });
    this._preloadCache.localAudioLevelObserver = { enabled: true, interval: e3 };
  } }, { key: "isLocalAudioLevelObserverRunning", value: function() {
    return this._isLocalAudioLevelObserverRunning;
  } }, { key: "stopLocalAudioLevelObserver", value: function() {
    this._preloadCache.localAudioLevelObserver = null, this._localAudioLevel = 0, this._isLocalAudioLevelObserverRunning = false, this.sendMessageToCallMachine({ action: "stop-local-audio-level-observer" });
  } }, { key: "startRemoteParticipantsAudioLevelObserver", value: function(e3) {
    var t3 = this;
    if (this.validateAudioLevelInterval(e3), this._callMachineInitialized)
      return this._isRemoteParticipantsAudioLevelObserverRunning = true, new Promise(function(n3, r4) {
        t3.sendMessageToCallMachine({ action: "start-remote-participants-audio-level-observer", interval: e3 }, function(e4) {
          t3._isRemoteParticipantsAudioLevelObserverRunning = !e4.error, e4.error ? r4({ error: e4.error }) : n3();
        });
      });
    this._preloadCache.remoteParticipantsAudioLevelObserver = { enabled: true, interval: e3 };
  } }, { key: "isRemoteParticipantsAudioLevelObserverRunning", value: function() {
    return this._isRemoteParticipantsAudioLevelObserverRunning;
  } }, { key: "stopRemoteParticipantsAudioLevelObserver", value: function() {
    this._preloadCache.remoteParticipantsAudioLevelObserver = null, this._remoteParticipantsAudioLevel = {}, this._isRemoteParticipantsAudioLevelObserverRunning = false, this.sendMessageToCallMachine({ action: "stop-remote-participants-audio-level-observer" });
  } }, { key: "startCamera", value: (V3 = h2(function* () {
    var e3 = this, t3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
    if (fc2(this._callObjectMode, "startCamera()"), dc2(this._callState, this._isPreparingToJoin, "startCamera()", "Did you mean to use setLocalAudio() and/or setLocalVideo() instead?"), this.needsLoad())
      try {
        yield this.load(t3);
      } catch (e4) {
        return Promise.reject(e4);
      }
    else {
      if (this._didPreAuth) {
        if (t3.url && t3.url !== this.properties.url)
          return console.error("url in startCamera() is different than the one used in preAuth()"), Promise.reject();
        if (t3.token && t3.token !== this.properties.token)
          return console.error("token in startCamera() is different than the one used in preAuth()"), Promise.reject();
      }
      this.validateProperties(t3), this.properties = qa2(qa2({}, this.properties), t3);
    }
    return new Promise(function(t4) {
      e3._preloadCache.inputSettings = e3._prepInputSettingsForSharing(e3._inputSettings, false), e3.sendMessageToCallMachine({ action: "start-camera", properties: cc2(e3.properties, e3.callClientId), preloadCache: cc2(e3._preloadCache, e3.callClientId) }, function(e4) {
        t4({ camera: e4.camera, mic: e4.mic, speaker: e4.speaker });
      });
    });
  }), function() {
    return V3.apply(this, arguments);
  }) }, { key: "validateCustomTrack", value: function(e3, t3, n3) {
    if (n3 && n3.length > 50)
      throw new Error("Custom track `trackName` must not be more than 50 characters");
    if (t3 && "music" !== t3 && "speech" !== t3 && !(t3 instanceof Object))
      throw new Error("Custom track `mode` must be either `music` | `speech` | `DailyMicAudioModeSettings` or `undefined`");
    if (!!n3 && ["cam-audio", "cam-video", "screen-video", "screen-audio", "rmpAudio", "rmpVideo", "customVideoDefaults"].includes(n3))
      throw new Error("Custom track `trackName` must not match a track name already used by daily: cam-audio, cam-video, customVideoDefaults, screen-video, screen-audio, rmpAudio, rmpVideo");
    if (!(e3 instanceof MediaStreamTrack))
      throw new Error("Custom tracks provided must be instances of MediaStreamTrack");
  } }, { key: "startCustomTrack", value: function() {
    var e3 = this, t3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : { track, mode, trackName };
    return gc2(), lc2(this._callState, "startCustomTrack()"), this.validateCustomTrack(t3.track, t3.mode, t3.trackName), new Promise(function(n3, r4) {
      e3._sharedTracks.customTrack = t3.track, t3.track = ls2, e3.sendMessageToCallMachine({ action: "start-custom-track", properties: t3 }, function(e4) {
        e4.error ? r4({ error: e4.error }) : n3(e4.mediaTag);
      });
    });
  } }, { key: "stopCustomTrack", value: function(e3) {
    var t3 = this;
    return gc2(), lc2(this._callState, "stopCustomTrack()"), new Promise(function(n3) {
      t3.sendMessageToCallMachine({ action: "stop-custom-track", mediaTag: e3 }, function(e4) {
        n3(e4.mediaTag);
      });
    });
  } }, { key: "setCamera", value: function(e3) {
    var t3 = this;
    return mc2(), hc2(this._callMachineInitialized, "setCamera()"), new Promise(function(n3) {
      t3.sendMessageToCallMachine({ action: "set-camera", cameraDeviceId: e3 }, function(e4) {
        n3({ device: e4.device });
      });
    });
  } }, { key: "setAudioDevice", value: (U3 = h2(function* (e3) {
    return mc2(), this.nativeUtils().setAudioDevice(e3), { deviceId: yield this.nativeUtils().getAudioDevice() };
  }), function(e3) {
    return U3.apply(this, arguments);
  }) }, { key: "cycleCamera", value: function() {
    var e3 = this, t3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
    return new Promise(function(n3) {
      e3.sendMessageToCallMachine({ action: "cycle-camera", properties: t3 }, function(e4) {
        n3({ device: e4.device });
      });
    });
  } }, { key: "cycleMic", value: function() {
    var e3 = this;
    return gc2(), new Promise(function(t3) {
      e3.sendMessageToCallMachine({ action: "cycle-mic" }, function(e4) {
        t3({ device: e4.device });
      });
    });
  } }, { key: "getCameraFacingMode", value: function() {
    var e3 = this;
    return mc2(), new Promise(function(t3) {
      e3.sendMessageToCallMachine({ action: "get-camera-facing-mode" }, function(e4) {
        t3(e4.facingMode);
      });
    });
  } }, { key: "setInputDevicesAsync", value: (B3 = h2(function* (e3) {
    var t3 = this, n3 = e3.audioDeviceId, r4 = e3.videoDeviceId, i4 = e3.audioSource, o3 = e3.videoSource;
    if (gc2(), void 0 !== i4 && (n3 = i4), void 0 !== o3 && (r4 = o3), "boolean" == typeof n3 && (this._setAllowLocalAudio(n3), n3 = void 0), "boolean" == typeof r4 && (this._setAllowLocalVideo(r4), r4 = void 0), !n3 && !r4)
      return yield this.getInputDevices();
    var s3 = {};
    return n3 && (n3 instanceof MediaStreamTrack ? (this._sharedTracks.audioTrack = n3, n3 = ls2, s3.audio = { settings: { customTrack: n3 } }) : (delete this._sharedTracks.audioTrack, s3.audio = { settings: { deviceId: n3 } })), r4 && (r4 instanceof MediaStreamTrack ? (this._sharedTracks.videoTrack = r4, r4 = ls2, s3.video = { settings: { customTrack: r4 } }) : (delete this._sharedTracks.videoTrack, s3.video = { settings: { deviceId: r4 } })), this._callObjectMode && this.needsLoad() ? (this._updatePreloadCacheInputSettings(s3, false), this._devicesFromInputSettings(this._inputSettings)) : new Promise(function(e4) {
      t3.sendMessageToCallMachine({ action: "set-input-devices", audioDeviceId: n3, videoDeviceId: r4 }, function(n4) {
        if (delete n4.action, delete n4.callbackStamp, n4.returnPreloadCache)
          return t3._updatePreloadCacheInputSettings(s3, false), void e4(t3._devicesFromInputSettings(t3._inputSettings));
        e4(n4);
      });
    });
  }), function(e3) {
    return B3.apply(this, arguments);
  }) }, { key: "setOutputDeviceAsync", value: (F3 = h2(function* (e3) {
    var t3 = this, n3 = e3.outputDeviceId;
    return gc2(), n3 && (this._preloadCache.outputDeviceId = n3), this._callObjectMode && this.needsLoad() ? this._devicesFromInputSettings(this._inputSettings) : new Promise(function(e4) {
      t3.sendMessageToCallMachine({ action: "set-output-device", outputDeviceId: n3 }, function(n4) {
        delete n4.action, delete n4.callbackStamp, n4.returnPreloadCache ? e4(t3._devicesFromInputSettings(t3._inputSettings)) : e4(n4);
      });
    });
  }), function(e3) {
    return F3.apply(this, arguments);
  }) }, { key: "getInputDevices", value: (R3 = h2(function* () {
    var e3 = this;
    return this._callObjectMode && this.needsLoad() ? this._devicesFromInputSettings(this._inputSettings) : new Promise(function(t3) {
      e3.sendMessageToCallMachine({ action: "get-input-devices" }, function(n3) {
        n3.returnPreloadCache ? t3(e3._devicesFromInputSettings(e3._inputSettings)) : t3({ camera: n3.camera, mic: n3.mic, speaker: n3.speaker });
      });
    });
  }), function() {
    return R3.apply(this, arguments);
  }) }, { key: "nativeInCallAudioMode", value: function() {
    return mc2(), this._nativeInCallAudioMode;
  } }, { key: "setNativeInCallAudioMode", value: function(e3) {
    if (mc2(), [Qa2, Ka2].includes(e3)) {
      if (e3 !== this._nativeInCallAudioMode)
        return this._nativeInCallAudioMode = e3, !this.disableReactNativeAutoDeviceManagement("audio") && uc2(this._callState, this._isPreparingToJoin) && this.nativeUtils().setAudioMode(this._nativeInCallAudioMode), this;
    } else
      console.error("invalid in-call audio mode specified: ", e3);
  } }, { key: "preAuth", value: (D3 = h2(function* () {
    var e3 = this, t3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
    if (fc2(this._callObjectMode, "preAuth()"), dc2(this._callState, this._isPreparingToJoin, "preAuth()"), this.needsLoad() && (yield this.load(t3)), !t3.url)
      throw new Error("preAuth() requires at least a url to be provided");
    return this.validateProperties(t3), this.properties = qa2(qa2({}, this.properties), t3), new Promise(function(t4, n3) {
      e3._preloadCache.inputSettings = e3._prepInputSettingsForSharing(e3._inputSettings, false), e3.sendMessageToCallMachine({ action: "daily-method-preauth", properties: cc2(e3.properties, e3.callClientId), preloadCache: cc2(e3._preloadCache, e3.callClientId) }, function(r4) {
        return r4.error ? n3(r4.error) : r4.access ? (e3._didPreAuth = true, void t4({ access: r4.access })) : n3(new Error("unknown error in preAuth()"));
      });
    });
  }), function() {
    return D3.apply(this, arguments);
  }) }, { key: "load", value: (L3 = h2(function* (e3) {
    var t3 = this;
    if (this.needsLoad()) {
      if (this._destroyed && (this._logUseAfterDestroy(), this.strictMode))
        throw new Error("Use after destroy");
      if (e3 && (this.validateProperties(e3), this.properties = qa2(qa2({}, this.properties), e3)), !this._callObjectMode && !this.properties.url)
        throw new Error("can't load iframe meeting because url property isn't set");
      return this._updateCallState(gi2), this.emitDailyJSEvent({ action: to2 }), this._callObjectMode ? new Promise(function(e4, n3) {
        t3._callObjectLoader.cancel();
        var r4 = Date.now();
        t3._callObjectLoader.load(t3.properties.dailyConfig, function(n4) {
          t3._bundleLoadTime = n4 ? "no-op" : Date.now() - r4, t3._updateCallState(mi2), n4 && t3.emitDailyJSEvent({ action: ro2 }), e4();
        }, function(e5, r5) {
          if (t3.emitDailyJSEvent({ action: no2 }), !r5) {
            t3._updateCallState(wi2), t3.resetMeetingDependentVars();
            var i4 = { action: ns2, errorMsg: e5.msg, error: { type: "connection-error", msg: "Failed to load call object bundle.", details: { on: "load", sourceError: e5, bundleUrl: Z2(t3.properties.dailyConfig) } } };
            t3._maybeSendToSentry(i4), t3.emitDailyJSEvent(i4), n3(e5.msg);
          }
        });
      }) : (this._iframe.src = X2(this.assembleMeetingUrl(), this.properties.dailyConfig), new Promise(function(e4, n3) {
        t3._loadedCallback = function(r4) {
          t3._callState !== wi2 ? (t3._updateCallState(mi2), (t3.properties.cssFile || t3.properties.cssText) && t3.loadCss(t3.properties), e4()) : n3(r4);
        };
      }));
    }
  }), function(e3) {
    return L3.apply(this, arguments);
  }) }, { key: "join", value: (I3 = h2(function* () {
    var e3 = this, t3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
    this._testCallInProgress && this.stopTestCallQuality();
    var n3 = false;
    if (this.needsLoad()) {
      this.updateIsPreparingToJoin(true);
      try {
        yield this.load(t3);
      } catch (e4) {
        return this.updateIsPreparingToJoin(false), Promise.reject(e4);
      }
    } else {
      if (n3 = !(!this.properties.cssFile && !this.properties.cssText), this._didPreAuth) {
        if (t3.url && t3.url !== this.properties.url)
          return console.error("url in join() is different than the one used in preAuth()"), this.updateIsPreparingToJoin(false), Promise.reject();
        if (t3.token && t3.token !== this.properties.token)
          return console.error("token in join() is different than the one used in preAuth()"), this.updateIsPreparingToJoin(false), Promise.reject();
      }
      if (t3.url && !this._callObjectMode && t3.url && t3.url !== this.properties.url)
        return console.error("url in join() is different than the one used in load() (".concat(this.properties.url, " -> ").concat(t3.url, ")")), this.updateIsPreparingToJoin(false), Promise.reject();
      this.validateProperties(t3), this.properties = qa2(qa2({}, this.properties), t3);
    }
    return void 0 !== t3.showLocalVideo && (this._callObjectMode ? console.error("showLocalVideo is not available in callObject mode") : this._showLocalVideo = !!t3.showLocalVideo), void 0 !== t3.showParticipantsBar && (this._callObjectMode ? console.error("showParticipantsBar is not available in callObject mode") : this._showParticipantsBar = !!t3.showParticipantsBar), this._callState === bi2 || this._callState === yi2 ? (console.warn("already joined meeting, call leave() before joining again"), void this.updateIsPreparingToJoin(false)) : (this._updateCallState(yi2, false), this.emitDailyJSEvent({ action: so2 }), this._preloadCache.inputSettings = this._prepInputSettingsForSharing(this._inputSettings || {}, false), this.sendMessageToCallMachine({ action: "join-meeting", properties: cc2(this.properties, this.callClientId), preloadCache: cc2(this._preloadCache, this.callClientId) }), new Promise(function(t4, r4) {
      e3._joinedCallback = function(i4, o3) {
        if (e3._callState !== wi2) {
          if (e3._updateCallState(bi2), i4)
            for (var s3 in i4) {
              if (e3._callObjectMode) {
                var a3 = e3._callMachine().store;
                pa2(i4[s3], a3), fa2(i4[s3], a3), ga2(i4[s3], e3._participants[s3], a3);
              }
              e3._participants[s3] = qa2({}, i4[s3]), e3.toggleParticipantAudioBasedOnNativeAudioFocus();
            }
          n3 && e3.loadCss(e3.properties), t4(i4);
        } else
          r4(o3);
      };
    }));
  }), function() {
    return I3.apply(this, arguments);
  }) }, { key: "leave", value: (j3 = h2(function* () {
    var e3 = this;
    return this._testCallInProgress && this.stopTestCallQuality(), new Promise(function(t3) {
      e3._callState === _i2 || e3._callState === wi2 ? t3() : e3._callObjectLoader && !e3._callObjectLoader.loaded ? (e3._callObjectLoader.cancel(), e3._updateCallState(_i2), e3.resetMeetingDependentVars(), e3.emitDailyJSEvent({ action: _i2 }), t3()) : (e3._resolveLeave = t3, e3.sendMessageToCallMachine({ action: "leave-meeting" }));
    });
  }), function() {
    return j3.apply(this, arguments);
  }) }, { key: "startScreenShare", value: (A3 = h2(function* () {
    var e3 = this, t3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
    if (hc2(this._callMachineInitialized, "startScreenShare()"), t3.screenVideoSendSettings && this._validateVideoSendSettings("screenVideo", t3.screenVideoSendSettings), t3.mediaStream && (this._sharedTracks.screenMediaStream = t3.mediaStream, t3.mediaStream = ls2), "undefined" != typeof DailyNativeUtils && void 0 !== DailyNativeUtils.isIOS && DailyNativeUtils.isIOS) {
      var n3 = this.nativeUtils();
      if (yield n3.isScreenBeingCaptured())
        return void this.emitDailyJSEvent({ action: ts2, type: "screen-share-error", errorMsg: "Could not start the screen sharing. The screen is already been captured!" });
      n3.setSystemScreenCaptureStartCallback(function() {
        n3.setSystemScreenCaptureStartCallback(null), e3.sendMessageToCallMachine({ action: ss2, captureOptions: t3 });
      }), n3.presentSystemScreenCapturePrompt();
    } else
      this.sendMessageToCallMachine({ action: ss2, captureOptions: t3 });
  }), function() {
    return A3.apply(this, arguments);
  }) }, { key: "stopScreenShare", value: function() {
    hc2(this._callMachineInitialized, "stopScreenShare()"), this.sendMessageToCallMachine({ action: "local-screen-stop" });
  } }, { key: "startRecording", value: function() {
    var e3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, t3 = e3.type;
    if (t3 && "cloud" !== t3 && "raw-tracks" !== t3 && "local" !== t3)
      throw new Error("invalid type: ".concat(t3, ", allowed values 'cloud', 'raw-tracks', or 'local'"));
    this.sendMessageToCallMachine(qa2({ action: "local-recording-start" }, e3));
  } }, { key: "updateRecording", value: function(e3) {
    var t3 = e3.layout, n3 = void 0 === t3 ? { preset: "default" } : t3, r4 = e3.instanceId;
    this.sendMessageToCallMachine({ action: "daily-method-update-recording", layout: n3, instanceId: r4 });
  } }, { key: "stopRecording", value: function() {
    var e3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
    this.sendMessageToCallMachine(qa2({ action: "local-recording-stop" }, e3));
  } }, { key: "startLiveStreaming", value: function() {
    var e3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
    this.sendMessageToCallMachine(qa2({ action: "daily-method-start-live-streaming" }, e3));
  } }, { key: "updateLiveStreaming", value: function(e3) {
    var t3 = e3.layout, n3 = void 0 === t3 ? { preset: "default" } : t3, r4 = e3.instanceId;
    this.sendMessageToCallMachine({ action: "daily-method-update-live-streaming", layout: n3, instanceId: r4 });
  } }, { key: "addLiveStreamingEndpoints", value: function(e3) {
    var t3 = e3.endpoints, n3 = e3.instanceId;
    this.sendMessageToCallMachine({ action: as2, endpointsOp: fs2, endpoints: t3, instanceId: n3 });
  } }, { key: "removeLiveStreamingEndpoints", value: function(e3) {
    var t3 = e3.endpoints, n3 = e3.instanceId;
    this.sendMessageToCallMachine({ action: as2, endpointsOp: vs2, endpoints: t3, instanceId: n3 });
  } }, { key: "stopLiveStreaming", value: function() {
    var e3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
    this.sendMessageToCallMachine(qa2({ action: "daily-method-stop-live-streaming" }, e3));
  } }, { key: "validateDailyConfig", value: function(e3) {
    e3.camSimulcastEncodings && (console.warn("camSimulcastEncodings is deprecated. Use sendSettings, found in DailyCallOptions, to provide camera simulcast settings."), this.validateSimulcastEncodings(e3.camSimulcastEncodings)), e3.screenSimulcastEncodings && console.warn("screenSimulcastEncodings is deprecated. Use sendSettings, found in DailyCallOptions, to provide screen simulcast settings."), Ps2() && e3.noAutoDefaultDeviceChange && console.warn("noAutoDefaultDeviceChange is not supported on Android, and will be ignored.");
  } }, { key: "validateSimulcastEncodings", value: function(e3) {
    var t3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null, n3 = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
    if (e3) {
      if (!(e3 instanceof Array || Array.isArray(e3)))
        throw new Error("encodings must be an Array");
      if (!xc(e3.length, 1, 3))
        throw new Error("encodings must be an Array with between 1 to ".concat(3, " layers"));
      for (var r4 = 0; r4 < e3.length; r4++) {
        var i4 = e3[r4];
        for (var o3 in this._validateEncodingLayerHasValidProperties(i4), i4)
          if (ec2.includes(o3)) {
            if ("number" != typeof i4[o3])
              throw new Error("".concat(o3, " must be a number"));
            if (t3) {
              var s3 = t3[o3], a3 = s3.min, c4 = s3.max;
              if (!xc(i4[o3], a3, c4))
                throw new Error("".concat(o3, " value not in range. valid range: ").concat(a3, " to ").concat(c4));
            }
          } else if (!["active", "scalabilityMode"].includes(o3))
            throw new Error("Invalid key ".concat(o3, ", valid keys are:") + Object.values(ec2));
        if (n3 && !i4.hasOwnProperty("maxBitrate"))
          throw new Error("maxBitrate is not specified");
      }
    }
  } }, { key: "startRemoteMediaPlayer", value: (P3 = h2(function* (e3) {
    var t3 = this, n3 = e3.url, r4 = e3.settings, i4 = void 0 === r4 ? { state: hs2.PLAY } : r4;
    try {
      !function(e4) {
        if ("string" != typeof e4)
          throw new Error('url parameter must be "string" type');
      }(n3), Ic(i4), function(e4) {
        for (var t4 in e4)
          if (!tc2.includes(t4))
            throw new Error("Invalid key ".concat(t4, ", valid keys are: ").concat(tc2));
        e4.simulcastEncodings && this.validateSimulcastEncodings(e4.simulcastEncodings, Za2, true);
      }(i4);
    } catch (e4) {
      throw console.error("invalid argument Error: ".concat(e4)), console.error('startRemoteMediaPlayer arguments must be of the form:\n  { url: "playback url",\n  settings?:\n  {state: "play"|"pause", simulcastEncodings?: [{}] } }'), e4;
    }
    return new Promise(function(e4, r5) {
      t3.sendMessageToCallMachine({ action: "daily-method-start-remote-media-player", url: n3, settings: i4 }, function(t4) {
        t4.error ? r5({ error: t4.error, errorMsg: t4.errorMsg }) : e4({ session_id: t4.session_id, remoteMediaPlayerState: { state: t4.state, settings: t4.settings } });
      });
    });
  }), function(e3) {
    return P3.apply(this, arguments);
  }) }, { key: "stopRemoteMediaPlayer", value: (O3 = h2(function* (e3) {
    var t3 = this;
    if ("string" != typeof e3)
      throw new Error(" remotePlayerID must be of type string");
    return new Promise(function(n3, r4) {
      t3.sendMessageToCallMachine({ action: "daily-method-stop-remote-media-player", session_id: e3 }, function(e4) {
        e4.error ? r4({ error: e4.error, errorMsg: e4.errorMsg }) : n3();
      });
    });
  }), function(e3) {
    return O3.apply(this, arguments);
  }) }, { key: "updateRemoteMediaPlayer", value: (T3 = h2(function* (e3) {
    var t3 = this, n3 = e3.session_id, r4 = e3.settings;
    try {
      Ic(r4);
    } catch (e4) {
      throw console.error("invalid argument Error: ".concat(e4)), console.error('updateRemoteMediaPlayer arguments must be of the form:\n  session_id: "participant session",\n  { settings?: {state: "play"|"pause"} }'), e4;
    }
    return new Promise(function(e4, i4) {
      t3.sendMessageToCallMachine({ action: "daily-method-update-remote-media-player", session_id: n3, settings: r4 }, function(t4) {
        t4.error ? i4({ error: t4.error, errorMsg: t4.errorMsg }) : e4({ session_id: t4.session_id, remoteMediaPlayerState: { state: t4.state, settings: t4.settings } });
      });
    });
  }), function(e3) {
    return T3.apply(this, arguments);
  }) }, { key: "startTranscription", value: function(e3) {
    lc2(this._callState, "startTranscription()"), this.sendMessageToCallMachine(qa2({ action: "daily-method-start-transcription" }, e3));
  } }, { key: "updateTranscription", value: function(e3) {
    if (lc2(this._callState, "updateTranscription()"), !e3)
      throw new Error("updateTranscription Error: options is mandatory");
    if ("object" !== n2(e3))
      throw new Error("updateTranscription Error: options must be object type");
    if (e3.participants && !Array.isArray(e3.participants))
      throw new Error("updateTranscription Error: participants must be an array");
    this.sendMessageToCallMachine(qa2({ action: "daily-method-update-transcription" }, e3));
  } }, { key: "stopTranscription", value: function(e3) {
    if (lc2(this._callState, "stopTranscription()"), e3 && "object" !== n2(e3))
      throw new Error("stopTranscription Error: options must be object type");
    if (e3 && !e3.instanceId)
      throw new Error('"instanceId" not provided');
    this.sendMessageToCallMachine(qa2({ action: "daily-method-stop-transcription" }, e3));
  } }, { key: "startDialOut", value: (E3 = h2(function* (e3) {
    var t3 = this;
    lc2(this._callState, "startDialOut()");
    var n3 = function(e4) {
      if (e4) {
        if (!Array.isArray(e4))
          throw new Error("Error starting dial out: audio codec must be an array");
        if (e4.length <= 0)
          throw new Error("Error starting dial out: audio codec array specified but empty");
        e4.forEach(function(e5) {
          if ("string" != typeof e5)
            throw new Error("Error starting dial out: audio codec must be a string");
          if ("OPUS" !== e5 && "PCMU" !== e5 && "PCMA" !== e5 && "G722" !== e5)
            throw new Error("Error starting dial out: audio codec must be one of OPUS, PCMU, PCMA, G722");
        });
      }
    };
    if (!e3.sipUri && !e3.phoneNumber)
      throw new Error("Error starting dial out: either a sip uri or phone number must be provided");
    if (e3.sipUri && e3.phoneNumber)
      throw new Error("Error starting dial out: only one of sip uri or phone number must be provided");
    if (e3.sipUri) {
      if ("string" != typeof e3.sipUri)
        throw new Error("Error starting dial out: sipUri must be a string");
      if (!e3.sipUri.startsWith("sip:"))
        throw new Error("Error starting dial out: Invalid SIP URI, must start with 'sip:'");
      if (e3.video && "boolean" != typeof e3.video)
        throw new Error("Error starting dial out: video must be a boolean value");
      !function(e4) {
        if (e4 && (n3(e4.audio), e4.video)) {
          if (!Array.isArray(e4.video))
            throw new Error("Error starting dial out: video codec must be an array");
          if (e4.video.length <= 0)
            throw new Error("Error starting dial out: video codec array specified but empty");
          e4.video.forEach(function(e5) {
            if ("string" != typeof e5)
              throw new Error("Error starting dial out: video codec must be a string");
            if ("H264" !== e5 && "VP8" !== e5)
              throw new Error("Error starting dial out: video codec must be H264 or VP8");
          });
        }
      }(e3.codecs);
    }
    if (e3.phoneNumber) {
      if ("string" != typeof e3.phoneNumber)
        throw new Error("Error starting dial out: phoneNumber must be a string");
      if (!/^\+\d{1,}$/.test(e3.phoneNumber))
        throw new Error("Error starting dial out: Invalid phone number, must be valid phone number as per E.164");
      e3.codecs && n3(e3.codecs.audio);
    }
    if (e3.callerId) {
      if ("string" != typeof e3.callerId)
        throw new Error("Error starting dial out: callerId must be a string");
      if (e3.sipUri)
        throw new Error("Error starting dial out: callerId not allowed with sipUri");
    }
    if (e3.displayName) {
      if ("string" != typeof e3.displayName)
        throw new Error("Error starting dial out: displayName must be a string");
      if (e3.displayName.length >= 200)
        throw new Error("Error starting dial out: displayName length must be less than 200");
    }
    if (e3.userId) {
      if ("string" != typeof e3.userId)
        throw new Error("Error starting dial out: userId must be a string");
      if (e3.userId.length > 36)
        throw new Error("Error starting dial out: userId length must be less than or equal to 36");
    }
    return new Promise(function(n4, r4) {
      t3.sendMessageToCallMachine(qa2({ action: "dialout-start" }, e3), function(e4) {
        e4.error ? r4(e4.error) : n4(e4);
      });
    });
  }), function(e3) {
    return E3.apply(this, arguments);
  }) }, { key: "stopDialOut", value: function(e3) {
    var t3 = this;
    return lc2(this._callState, "stopDialOut()"), new Promise(function(n3, r4) {
      t3.sendMessageToCallMachine(qa2({ action: "dialout-stop" }, e3), function(e4) {
        e4.error ? r4(e4.error) : n3(e4);
      });
    });
  } }, { key: "sipCallTransfer", value: (C3 = h2(function* (e3) {
    var t3 = this;
    if (lc2(this._callState, "sipCallTransfer()"), !e3)
      throw new Error("sipCallTransfer() requires a sessionId and toEndPoint");
    return e3.useSipRefer = false, jc2(e3, "sipCallTransfer"), new Promise(function(n3, r4) {
      t3.sendMessageToCallMachine(qa2({ action: gs2 }, e3), function(e4) {
        e4.error ? r4(e4.error) : n3(e4);
      });
    });
  }), function(e3) {
    return C3.apply(this, arguments);
  }) }, { key: "sipRefer", value: (M3 = h2(function* (e3) {
    var t3 = this;
    if (lc2(this._callState, "sipRefer()"), !e3)
      throw new Error("sessionId and toEndPoint are mandatory parameter");
    return e3.useSipRefer = true, jc2(e3, "sipRefer"), new Promise(function(n3, r4) {
      t3.sendMessageToCallMachine(qa2({ action: gs2 }, e3), function(e4) {
        e4.error ? r4(e4.error) : n3(e4);
      });
    });
  }), function(e3) {
    return M3.apply(this, arguments);
  }) }, { key: "sendDTMF", value: (k3 = h2(function* (e3) {
    var t3 = this;
    return lc2(this._callState, "sendDTMF()"), function(e4) {
      var t4 = e4.sessionId, n3 = e4.tones;
      if (!t4 || !n3)
        throw new Error("sessionId and tones are mandatory parameter");
      if ("string" != typeof t4 || "string" != typeof n3)
        throw new Error("sessionId and tones should be of string type");
      if (n3.length > 20)
        throw new Error("tones string must be upto 20 characters");
      var r4 = /[^0-9A-D*#]/g, i4 = n3.match(r4);
      if (i4 && i4[0])
        throw new Error("".concat(i4[0], " is not valid DTMF tone"));
    }(e3), new Promise(function(n3, r4) {
      t3.sendMessageToCallMachine(qa2({ action: "send-dtmf" }, e3), function(e4) {
        e4.error ? r4(e4.error) : n3(e4);
      });
    });
  }), function(e3) {
    return k3.apply(this, arguments);
  }) }, { key: "getNetworkStats", value: function() {
    var e3 = this;
    if (this._callState !== bi2) {
      return Promise.resolve(qa2({ stats: { latest: {} } }, this._network));
    }
    return new Promise(function(t3) {
      e3.sendMessageToCallMachine({ action: "get-calc-stats" }, function(n3) {
        t3(qa2(qa2({}, e3._network), {}, { stats: n3.stats }));
      });
    });
  } }, { key: "testWebsocketConnectivity", value: (S3 = h2(function* () {
    var e3 = this;
    if (pc2(this._testCallInProgress, "testWebsocketConnectivity()"), this.needsLoad())
      try {
        yield this.load();
      } catch (e4) {
        return Promise.reject(e4);
      }
    return new Promise(function(t3, n3) {
      e3.sendMessageToCallMachine({ action: "test-websocket-connectivity" }, function(e4) {
        e4.error ? n3(e4.error) : t3(e4.results);
      });
    });
  }), function() {
    return S3.apply(this, arguments);
  }) }, { key: "abortTestWebsocketConnectivity", value: function() {
    this.sendMessageToCallMachine({ action: "abort-test-websocket-connectivity" });
  } }, { key: "_validateVideoTrackForNetworkTests", value: function(e3) {
    return e3 ? e3 instanceof MediaStreamTrack ? !!Pa2(e3, { isLocalScreenVideo: false }) || (console.error("Video track is not playable. This test needs a live video track."), false) : (console.error("Video track needs to be of type `MediaStreamTrack`."), false) : (console.error("Missing video track. You must provide a video track in order to run this test."), false);
  } }, { key: "testCallQuality", value: (w3 = h2(function* () {
    var t3 = this;
    gc2(), fc2(this._callObjectMode, "testCallQuality()"), hc2(this._callMachineInitialized, "testCallQuality()", null, true), dc2(this._callState, this._isPreparingToJoin, "testCallQuality()");
    var n3 = this._testCallAlreadyInProgress, r4 = function(e3) {
      n3 || (t3._testCallInProgress = e3);
    };
    if (r4(true), this.needsLoad())
      try {
        var i4 = this._callState;
        yield this.load(), this._callState = i4;
      } catch (e3) {
        return r4(false), Promise.reject(e3);
      }
    return new Promise(function(n4) {
      t3.sendMessageToCallMachine({ action: "test-call-quality", dailyJsVersion: t3.properties.dailyJsVersion }, function(i5) {
        var o3 = i5.results, s3 = o3.result, a3 = e2(o3, Va2);
        if ("failed" === s3) {
          var c4, l3 = qa2({}, a3);
          null !== (c4 = a3.error) && void 0 !== c4 && c4.details ? (a3.error.details = JSON.parse(a3.error.details), l3.error = qa2(qa2({}, l3.error), {}, { details: qa2({}, l3.error.details) }), l3.error.details.duringTest = "testCallQuality") : (l3.error = l3.error ? qa2({}, l3.error) : {}, l3.error.details = { duringTest: "testCallQuality" }), t3._maybeSendToSentry(l3);
        }
        r4(false), n4(qa2({ result: s3 }, a3));
      });
    });
  }), function() {
    return w3.apply(this, arguments);
  }) }, { key: "stopTestCallQuality", value: function() {
    this.sendMessageToCallMachine({ action: "stop-test-call-quality" });
  } }, { key: "testConnectionQuality", value: (_3 = h2(function* (e3) {
    var t3;
    ys2() ? (console.warn("testConnectionQuality() is deprecated: use testPeerToPeerCallQuality() instead"), t3 = yield this.testPeerToPeerCallQuality(e3)) : (console.warn("testConnectionQuality() is deprecated: use testCallQuality() instead"), t3 = yield this.testCallQuality());
    var n3 = { result: t3.result, secondsElapsed: t3.secondsElapsed };
    return t3.data && (n3.data = { maxRTT: t3.data.maxRoundTripTime, packetLoss: t3.data.avgRecvPacketLoss }), n3;
  }), function(e3) {
    return _3.apply(this, arguments);
  }) }, { key: "testPeerToPeerCallQuality", value: (b3 = h2(function* (e3) {
    var t3 = this;
    if (pc2(this._testCallInProgress, "testPeerToPeerCallQuality()"), this.needsLoad())
      try {
        yield this.load();
      } catch (e4) {
        return Promise.reject(e4);
      }
    var n3 = e3.videoTrack, r4 = e3.duration;
    if (!this._validateVideoTrackForNetworkTests(n3))
      throw new Error("Video track error");
    return this._sharedTracks.videoTrackForConnectionQualityTest = n3, new Promise(function(e4, n4) {
      t3.sendMessageToCallMachine({ action: "test-p2p-call-quality", duration: r4 }, function(t4) {
        t4.error ? n4(t4.error) : e4(t4.results);
      });
    });
  }), function(e3) {
    return b3.apply(this, arguments);
  }) }, { key: "stopTestConnectionQuality", value: function() {
    ys2() ? (console.warn("stopTestConnectionQuality() is deprecated: use testPeerToPeerCallQuality() and stopTestPeerToPeerCallQuality() instead"), this.stopTestPeerToPeerCallQuality()) : (console.warn("stopTestConnectionQuality() is deprecated: use testCallQuality() and stopTestCallQuality() instead"), this.stopTestCallQuality());
  } }, { key: "stopTestPeerToPeerCallQuality", value: function() {
    this.sendMessageToCallMachine({ action: "stop-test-p2p-call-quality" });
  } }, { key: "testNetworkConnectivity", value: (y3 = h2(function* (e3) {
    var t3 = this;
    if (pc2(this._testCallInProgress, "testNetworkConnectivity()"), this.needsLoad())
      try {
        yield this.load();
      } catch (e4) {
        return Promise.reject(e4);
      }
    if (!this._validateVideoTrackForNetworkTests(e3))
      throw new Error("Video track error");
    return this._sharedTracks.videoTrackForNetworkConnectivityTest = e3, new Promise(function(e4, n3) {
      t3.sendMessageToCallMachine({ action: "test-network-connectivity" }, function(t4) {
        t4.error ? n3(t4.error) : e4(t4.results);
      });
    });
  }), function(e3) {
    return y3.apply(this, arguments);
  }) }, { key: "abortTestNetworkConnectivity", value: function() {
    this.sendMessageToCallMachine({ action: "abort-test-network-connectivity" });
  } }, { key: "getCpuLoadStats", value: function() {
    var e3 = this;
    return new Promise(function(t3) {
      if (e3._callState === bi2) {
        e3.sendMessageToCallMachine({ action: "get-cpu-load-stats" }, function(e4) {
          t3(e4.cpuStats);
        });
      } else
        t3({ cpuLoadState: void 0, cpuLoadStateReason: void 0, stats: {} });
    });
  } }, { key: "_validateEncodingLayerHasValidProperties", value: function(e3) {
    var t3;
    if (!((null === (t3 = Object.keys(e3)) || void 0 === t3 ? void 0 : t3.length) > 0))
      throw new Error("Empty encoding is not allowed. At least one of these valid keys should be specified:" + Object.values(ec2));
  } }, { key: "_validateVideoSendSettings", value: function(e3, t3) {
    var r4 = "screenVideo" === e3 ? ["default-screen-video", "detail-optimized", "motion-optimized", "motion-and-detail-balanced"] : ["default-video", "bandwidth-optimized", "bandwidth-and-quality-balanced", "quality-optimized", "adaptive-2-layers", "adaptive-3-layers"], i4 = "Video send settings should be either an object or one of the supported presets: ".concat(r4.join());
    if ("string" == typeof t3) {
      if (!r4.includes(t3))
        throw new Error(i4);
    } else {
      if ("object" !== n2(t3))
        throw new Error(i4);
      if (!t3.maxQuality && !t3.encodings && void 0 === t3.allowAdaptiveLayers)
        throw new Error("Video send settings must contain at least maxQuality, allowAdaptiveLayers or encodings attribute");
      if (t3.maxQuality && -1 === ["low", "medium", "high"].indexOf(t3.maxQuality))
        throw new Error("maxQuality must be either low, medium or high");
      if (t3.encodings) {
        var o3 = false;
        switch (Object.keys(t3.encodings).length) {
          case 1:
            o3 = !t3.encodings.low;
            break;
          case 2:
            o3 = !t3.encodings.low || !t3.encodings.medium;
            break;
          case 3:
            o3 = !t3.encodings.low || !t3.encodings.medium || !t3.encodings.high;
            break;
          default:
            o3 = true;
        }
        if (o3)
          throw new Error("Encodings must be defined as: low, low and medium, or low, medium and high.");
        t3.encodings.low && this._validateEncodingLayerHasValidProperties(t3.encodings.low), t3.encodings.medium && this._validateEncodingLayerHasValidProperties(t3.encodings.medium), t3.encodings.high && this._validateEncodingLayerHasValidProperties(t3.encodings.high);
      }
    }
  } }, { key: "validateUpdateSendSettings", value: function(e3) {
    var t3 = this;
    if (!e3 || 0 === Object.keys(e3).length)
      throw new Error("Send settings must contain at least information for one track!");
    Object.entries(e3).forEach(function(e4) {
      var n3 = f2(e4, 2), r4 = n3[0], i4 = n3[1];
      t3._validateVideoSendSettings(r4, i4);
    });
  } }, { key: "updateSendSettings", value: function(e3) {
    var t3 = this;
    return this.validateUpdateSendSettings(e3), this.needsLoad() ? (this._preloadCache.sendSettings = e3, { sendSettings: this._preloadCache.sendSettings }) : new Promise(function(n3, r4) {
      t3.sendMessageToCallMachine({ action: "update-send-settings", sendSettings: e3 }, function(e4) {
        e4.error ? r4(e4.error) : n3(e4.sendSettings);
      });
    });
  } }, { key: "getSendSettings", value: function() {
    return this._sendSettings || this._preloadCache.sendSettings;
  } }, { key: "getLocalAudioLevel", value: function() {
    return this._localAudioLevel;
  } }, { key: "getRemoteParticipantsAudioLevel", value: function() {
    return this._remoteParticipantsAudioLevel;
  } }, { key: "getActiveSpeaker", value: function() {
    return gc2(), this._activeSpeaker;
  } }, { key: "setActiveSpeakerMode", value: function(e3) {
    return gc2(), this.sendMessageToCallMachine({ action: "set-active-speaker-mode", enabled: e3 }), this;
  } }, { key: "activeSpeakerMode", value: function() {
    return gc2(), this._activeSpeakerMode;
  } }, { key: "subscribeToTracksAutomatically", value: function() {
    return this._preloadCache.subscribeToTracksAutomatically;
  } }, { key: "setSubscribeToTracksAutomatically", value: function(e3) {
    return lc2(this._callState, "setSubscribeToTracksAutomatically()", "Use the subscribeToTracksAutomatically configuration property."), this._preloadCache.subscribeToTracksAutomatically = e3, this.sendMessageToCallMachine({ action: "daily-method-subscribe-to-tracks-automatically", enabled: e3 }), this;
  } }, { key: "enumerateDevices", value: (m3 = h2(function* () {
    var e3 = this;
    if (this._callObjectMode) {
      var t3 = yield navigator.mediaDevices.enumerateDevices();
      return "Firefox" === js2() && Is2().major > 115 && Is2().major < 123 && (t3 = t3.filter(function(e4) {
        return "audiooutput" !== e4.kind;
      })), { devices: t3.map(function(e4) {
        var t4 = JSON.parse(JSON.stringify(e4));
        if (!ys2() && "videoinput" === e4.kind && e4.getCapabilities) {
          var n3, r4 = e4.getCapabilities();
          t4.facing = (null == r4 || null === (n3 = r4.facingMode) || void 0 === n3 ? void 0 : n3.length) >= 1 ? r4.facingMode[0] : void 0;
        }
        return t4;
      }) };
    }
    return new Promise(function(t4) {
      e3.sendMessageToCallMachine({ action: "enumerate-devices" }, function(e4) {
        t4({ devices: e4.devices });
      });
    });
  }), function() {
    return m3.apply(this, arguments);
  }) }, { key: "sendAppMessage", value: function(e3) {
    var t3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "*";
    if (lc2(this._callState, "sendAppMessage()"), JSON.stringify(e3).length > this._maxAppMessageSize)
      throw new Error("Message data too large. Max size is " + this._maxAppMessageSize);
    return this.sendMessageToCallMachine({ action: "app-msg", data: e3, to: t3 }), this;
  } }, { key: "addFakeParticipant", value: function(e3) {
    return gc2(), lc2(this._callState, "addFakeParticipant()"), this.sendMessageToCallMachine(qa2({ action: "add-fake-participant" }, e3)), this;
  } }, { key: "setShowNamesMode", value: function(e3) {
    return vc2(this._callObjectMode, "setShowNamesMode()"), gc2(), e3 && "always" !== e3 && "never" !== e3 ? (console.error('setShowNamesMode argument should be "always", "never", or false'), this) : (this.sendMessageToCallMachine({ action: "set-show-names", mode: e3 }), this);
  } }, { key: "setShowLocalVideo", value: function() {
    var e3 = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];
    return vc2(this._callObjectMode, "setShowLocalVideo()"), gc2(), lc2(this._callState, "setShowLocalVideo()"), "boolean" != typeof e3 ? (console.error("setShowLocalVideo only accepts a boolean value"), this) : (this.sendMessageToCallMachine({ action: "set-show-local-video", show: e3 }), this._showLocalVideo = e3, this);
  } }, { key: "showLocalVideo", value: function() {
    return vc2(this._callObjectMode, "showLocalVideo()"), gc2(), this._showLocalVideo;
  } }, { key: "setShowParticipantsBar", value: function() {
    var e3 = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];
    return vc2(this._callObjectMode, "setShowParticipantsBar()"), gc2(), lc2(this._callState, "setShowParticipantsBar()"), "boolean" != typeof e3 ? (console.error("setShowParticipantsBar only accepts a boolean value"), this) : (this.sendMessageToCallMachine({ action: "set-show-participants-bar", show: e3 }), this._showParticipantsBar = e3, this);
  } }, { key: "showParticipantsBar", value: function() {
    return vc2(this._callObjectMode, "showParticipantsBar()"), gc2(), this._showParticipantsBar;
  } }, { key: "customIntegrations", value: function() {
    return gc2(), vc2(this._callObjectMode, "customIntegrations()"), this._customIntegrations;
  } }, { key: "setCustomIntegrations", value: function(e3) {
    return gc2(), vc2(this._callObjectMode, "setCustomIntegrations()"), lc2(this._callState, "setCustomIntegrations()"), Pc2(e3) ? (this.sendMessageToCallMachine({ action: "set-custom-integrations", integrations: e3 }), this._customIntegrations = e3, this) : this;
  } }, { key: "startCustomIntegrations", value: function(e3) {
    var t3 = this;
    if (gc2(), vc2(this._callObjectMode, "startCustomIntegrations()"), lc2(this._callState, "startCustomIntegrations()"), Array.isArray(e3) && e3.some(function(e4) {
      return "string" != typeof e4;
    }) || !Array.isArray(e3) && "string" != typeof e3)
      return console.error("startCustomIntegrations() only accepts string | string[]"), this;
    var n3 = "string" == typeof e3 ? [e3] : e3, r4 = n3.filter(function(e4) {
      return !(e4 in t3._customIntegrations);
    });
    return r4.length ? (console.error(`Can't find custom integration(s): "`.concat(r4.join(", "), '"')), this) : (this.sendMessageToCallMachine({ action: "start-custom-integrations", ids: n3 }), this);
  } }, { key: "stopCustomIntegrations", value: function(e3) {
    var t3 = this;
    if (gc2(), vc2(this._callObjectMode, "stopCustomIntegrations()"), lc2(this._callState, "stopCustomIntegrations()"), Array.isArray(e3) && e3.some(function(e4) {
      return "string" != typeof e4;
    }) || !Array.isArray(e3) && "string" != typeof e3)
      return console.error("stopCustomIntegrations() only accepts string | string[]"), this;
    var n3 = "string" == typeof e3 ? [e3] : e3, r4 = n3.filter(function(e4) {
      return !(e4 in t3._customIntegrations);
    });
    return r4.length ? (console.error(`Can't find custom integration(s): "`.concat(r4.join(", "), '"')), this) : (this.sendMessageToCallMachine({ action: "stop-custom-integrations", ids: n3 }), this);
  } }, { key: "customTrayButtons", value: function() {
    return vc2(this._callObjectMode, "customTrayButtons()"), gc2(), this._customTrayButtons;
  } }, { key: "updateCustomTrayButtons", value: function(e3) {
    return vc2(this._callObjectMode, "updateCustomTrayButtons()"), gc2(), lc2(this._callState, "updateCustomTrayButtons()"), Oc2(e3) ? (this.sendMessageToCallMachine({ action: "update-custom-tray-buttons", btns: e3 }), this._customTrayButtons = e3, this) : (console.error("updateCustomTrayButtons only accepts a dictionary of the type ".concat(JSON.stringify(rc2))), this);
  } }, { key: "theme", value: function() {
    return vc2(this._callObjectMode, "theme()"), this.properties.theme;
  } }, { key: "setTheme", value: function(e3) {
    var t3 = this;
    return vc2(this._callObjectMode, "setTheme()"), new Promise(function(n3, r4) {
      try {
        t3.validateProperties({ theme: e3 }), t3.properties.theme = qa2({}, e3), t3.sendMessageToCallMachine({ action: "set-theme", theme: t3.properties.theme });
        try {
          t3.emitDailyJSEvent({ action: eo2, theme: t3.properties.theme });
        } catch (e4) {
          console.log("could not emit 'theme-updated'", e4);
        }
        n3(t3.properties.theme);
      } catch (e4) {
        r4(e4);
      }
    });
  } }, { key: "requestFullscreen", value: (g3 = h2(function* () {
    if (gc2(), this._iframe && !document.fullscreenElement && ws2())
      try {
        (yield this._iframe.requestFullscreen) ? this._iframe.requestFullscreen() : this._iframe.webkitRequestFullscreen();
      } catch (e3) {
        console.log("could not make video call fullscreen", e3);
      }
  }), function() {
    return g3.apply(this, arguments);
  }) }, { key: "exitFullscreen", value: function() {
    gc2(), document.fullscreenElement ? document.exitFullscreen() : document.webkitFullscreenElement && document.webkitExitFullscreen();
  } }, { key: "getSidebarView", value: (v3 = h2(function* () {
    var e3 = this;
    return this._callObjectMode ? (console.error("getSidebarView is not available in callObject mode"), Promise.resolve(null)) : new Promise(function(t3) {
      e3.sendMessageToCallMachine({ action: "get-sidebar-view" }, function(e4) {
        t3(e4.view);
      });
    });
  }), function() {
    return v3.apply(this, arguments);
  }) }, { key: "setSidebarView", value: function(e3) {
    return this._callObjectMode ? (console.error("setSidebarView is not available in callObject mode"), this) : (this.sendMessageToCallMachine({ action: "set-sidebar-view", view: e3 }), this);
  } }, { key: "room", value: (p3 = h2(function* () {
    var e3 = this, t3 = (arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}).includeRoomConfigDefaults, n3 = void 0 === t3 || t3;
    return this._accessState.access === Oi2 || this.needsLoad() ? this.properties.url ? { roomUrlPendingJoin: this.properties.url } : null : new Promise(function(t4) {
      e3.sendMessageToCallMachine({ action: "lib-room-info", includeRoomConfigDefaults: n3 }, function(e4) {
        delete e4.action, delete e4.callbackStamp, t4(e4);
      });
    });
  }), function() {
    return p3.apply(this, arguments);
  }) }, { key: "geo", value: (d3 = h2(function* () {
    try {
      var e3 = yield fetch("https://gs.daily.co/_ks_/x-swsl/:");
      return { current: (yield e3.json()).geo };
    } catch (e4) {
      return console.error("geo lookup failed", e4), { current: "" };
    }
  }), function() {
    return d3.apply(this, arguments);
  }) }, { key: "setNetworkTopology", value: (c3 = h2(function* (e3) {
    var t3 = this;
    return gc2(), lc2(this._callState, "setNetworkTopology()"), new Promise(function(n3, r4) {
      t3.sendMessageToCallMachine({ action: "set-network-topology", opts: e3 }, function(e4) {
        e4.error ? r4({ error: e4.error }) : n3({ workerId: e4.workerId });
      });
    });
  }), function(e3) {
    return c3.apply(this, arguments);
  }) }, { key: "getNetworkTopology", value: (i3 = h2(function* () {
    var e3 = this;
    return new Promise(function(t3, n3) {
      e3.needsLoad() && t3({ topology: "none" }), e3.sendMessageToCallMachine({ action: "get-network-topology" }, function(e4) {
        e4.error ? n3({ error: e4.error }) : t3({ topology: e4.topology });
      });
    });
  }), function() {
    return i3.apply(this, arguments);
  }) }, { key: "setPlayNewParticipantSound", value: function(e3) {
    if (gc2(), "number" != typeof e3 && true !== e3 && false !== e3)
      throw new Error("argument to setShouldPlayNewParticipantSound should be true, false, or a number, but is ".concat(e3));
    this.sendMessageToCallMachine({ action: "daily-method-set-play-ding", arg: e3 });
  } }, { key: "on", value: function(e3, t3) {
    return x2.prototype.on.call(this, e3, t3);
  } }, { key: "once", value: function(e3, t3) {
    return x2.prototype.once.call(this, e3, t3);
  } }, { key: "off", value: function(e3, t3) {
    return x2.prototype.off.call(this, e3, t3);
  } }, { key: "validateProperties", value: function(e3) {
    var t3, n3;
    if (null != e3 && null !== (t3 = e3.dailyConfig) && void 0 !== t3 && t3.userMediaAudioConstraints) {
      var r4, i4;
      ys2() || console.warn("userMediaAudioConstraints is deprecated. You can override constraints with inputSettings.audio.settings, found in DailyCallOptions.");
      var o3 = e3.inputSettings || {};
      o3.audio = (null === (r4 = e3.inputSettings) || void 0 === r4 ? void 0 : r4.audio) || {}, o3.audio.settings = (null === (i4 = e3.inputSettings) || void 0 === i4 || null === (i4 = i4.audio) || void 0 === i4 ? void 0 : i4.settings) || {}, o3.audio.settings = qa2(qa2({}, o3.audio.settings), e3.dailyConfig.userMediaAudioConstraints), e3.inputSettings = o3, delete e3.dailyConfig.userMediaAudioConstraints;
    }
    if (null != e3 && null !== (n3 = e3.dailyConfig) && void 0 !== n3 && n3.userMediaVideoConstraints) {
      var s3, a3;
      ys2() || console.warn("userMediaVideoConstraints is deprecated. You can override constraints with inputSettings.video.settings, found in DailyCallOptions.");
      var c4 = e3.inputSettings || {};
      c4.video = (null === (s3 = e3.inputSettings) || void 0 === s3 ? void 0 : s3.video) || {}, c4.video.settings = (null === (a3 = e3.inputSettings) || void 0 === a3 || null === (a3 = a3.video) || void 0 === a3 ? void 0 : a3.settings) || {}, c4.video.settings = qa2(qa2({}, c4.video.settings), e3.dailyConfig.userMediaVideoConstraints), e3.inputSettings = c4, delete e3.dailyConfig.userMediaVideoConstraints;
    }
    for (var l3 in e3) {
      if (!oc2[l3])
        throw new Error("unrecognized property '".concat(l3, "'"));
      if (oc2[l3].validate && !oc2[l3].validate(e3[l3], this))
        throw new Error("property '".concat(l3, "': ").concat(oc2[l3].help));
    }
  } }, { key: "assembleMeetingUrl", value: function() {
    var e3, t3, n3 = qa2(qa2({}, this.properties), {}, { emb: this.callClientId, embHref: encodeURIComponent(window.location.href), proxy: null !== (e3 = this.properties.dailyConfig) && void 0 !== e3 && e3.proxyUrl ? encodeURIComponent(null === (t3 = this.properties.dailyConfig) || void 0 === t3 ? void 0 : t3.proxyUrl) : void 0 }), r4 = n3.url.match(/\?/) ? "&" : "?";
    return n3.url + r4 + Object.keys(oc2).filter(function(e4) {
      return oc2[e4].queryString && void 0 !== n3[e4];
    }).map(function(e4) {
      return "".concat(oc2[e4].queryString, "=").concat(n3[e4]);
    }).join("&");
  } }, { key: "needsLoad", value: function() {
    return [vi2, gi2, _i2, wi2].includes(this._callState);
  } }, { key: "sendMessageToCallMachine", value: function(e3, t3) {
    if (this._destroyed && (this._logUseAfterDestroy(), this.strictMode))
      throw new Error("Use after destroy");
    this._messageChannel.sendMessageToCallMachine(e3, t3, this.callClientId, this._iframe);
  } }, { key: "forwardPackagedMessageToCallMachine", value: function(e3) {
    this._messageChannel.forwardPackagedMessageToCallMachine(e3, this._iframe, this.callClientId);
  } }, { key: "addListenerForPackagedMessagesFromCallMachine", value: function(e3) {
    return this._messageChannel.addListenerForPackagedMessagesFromCallMachine(e3, this.callClientId);
  } }, { key: "removeListenerForPackagedMessagesFromCallMachine", value: function(e3) {
    this._messageChannel.removeListenerForPackagedMessagesFromCallMachine(e3);
  } }, { key: "handleMessageFromCallMachine", value: function(t3) {
    switch (t3.action) {
      case Xi2:
        this.sendMessageToCallMachine(qa2({ action: Zi2 }, this.properties));
        break;
      case "call-machine-initialized":
        this._callMachineInitialized = true;
        var n3 = { action: cs2, level: "log", code: 1011, stats: { event: "bundle load", time: "no-op" === this._bundleLoadTime ? 0 : this._bundleLoadTime, preLoaded: "no-op" === this._bundleLoadTime, url: Z2(this.properties.dailyConfig) } };
        this.sendMessageToCallMachine(n3), this._delayDuplicateInstanceLog && this._logDuplicateInstanceAttempt();
        break;
      case ro2:
        this._loadedCallback && (this._loadedCallback(), this._loadedCallback = null), this.emitDailyJSEvent(t3);
        break;
      case ao2:
        var r4, i4 = qa2({}, t3);
        delete i4.internal, this._maxAppMessageSize = (null === (r4 = t3.internal) || void 0 === r4 ? void 0 : r4._maxAppMessageSize) || rs2, this._joinedCallback && (this._joinedCallback(t3.participants), this._joinedCallback = null), this.emitDailyJSEvent(i4);
        break;
      case lo2:
      case uo2:
        if (this._callState === _i2)
          return;
        if (t3.participant && t3.participant.session_id) {
          var o3 = t3.participant.local ? "local" : t3.participant.session_id;
          if (this._callObjectMode) {
            var s3 = this._callMachine().store;
            pa2(t3.participant, s3), fa2(t3.participant, s3), ga2(t3.participant, this._participants[o3], s3);
          }
          try {
            this.maybeParticipantTracksStopped(this._participants[o3], t3.participant), this.maybeParticipantTracksStarted(this._participants[o3], t3.participant), this.maybeEventRecordingStopped(this._participants[o3], t3.participant), this.maybeEventRecordingStarted(this._participants[o3], t3.participant);
          } catch (e3) {
            console.error("track events error", e3);
          }
          this.compareEqualForParticipantUpdateEvent(t3.participant, this._participants[o3]) || (this._participants[o3] = qa2({}, t3.participant), this.toggleParticipantAudioBasedOnNativeAudioFocus(), this.emitDailyJSEvent(t3));
        }
        break;
      case ho2:
        if (t3.participant && t3.participant.session_id) {
          var a3 = this._participants[t3.participant.session_id];
          a3 && this.maybeParticipantTracksStopped(a3, null), delete this._participants[t3.participant.session_id], this.emitDailyJSEvent(t3);
        }
        break;
      case po2:
        N2(this._participantCounts, t3.participantCounts) || (this._participantCounts = t3.participantCounts, this.emitDailyJSEvent(t3));
        break;
      case fo2:
        var c4 = { access: t3.access };
        t3.awaitingAccess && (c4.awaitingAccess = t3.awaitingAccess), N2(this._accessState, c4) || (this._accessState = c4, this.emitDailyJSEvent(t3));
        break;
      case vo2:
        if (t3.meetingSession) {
          this._meetingSessionSummary = t3.meetingSession, this.emitDailyJSEvent(t3);
          var l3 = qa2(qa2({}, t3), {}, { action: "meeting-session-updated" });
          this.emitDailyJSEvent(l3);
        }
        break;
      case ns2:
        var u3;
        this._iframe && !t3.preserveIframe && (this._iframe.src = ""), this._updateCallState(wi2), this.resetMeetingDependentVars(), this._loadedCallback && (this._loadedCallback(t3.errorMsg), this._loadedCallback = null), t3.preserveIframe;
        var d4 = e2(t3, Ja2);
        null != d4 && null !== (u3 = d4.error) && void 0 !== u3 && u3.details && (d4.error.details = JSON.parse(d4.error.details)), this._maybeSendToSentry(t3), this._joinedCallback && (this._joinedCallback(null, d4), this._joinedCallback = null), this.emitDailyJSEvent(d4);
        break;
      case co2:
        this._callState !== wi2 && this._updateCallState(_i2), this.resetMeetingDependentVars(), this._resolveLeave && (this._resolveLeave(), this._resolveLeave = null), this.emitDailyJSEvent(t3);
        break;
      case "selected-devices-updated":
        t3.devices && this.emitDailyJSEvent(t3);
        break;
      case Jo2:
        var h3 = t3.state, p4 = t3.threshold, f3 = t3.quality, v5 = h3.state, g4 = h3.reasons;
        v5 === this._network.networkState && N2(g4, this._network.networkStateReasons) && p4 === this._network.threshold && f3 === this._network.quality || (this._network.networkState = v5, this._network.networkStateReasons = g4, this._network.quality = f3, this._network.threshold = p4, t3.networkState = v5, g4.length && (t3.networkStateReasons = g4), delete t3.state, this.emitDailyJSEvent(t3));
        break;
      case qo2:
        t3 && t3.cpuLoadState && this.emitDailyJSEvent(t3);
        break;
      case zo2:
        t3 && void 0 !== t3.faceCounts && this.emitDailyJSEvent(t3);
        break;
      case Uo2:
        var m4 = t3.activeSpeaker;
        this._activeSpeaker.peerId !== m4.peerId && (this._activeSpeaker.peerId = m4.peerId, this.emitDailyJSEvent({ action: t3.action, activeSpeaker: this._activeSpeaker }));
        break;
      case "show-local-video-changed":
        if (this._callObjectMode)
          return;
        var y4 = t3.show;
        this._showLocalVideo = y4, this.emitDailyJSEvent({ action: t3.action, show: y4 });
        break;
      case Vo2:
        var b4 = t3.enabled;
        this._activeSpeakerMode !== b4 && (this._activeSpeakerMode = b4, this.emitDailyJSEvent({ action: t3.action, enabled: this._activeSpeakerMode }));
        break;
      case yo2:
      case bo2:
      case _o2:
        this._waitingParticipants = t3.allWaitingParticipants, this.emitDailyJSEvent({ action: t3.action, participant: t3.participant });
        break;
      case Zo2:
        N2(this._receiveSettings, t3.receiveSettings) || (this._receiveSettings = t3.receiveSettings, this.emitDailyJSEvent({ action: t3.action, receiveSettings: t3.receiveSettings }));
        break;
      case es2:
        this._maybeUpdateInputSettings(t3.inputSettings);
        break;
      case "send-settings-updated":
        N2(this._sendSettings, t3.sendSettings) || (this._sendSettings = t3.sendSettings, this._preloadCache.sendSettings = null, this.emitDailyJSEvent({ action: t3.action, sendSettings: t3.sendSettings }));
        break;
      case "local-audio-level":
        this._localAudioLevel = t3.audioLevel, this._preloadCache.localAudioLevelObserver = null, this.emitDailyJSEvent(t3);
        break;
      case "remote-participants-audio-level":
        this._remoteParticipantsAudioLevel = t3.participantsAudioLevel, this._preloadCache.remoteParticipantsAudioLevelObserver = null, this.emitDailyJSEvent(t3);
        break;
      case Lo2:
        var _4 = t3.session_id;
        this._rmpPlayerState[_4] = t3.playerState, this.emitDailyJSEvent(t3);
        break;
      case No2:
        delete this._rmpPlayerState[t3.session_id], this.emitDailyJSEvent(t3);
        break;
      case Do2:
        var w4 = t3.session_id, S4 = this._rmpPlayerState[w4];
        S4 && this.compareEqualForRMPUpdateEvent(S4, t3.remoteMediaPlayerState) || (this._rmpPlayerState[w4] = t3.remoteMediaPlayerState, this.emitDailyJSEvent(t3));
        break;
      case "custom-button-click":
      case "sidebar-view-changed":
        this.emitDailyJSEvent(t3);
        break;
      case go2:
        var k4 = this._meetingSessionState.topology !== (t3.meetingSessionState && t3.meetingSessionState.topology);
        this._meetingSessionState = Lc(t3.meetingSessionState, this._callObjectMode), (this._callObjectMode || k4) && this.emitDailyJSEvent(t3);
        break;
      case Ro2:
        this._isScreenSharing = true, this.emitDailyJSEvent(t3);
        break;
      case Fo2:
      case Bo2:
        this._isScreenSharing = false, this.emitDailyJSEvent(t3);
        break;
      case Eo2:
      case To2:
      case Oo2:
      case Po2:
      case Ao2:
      case ko2:
      case Mo2:
      case Co2:
      case io2:
      case oo2:
      case Io2:
      case xo2:
      case "test-completed":
      case $o2:
      case jo2:
      case Go2:
      case Qo2:
      case Ko2:
      case Yo2:
      case ts2:
      case Xo2:
      case "dialin-ready":
      case "dialin-connected":
      case "dialin-error":
      case "dialin-stopped":
      case "dialin-warning":
      case "dialout-connected":
      case "dialout-answered":
      case "dialout-error":
      case "dialout-stopped":
      case "dialout-warning":
        this.emitDailyJSEvent(t3);
        break;
      case "request-fullscreen":
        this.requestFullscreen();
        break;
      case "request-exit-fullscreen":
        this.exitFullscreen();
    }
  } }, { key: "maybeEventRecordingStopped", value: function(e3, t3) {
    var n3 = "record";
    e3 && (t3.local || false !== t3[n3] || e3[n3] === t3[n3] || this.emitDailyJSEvent({ action: To2 }));
  } }, { key: "maybeEventRecordingStarted", value: function(e3, t3) {
    var n3 = "record";
    e3 && (t3.local || true !== t3[n3] || e3[n3] === t3[n3] || this.emitDailyJSEvent({ action: Eo2 }));
  } }, { key: "_trackStatePlayable", value: function(e3) {
    return !(!e3 || e3.state !== Ti2);
  } }, { key: "_trackChanged", value: function(e3, t3) {
    return !((null == e3 ? void 0 : e3.id) === (null == t3 ? void 0 : t3.id));
  } }, { key: "maybeEventTrackStopped", value: function(e3, t3, n3) {
    var r4, i4, o3 = null !== (r4 = null == t3 ? void 0 : t3.tracks[e3]) && void 0 !== r4 ? r4 : null, s3 = null !== (i4 = null == n3 ? void 0 : n3.tracks[e3]) && void 0 !== i4 ? i4 : null, a3 = null == o3 ? void 0 : o3.track;
    if (a3) {
      var c4 = this._trackStatePlayable(o3), l3 = this._trackStatePlayable(s3), u3 = this._trackChanged(a3, null == s3 ? void 0 : s3.track);
      c4 && (l3 && !u3 || this.emitDailyJSEvent({ action: So2, track: a3, participant: null != n3 ? n3 : t3, type: e3 }));
    }
  } }, { key: "maybeEventTrackStarted", value: function(e3, t3, n3) {
    var r4, i4, o3 = null !== (r4 = null == t3 ? void 0 : t3.tracks[e3]) && void 0 !== r4 ? r4 : null, s3 = null !== (i4 = null == n3 ? void 0 : n3.tracks[e3]) && void 0 !== i4 ? i4 : null, a3 = null == s3 ? void 0 : s3.track;
    if (a3) {
      var c4 = this._trackStatePlayable(o3), l3 = this._trackStatePlayable(s3), u3 = this._trackChanged(null == o3 ? void 0 : o3.track, a3);
      l3 && (c4 && !u3 || this.emitDailyJSEvent({ action: wo2, track: a3, participant: n3, type: e3 }));
    }
  } }, { key: "maybeParticipantTracksStopped", value: function(e3, t3) {
    if (e3)
      for (var n3 in e3.tracks)
        this.maybeEventTrackStopped(n3, e3, t3);
  } }, { key: "maybeParticipantTracksStarted", value: function(e3, t3) {
    if (t3)
      for (var n3 in t3.tracks)
        this.maybeEventTrackStarted(n3, e3, t3);
  } }, { key: "compareEqualForRMPUpdateEvent", value: function(e3, t3) {
    var n3, r4;
    return e3.state === t3.state && (null === (n3 = e3.settings) || void 0 === n3 ? void 0 : n3.volume) === (null === (r4 = t3.settings) || void 0 === r4 ? void 0 : r4.volume);
  } }, { key: "emitDailyJSEvent", value: function(e3) {
    try {
      e3.callClientId = this.callClientId, this.emit(e3.action, e3);
    } catch (t3) {
      console.log("could not emit", e3, t3);
    }
  } }, { key: "compareEqualForParticipantUpdateEvent", value: function(e3, t3) {
    return !!N2(e3, t3) && ((!e3.videoTrack || !t3.videoTrack || e3.videoTrack.id === t3.videoTrack.id && e3.videoTrack.muted === t3.videoTrack.muted && e3.videoTrack.enabled === t3.videoTrack.enabled) && (!e3.audioTrack || !t3.audioTrack || e3.audioTrack.id === t3.audioTrack.id && e3.audioTrack.muted === t3.audioTrack.muted && e3.audioTrack.enabled === t3.audioTrack.enabled));
  } }, { key: "nativeUtils", value: function() {
    return ys2() ? "undefined" == typeof DailyNativeUtils ? (console.warn("in React Native, DailyNativeUtils is expected to be available"), null) : DailyNativeUtils : null;
  } }, { key: "updateIsPreparingToJoin", value: function(e3) {
    this._updateCallState(this._callState, e3);
  } }, { key: "_updateCallState", value: function(e3) {
    var t3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this._isPreparingToJoin;
    if (e3 !== this._callState || t3 !== this._isPreparingToJoin) {
      var n3 = this._callState, r4 = this._isPreparingToJoin;
      this._callState = e3, this._isPreparingToJoin = t3;
      var i4 = this._callState === bi2;
      this.updateShowAndroidOngoingMeetingNotification(i4);
      var o3 = uc2(n3, r4), s3 = uc2(this._callState, this._isPreparingToJoin);
      o3 !== s3 && (this.updateKeepDeviceAwake(s3), this.updateDeviceAudioMode(s3), this.updateNoOpRecordingEnsuringBackgroundContinuity(s3));
    }
  } }, { key: "resetMeetingDependentVars", value: function() {
    this._participants = {}, this._participantCounts = Xa2, this._waitingParticipants = {}, this._activeSpeaker = {}, this._activeSpeakerMode = false, this._didPreAuth = false, this._accessState = { access: Oi2 }, this._finalSummaryOfPrevSession = this._meetingSessionSummary, this._meetingSessionSummary = {}, this._meetingSessionState = Lc(Ya2, this._callObjectMode), this._isScreenSharing = false, this._receiveSettings = {}, this._inputSettings = void 0, this._sendSettings = {}, this._localAudioLevel = 0, this._isLocalAudioLevelObserverRunning = false, this._remoteParticipantsAudioLevel = {}, this._isRemoteParticipantsAudioLevelObserverRunning = false, this._maxAppMessageSize = rs2, this._callMachineInitialized = false, this._bundleLoadTime = void 0, this._preloadCache;
  } }, { key: "updateKeepDeviceAwake", value: function(e3) {
    ys2() && this.nativeUtils().setKeepDeviceAwake(e3, this.callClientId);
  } }, { key: "updateDeviceAudioMode", value: function(e3) {
    if (ys2() && !this.disableReactNativeAutoDeviceManagement("audio")) {
      var t3 = e3 ? this._nativeInCallAudioMode : "idle";
      this.nativeUtils().setAudioMode(t3);
    }
  } }, { key: "updateShowAndroidOngoingMeetingNotification", value: function(e3) {
    if (ys2() && this.nativeUtils().setShowOngoingMeetingNotification) {
      var t3, n3, r4, i4;
      if (this.properties.reactNativeConfig && this.properties.reactNativeConfig.androidInCallNotification) {
        var o3 = this.properties.reactNativeConfig.androidInCallNotification;
        t3 = o3.title, n3 = o3.subtitle, r4 = o3.iconName, i4 = o3.disableForCustomOverride;
      }
      i4 && (e3 = false), this.nativeUtils().setShowOngoingMeetingNotification(e3, t3, n3, r4, this.callClientId);
    }
  } }, { key: "updateNoOpRecordingEnsuringBackgroundContinuity", value: function(e3) {
    ys2() && this.nativeUtils().enableNoOpRecordingEnsuringBackgroundContinuity && this.nativeUtils().enableNoOpRecordingEnsuringBackgroundContinuity(e3);
  } }, { key: "toggleParticipantAudioBasedOnNativeAudioFocus", value: function() {
    var e3;
    if (ys2()) {
      var t3 = null === (e3 = this._callMachine()) || void 0 === e3 || null === (e3 = e3.store) || void 0 === e3 ? void 0 : e3.getState();
      for (var n3 in null == t3 ? void 0 : t3.streams) {
        var r4 = t3.streams[n3];
        r4 && r4.pendingTrack && "audio" === r4.pendingTrack.kind && (r4.pendingTrack.enabled = this._hasNativeAudioFocus);
      }
    }
  } }, { key: "disableReactNativeAutoDeviceManagement", value: function(e3) {
    return this.properties.reactNativeConfig && this.properties.reactNativeConfig.disableAutoDeviceManagement && this.properties.reactNativeConfig.disableAutoDeviceManagement[e3];
  } }, { key: "absoluteUrl", value: function(e3) {
    if (void 0 !== e3) {
      var t3 = document.createElement("a");
      return t3.href = e3, t3.href;
    }
  } }, { key: "sayHello", value: function() {
    var e3 = "hello, world.";
    return console.log(e3), e3;
  } }, { key: "_logUseAfterDestroy", value: function() {
    var e3 = Object.values(Ga2)[0];
    if (this.needsLoad()) {
      if (e3 && !e3.needsLoad()) {
        var t3 = { action: cs2, level: "error", code: this.strictMode ? 9995 : 9997 };
        e3.sendMessageToCallMachine(t3);
      } else if (!this.strictMode) {
        console.error("You are are attempting to use a call instance that was previously destroyed, which is unsupported. Please remove `strictMode: false` from your constructor properties to enable strict mode to track down and fix this unsupported usage.");
      }
    } else {
      var n3 = { action: cs2, level: "error", code: this.strictMode ? 9995 : 9997 };
      this._messageChannel.sendMessageToCallMachine(n3, null, this.callClientId, this._iframe);
    }
  } }, { key: "_logDuplicateInstanceAttempt", value: function() {
    for (var e3 = 0, t3 = Object.values(Ga2); e3 < t3.length; e3++) {
      var n3 = t3[e3];
      n3._callMachineInitialized ? (n3.sendMessageToCallMachine({ action: cs2, level: "warn", code: this.allowMultipleCallInstances ? 9993 : 9992 }), n3._delayDuplicateInstanceLog = false) : n3._delayDuplicateInstanceLog = true;
    }
  } }, { key: "_maybeSendToSentry", value: function(e3) {
    var t3, n3, i4, o3;
    if (null !== (t3 = e3.error) && void 0 !== t3 && t3.type) {
      if (![$i2, Vi2, Bi2].includes(e3.error.type))
        return;
      if (e3.error.type === Bi2 && e3.error.msg.includes("deleted"))
        return;
    }
    var s3 = null !== (n3 = this.properties) && void 0 !== n3 && n3.url ? new URL(this.properties.url) : void 0, a3 = "production";
    s3 && s3.host.includes(".staging.daily") && (a3 = "staging");
    var c4, l3, u3, d4, h3, p4 = function(e4) {
      const t4 = [Gn2(), Wn2(), ii2(), ni2(), ui2(), fi2(), rr2(), pi2()];
      return false !== e4.autoSessionTracking && t4.push(li2()), t4;
    }({}).filter(function(e4) {
      return !["BrowserApiErrors", "Breadcrumbs", "GlobalHandlers"].includes(e4.name);
    }), f3 = new jr2({ dsn: "https://f10f1c81e5d44a4098416c0867a8b740@o77906.ingest.sentry.io/168844", transport: Wr2, stackParser: Zr2, integrations: p4, environment: a3 }), v5 = new Mt2();
    if (v5.setClient(f3), f3.init(), this.session_id && v5.setExtra("sessionId", this.session_id), this.properties) {
      var g4 = qa2({}, this.properties);
      g4.userName = g4.userName ? "[Filtered]" : void 0, g4.userData = g4.userData ? "[Filtered]" : void 0, g4.token = g4.token ? "[Filtered]" : void 0, v5.setExtra("properties", g4);
    }
    if (s3) {
      var m4 = s3.searchParams.get("domain");
      if (!m4) {
        var y4 = s3.host.match(/(.*?)\./);
        m4 = y4 && y4[1] || "";
      }
      m4 && v5.setTag("domain", m4);
    }
    e3.error && (v5.setTag("fatalErrorType", e3.error.type), v5.setExtra("errorDetails", e3.error.details), (null === (c4 = e3.error.details) || void 0 === c4 ? void 0 : c4.uri) && v5.setTag("serverAddress", e3.error.details.uri), (null === (l3 = e3.error.details) || void 0 === l3 ? void 0 : l3.workerGroup) && v5.setTag("workerGroup", e3.error.details.workerGroup), (null === (u3 = e3.error.details) || void 0 === u3 ? void 0 : u3.geoGroup) && v5.setTag("geoGroup", e3.error.details.geoGroup), (null === (d4 = e3.error.details) || void 0 === d4 ? void 0 : d4.on) && v5.setTag("connectionAttempt", e3.error.details.on), null !== (h3 = e3.error.details) && void 0 !== h3 && h3.bundleUrl && (v5.setTag("bundleUrl", e3.error.details.bundleUrl), v5.setTag("bundleError", e3.error.details.sourceError.type)));
    v5.setTags({ callMode: this._callObjectMode ? ys2() ? "reactNative" : null !== (i4 = this.properties) && void 0 !== i4 && null !== (i4 = i4.dailyConfig) && void 0 !== i4 && null !== (i4 = i4.callMode) && void 0 !== i4 && i4.includes("prebuilt") ? this.properties.dailyConfig.callMode : "custom" : "prebuilt-frame", version: r3.version() });
    var b4 = (null === (o3 = e3.error) || void 0 === o3 ? void 0 : o3.msg) || e3.errorMsg;
    v5.captureException(new Error(b4));
  } }, { key: "_callMachine", value: function() {
    var e3;
    return null === (e3 = window._daily) || void 0 === e3 || null === (e3 = e3.instances) || void 0 === e3 || null === (e3 = e3[this.callClientId]) || void 0 === e3 ? void 0 : e3.callMachine;
  } }, { key: "_maybeUpdateInputSettings", value: function(e3) {
    if (!N2(this._inputSettings, e3)) {
      var t3 = this._getInputSettings();
      this._inputSettings = e3;
      var n3 = this._getInputSettings();
      N2(t3, n3) || this.emitDailyJSEvent({ action: es2, inputSettings: n3 });
    }
  } }], [{ key: "supportedBrowser", value: function() {
    if (ys2())
      return { supported: true, mobile: true, name: "React Native", version: null, supportsScreenShare: true, supportsSfu: true, supportsVideoProcessing: false, supportsAudioProcessing: false };
    var e3 = Q2.getParser(ms2());
    return { supported: !!Os2(), mobile: "mobile" === e3.getPlatformType(), name: e3.getBrowserName(), version: e3.getBrowserVersion(), supportsFullscreen: !!ws2(), supportsScreenShare: !!_s2(), supportsSfu: !!Os2(), supportsVideoProcessing: Es2(), supportsAudioProcessing: Ts2() };
  } }, { key: "version", value: function() {
    return "0.79.0";
  } }, { key: "createCallObject", value: function() {
    var e3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
    return e3.layout = "none", new r3(null, e3);
  } }, { key: "wrap", value: function(e3) {
    var t3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
    if (gc2(), !e3 || !e3.contentWindow || "string" != typeof e3.src)
      throw new Error("DailyIframe::Wrap needs an iframe-like first argument");
    return t3.layout || (t3.customLayout ? t3.layout = "custom-v1" : t3.layout = "browser"), new r3(e3, t3);
  } }, { key: "createFrame", value: function(e3, t3) {
    var n3, i4;
    gc2(), e3 && t3 ? (n3 = e3, i4 = t3) : e3 && e3.append ? (n3 = e3, i4 = {}) : (n3 = document.body, i4 = e3 || {});
    var o3 = i4.iframeStyle;
    o3 || (o3 = n3 === document.body ? { position: "fixed", border: "1px solid black", backgroundColor: "white", width: "375px", height: "450px", right: "1em", bottom: "1em" } : { border: 0, width: "100%", height: "100%" });
    var s3 = document.createElement("iframe");
    window.navigator && window.navigator.userAgent.match(/Chrome\/61\./) ? s3.allow = "microphone, camera" : s3.allow = "microphone; camera; autoplay; display-capture; screen-wake-lock", s3.style.visibility = "hidden", n3.appendChild(s3), s3.style.visibility = null, Object.keys(o3).forEach(function(e4) {
      return s3.style[e4] = o3[e4];
    }), i4.layout || (i4.customLayout ? i4.layout = "custom-v1" : i4.layout = "browser");
    try {
      return new r3(s3, i4);
    } catch (e4) {
      throw n3.removeChild(s3), e4;
    }
  } }, { key: "createTransparentFrame", value: function() {
    var e3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
    gc2();
    var t3 = document.createElement("iframe");
    return t3.allow = "microphone; camera; autoplay", t3.style.cssText = "\n      position: fixed;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      border: 0;\n      pointer-events: none;\n    ", document.body.appendChild(t3), e3.layout || (e3.layout = "custom-v1"), r3.wrap(t3, e3);
  } }, { key: "getCallInstance", value: function() {
    var e3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : void 0;
    return e3 ? Ga2[e3] : Object.values(Ga2)[0];
  } }]);
  var i3, c3, d3, p3, v3, g3, m3, y3, b3, _3, w3, S3, k3, M3, C3, E3, T3, O3, P3, A3, j3, I3, L3, D3, R3, F3, B3, U3, V3, J3, $3, q3, z3, W3, H3, G3, Y3, ee3;
}();
function cc2(e3, t3) {
  var n3 = {};
  for (var r3 in e3)
    if (e3[r3] instanceof MediaStreamTrack)
      console.warn("MediaStreamTrack found in props or cache.", r3), n3[r3] = ls2;
    else if ("dailyConfig" === r3) {
      if (e3[r3].modifyLocalSdpHook) {
        var i3 = window._daily.instances[t3].customCallbacks || {};
        i3.modifyLocalSdpHook = e3[r3].modifyLocalSdpHook, window._daily.instances[t3].customCallbacks = i3, delete e3[r3].modifyLocalSdpHook;
      }
      if (e3[r3].modifyRemoteSdpHook) {
        var o3 = window._daily.instances[t3].customCallbacks || {};
        o3.modifyRemoteSdpHook = e3[r3].modifyRemoteSdpHook, window._daily.instances[t3].customCallbacks = o3, delete e3[r3].modifyRemoteSdpHook;
      }
      n3[r3] = e3[r3];
    } else
      n3[r3] = e3[r3];
  return n3;
}
function lc2(e3) {
  var t3 = arguments.length > 2 ? arguments[2] : void 0;
  if (e3 !== bi2) {
    var n3 = "".concat(arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "This daily-js method", " only supported after join.");
    throw t3 && (n3 += " ".concat(t3)), console.error(n3), new Error(n3);
  }
}
function uc2(e3, t3) {
  return [yi2, bi2].includes(e3) || t3;
}
function dc2(e3, t3) {
  var n3 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : "This daily-js method", r3 = arguments.length > 3 ? arguments[3] : void 0;
  if (uc2(e3, t3)) {
    var i3 = "".concat(n3, " not supported after joining a meeting.");
    throw r3 && (i3 += " ".concat(r3)), console.error(i3), new Error(i3);
  }
}
function hc2(e3) {
  var t3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "This daily-js method", n3 = arguments.length > 2 ? arguments[2] : void 0;
  if (!e3) {
    var r3 = "".concat(t3, arguments.length > 3 && void 0 !== arguments[3] && arguments[3] ? " requires preAuth() or startCamera() to initialize call state." : " requires preAuth(), startCamera(), or join() to initialize call state.");
    throw n3 && (r3 += " ".concat(n3)), console.error(r3), new Error(r3);
  }
}
function pc2(e3) {
  if (e3) {
    var t3 = "A pre-call quality test is in progress. Please try ".concat(arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "This daily-js method", " again once testing has completed. Use stopTestCallQuality() to end it early.");
    throw console.error(t3), new Error(t3);
  }
}
function fc2(e3) {
  if (!e3) {
    var t3 = "".concat(arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "This daily-js method", " is only supported on custom callObject instances");
    throw console.error(t3), new Error(t3);
  }
}
function vc2(e3) {
  if (e3) {
    var t3 = "".concat(arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "This daily-js method", " is only supported as part of Daily's Prebuilt");
    throw console.error(t3), new Error(t3);
  }
}
function gc2() {
  if (ys2())
    throw new Error("This daily-js method is not currently supported in React Native");
}
function mc2() {
  if (!ys2())
    throw new Error("This daily-js method is only supported in React Native");
}
function yc2(e3) {
  if (void 0 === e3)
    return true;
  var t3;
  if ("string" == typeof e3)
    t3 = e3;
  else
    try {
      t3 = JSON.stringify(e3), N2(JSON.parse(t3), e3) || console.warn("The userData provided will be modified when serialized.");
    } catch (e4) {
      throw Error("userData must be serializable to JSON: ".concat(e4));
    }
  if (t3.length > 4096)
    throw Error("userData is too large (".concat(t3.length, " characters). Maximum size suppported is ").concat(4096, "."));
  return true;
}
function bc2(e3, t3) {
  for (var n3 = t3.allowAllParticipantsKey, r3 = function(e4) {
    var t4 = ["local"];
    return n3 || t4.push("*"), e4 && !t4.includes(e4);
  }, i3 = function(e4) {
    return !!(void 0 === e4.layer || Number.isInteger(e4.layer) && e4.layer >= 0 || "inherit" === e4.layer);
  }, o3 = function(e4) {
    return !!e4 && (!(e4.video && !i3(e4.video)) && !(e4.screenVideo && !i3(e4.screenVideo)));
  }, s3 = 0, a3 = Object.entries(e3); s3 < a3.length; s3++) {
    var c3 = f2(a3[s3], 2), l3 = c3[0], u3 = c3[1];
    if (!r3(l3) || !o3(u3))
      return false;
  }
  return true;
}
function _c2(e3) {
  if ("object" !== n2(e3))
    return false;
  for (var t3 = 0, r3 = Object.entries(e3); t3 < r3.length; t3++) {
    var i3 = f2(r3[t3], 2), o3 = i3[0], s3 = i3[1];
    switch (o3) {
      case "video":
        if ("object" !== n2(s3))
          return false;
        for (var a3 = 0, c3 = Object.entries(s3); a3 < c3.length; a3++) {
          var l3 = f2(c3[a3], 2), u3 = l3[0], d3 = l3[1];
          switch (u3) {
            case "processor":
              if (!kc2(d3))
                return false;
              break;
            case "settings":
              if (!Mc2(d3))
                return false;
              break;
            default:
              return false;
          }
        }
        break;
      case "audio":
        if ("object" !== n2(s3))
          return false;
        for (var h3 = 0, p3 = Object.entries(s3); h3 < p3.length; h3++) {
          var v3 = f2(p3[h3], 2), g3 = v3[0], m3 = v3[1];
          switch (g3) {
            case "processor":
              if (!Sc2(m3))
                return false;
              break;
            case "settings":
              if (!Mc2(m3))
                return false;
              break;
            default:
              return false;
          }
        }
        break;
      default:
        return false;
    }
  }
  return true;
}
function wc2(e3, t3, n3) {
  var r3, i3 = [];
  e3.video && e3.video.processor && (Es2(null !== (r3 = null == t3 ? void 0 : t3.useLegacyVideoProcessor) && void 0 !== r3 && r3) || (e3.video.settings ? delete e3.video.processor : delete e3.video, i3.push("video")));
  e3.audio && e3.audio.processor && (Ts2() || (e3.audio.settings ? delete e3.audio.processor : delete e3.audio, i3.push("audio"))), i3.length > 0 && console.error("Ignoring settings for browser- or platform-unsupported input processor(s): ".concat(i3.join(", "))), e3.audio && e3.audio.settings && (e3.audio.settings.customTrack ? (n3.audioTrack = e3.audio.settings.customTrack, e3.audio.settings = { customTrack: ls2 }) : delete n3.audioTrack), e3.video && e3.video.settings && (e3.video.settings.customTrack ? (n3.videoTrack = e3.video.settings.customTrack, e3.video.settings = { customTrack: ls2 }) : delete n3.videoTrack);
}
function Sc2(e3) {
  if (ys2())
    return console.warn("Video processing is not yet supported in React Native"), false;
  var t3 = ["type"];
  return !!e3 && ("object" === n2(e3) && (Object.keys(e3).filter(function(e4) {
    return !t3.includes(e4);
  }).forEach(function(t4) {
    console.warn("invalid key inputSettings -> audio -> processor : ".concat(t4)), delete e3[t4];
  }), !!function(e4) {
    if ("string" != typeof e4)
      return false;
    if (!Object.values(ds2).includes(e4))
      return console.error("inputSettings audio processor type invalid"), false;
    return true;
  }(e3.type)));
}
function kc2(e3) {
  if (ys2())
    return console.warn("Video processing is not yet supported in React Native"), false;
  var t3 = ["type", "config"];
  if (!e3)
    return false;
  if ("object" !== n2(e3))
    return false;
  if (!function(e4) {
    if ("string" != typeof e4)
      return false;
    if (!Object.values(us2).includes(e4))
      return console.error("inputSettings video processor type invalid"), false;
    return true;
  }(e3.type))
    return false;
  if (e3.config) {
    if ("object" !== n2(e3.config))
      return false;
    if (!function(e4, t4) {
      var n3 = Object.keys(t4);
      if (0 === n3.length)
        return true;
      var r3 = "invalid object in inputSettings -> video -> processor -> config";
      switch (e4) {
        case us2.BGBLUR:
          return n3.length > 1 || "strength" !== n3[0] ? (console.error(r3), false) : !("number" != typeof t4.strength || t4.strength <= 0 || t4.strength > 1 || isNaN(t4.strength)) || (console.error("".concat(r3, "; expected: {0 < strength <= 1}, got: ").concat(t4.strength)), false);
        case us2.BGIMAGE:
          return !(void 0 !== t4.source && !function(e5) {
            if ("default" === e5.source)
              return e5.type = "default", true;
            if (e5.source instanceof ArrayBuffer)
              return true;
            if (ee2(e5.source))
              return e5.type = "url", !!function(e6) {
                var t6 = new URL(e6), n5 = t6.pathname;
                if ("data:" === t6.protocol)
                  try {
                    var r4 = n5.substring(n5.indexOf(":") + 1, n5.indexOf(";")).split("/")[1];
                    return ps2.includes(r4);
                  } catch (e7) {
                    return console.error("failed to deduce blob content type", e7), false;
                  }
                var i3 = n5.split(".").at(-1).toLowerCase().trim();
                return ps2.includes(i3);
              }(e5.source) || (console.error("invalid image type; supported types: [".concat(ps2.join(", "), "]")), false);
            return t5 = e5.source, n4 = Number(t5), isNaN(n4) || !Number.isInteger(n4) || n4 <= 0 || n4 > 10 ? (console.error("invalid image selection; must be an int, > 0, <= ".concat(10)), false) : (e5.type = "daily-preselect", true);
            var t5, n4;
          }(t4));
        default:
          return true;
      }
    }(e3.type, e3.config))
      return false;
  }
  return Object.keys(e3).filter(function(e4) {
    return !t3.includes(e4);
  }).forEach(function(t4) {
    console.warn("invalid key inputSettings -> video -> processor : ".concat(t4)), delete e3[t4];
  }), true;
}
function Mc2(e3) {
  return "object" === n2(e3) && (!e3.customTrack || e3.customTrack instanceof MediaStreamTrack);
}
function Cc2() {
  var e3 = Object.values(us2).join(" | "), t3 = Object.values(ds2).join(" | ");
  return "inputSettings must be of the form: { video?: { processor?: { type: [ ".concat(e3, " ], config?: {} } }, audio?: { processor: {type: [ ").concat(t3, " ] } } }");
}
function Ec2(e3) {
  var t3 = e3.allowAllParticipantsKey;
  return "receiveSettings must be of the form { [<remote participant id> | ".concat(Ii2).concat(t3 ? ' | "'.concat("*", '"') : "", "]: ") + '{ [video: [{ layer: [<non-negative integer> | "inherit"] } | "inherit"]], [screenVideo: [{ layer: [<non-negative integer> | "inherit"] } | "inherit"]] }}}';
}
function Tc2() {
  return "customIntegrations should be an object of type ".concat(JSON.stringify(ic2), ".");
}
function Oc2(e3) {
  if (e3 && "object" !== n2(e3) || Array.isArray(e3))
    return console.error("customTrayButtons should be an Object of the type ".concat(JSON.stringify(rc2), ".")), false;
  if (e3)
    for (var t3 = 0, r3 = Object.entries(e3); t3 < r3.length; t3++)
      for (var i3 = f2(r3[t3], 1)[0], o3 = 0, s3 = Object.entries(e3[i3]); o3 < s3.length; o3++) {
        var a3 = f2(s3[o3], 2), c3 = a3[0], l3 = a3[1], u3 = rc2.id[c3];
        if (!u3)
          return console.error("customTrayButton does not support key ".concat(c3)), false;
        switch (c3) {
          case "iconPath":
          case "iconPathDarkMode":
            if (!ee2(l3))
              return console.error("customTrayButton ".concat(c3, " should be a url.")), false;
            break;
          case "visualState":
            if (!["default", "sidebar-open", "active"].includes(l3))
              return console.error("customTrayButton ".concat(c3, " should be ").concat(u3, ". Got: ").concat(l3)), false;
            break;
          default:
            if (n2(l3) !== u3)
              return console.error("customTrayButton ".concat(c3, " should be a ").concat(u3, ".")), false;
        }
      }
  return true;
}
function Pc2(e3) {
  if (!e3 || e3 && "object" !== n2(e3) || Array.isArray(e3))
    return console.error(Tc2()), false;
  for (var t3 = function(e4) {
    return "".concat(e4, " should be ").concat(ic2.id[e4]);
  }, r3 = function(e4, t4) {
    return console.error("customIntegration ".concat(e4, ": ").concat(t4));
  }, i3 = 0, o3 = Object.entries(e3); i3 < o3.length; i3++) {
    var s3 = f2(o3[i3], 1)[0];
    if (!("label" in e3[s3]))
      return r3(s3, "label is required"), false;
    if (!("location" in e3[s3]))
      return r3(s3, "location is required"), false;
    if (!("src" in e3[s3]) && !("srcdoc" in e3[s3]))
      return r3(s3, "src or srcdoc is required"), false;
    for (var a3 = 0, c3 = Object.entries(e3[s3]); a3 < c3.length; a3++) {
      var l3 = f2(c3[a3], 2), u3 = l3[0], d3 = l3[1];
      switch (u3) {
        case "allow":
        case "csp":
        case "name":
        case "referrerPolicy":
        case "sandbox":
          if ("string" != typeof d3)
            return r3(s3, t3(u3)), false;
          break;
        case "iconURL":
          if (!ee2(d3))
            return r3(s3, "".concat(u3, " should be a url")), false;
          break;
        case "src":
          if ("srcdoc" in e3[s3])
            return r3(s3, "cannot have both src and srcdoc"), false;
          if (!ee2(d3))
            return r3(s3, 'src "'.concat(d3, '" is not a valid URL')), false;
          break;
        case "srcdoc":
          if ("src" in e3[s3])
            return r3(s3, "cannot have both src and srcdoc"), false;
          if ("string" != typeof d3)
            return r3(s3, t3(u3)), false;
          break;
        case "location":
          if (!["main", "sidebar"].includes(d3))
            return r3(s3, t3(u3)), false;
          break;
        case "controlledBy":
          if ("*" !== d3 && "owners" !== d3 && (!Array.isArray(d3) || d3.some(function(e4) {
            return "string" != typeof e4;
          })))
            return r3(s3, t3(u3)), false;
          break;
        case "shared":
          if ((!Array.isArray(d3) || d3.some(function(e4) {
            return "string" != typeof e4;
          })) && "owners" !== d3 && "boolean" != typeof d3)
            return r3(s3, t3(u3)), false;
          break;
        default:
          if (!ic2.id[u3])
            return console.error("customIntegration does not support key ".concat(u3)), false;
      }
    }
  }
  return true;
}
function Ac2(e3, t3) {
  if (void 0 === t3)
    return false;
  switch (n2(t3)) {
    case "string":
      return n2(e3) === t3;
    case "object":
      if ("object" !== n2(e3))
        return false;
      for (var r3 in e3)
        if (!Ac2(e3[r3], t3[r3]))
          return false;
      return true;
    default:
      return false;
  }
}
function jc2(e3, t3) {
  var n3 = e3.sessionId, r3 = e3.toEndPoint, i3 = e3.callerId, o3 = e3.useSipRefer;
  if (!n3 || !r3)
    throw new Error("".concat(t3, "() requires a sessionId and toEndPoint"));
  if ("string" != typeof n3 || "string" != typeof r3)
    throw new Error("Invalid paramater: sessionId and toEndPoint must be of type string");
  if (o3 && !r3.startsWith("sip:"))
    throw new Error('"toEndPoint" must be a "sip" address');
  if (!r3.startsWith("sip:") && !r3.startsWith("+"))
    throw new Error("toEndPoint: ".concat(r3, ' must starts with either "sip:" or "+"'));
  if (i3 && "string" != typeof i3)
    throw new Error("callerId must be of type string");
  if (i3 && !r3.startsWith("+"))
    throw new Error("callerId is only valid when transferring to a PSTN number");
}
function Ic(e3) {
  if ("object" !== n2(e3))
    throw new Error('RemoteMediaPlayerSettings: must be "object" type');
  if (e3.state && !Object.values(hs2).includes(e3.state))
    throw new Error("Invalid value for RemoteMediaPlayerSettings.state, valid values are: " + JSON.stringify(hs2));
  if (e3.volume) {
    if ("number" != typeof e3.volume)
      throw new Error('RemoteMediaPlayerSettings.volume: must be "number" type');
    if (e3.volume < 0 || e3.volume > 2)
      throw new Error("RemoteMediaPlayerSettings.volume: must be between 0.0 - 2.0");
  }
}
function xc(e3, t3, n3) {
  return !("number" != typeof e3 || e3 < t3 || e3 > n3);
}
function Lc(e3, t3) {
  return e3 && !t3 && delete e3.data, e3;
}

// ../node_modules/@pipecat-ai/gemini-live-websocket-transport/dist/index.module.js
var import_events2 = __toESM(require_events());
function $parcel$export4(e3, n3, v3, s3) {
  Object.defineProperty(e3, n3, { get: v3, set: s3, enumerable: true, configurable: true });
}
var $d4cf498bb51af8a5$exports = {};
$parcel$export4($d4cf498bb51af8a5$exports, "GeminiLiveWebsocketTransport", () => $d4cf498bb51af8a5$export$bef67da0c82ecefe);
var $6d4b7449a1e1544a$export$13afda237b1c98463 = class {
  /**
  * Converts Float32Array of amplitude data to ArrayBuffer in Int16Array format
  * @param {Float32Array} float32Array
  * @returns {ArrayBuffer}
  */
  static floatTo16BitPCM(float32Array) {
    const buffer = new ArrayBuffer(float32Array.length * 2);
    const view = new DataView(buffer);
    let offset = 0;
    for (let i3 = 0; i3 < float32Array.length; i3++, offset += 2) {
      let s3 = Math.max(-1, Math.min(1, float32Array[i3]));
      view.setInt16(offset, s3 < 0 ? s3 * 32768 : s3 * 32767, true);
    }
    return buffer;
  }
  /**
  * Concatenates two ArrayBuffers
  * @param {ArrayBuffer} leftBuffer
  * @param {ArrayBuffer} rightBuffer
  * @returns {ArrayBuffer}
  */
  static mergeBuffers(leftBuffer, rightBuffer) {
    const tmpArray = new Uint8Array(leftBuffer.byteLength + rightBuffer.byteLength);
    tmpArray.set(new Uint8Array(leftBuffer), 0);
    tmpArray.set(new Uint8Array(rightBuffer), leftBuffer.byteLength);
    return tmpArray.buffer;
  }
  /**
  * Packs data into an Int16 format
  * @private
  * @param {number} size 0 = 1x Int16, 1 = 2x Int16
  * @param {number} arg value to pack
  * @returns
  */
  _packData(size, arg) {
    return [
      new Uint8Array([
        arg,
        arg >> 8
      ]),
      new Uint8Array([
        arg,
        arg >> 8,
        arg >> 16,
        arg >> 24
      ])
    ][size];
  }
  /**
  * Packs audio into "audio/wav" Blob
  * @param {number} sampleRate
  * @param {{bitsPerSample: number, channels: Array<Float32Array>, data: Int16Array}} audio
  * @returns {WavPackerAudioType}
  */
  pack(sampleRate, audio) {
    if (!audio?.bitsPerSample)
      throw new Error(`Missing "bitsPerSample"`);
    else if (!audio?.channels)
      throw new Error(`Missing "channels"`);
    else if (!audio?.data)
      throw new Error(`Missing "data"`);
    const { bitsPerSample, channels, data } = audio;
    const output = [
      // Header
      "RIFF",
      this._packData(1, 52),
      "WAVE",
      // chunk 1
      "fmt ",
      this._packData(1, 16),
      this._packData(0, 1),
      this._packData(0, channels.length),
      this._packData(1, sampleRate),
      this._packData(1, sampleRate * channels.length * bitsPerSample / 8),
      this._packData(0, channels.length * bitsPerSample / 8),
      this._packData(0, bitsPerSample),
      // chunk 2
      "data",
      this._packData(1, channels[0].length * channels.length * bitsPerSample / 8),
      data
    ];
    const blob = new Blob(output, {
      type: "audio/mpeg"
    });
    const url = URL.createObjectURL(blob);
    return {
      blob,
      url,
      channelCount: channels.length,
      sampleRate,
      duration: data.byteLength / (channels.length * sampleRate * 2)
    };
  }
};
globalThis.WavPacker = $6d4b7449a1e1544a$export$13afda237b1c98463;
var $03f71ce85e00ada6$var$octave8Frequencies3 = [
  4186.01,
  4434.92,
  4698.63,
  4978.03,
  5274.04,
  5587.65,
  5919.91,
  6271.93,
  6644.88,
  7040,
  7458.62,
  7902.13
];
var $03f71ce85e00ada6$var$octave8FrequencyLabels3 = [
  "C",
  "C#",
  "D",
  "D#",
  "E",
  "F",
  "F#",
  "G",
  "G#",
  "A",
  "A#",
  "B"
];
var $03f71ce85e00ada6$export$776c63898ae5b6363 = [];
var $03f71ce85e00ada6$export$facd167cc27ea9b03 = [];
for (let i3 = 1; i3 <= 8; i3++)
  for (let f3 = 0; f3 < $03f71ce85e00ada6$var$octave8Frequencies3.length; f3++) {
    const freq = $03f71ce85e00ada6$var$octave8Frequencies3[f3];
    $03f71ce85e00ada6$export$776c63898ae5b6363.push(freq / Math.pow(2, 8 - i3));
    $03f71ce85e00ada6$export$facd167cc27ea9b03.push($03f71ce85e00ada6$var$octave8FrequencyLabels3[f3] + i3);
  }
var $03f71ce85e00ada6$var$voiceFrequencyRange3 = [
  32,
  2e3
];
var $03f71ce85e00ada6$export$dbc1581ed2cfa1833 = $03f71ce85e00ada6$export$776c63898ae5b6363.filter((_3, i3) => {
  return $03f71ce85e00ada6$export$776c63898ae5b6363[i3] > $03f71ce85e00ada6$var$voiceFrequencyRange3[0] && $03f71ce85e00ada6$export$776c63898ae5b6363[i3] < $03f71ce85e00ada6$var$voiceFrequencyRange3[1];
});
var $03f71ce85e00ada6$export$30a6f2881311088f3 = $03f71ce85e00ada6$export$facd167cc27ea9b03.filter((_3, i3) => {
  return $03f71ce85e00ada6$export$776c63898ae5b6363[i3] > $03f71ce85e00ada6$var$voiceFrequencyRange3[0] && $03f71ce85e00ada6$export$776c63898ae5b6363[i3] < $03f71ce85e00ada6$var$voiceFrequencyRange3[1];
});
var $f32f064564ee62f6$export$2c3136da0bf130f93 = class _$f32f064564ee62f6$export$2c3136da0bf130f9 {
  /**
  * Retrieves frequency domain data from an AnalyserNode adjusted to a decibel range
  * returns human-readable formatting and labels
  * @param {AnalyserNode} analyser
  * @param {number} sampleRate
  * @param {Float32Array} [fftResult]
  * @param {"frequency"|"music"|"voice"} [analysisType]
  * @param {number} [minDecibels] default -100
  * @param {number} [maxDecibels] default -30
  * @returns {AudioAnalysisOutputType}
  */
  static getFrequencies(analyser, sampleRate, fftResult, analysisType = "frequency", minDecibels = -100, maxDecibels = -30) {
    if (!fftResult) {
      fftResult = new Float32Array(analyser.frequencyBinCount);
      analyser.getFloatFrequencyData(fftResult);
    }
    const nyquistFrequency = sampleRate / 2;
    const frequencyStep = 1 / fftResult.length * nyquistFrequency;
    let outputValues;
    let frequencies;
    let labels;
    if (analysisType === "music" || analysisType === "voice") {
      const useFrequencies = analysisType === "voice" ? (0, $03f71ce85e00ada6$export$dbc1581ed2cfa1833) : (0, $03f71ce85e00ada6$export$776c63898ae5b6363);
      const aggregateOutput = Array(useFrequencies.length).fill(minDecibels);
      for (let i3 = 0; i3 < fftResult.length; i3++) {
        const frequency = i3 * frequencyStep;
        const amplitude = fftResult[i3];
        for (let n3 = useFrequencies.length - 1; n3 >= 0; n3--)
          if (frequency > useFrequencies[n3]) {
            aggregateOutput[n3] = Math.max(aggregateOutput[n3], amplitude);
            break;
          }
      }
      outputValues = aggregateOutput;
      frequencies = analysisType === "voice" ? (0, $03f71ce85e00ada6$export$dbc1581ed2cfa1833) : (0, $03f71ce85e00ada6$export$776c63898ae5b6363);
      labels = analysisType === "voice" ? (0, $03f71ce85e00ada6$export$30a6f2881311088f3) : (0, $03f71ce85e00ada6$export$facd167cc27ea9b03);
    } else {
      outputValues = Array.from(fftResult);
      frequencies = outputValues.map((_3, i3) => frequencyStep * i3);
      labels = frequencies.map((f3) => `${f3.toFixed(2)} Hz`);
    }
    const normalizedOutput = outputValues.map((v3) => {
      return Math.max(0, Math.min((v3 - minDecibels) / (maxDecibels - minDecibels), 1));
    });
    const values = new Float32Array(normalizedOutput);
    return {
      values,
      frequencies,
      labels
    };
  }
  /**
  * Creates a new AudioAnalysis instance for an HTMLAudioElement
  * @param {HTMLAudioElement} audioElement
  * @param {AudioBuffer|null} [audioBuffer] If provided, will cache all frequency domain data from the buffer
  * @returns {AudioAnalysis}
  */
  constructor(audioElement, audioBuffer = null) {
    this.fftResults = [];
    if (audioBuffer) {
      const { length, sampleRate } = audioBuffer;
      const offlineAudioContext = new OfflineAudioContext({
        length,
        sampleRate
      });
      const source = offlineAudioContext.createBufferSource();
      source.buffer = audioBuffer;
      const analyser = offlineAudioContext.createAnalyser();
      analyser.fftSize = 8192;
      analyser.smoothingTimeConstant = 0.1;
      source.connect(analyser);
      const renderQuantumInSeconds = 1 / 60;
      const durationInSeconds = length / sampleRate;
      const analyze = (index) => {
        const suspendTime = renderQuantumInSeconds * index;
        if (suspendTime < durationInSeconds)
          offlineAudioContext.suspend(suspendTime).then(() => {
            const fftResult = new Float32Array(analyser.frequencyBinCount);
            analyser.getFloatFrequencyData(fftResult);
            this.fftResults.push(fftResult);
            analyze(index + 1);
          });
        if (index === 1)
          offlineAudioContext.startRendering();
        else
          offlineAudioContext.resume();
      };
      source.start(0);
      analyze(1);
      this.audio = audioElement;
      this.context = offlineAudioContext;
      this.analyser = analyser;
      this.sampleRate = sampleRate;
      this.audioBuffer = audioBuffer;
    } else {
      const audioContext = new AudioContext();
      const track2 = audioContext.createMediaElementSource(audioElement);
      const analyser = audioContext.createAnalyser();
      analyser.fftSize = 8192;
      analyser.smoothingTimeConstant = 0.1;
      track2.connect(analyser);
      analyser.connect(audioContext.destination);
      this.audio = audioElement;
      this.context = audioContext;
      this.analyser = analyser;
      this.sampleRate = this.context.sampleRate;
      this.audioBuffer = null;
    }
  }
  /**
  * Gets the current frequency domain data from the playing audio track
  * @param {"frequency"|"music"|"voice"} [analysisType]
  * @param {number} [minDecibels] default -100
  * @param {number} [maxDecibels] default -30
  * @returns {AudioAnalysisOutputType}
  */
  getFrequencies(analysisType = "frequency", minDecibels = -100, maxDecibels = -30) {
    let fftResult = null;
    if (this.audioBuffer && this.fftResults.length) {
      const pct = this.audio.currentTime / this.audio.duration;
      const index = Math.min(pct * this.fftResults.length | 0, this.fftResults.length - 1);
      fftResult = this.fftResults[index];
    }
    return _$f32f064564ee62f6$export$2c3136da0bf130f9.getFrequencies(this.analyser, this.sampleRate, fftResult, analysisType, minDecibels, maxDecibels);
  }
  /**
  * Resume the internal AudioContext if it was suspended due to the lack of
  * user interaction when the AudioAnalysis was instantiated.
  * @returns {Promise<true>}
  */
  async resumeIfSuspended() {
    if (this.context.state === "suspended")
      await this.context.resume();
    return true;
  }
};
globalThis.AudioAnalysis = $f32f064564ee62f6$export$2c3136da0bf130f93;
var $29a8a70a9466b14f$export$50b76700e2b15e93 = `
class StreamProcessor extends AudioWorkletProcessor {
  constructor() {
    super();
    this.hasStarted = false;
    this.hasInterrupted = false;
    this.outputBuffers = [];
    this.bufferLength = 128;
    this.write = { buffer: new Float32Array(this.bufferLength), trackId: null };
    this.writeOffset = 0;
    this.trackSampleOffsets = {};
    this.port.onmessage = (event) => {
      if (event.data) {
        const payload = event.data;
        if (payload.event === 'write') {
          const int16Array = payload.buffer;
          const float32Array = new Float32Array(int16Array.length);
          for (let i = 0; i < int16Array.length; i++) {
            float32Array[i] = int16Array[i] / 0x8000; // Convert Int16 to Float32
          }
          this.writeData(float32Array, payload.trackId);
        } else if (
          payload.event === 'offset' ||
          payload.event === 'interrupt'
        ) {
          const requestId = payload.requestId;
          const trackId = this.write.trackId;
          const offset = this.trackSampleOffsets[trackId] || 0;
          this.port.postMessage({
            event: 'offset',
            requestId,
            trackId,
            offset,
          });
          if (payload.event === 'interrupt') {
            this.hasInterrupted = true;
          }
        } else {
          throw new Error(\`Unhandled event "\${payload.event}"\`);
        }
      }
    };
  }

  writeData(float32Array, trackId = null) {
    let { buffer } = this.write;
    let offset = this.writeOffset;
    for (let i = 0; i < float32Array.length; i++) {
      buffer[offset++] = float32Array[i];
      if (offset >= buffer.length) {
        this.outputBuffers.push(this.write);
        this.write = { buffer: new Float32Array(this.bufferLength), trackId };
        buffer = this.write.buffer;
        offset = 0;
      }
    }
    this.writeOffset = offset;
    return true;
  }

  process(inputs, outputs, parameters) {
    const output = outputs[0];
    const outputChannelData = output[0];
    const outputBuffers = this.outputBuffers;
    if (this.hasInterrupted) {
      this.port.postMessage({ event: 'stop' });
      return false;
    } else if (outputBuffers.length) {
      this.hasStarted = true;
      const { buffer, trackId } = outputBuffers.shift();
      for (let i = 0; i < outputChannelData.length; i++) {
        outputChannelData[i] = buffer[i] || 0;
      }
      if (trackId) {
        this.trackSampleOffsets[trackId] =
          this.trackSampleOffsets[trackId] || 0;
        this.trackSampleOffsets[trackId] += buffer.length;
      }
      return true;
    } else if (this.hasStarted) {
      this.port.postMessage({ event: 'stop' });
      return false;
    } else {
      return true;
    }
  }
}

registerProcessor('stream_processor', StreamProcessor);
`;
var $29a8a70a9466b14f$var$script3 = new Blob([
  $29a8a70a9466b14f$export$50b76700e2b15e93
], {
  type: "application/javascript"
});
var $29a8a70a9466b14f$var$src3 = URL.createObjectURL($29a8a70a9466b14f$var$script3);
var $29a8a70a9466b14f$export$bfa8c596114d74df3 = $29a8a70a9466b14f$var$src3;
var $d0a969833958d9e7$export$9698d62c78b8f3663 = class {
  /**
  * Creates a new WavStreamPlayer instance
  * @param {{sampleRate?: number}} options
  * @returns {WavStreamPlayer}
  */
  constructor({ sampleRate = 44100 } = {}) {
    this.scriptSrc = (0, $29a8a70a9466b14f$export$bfa8c596114d74df3);
    this.sampleRate = sampleRate;
    this.context = null;
    this.stream = null;
    this.analyser = null;
    this.trackSampleOffsets = {};
    this.interruptedTrackIds = {};
  }
  /**
  * Connects the audio context and enables output to speakers
  * @returns {Promise<true>}
  */
  async connect() {
    this.context = new AudioContext({
      sampleRate: this.sampleRate
    });
    if (this._speakerID)
      this.context.setSinkId(this._speakerID);
    if (this.context.state === "suspended")
      await this.context.resume();
    try {
      await this.context.audioWorklet.addModule(this.scriptSrc);
    } catch (e3) {
      console.error(e3);
      throw new Error(`Could not add audioWorklet module: ${this.scriptSrc}`);
    }
    const analyser = this.context.createAnalyser();
    analyser.fftSize = 8192;
    analyser.smoothingTimeConstant = 0.1;
    this.analyser = analyser;
    return true;
  }
  /**
  * Gets the current frequency domain data from the playing track
  * @param {"frequency"|"music"|"voice"} [analysisType]
  * @param {number} [minDecibels] default -100
  * @param {number} [maxDecibels] default -30
  * @returns {import('./analysis/audio_analysis.js').AudioAnalysisOutputType}
  */
  getFrequencies(analysisType = "frequency", minDecibels = -100, maxDecibels = -30) {
    if (!this.analyser)
      throw new Error("Not connected, please call .connect() first");
    return (0, $f32f064564ee62f6$export$2c3136da0bf130f93).getFrequencies(this.analyser, this.sampleRate, null, analysisType, minDecibels, maxDecibels);
  }
  /**
  * @param {string} speaker deviceId
  */
  async updateSpeaker(speaker) {
    const _prevSpeaker = this._speakerID;
    this._speakerID = speaker;
    if (this.context)
      try {
        if (speaker === "default")
          await this.context.setSinkId();
        else
          await this.context.setSinkId(speaker);
      } catch (e3) {
        console.error(`Could not set sinkId to ${speaker}: ${e3}`);
        this._speakerID = _prevSpeaker;
      }
  }
  /**
  * Starts audio streaming
  * @private
  * @returns {Promise<true>}
  */
  _start() {
    const streamNode = new AudioWorkletNode(this.context, "stream_processor");
    streamNode.connect(this.context.destination);
    streamNode.port.onmessage = (e3) => {
      const { event } = e3.data;
      if (event === "stop") {
        streamNode.disconnect();
        this.stream = null;
      } else if (event === "offset") {
        const { requestId, trackId, offset } = e3.data;
        const currentTime = offset / this.sampleRate;
        this.trackSampleOffsets[requestId] = {
          trackId,
          offset,
          currentTime
        };
      }
    };
    this.analyser.disconnect();
    streamNode.connect(this.analyser);
    this.stream = streamNode;
    return true;
  }
  /**
  * Adds 16BitPCM data to the currently playing audio stream
  * You can add chunks beyond the current play point and they will be queued for play
  * @param {ArrayBuffer|Int16Array} arrayBuffer
  * @param {string} [trackId]
  * @returns {Int16Array}
  */
  add16BitPCM(arrayBuffer, trackId = "default") {
    if (typeof trackId !== "string")
      throw new Error(`trackId must be a string`);
    else if (this.interruptedTrackIds[trackId])
      return;
    if (!this.stream)
      this._start();
    let buffer;
    if (arrayBuffer instanceof Int16Array)
      buffer = arrayBuffer;
    else if (arrayBuffer instanceof ArrayBuffer)
      buffer = new Int16Array(arrayBuffer);
    else
      throw new Error(`argument must be Int16Array or ArrayBuffer`);
    this.stream.port.postMessage({
      event: "write",
      buffer,
      trackId
    });
    return buffer;
  }
  /**
  * Gets the offset (sample count) of the currently playing stream
  * @param {boolean} [interrupt]
  * @returns {{trackId: string|null, offset: number, currentTime: number}}
  */
  async getTrackSampleOffset(interrupt = false) {
    if (!this.stream)
      return null;
    const requestId = crypto.randomUUID();
    this.stream.port.postMessage({
      event: interrupt ? "interrupt" : "offset",
      requestId
    });
    let trackSampleOffset;
    while (!trackSampleOffset) {
      trackSampleOffset = this.trackSampleOffsets[requestId];
      await new Promise((r3) => setTimeout(() => r3(), 1));
    }
    const { trackId } = trackSampleOffset;
    if (interrupt && trackId)
      this.interruptedTrackIds[trackId] = true;
    return trackSampleOffset;
  }
  /**
  * Strips the current stream and returns the sample offset of the audio
  * @param {boolean} [interrupt]
  * @returns {{trackId: string|null, offset: number, currentTime: number}}
  */
  async interrupt() {
    return this.getTrackSampleOffset(true);
  }
};
globalThis.WavStreamPlayer = $d0a969833958d9e7$export$9698d62c78b8f3663;
var $8e1d1e6ff08f6fb5$var$AudioProcessorWorklet3 = `
class AudioProcessor extends AudioWorkletProcessor {

  constructor() {
    super();
    this.port.onmessage = this.receive.bind(this);
    this.initialize();
  }

  initialize() {
    this.foundAudio = false;
    this.recording = false;
    this.chunks = [];
  }

  /**
   * Concatenates sampled chunks into channels
   * Format is chunk[Left[], Right[]]
   */
  readChannelData(chunks, channel = -1, maxChannels = 9) {
    let channelLimit;
    if (channel !== -1) {
      if (chunks[0] && chunks[0].length - 1 < channel) {
        throw new Error(
          \`Channel \${channel} out of range: max \${chunks[0].length}\`
        );
      }
      channelLimit = channel + 1;
    } else {
      channel = 0;
      channelLimit = Math.min(chunks[0] ? chunks[0].length : 1, maxChannels);
    }
    const channels = [];
    for (let n = channel; n < channelLimit; n++) {
      const length = chunks.reduce((sum, chunk) => {
        return sum + chunk[n].length;
      }, 0);
      const buffers = chunks.map((chunk) => chunk[n]);
      const result = new Float32Array(length);
      let offset = 0;
      for (let i = 0; i < buffers.length; i++) {
        result.set(buffers[i], offset);
        offset += buffers[i].length;
      }
      channels[n] = result;
    }
    return channels;
  }

  /**
   * Combines parallel audio data into correct format,
   * channels[Left[], Right[]] to float32Array[LRLRLRLR...]
   */
  formatAudioData(channels) {
    if (channels.length === 1) {
      // Simple case is only one channel
      const float32Array = channels[0].slice();
      const meanValues = channels[0].slice();
      return { float32Array, meanValues };
    } else {
      const float32Array = new Float32Array(
        channels[0].length * channels.length
      );
      const meanValues = new Float32Array(channels[0].length);
      for (let i = 0; i < channels[0].length; i++) {
        const offset = i * channels.length;
        let meanValue = 0;
        for (let n = 0; n < channels.length; n++) {
          float32Array[offset + n] = channels[n][i];
          meanValue += channels[n][i];
        }
        meanValues[i] = meanValue / channels.length;
      }
      return { float32Array, meanValues };
    }
  }

  /**
   * Converts 32-bit float data to 16-bit integers
   */
  floatTo16BitPCM(float32Array) {
    const buffer = new ArrayBuffer(float32Array.length * 2);
    const view = new DataView(buffer);
    let offset = 0;
    for (let i = 0; i < float32Array.length; i++, offset += 2) {
      let s = Math.max(-1, Math.min(1, float32Array[i]));
      view.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7fff, true);
    }
    return buffer;
  }

  /**
   * Retrieves the most recent amplitude values from the audio stream
   * @param {number} channel
   */
  getValues(channel = -1) {
    const channels = this.readChannelData(this.chunks, channel);
    const { meanValues } = this.formatAudioData(channels);
    return { meanValues, channels };
  }

  /**
   * Exports chunks as an audio/wav file
   */
  export() {
    const channels = this.readChannelData(this.chunks);
    const { float32Array, meanValues } = this.formatAudioData(channels);
    const audioData = this.floatTo16BitPCM(float32Array);
    return {
      meanValues: meanValues,
      audio: {
        bitsPerSample: 16,
        channels: channels,
        data: audioData,
      },
    };
  }

  receive(e) {
    const { event, id } = e.data;
    let receiptData = {};
    switch (event) {
      case 'start':
        this.recording = true;
        break;
      case 'stop':
        this.recording = false;
        break;
      case 'clear':
        this.initialize();
        break;
      case 'export':
        receiptData = this.export();
        break;
      case 'read':
        receiptData = this.getValues();
        break;
      default:
        break;
    }
    // Always send back receipt
    this.port.postMessage({ event: 'receipt', id, data: receiptData });
  }

  sendChunk(chunk) {
    const channels = this.readChannelData([chunk]);
    const { float32Array, meanValues } = this.formatAudioData(channels);
    const rawAudioData = this.floatTo16BitPCM(float32Array);
    const monoAudioData = this.floatTo16BitPCM(meanValues);
    this.port.postMessage({
      event: 'chunk',
      data: {
        mono: monoAudioData,
        raw: rawAudioData,
      },
    });
  }

  process(inputList, outputList, parameters) {
    // Copy input to output (e.g. speakers)
    // Note that this creates choppy sounds with Mac products
    const sourceLimit = Math.min(inputList.length, outputList.length);
    for (let inputNum = 0; inputNum < sourceLimit; inputNum++) {
      const input = inputList[inputNum];
      const output = outputList[inputNum];
      const channelCount = Math.min(input.length, output.length);
      for (let channelNum = 0; channelNum < channelCount; channelNum++) {
        input[channelNum].forEach((sample, i) => {
          output[channelNum][i] = sample;
        });
      }
    }
    const inputs = inputList[0];
    // There's latency at the beginning of a stream before recording starts
    // Make sure we actually receive audio data before we start storing chunks
    let sliceIndex = 0;
    if (!this.foundAudio) {
      for (const channel of inputs) {
        sliceIndex = 0; // reset for each channel
        if (this.foundAudio) {
          break;
        }
        if (channel) {
          for (const value of channel) {
            if (value !== 0) {
              // find only one non-zero entry in any channel
              this.foundAudio = true;
              break;
            } else {
              sliceIndex++;
            }
          }
        }
      }
    }
    if (inputs && inputs[0] && this.foundAudio && this.recording) {
      // We need to copy the TypedArray, because the \`process\`
      // internals will reuse the same buffer to hold each input
      const chunk = inputs.map((input) => input.slice(sliceIndex));
      this.chunks.push(chunk);
      this.sendChunk(chunk);
    }
    return true;
  }
}

registerProcessor('audio_processor', AudioProcessor);
`;
var $8e1d1e6ff08f6fb5$var$script3 = new Blob([
  $8e1d1e6ff08f6fb5$var$AudioProcessorWorklet3
], {
  type: "application/javascript"
});
var $8e1d1e6ff08f6fb5$var$src3 = URL.createObjectURL($8e1d1e6ff08f6fb5$var$script3);
var $8e1d1e6ff08f6fb5$export$1f65f50a8cbff43c3 = $8e1d1e6ff08f6fb5$var$src3;
var $62bc376044a05513$export$439b217ca659a8773 = class {
  /**
  * Create a new WavRecorder instance
  * @param {{sampleRate?: number, outputToSpeakers?: boolean, debug?: boolean}} [options]
  * @returns {WavRecorder}
  */
  constructor({ sampleRate = 44100, outputToSpeakers = false, debug = false } = {}) {
    this.scriptSrc = (0, $8e1d1e6ff08f6fb5$export$1f65f50a8cbff43c3);
    this.sampleRate = sampleRate;
    this.outputToSpeakers = outputToSpeakers;
    this.debug = !!debug;
    this._deviceChangeCallback = null;
    this._devices = [];
    this.deviceSelection = null;
    this.stream = null;
    this.processor = null;
    this.source = null;
    this.node = null;
    this.recording = false;
    this._lastEventId = 0;
    this.eventReceipts = {};
    this.eventTimeout = 5e3;
    this._chunkProcessor = () => {
    };
    this._chunkProcessorSize = void 0;
    this._chunkProcessorBuffer = {
      raw: new ArrayBuffer(0),
      mono: new ArrayBuffer(0)
    };
  }
  /**
  * Decodes audio data from multiple formats to a Blob, url, Float32Array and AudioBuffer
  * @param {Blob|Float32Array|Int16Array|ArrayBuffer|number[]} audioData
  * @param {number} sampleRate
  * @param {number} fromSampleRate
  * @returns {Promise<DecodedAudioType>}
  */
  static async decode(audioData, sampleRate = 44100, fromSampleRate = -1) {
    const context = new AudioContext({
      sampleRate
    });
    let arrayBuffer;
    let blob;
    if (audioData instanceof Blob) {
      if (fromSampleRate !== -1)
        throw new Error(`Can not specify "fromSampleRate" when reading from Blob`);
      blob = audioData;
      arrayBuffer = await blob.arrayBuffer();
    } else if (audioData instanceof ArrayBuffer) {
      if (fromSampleRate !== -1)
        throw new Error(`Can not specify "fromSampleRate" when reading from ArrayBuffer`);
      arrayBuffer = audioData;
      blob = new Blob([
        arrayBuffer
      ], {
        type: "audio/wav"
      });
    } else {
      let float32Array;
      let data;
      if (audioData instanceof Int16Array) {
        data = audioData;
        float32Array = new Float32Array(audioData.length);
        for (let i3 = 0; i3 < audioData.length; i3++)
          float32Array[i3] = audioData[i3] / 32768;
      } else if (audioData instanceof Float32Array)
        float32Array = audioData;
      else if (audioData instanceof Array)
        float32Array = new Float32Array(audioData);
      else
        throw new Error(`"audioData" must be one of: Blob, Float32Arrray, Int16Array, ArrayBuffer, Array<number>`);
      if (fromSampleRate === -1)
        throw new Error(`Must specify "fromSampleRate" when reading from Float32Array, In16Array or Array`);
      else if (fromSampleRate < 3e3)
        throw new Error(`Minimum "fromSampleRate" is 3000 (3kHz)`);
      if (!data)
        data = (0, $6d4b7449a1e1544a$export$13afda237b1c98463).floatTo16BitPCM(float32Array);
      const audio = {
        bitsPerSample: 16,
        channels: [
          float32Array
        ],
        data
      };
      const packer = new (0, $6d4b7449a1e1544a$export$13afda237b1c98463)();
      const result = packer.pack(fromSampleRate, audio);
      blob = result.blob;
      arrayBuffer = await blob.arrayBuffer();
    }
    const audioBuffer = await context.decodeAudioData(arrayBuffer);
    const values = audioBuffer.getChannelData(0);
    const url = URL.createObjectURL(blob);
    return {
      blob,
      url,
      values,
      audioBuffer
    };
  }
  /**
  * Logs data in debug mode
  * @param {...any} arguments
  * @returns {true}
  */
  log() {
    if (this.debug)
      this.log(...arguments);
    return true;
  }
  /**
  * Retrieves the current sampleRate for the recorder
  * @returns {number}
  */
  getSampleRate() {
    return this.sampleRate;
  }
  /**
  * Retrieves the current status of the recording
  * @returns {"ended"|"paused"|"recording"}
  */
  getStatus() {
    if (!this.processor)
      return "ended";
    else if (!this.recording)
      return "paused";
    else
      return "recording";
  }
  /**
  * Sends an event to the AudioWorklet
  * @private
  * @param {string} name
  * @param {{[key: string]: any}} data
  * @param {AudioWorkletNode} [_processor]
  * @returns {Promise<{[key: string]: any}>}
  */
  async _event(name, data = {}, _processor = null) {
    _processor = _processor || this.processor;
    if (!_processor)
      throw new Error("Can not send events without recording first");
    const message = {
      event: name,
      id: this._lastEventId++,
      data
    };
    _processor.port.postMessage(message);
    const t0 = (/* @__PURE__ */ new Date()).valueOf();
    while (!this.eventReceipts[message.id]) {
      if ((/* @__PURE__ */ new Date()).valueOf() - t0 > this.eventTimeout)
        throw new Error(`Timeout waiting for "${name}" event`);
      await new Promise((res) => setTimeout(() => res(true), 1));
    }
    const payload = this.eventReceipts[message.id];
    delete this.eventReceipts[message.id];
    return payload;
  }
  /**
  * Sets device change callback, remove if callback provided is `null`
  * @param {(Array<MediaDeviceInfo & {default: boolean}>): void|null} callback
  * @returns {true}
  */
  listenForDeviceChange(callback) {
    if (callback === null && this._deviceChangeCallback) {
      navigator.mediaDevices.removeEventListener("devicechange", this._deviceChangeCallback);
      this._deviceChangeCallback = null;
    } else if (callback !== null) {
      let lastId = 0;
      let lastDevices = [];
      const serializeDevices = (devices) => devices.map((d3) => d3.deviceId).sort().join(",");
      const cb = async () => {
        let id = ++lastId;
        const devices = await this.listDevices();
        if (id === lastId) {
          if (serializeDevices(lastDevices) !== serializeDevices(devices)) {
            lastDevices = devices;
            callback(devices.slice());
          }
        }
      };
      navigator.mediaDevices.addEventListener("devicechange", cb);
      cb();
      this._deviceChangeCallback = cb;
    }
    return true;
  }
  /**
  * Manually request permission to use the microphone
  * @returns {Promise<true>}
  */
  async requestPermission() {
    const permissionStatus = await navigator.permissions.query({
      name: "microphone"
    });
    if (permissionStatus.state === "denied")
      window.alert("You must grant microphone access to use this feature.");
    else if (permissionStatus.state === "prompt")
      try {
        const stream = await navigator.mediaDevices.getUserMedia({
          audio: true
        });
        const tracks = stream.getTracks();
        tracks.forEach((track2) => track2.stop());
      } catch (e3) {
        window.alert("You must grant microphone access to use this feature.");
      }
    return true;
  }
  /**
  * List all eligible devices for recording, will request permission to use microphone
  * @returns {Promise<Array<MediaDeviceInfo & {default: boolean}>>}
  */
  async listDevices() {
    if (!navigator.mediaDevices || !("enumerateDevices" in navigator.mediaDevices))
      throw new Error("Could not request user devices");
    await this.requestPermission();
    const devices = await navigator.mediaDevices.enumerateDevices();
    const audioDevices = devices.filter((device) => device.kind === "audioinput");
    return audioDevices;
  }
  /**
  * Begins a recording session and requests microphone permissions if not already granted
  * Microphone recording indicator will appear on browser tab but status will be "paused"
  * @param {string} [deviceId] if no device provided, default device will be used
  * @returns {Promise<true>}
  */
  async begin(deviceId) {
    if (this.processor)
      throw new Error(`Already connected: please call .end() to start a new session`);
    if (!navigator.mediaDevices || !("getUserMedia" in navigator.mediaDevices))
      throw new Error("Could not request user media");
    deviceId = deviceId ?? this.deviceSelection?.deviceId;
    try {
      const config = {
        audio: true
      };
      if (deviceId)
        config.audio = {
          deviceId: {
            exact: deviceId
          }
        };
      this.stream = await navigator.mediaDevices.getUserMedia(config);
    } catch (err) {
      throw new Error("Could not start media stream");
    }
    this.listDevices().then((devices) => {
      deviceId = this.stream.getAudioTracks()[0].getSettings().deviceId;
      console.log("find current device", devices, deviceId, this.stream.getAudioTracks()[0].getSettings());
      this.deviceSelection = devices.find((d3) => d3.deviceId === deviceId);
      console.log("current device", this.deviceSelection);
    });
    const context = new AudioContext({
      sampleRate: this.sampleRate
    });
    const source = context.createMediaStreamSource(this.stream);
    try {
      await context.audioWorklet.addModule(this.scriptSrc);
    } catch (e3) {
      console.error(e3);
      throw new Error(`Could not add audioWorklet module: ${this.scriptSrc}`);
    }
    const processor = new AudioWorkletNode(context, "audio_processor");
    processor.port.onmessage = (e3) => {
      const { event, id, data } = e3.data;
      if (event === "receipt")
        this.eventReceipts[id] = data;
      else if (event === "chunk") {
        if (this._chunkProcessorSize) {
          const buffer = this._chunkProcessorBuffer;
          this._chunkProcessorBuffer = {
            raw: (0, $6d4b7449a1e1544a$export$13afda237b1c98463).mergeBuffers(buffer.raw, data.raw),
            mono: (0, $6d4b7449a1e1544a$export$13afda237b1c98463).mergeBuffers(buffer.mono, data.mono)
          };
          if (this._chunkProcessorBuffer.mono.byteLength >= this._chunkProcessorSize) {
            this._chunkProcessor(this._chunkProcessorBuffer);
            this._chunkProcessorBuffer = {
              raw: new ArrayBuffer(0),
              mono: new ArrayBuffer(0)
            };
          }
        } else
          this._chunkProcessor(data);
      }
    };
    const node = source.connect(processor);
    const analyser = context.createAnalyser();
    analyser.fftSize = 8192;
    analyser.smoothingTimeConstant = 0.1;
    node.connect(analyser);
    if (this.outputToSpeakers) {
      console.warn("Warning: Output to speakers may affect sound quality,\nespecially due to system audio feedback preventative measures.\nuse only for debugging");
      analyser.connect(context.destination);
    }
    this.source = source;
    this.node = node;
    this.analyser = analyser;
    this.processor = processor;
    console.log("begin completed");
    return true;
  }
  /**
  * Gets the current frequency domain data from the recording track
  * @param {"frequency"|"music"|"voice"} [analysisType]
  * @param {number} [minDecibels] default -100
  * @param {number} [maxDecibels] default -30
  * @returns {import('./analysis/audio_analysis.js').AudioAnalysisOutputType}
  */
  getFrequencies(analysisType = "frequency", minDecibels = -100, maxDecibels = -30) {
    if (!this.processor)
      throw new Error("Session ended: please call .begin() first");
    return (0, $f32f064564ee62f6$export$2c3136da0bf130f93).getFrequencies(this.analyser, this.sampleRate, null, analysisType, minDecibels, maxDecibels);
  }
  /**
  * Pauses the recording
  * Keeps microphone stream open but halts storage of audio
  * @returns {Promise<true>}
  */
  async pause() {
    if (!this.processor)
      throw new Error("Session ended: please call .begin() first");
    else if (!this.recording)
      throw new Error("Already paused: please call .record() first");
    if (this._chunkProcessorBuffer.raw.byteLength)
      this._chunkProcessor(this._chunkProcessorBuffer);
    this.log("Pausing ...");
    await this._event("stop");
    this.recording = false;
    return true;
  }
  /**
  * Start recording stream and storing to memory from the connected audio source
  * @param {(data: { mono: Int16Array; raw: Int16Array }) => any} [chunkProcessor]
  * @param {number} [chunkSize] chunkProcessor will not be triggered until this size threshold met in mono audio
  * @returns {Promise<true>}
  */
  async record(chunkProcessor = () => {
  }, chunkSize = 8192) {
    if (!this.processor)
      throw new Error("Session ended: please call .begin() first");
    else if (this.recording)
      throw new Error("Already recording: please call .pause() first");
    else if (typeof chunkProcessor !== "function")
      throw new Error(`chunkProcessor must be a function`);
    this._chunkProcessor = chunkProcessor;
    this._chunkProcessorSize = chunkSize;
    this._chunkProcessorBuffer = {
      raw: new ArrayBuffer(0),
      mono: new ArrayBuffer(0)
    };
    this.log("Recording ...");
    await this._event("start");
    this.recording = true;
    return true;
  }
  /**
  * Clears the audio buffer, empties stored recording
  * @returns {Promise<true>}
  */
  async clear() {
    if (!this.processor)
      throw new Error("Session ended: please call .begin() first");
    await this._event("clear");
    return true;
  }
  /**
  * Reads the current audio stream data
  * @returns {Promise<{meanValues: Float32Array, channels: Array<Float32Array>}>}
  */
  async read() {
    if (!this.processor)
      throw new Error("Session ended: please call .begin() first");
    this.log("Reading ...");
    const result = await this._event("read");
    return result;
  }
  /**
  * Saves the current audio stream to a file
  * @param {boolean} [force] Force saving while still recording
  * @returns {Promise<import('./wav_packer.js').WavPackerAudioType>}
  */
  async save(force = false) {
    if (!this.processor)
      throw new Error("Session ended: please call .begin() first");
    if (!force && this.recording)
      throw new Error("Currently recording: please call .pause() first, or call .save(true) to force");
    this.log("Exporting ...");
    const exportData = await this._event("export");
    const packer = new (0, $6d4b7449a1e1544a$export$13afda237b1c98463)();
    const result = packer.pack(this.sampleRate, exportData.audio);
    return result;
  }
  /**
  * Ends the current recording session and saves the result
  * @returns {Promise<import('./wav_packer.js').WavPackerAudioType>}
  */
  async end() {
    if (!this.processor)
      throw new Error("Session ended: please call .begin() first");
    const _processor = this.processor;
    this.log("Stopping ...");
    await this._event("stop");
    this.recording = false;
    const tracks = this.stream.getTracks();
    tracks.forEach((track2) => track2.stop());
    this.log("Exporting ...");
    const exportData = await this._event("export", {}, _processor);
    this.processor.disconnect();
    this.source.disconnect();
    this.node.disconnect();
    this.analyser.disconnect();
    this.stream = null;
    this.processor = null;
    this.source = null;
    this.node = null;
    const packer = new (0, $6d4b7449a1e1544a$export$13afda237b1c98463)();
    const result = packer.pack(this.sampleRate, exportData.audio);
    return result;
  }
  /**
  * Performs a full cleanup of WavRecorder instance
  * Stops actively listening via microphone and removes existing listeners
  * @returns {Promise<true>}
  */
  async quit() {
    this.listenForDeviceChange(null);
    this.deviceSelection = null;
    if (this.processor)
      await this.end();
    return true;
  }
};
globalThis.WavRecorder = $62bc376044a05513$export$439b217ca659a8773;
var $5fc11d7bc0d20724$export$2934cf2d25c67a483 = class {
  /**
  * Create a new MediaStreamRecorder instance
  * @param {{sampleRate?: number, outputToSpeakers?: boolean, debug?: boolean}} [options]
  * @returns {MediaStreamRecorder}
  */
  constructor({ sampleRate = 44100, outputToSpeakers = false, debug = false } = {}) {
    this.scriptSrc = (0, $8e1d1e6ff08f6fb5$export$1f65f50a8cbff43c3);
    this.sampleRate = sampleRate;
    this.outputToSpeakers = outputToSpeakers;
    this.debug = !!debug;
    this.stream = null;
    this.processor = null;
    this.source = null;
    this.node = null;
    this.recording = false;
    this._lastEventId = 0;
    this.eventReceipts = {};
    this.eventTimeout = 5e3;
    this._chunkProcessor = () => {
    };
    this._chunkProcessorSize = void 0;
    this._chunkProcessorBuffer = {
      raw: new ArrayBuffer(0),
      mono: new ArrayBuffer(0)
    };
  }
  /**
  * Logs data in debug mode
  * @param {...any} arguments
  * @returns {true}
  */
  log() {
    if (this.debug)
      this.log(...arguments);
    return true;
  }
  /**
  * Retrieves the current sampleRate for the recorder
  * @returns {number}
  */
  getSampleRate() {
    return this.sampleRate;
  }
  /**
  * Retrieves the current status of the recording
  * @returns {"ended"|"paused"|"recording"}
  */
  getStatus() {
    if (!this.processor)
      return "ended";
    else if (!this.recording)
      return "paused";
    else
      return "recording";
  }
  /**
  * Sends an event to the AudioWorklet
  * @private
  * @param {string} name
  * @param {{[key: string]: any}} data
  * @param {AudioWorkletNode} [_processor]
  * @returns {Promise<{[key: string]: any}>}
  */
  async _event(name, data = {}, _processor = null) {
    _processor = _processor || this.processor;
    if (!_processor)
      throw new Error("Can not send events without recording first");
    const message = {
      event: name,
      id: this._lastEventId++,
      data
    };
    _processor.port.postMessage(message);
    const t0 = (/* @__PURE__ */ new Date()).valueOf();
    while (!this.eventReceipts[message.id]) {
      if ((/* @__PURE__ */ new Date()).valueOf() - t0 > this.eventTimeout)
        throw new Error(`Timeout waiting for "${name}" event`);
      await new Promise((res) => setTimeout(() => res(true), 1));
    }
    const payload = this.eventReceipts[message.id];
    delete this.eventReceipts[message.id];
    return payload;
  }
  /**
  * Begins a recording session for the given audioTrack
  * Microphone recording indicator will appear on browser tab but status will be "paused"
  * @param {MediaStreamTrack} [audioTrack] if no device provided, default device will be used
  * @returns {Promise<true>}
  */
  async begin(audioTrack) {
    if (this.processor)
      throw new Error(`Already connected: please call .end() to start a new session`);
    if (!audioTrack || audioTrack.kind !== "audio")
      throw new Error("No audio track provided");
    this.stream = new MediaStream([
      audioTrack
    ]);
    const context = new AudioContext({
      sampleRate: this.sampleRate
    });
    const source = context.createMediaStreamSource(this.stream);
    try {
      await context.audioWorklet.addModule(this.scriptSrc);
    } catch (e3) {
      console.error(e3);
      throw new Error(`Could not add audioWorklet module: ${this.scriptSrc}`);
    }
    const processor = new AudioWorkletNode(context, "audio_processor");
    processor.port.onmessage = (e3) => {
      const { event, id, data } = e3.data;
      if (event === "receipt")
        this.eventReceipts[id] = data;
      else if (event === "chunk") {
        if (this._chunkProcessorSize) {
          const buffer = this._chunkProcessorBuffer;
          this._chunkProcessorBuffer = {
            raw: (0, $6d4b7449a1e1544a$export$13afda237b1c98463).mergeBuffers(buffer.raw, data.raw),
            mono: (0, $6d4b7449a1e1544a$export$13afda237b1c98463).mergeBuffers(buffer.mono, data.mono)
          };
          if (this._chunkProcessorBuffer.mono.byteLength >= this._chunkProcessorSize) {
            this._chunkProcessor(this._chunkProcessorBuffer);
            this._chunkProcessorBuffer = {
              raw: new ArrayBuffer(0),
              mono: new ArrayBuffer(0)
            };
          }
        } else
          this._chunkProcessor(data);
      }
    };
    const node = source.connect(processor);
    const analyser = context.createAnalyser();
    analyser.fftSize = 8192;
    analyser.smoothingTimeConstant = 0.1;
    node.connect(analyser);
    if (this.outputToSpeakers) {
      console.warn("Warning: Output to speakers may affect sound quality,\nespecially due to system audio feedback preventative measures.\nuse only for debugging");
      analyser.connect(context.destination);
    }
    this.source = source;
    this.node = node;
    this.analyser = analyser;
    this.processor = processor;
    return true;
  }
  /**
  * Gets the current frequency domain data from the recording track
  * @param {"frequency"|"music"|"voice"} [analysisType]
  * @param {number} [minDecibels] default -100
  * @param {number} [maxDecibels] default -30
  * @returns {import('./analysis/audio_analysis.js').AudioAnalysisOutputType}
  */
  getFrequencies(analysisType = "frequency", minDecibels = -100, maxDecibels = -30) {
    if (!this.processor)
      throw new Error("Session ended: please call .begin() first");
    return (0, $f32f064564ee62f6$export$2c3136da0bf130f93).getFrequencies(this.analyser, this.sampleRate, null, analysisType, minDecibels, maxDecibels);
  }
  /**
  * Pauses the recording
  * Keeps microphone stream open but halts storage of audio
  * @returns {Promise<true>}
  */
  async pause() {
    if (!this.processor)
      throw new Error("Session ended: please call .begin() first");
    else if (!this.recording)
      throw new Error("Already paused: please call .record() first");
    if (this._chunkProcessorBuffer.raw.byteLength)
      this._chunkProcessor(this._chunkProcessorBuffer);
    this.log("Pausing ...");
    await this._event("stop");
    this.recording = false;
    return true;
  }
  /**
  * Start recording stream and storing to memory from the connected audio source
  * @param {(data: { mono: Int16Array; raw: Int16Array }) => any} [chunkProcessor]
  * @param {number} [chunkSize] chunkProcessor will not be triggered until this size threshold met in mono audio
  * @returns {Promise<true>}
  */
  async record(chunkProcessor = () => {
  }, chunkSize = 8192) {
    if (!this.processor)
      throw new Error("Session ended: please call .begin() first");
    else if (this.recording)
      throw new Error("Already recording: HELLO please call .pause() first");
    else if (typeof chunkProcessor !== "function")
      throw new Error(`chunkProcessor must be a function`);
    this._chunkProcessor = chunkProcessor;
    this._chunkProcessorSize = chunkSize;
    this._chunkProcessorBuffer = {
      raw: new ArrayBuffer(0),
      mono: new ArrayBuffer(0)
    };
    this.log("Recording ...");
    await this._event("start");
    this.recording = true;
    return true;
  }
  /**
  * Clears the audio buffer, empties stored recording
  * @returns {Promise<true>}
  */
  async clear() {
    if (!this.processor)
      throw new Error("Session ended: please call .begin() first");
    await this._event("clear");
    return true;
  }
  /**
  * Reads the current audio stream data
  * @returns {Promise<{meanValues: Float32Array, channels: Array<Float32Array>}>}
  */
  async read() {
    if (!this.processor)
      throw new Error("Session ended: please call .begin() first");
    this.log("Reading ...");
    const result = await this._event("read");
    return result;
  }
  /**
  * Saves the current audio stream to a file
  * @param {boolean} [force] Force saving while still recording
  * @returns {Promise<import('./wav_packer.js').WavPackerAudioType>}
  */
  async save(force = false) {
    if (!this.processor)
      throw new Error("Session ended: please call .begin() first");
    if (!force && this.recording)
      throw new Error("Currently recording: please call .pause() first, or call .save(true) to force");
    this.log("Exporting ...");
    const exportData = await this._event("export");
    const packer = new (0, $6d4b7449a1e1544a$export$13afda237b1c98463)();
    const result = packer.pack(this.sampleRate, exportData.audio);
    return result;
  }
  /**
  * Ends the current recording session and saves the result
  * @returns {Promise<import('./wav_packer.js').WavPackerAudioType>}
  */
  async end() {
    if (!this.processor)
      throw new Error("Session ended: please call .begin() first");
    const _processor = this.processor;
    this.log("Stopping ...");
    await this._event("stop");
    this.recording = false;
    this.log("Exporting ...");
    const exportData = await this._event("export", {}, _processor);
    this.processor.disconnect();
    this.source.disconnect();
    this.node.disconnect();
    this.analyser.disconnect();
    this.stream = null;
    this.processor = null;
    this.source = null;
    this.node = null;
    const packer = new (0, $6d4b7449a1e1544a$export$13afda237b1c98463)();
    const result = packer.pack(this.sampleRate, exportData.audio);
    return result;
  }
  /**
  * Performs a full cleanup of WavRecorder instance
  * Stops actively listening via microphone and removes existing listeners
  * @returns {Promise<true>}
  */
  async quit() {
    this.listenForDeviceChange(null);
    if (this.processor)
      await this.end();
    return true;
  }
};
globalThis.WavRecorder = WavRecorder;
var $fc49a56cd8739127$var$__extends2 = function() {
  var extendStatics = function(d3, b3) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d4, b4) {
      d4.__proto__ = b4;
    } || function(d4, b4) {
      for (var p3 in b4)
        if (Object.prototype.hasOwnProperty.call(b4, p3))
          d4[p3] = b4[p3];
    };
    return extendStatics(d3, b3);
  };
  return function(d3, b3) {
    if (typeof b3 !== "function" && b3 !== null)
      throw new TypeError("Class extends value " + String(b3) + " is not a constructor or null");
    extendStatics(d3, b3);
    function __() {
      this.constructor = d3;
    }
    d3.prototype = b3 === null ? Object.create(b3) : (__.prototype = b3.prototype, new __());
  };
}();
var $fc49a56cd8739127$var$__awaiter2 = function(thisArg, _arguments, P3, generator) {
  function adopt(value) {
    return value instanceof P3 ? value : new P3(function(resolve) {
      resolve(value);
    });
  }
  return new (P3 || (P3 = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e3) {
        reject(e3);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e3) {
        reject(e3);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var $fc49a56cd8739127$var$__generator2 = function(thisArg, body) {
  var _3 = {
    label: 0,
    sent: function() {
      if (t3[0] & 1)
        throw t3[1];
      return t3[1];
    },
    trys: [],
    ops: []
  }, f3, y3, t3, g3 = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
  return g3.next = verb(0), g3["throw"] = verb(1), g3["return"] = verb(2), typeof Symbol === "function" && (g3[Symbol.iterator] = function() {
    return this;
  }), g3;
  function verb(n3) {
    return function(v3) {
      return step([
        n3,
        v3
      ]);
    };
  }
  function step(op) {
    if (f3)
      throw new TypeError("Generator is already executing.");
    while (g3 && (g3 = 0, op[0] && (_3 = 0)), _3)
      try {
        if (f3 = 1, y3 && (t3 = op[0] & 2 ? y3["return"] : op[0] ? y3["throw"] || ((t3 = y3["return"]) && t3.call(y3), 0) : y3.next) && !(t3 = t3.call(y3, op[1])).done)
          return t3;
        if (y3 = 0, t3)
          op = [
            op[0] & 2,
            t3.value
          ];
        switch (op[0]) {
          case 0:
          case 1:
            t3 = op;
            break;
          case 4:
            _3.label++;
            return {
              value: op[1],
              done: false
            };
          case 5:
            _3.label++;
            y3 = op[1];
            op = [
              0
            ];
            continue;
          case 7:
            op = _3.ops.pop();
            _3.trys.pop();
            continue;
          default:
            if (!(t3 = _3.trys, t3 = t3.length > 0 && t3[t3.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _3 = 0;
              continue;
            }
            if (op[0] === 3 && (!t3 || op[1] > t3[0] && op[1] < t3[3])) {
              _3.label = op[1];
              break;
            }
            if (op[0] === 6 && _3.label < t3[1]) {
              _3.label = t3[1];
              t3 = op;
              break;
            }
            if (t3 && _3.label < t3[2]) {
              _3.label = t3[2];
              _3.ops.push(op);
              break;
            }
            if (t3[2])
              _3.ops.pop();
            _3.trys.pop();
            continue;
        }
        op = body.call(thisArg, _3);
      } catch (e3) {
        op = [
          6,
          e3
        ];
        y3 = 0;
      } finally {
        f3 = t3 = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return {
      value: op[0] ? op[1] : void 0,
      done: true
    };
  }
};
var $fc49a56cd8739127$export$4a0c46dbbe2ddb672 = (
  /** @class */
  function() {
    function MediaManager() {
      this._callbacks = {};
      this._micEnabled = true;
      this._camEnabled = false;
    }
    MediaManager.prototype.setUserAudioCallback = function(userAudioCallback) {
      this._userAudioCallback = userAudioCallback;
    };
    MediaManager.prototype.setRTVIOptions = function(options, override) {
      var _a3, _b, _c3;
      if (override === void 0)
        override = false;
      if (this._options && !override)
        return;
      this._options = options;
      this._callbacks = (_a3 = options.callbacks) !== null && _a3 !== void 0 ? _a3 : {};
      this._micEnabled = (_b = options.enableMic) !== null && _b !== void 0 ? _b : true;
      this._camEnabled = (_c3 = options.enableCam) !== null && _c3 !== void 0 ? _c3 : false;
    };
    return MediaManager;
  }()
);
var $fc49a56cd8739127$export$45c5b9bfba2f63042 = (
  /** @class */
  function(_super) {
    $fc49a56cd8739127$var$__extends2(WavMediaManager, _super);
    function WavMediaManager(recorderChunkSize, recorderSampleRate) {
      if (recorderChunkSize === void 0)
        recorderChunkSize = void 0;
      if (recorderSampleRate === void 0)
        recorderSampleRate = 24e3;
      var _this = _super.call(this) || this;
      _this._initialized = false;
      _this._recorderChunkSize = void 0;
      _this._recorderChunkSize = recorderChunkSize;
      _this._wavRecorder = new (0, $62bc376044a05513$export$439b217ca659a8773)({
        sampleRate: recorderSampleRate
      });
      _this._wavStreamPlayer = new (0, $d0a969833958d9e7$export$9698d62c78b8f3663)({
        sampleRate: 24e3
      });
      return _this;
    }
    WavMediaManager.prototype.initialize = function() {
      return $fc49a56cd8739127$var$__awaiter2(this, void 0, Promise, function() {
        return $fc49a56cd8739127$var$__generator2(this, function(_a3) {
          switch (_a3.label) {
            case 0:
              return [
                4,
                this._wavRecorder.begin()
              ];
            case 1:
              _a3.sent();
              this._wavRecorder.listenForDeviceChange(null);
              this._wavRecorder.listenForDeviceChange(this._handleAvailableDevicesUpdated.bind(this));
              return [
                4,
                this._wavStreamPlayer.connect()
              ];
            case 2:
              _a3.sent();
              this._initialized = true;
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    WavMediaManager.prototype.connect = function() {
      return $fc49a56cd8739127$var$__awaiter2(this, void 0, Promise, function() {
        var isAlreadyRecording;
        return $fc49a56cd8739127$var$__generator2(this, function(_a3) {
          switch (_a3.label) {
            case 0:
              if (!!this._initialized)
                return [
                  3,
                  2
                ];
              return [
                4,
                this.initialize()
              ];
            case 1:
              _a3.sent();
              _a3.label = 2;
            case 2:
              isAlreadyRecording = this._wavRecorder.getStatus() == "recording";
              if (!(this._micEnabled && !isAlreadyRecording))
                return [
                  3,
                  4
                ];
              return [
                4,
                this._startRecording()
              ];
            case 3:
              _a3.sent();
              _a3.label = 4;
            case 4:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    WavMediaManager.prototype.disconnect = function() {
      return $fc49a56cd8739127$var$__awaiter2(this, void 0, Promise, function() {
        return $fc49a56cd8739127$var$__generator2(this, function(_a3) {
          switch (_a3.label) {
            case 0:
              if (!this._initialized)
                return [
                  2
                  /*return*/
                ];
              return [
                4,
                this._wavRecorder.end()
              ];
            case 1:
              _a3.sent();
              return [
                4,
                this._wavStreamPlayer.interrupt()
              ];
            case 2:
              _a3.sent();
              this._initialized = false;
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    WavMediaManager.prototype.userStartedSpeaking = function() {
      return $fc49a56cd8739127$var$__awaiter2(this, void 0, Promise, function() {
        return $fc49a56cd8739127$var$__generator2(this, function(_a3) {
          return [
            2,
            this._wavStreamPlayer.interrupt()
          ];
        });
      });
    };
    WavMediaManager.prototype.bufferBotAudio = function(data, id) {
      return this._wavStreamPlayer.add16BitPCM(data, id);
    };
    WavMediaManager.prototype.getAllMics = function() {
      return this._wavRecorder.listDevices();
    };
    WavMediaManager.prototype.getAllCams = function() {
      return Promise.resolve([]);
    };
    WavMediaManager.prototype.getAllSpeakers = function() {
      return Promise.resolve([]);
    };
    WavMediaManager.prototype.updateMic = function(micId) {
      return $fc49a56cd8739127$var$__awaiter2(this, void 0, Promise, function() {
        var prevMic, curMic;
        var _a3, _b;
        return $fc49a56cd8739127$var$__generator2(this, function(_c3) {
          switch (_c3.label) {
            case 0:
              prevMic = this._wavRecorder.deviceSelection;
              return [
                4,
                this._wavRecorder.end()
              ];
            case 1:
              _c3.sent();
              return [
                4,
                this._wavRecorder.begin(micId)
              ];
            case 2:
              _c3.sent();
              if (!this._micEnabled)
                return [
                  3,
                  4
                ];
              return [
                4,
                this._startRecording()
              ];
            case 3:
              _c3.sent();
              _c3.label = 4;
            case 4:
              curMic = this._wavRecorder.deviceSelection;
              if (curMic && prevMic && prevMic.label !== curMic.label)
                (_b = (_a3 = this._callbacks).onMicUpdated) === null || _b === void 0 || _b.call(_a3, curMic);
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    WavMediaManager.prototype.updateCam = function(camId) {
    };
    WavMediaManager.prototype.updateSpeaker = function(speakerId) {
    };
    Object.defineProperty(WavMediaManager.prototype, "selectedMic", {
      get: function() {
        var _a3;
        return (_a3 = this._wavRecorder.deviceSelection) !== null && _a3 !== void 0 ? _a3 : {};
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(WavMediaManager.prototype, "selectedCam", {
      get: function() {
        return {};
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(WavMediaManager.prototype, "selectedSpeaker", {
      get: function() {
        return {};
      },
      enumerable: false,
      configurable: true
    });
    WavMediaManager.prototype.enableMic = function(enable) {
      return $fc49a56cd8739127$var$__awaiter2(this, void 0, Promise, function() {
        var _this = this;
        return $fc49a56cd8739127$var$__generator2(this, function(_a3) {
          switch (_a3.label) {
            case 0:
              this._micEnabled = enable;
              if (!this._wavRecorder.stream)
                return [
                  2
                  /*return*/
                ];
              this._wavRecorder.stream.getAudioTracks().forEach(function(track2) {
                var _a4, _b;
                track2.enabled = enable;
                if (!enable)
                  (_b = (_a4 = _this._callbacks).onTrackStopped) === null || _b === void 0 || _b.call(_a4, track2, $fc49a56cd8739127$var$localParticipant2());
              });
              if (!enable)
                return [
                  3,
                  2
                ];
              return [
                4,
                this._startRecording()
              ];
            case 1:
              _a3.sent();
              return [
                3,
                4
              ];
            case 2:
              return [
                4,
                this._wavRecorder.pause()
              ];
            case 3:
              _a3.sent();
              _a3.label = 4;
            case 4:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    WavMediaManager.prototype.enableCam = function(enable) {
    };
    Object.defineProperty(WavMediaManager.prototype, "isCamEnabled", {
      get: function() {
        return false;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(WavMediaManager.prototype, "isMicEnabled", {
      get: function() {
        return this._micEnabled;
      },
      enumerable: false,
      configurable: true
    });
    WavMediaManager.prototype.tracks = function() {
      var _a3;
      var tracks = (_a3 = this._wavRecorder.stream) === null || _a3 === void 0 ? void 0 : _a3.getTracks()[0];
      return {
        local: tracks ? {
          audio: tracks
        } : {}
      };
    };
    WavMediaManager.prototype._startRecording = function() {
      return $fc49a56cd8739127$var$__awaiter2(this, void 0, void 0, function() {
        var track2;
        var _this = this;
        var _a3, _b, _c3;
        return $fc49a56cd8739127$var$__generator2(this, function(_d) {
          switch (_d.label) {
            case 0:
              return [
                4,
                this._wavRecorder.record(function(data) {
                  _this._userAudioCallback(data.mono);
                }, this._recorderChunkSize)
              ];
            case 1:
              _d.sent();
              track2 = (_a3 = this._wavRecorder.stream) === null || _a3 === void 0 ? void 0 : _a3.getAudioTracks()[0];
              if (track2)
                (_c3 = (_b = this._callbacks).onTrackStarted) === null || _c3 === void 0 || _c3.call(_b, track2, $fc49a56cd8739127$var$localParticipant2());
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    WavMediaManager.prototype._handleAvailableDevicesUpdated = function(devices) {
      var _a3, _b, _c3, _d;
      (_b = (_a3 = this._callbacks).onAvailableCamsUpdated) === null || _b === void 0 || _b.call(_a3, devices.filter(function(d3) {
        return d3.kind === "videoinput";
      }));
      (_d = (_c3 = this._callbacks).onAvailableMicsUpdated) === null || _d === void 0 || _d.call(_c3, devices.filter(function(d3) {
        return d3.kind === "audioinput";
      }));
      var defaultDevice = devices.find(function(d3) {
        return d3.deviceId === "default";
      });
      var currentDevice = this._wavRecorder.deviceSelection;
      if (currentDevice && (!devices.some(function(d3) {
        return d3.deviceId === currentDevice.deviceId;
      }) || currentDevice.deviceId === "default" && currentDevice.label !== (defaultDevice === null || defaultDevice === void 0 ? void 0 : defaultDevice.label)))
        this.updateMic("");
    };
    return WavMediaManager;
  }($fc49a56cd8739127$export$4a0c46dbbe2ddb672)
);
var $fc49a56cd8739127$var$localParticipant2 = function() {
  return {
    id: "local",
    name: "",
    local: true
  };
};
var $22ece045290c996a$var$__extends2 = function() {
  var extendStatics = function(d3, b3) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d4, b4) {
      d4.__proto__ = b4;
    } || function(d4, b4) {
      for (var p3 in b4)
        if (Object.prototype.hasOwnProperty.call(b4, p3))
          d4[p3] = b4[p3];
    };
    return extendStatics(d3, b3);
  };
  return function(d3, b3) {
    if (typeof b3 !== "function" && b3 !== null)
      throw new TypeError("Class extends value " + String(b3) + " is not a constructor or null");
    extendStatics(d3, b3);
    function __() {
      this.constructor = d3;
    }
    d3.prototype = b3 === null ? Object.create(b3) : (__.prototype = b3.prototype, new __());
  };
}();
var $22ece045290c996a$var$__awaiter2 = function(thisArg, _arguments, P3, generator) {
  function adopt(value) {
    return value instanceof P3 ? value : new P3(function(resolve) {
      resolve(value);
    });
  }
  return new (P3 || (P3 = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e3) {
        reject(e3);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e3) {
        reject(e3);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var $22ece045290c996a$var$__generator2 = function(thisArg, body) {
  var _3 = {
    label: 0,
    sent: function() {
      if (t3[0] & 1)
        throw t3[1];
      return t3[1];
    },
    trys: [],
    ops: []
  }, f3, y3, t3, g3 = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
  return g3.next = verb(0), g3["throw"] = verb(1), g3["return"] = verb(2), typeof Symbol === "function" && (g3[Symbol.iterator] = function() {
    return this;
  }), g3;
  function verb(n3) {
    return function(v3) {
      return step([
        n3,
        v3
      ]);
    };
  }
  function step(op) {
    if (f3)
      throw new TypeError("Generator is already executing.");
    while (g3 && (g3 = 0, op[0] && (_3 = 0)), _3)
      try {
        if (f3 = 1, y3 && (t3 = op[0] & 2 ? y3["return"] : op[0] ? y3["throw"] || ((t3 = y3["return"]) && t3.call(y3), 0) : y3.next) && !(t3 = t3.call(y3, op[1])).done)
          return t3;
        if (y3 = 0, t3)
          op = [
            op[0] & 2,
            t3.value
          ];
        switch (op[0]) {
          case 0:
          case 1:
            t3 = op;
            break;
          case 4:
            _3.label++;
            return {
              value: op[1],
              done: false
            };
          case 5:
            _3.label++;
            y3 = op[1];
            op = [
              0
            ];
            continue;
          case 7:
            op = _3.ops.pop();
            _3.trys.pop();
            continue;
          default:
            if (!(t3 = _3.trys, t3 = t3.length > 0 && t3[t3.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _3 = 0;
              continue;
            }
            if (op[0] === 3 && (!t3 || op[1] > t3[0] && op[1] < t3[3])) {
              _3.label = op[1];
              break;
            }
            if (op[0] === 6 && _3.label < t3[1]) {
              _3.label = t3[1];
              t3 = op;
              break;
            }
            if (t3 && _3.label < t3[2]) {
              _3.label = t3[2];
              _3.ops.push(op);
              break;
            }
            if (t3[2])
              _3.ops.pop();
            _3.trys.pop();
            continue;
        }
        op = body.call(thisArg, _3);
      } catch (e3) {
        op = [
          6,
          e3
        ];
        y3 = 0;
      } finally {
        f3 = t3 = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return {
      value: op[0] ? op[1] : void 0,
      done: true
    };
  }
};
var $22ece045290c996a$export$c95c65abc5f471252 = (
  /** @class */
  function(_super) {
    $22ece045290c996a$var$__extends2(DailyMediaManager, _super);
    function DailyMediaManager(enablePlayer, enableRecording, onTrackStartedCallback, onTrackStoppedCallback, recorderChunkSize, recorderSampleRate) {
      if (enablePlayer === void 0)
        enablePlayer = true;
      if (enableRecording === void 0)
        enableRecording = true;
      if (recorderChunkSize === void 0)
        recorderChunkSize = void 0;
      if (recorderSampleRate === void 0)
        recorderSampleRate = 24e3;
      var _a3;
      var _this = _super.call(this) || this;
      _this._selectedCam = {};
      _this._selectedMic = {};
      _this._selectedSpeaker = {};
      _this._remoteAudioLevelInterval = null;
      _this._recorderChunkSize = void 0;
      _this._initialized = false;
      _this._connected = false;
      _this._currentAudioTrack = null;
      _this._connectResolve = null;
      _this.onTrackStartedCallback = onTrackStartedCallback;
      _this.onTrackStoppedCallback = onTrackStoppedCallback;
      _this._recorderChunkSize = recorderChunkSize;
      _this._daily = (_a3 = (0, ac2).getCallInstance()) !== null && _a3 !== void 0 ? _a3 : (0, ac2).createCallObject();
      if (enableRecording)
        _this._mediaStreamRecorder = new (0, $5fc11d7bc0d20724$export$2934cf2d25c67a483)({
          sampleRate: recorderSampleRate
        });
      if (enablePlayer)
        _this._wavStreamPlayer = new (0, $d0a969833958d9e7$export$9698d62c78b8f3663)({
          sampleRate: 24e3
        });
      _this._daily.on("track-started", _this.handleTrackStarted.bind(_this));
      _this._daily.on("track-stopped", _this.handleTrackStopped.bind(_this));
      _this._daily.on("available-devices-updated", _this._handleAvailableDevicesUpdated.bind(_this));
      _this._daily.on("selected-devices-updated", _this._handleSelectedDevicesUpdated.bind(_this));
      _this._daily.on("local-audio-level", _this._handleLocalAudioLevel.bind(_this));
      return _this;
    }
    DailyMediaManager.prototype.initialize = function() {
      return $22ece045290c996a$var$__awaiter2(this, void 0, Promise, function() {
        var infos, devices, cams, mics, speakers;
        var _this = this;
        var _a3, _b, _c3, _d, _e3, _f, _g, _h, _j, _k, _l, _m;
        return $22ece045290c996a$var$__generator2(this, function(_o3) {
          switch (_o3.label) {
            case 0:
              if (this._initialized) {
                console.warn("DailyMediaManager already initialized");
                return [
                  2
                  /*return*/
                ];
              }
              return [
                4,
                this._daily.startCamera({
                  startVideoOff: !this._camEnabled,
                  startAudioOff: !this._micEnabled
                })
              ];
            case 1:
              infos = _o3.sent();
              return [
                4,
                this._daily.enumerateDevices()
              ];
            case 2:
              devices = _o3.sent().devices;
              cams = devices.filter(function(d3) {
                return d3.kind === "videoinput";
              });
              mics = devices.filter(function(d3) {
                return d3.kind === "audioinput";
              });
              speakers = devices.filter(function(d3) {
                return d3.kind === "audiooutput";
              });
              (_b = (_a3 = this._callbacks).onAvailableCamsUpdated) === null || _b === void 0 || _b.call(_a3, cams);
              (_d = (_c3 = this._callbacks).onAvailableMicsUpdated) === null || _d === void 0 || _d.call(_c3, mics);
              (_f = (_e3 = this._callbacks).onAvailableSpeakersUpdated) === null || _f === void 0 || _f.call(_e3, speakers);
              this._selectedCam = infos.camera;
              (_h = (_g = this._callbacks).onCamUpdated) === null || _h === void 0 || _h.call(_g, infos.camera);
              this._selectedMic = infos.mic;
              (_k = (_j = this._callbacks).onMicUpdated) === null || _k === void 0 || _k.call(_j, infos.mic);
              this._selectedSpeaker = infos.speaker;
              (_m = (_l = this._callbacks).onSpeakerUpdated) === null || _m === void 0 || _m.call(_l, infos.speaker);
              if (!!this._daily.isLocalAudioLevelObserverRunning())
                return [
                  3,
                  4
                ];
              return [
                4,
                this._daily.startLocalAudioLevelObserver(100)
              ];
            case 3:
              _o3.sent();
              _o3.label = 4;
            case 4:
              if (!this._wavStreamPlayer)
                return [
                  3,
                  6
                ];
              return [
                4,
                this._wavStreamPlayer.connect()
              ];
            case 5:
              _o3.sent();
              if (!this._remoteAudioLevelInterval)
                this._remoteAudioLevelInterval = setInterval(function() {
                  var _a4;
                  var frequencies = _this._wavStreamPlayer.getFrequencies();
                  var aveVal = 0;
                  if ((_a4 = frequencies.values) === null || _a4 === void 0 ? void 0 : _a4.length)
                    aveVal = frequencies.values.reduce(function(a3, c3) {
                      return a3 + c3;
                    }, 0) / frequencies.values.length;
                  _this._handleRemoteAudioLevel(aveVal);
                }, 100);
              _o3.label = 6;
            case 6:
              this._initialized = true;
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    DailyMediaManager.prototype.connect = function() {
      return $22ece045290c996a$var$__awaiter2(this, void 0, Promise, function() {
        var _this = this;
        return $22ece045290c996a$var$__generator2(this, function(_a3) {
          if (this._connected) {
            console.warn("DailyMediaManager already connected");
            return [
              2
              /*return*/
            ];
          }
          this._connected = true;
          if (!this._initialized)
            return [
              2,
              new Promise(function(resolve) {
                (function() {
                  return $22ece045290c996a$var$__awaiter2(_this, void 0, void 0, function() {
                    return $22ece045290c996a$var$__generator2(this, function(_a4) {
                      switch (_a4.label) {
                        case 0:
                          this._connectResolve = resolve;
                          return [
                            4,
                            this.initialize()
                          ];
                        case 1:
                          _a4.sent();
                          return [
                            2
                            /*return*/
                          ];
                      }
                    });
                  });
                })();
              })
            ];
          if (this._micEnabled)
            this._startRecording();
          return [
            2
            /*return*/
          ];
        });
      });
    };
    DailyMediaManager.prototype.disconnect = function() {
      return $22ece045290c996a$var$__awaiter2(this, void 0, Promise, function() {
        var _a3, _b;
        return $22ece045290c996a$var$__generator2(this, function(_c3) {
          switch (_c3.label) {
            case 0:
              if (this._remoteAudioLevelInterval)
                clearInterval(this._remoteAudioLevelInterval);
              this._remoteAudioLevelInterval = null;
              this._daily.leave();
              this._currentAudioTrack = null;
              return [
                4,
                (_a3 = this._mediaStreamRecorder) === null || _a3 === void 0 ? void 0 : _a3.end()
              ];
            case 1:
              _c3.sent();
              (_b = this._wavStreamPlayer) === null || _b === void 0 || _b.interrupt();
              this._initialized = false;
              this._connected = false;
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    DailyMediaManager.prototype.userStartedSpeaking = function() {
      return $22ece045290c996a$var$__awaiter2(this, void 0, Promise, function() {
        var _a3;
        return $22ece045290c996a$var$__generator2(this, function(_b) {
          return [
            2,
            (_a3 = this._wavStreamPlayer) === null || _a3 === void 0 ? void 0 : _a3.interrupt()
          ];
        });
      });
    };
    DailyMediaManager.prototype.bufferBotAudio = function(data, id) {
      var _a3;
      return (_a3 = this._wavStreamPlayer) === null || _a3 === void 0 ? void 0 : _a3.add16BitPCM(data, id);
    };
    DailyMediaManager.prototype.getAllMics = function() {
      return $22ece045290c996a$var$__awaiter2(this, void 0, Promise, function() {
        var devices;
        return $22ece045290c996a$var$__generator2(this, function(_a3) {
          switch (_a3.label) {
            case 0:
              return [
                4,
                this._daily.enumerateDevices()
              ];
            case 1:
              devices = _a3.sent().devices;
              return [
                2,
                devices.filter(function(device) {
                  return device.kind === "audioinput";
                })
              ];
          }
        });
      });
    };
    DailyMediaManager.prototype.getAllCams = function() {
      return $22ece045290c996a$var$__awaiter2(this, void 0, Promise, function() {
        var devices;
        return $22ece045290c996a$var$__generator2(this, function(_a3) {
          switch (_a3.label) {
            case 0:
              return [
                4,
                this._daily.enumerateDevices()
              ];
            case 1:
              devices = _a3.sent().devices;
              return [
                2,
                devices.filter(function(device) {
                  return device.kind === "videoinput";
                })
              ];
          }
        });
      });
    };
    DailyMediaManager.prototype.getAllSpeakers = function() {
      return $22ece045290c996a$var$__awaiter2(this, void 0, Promise, function() {
        var devices;
        return $22ece045290c996a$var$__generator2(this, function(_a3) {
          switch (_a3.label) {
            case 0:
              return [
                4,
                this._daily.enumerateDevices()
              ];
            case 1:
              devices = _a3.sent().devices;
              return [
                2,
                devices.filter(function(device) {
                  return device.kind === "audiooutput";
                })
              ];
          }
        });
      });
    };
    DailyMediaManager.prototype.updateMic = function(micId) {
      var _this = this;
      this._daily.setInputDevicesAsync({
        audioDeviceId: micId
      }).then(function(deviceInfo) {
        _this._selectedMic = deviceInfo.mic;
      });
    };
    DailyMediaManager.prototype.updateCam = function(camId) {
      var _this = this;
      this._daily.setInputDevicesAsync({
        videoDeviceId: camId
      }).then(function(deviceInfo) {
        _this._selectedCam = deviceInfo.camera;
      });
    };
    DailyMediaManager.prototype.updateSpeaker = function(speakerId) {
      return $22ece045290c996a$var$__awaiter2(this, void 0, Promise, function() {
        var sID, speakers, defaultSpeaker_1, defaultSpeakerCp;
        var _this = this;
        var _a3, _b;
        return $22ece045290c996a$var$__generator2(this, function(_c3) {
          switch (_c3.label) {
            case 0:
              if (speakerId !== "default" && this._selectedSpeaker.deviceId === speakerId)
                return [
                  2
                  /*return*/
                ];
              sID = speakerId;
              if (!(sID === "default"))
                return [
                  3,
                  2
                ];
              return [
                4,
                this.getAllSpeakers()
              ];
            case 1:
              speakers = _c3.sent();
              defaultSpeaker_1 = speakers.find(function(s3) {
                return s3.deviceId === "default";
              });
              if (!defaultSpeaker_1) {
                console.warn("No default speaker found");
                return [
                  2
                  /*return*/
                ];
              }
              speakers.splice(speakers.indexOf(defaultSpeaker_1), 1);
              defaultSpeakerCp = speakers.find(function(s3) {
                return defaultSpeaker_1.label.includes(s3.label);
              });
              sID = (_a3 = defaultSpeakerCp === null || defaultSpeakerCp === void 0 ? void 0 : defaultSpeakerCp.deviceId) !== null && _a3 !== void 0 ? _a3 : speakerId;
              _c3.label = 2;
            case 2:
              (_b = this._wavStreamPlayer) === null || _b === void 0 || _b.updateSpeaker(sID).then(function() {
                var _a4, _b2;
                _this._selectedSpeaker = {
                  deviceId: speakerId
                };
                (_b2 = (_a4 = _this._callbacks).onSpeakerUpdated) === null || _b2 === void 0 || _b2.call(_a4, _this._selectedSpeaker);
              });
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    Object.defineProperty(DailyMediaManager.prototype, "selectedMic", {
      get: function() {
        return this._selectedMic;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(DailyMediaManager.prototype, "selectedCam", {
      get: function() {
        return this._selectedCam;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(DailyMediaManager.prototype, "selectedSpeaker", {
      get: function() {
        return this._selectedSpeaker;
      },
      enumerable: false,
      configurable: true
    });
    DailyMediaManager.prototype.enableMic = function(enable) {
      return $22ece045290c996a$var$__awaiter2(this, void 0, Promise, function() {
        var _a3;
        return $22ece045290c996a$var$__generator2(this, function(_b) {
          this._micEnabled = enable;
          if (!((_a3 = this._daily.participants()) === null || _a3 === void 0 ? void 0 : _a3.local))
            return [
              2
              /*return*/
            ];
          this._daily.setLocalAudio(enable);
          if (this._mediaStreamRecorder) {
            if (enable) {
              if (this._mediaStreamRecorder.getStatus() === "paused")
                this._startRecording();
            } else if (this._mediaStreamRecorder.getStatus() === "recording")
              this._mediaStreamRecorder.pause();
          }
          return [
            2
            /*return*/
          ];
        });
      });
    };
    DailyMediaManager.prototype.enableCam = function(enable) {
      this._camEnabled = enable;
      this._daily.setLocalVideo(enable);
    };
    Object.defineProperty(DailyMediaManager.prototype, "isCamEnabled", {
      get: function() {
        return this._daily.localVideo();
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(DailyMediaManager.prototype, "isMicEnabled", {
      get: function() {
        return this._daily.localAudio();
      },
      enumerable: false,
      configurable: true
    });
    DailyMediaManager.prototype.tracks = function() {
      var _a3, _b, _c3, _d, _e3, _f;
      var participants = this._daily.participants();
      return {
        local: {
          audio: (_c3 = (_b = (_a3 = participants === null || participants === void 0 ? void 0 : participants.local) === null || _a3 === void 0 ? void 0 : _a3.tracks) === null || _b === void 0 ? void 0 : _b.audio) === null || _c3 === void 0 ? void 0 : _c3.persistentTrack,
          video: (_f = (_e3 = (_d = participants === null || participants === void 0 ? void 0 : participants.local) === null || _d === void 0 ? void 0 : _d.tracks) === null || _e3 === void 0 ? void 0 : _e3.video) === null || _f === void 0 ? void 0 : _f.persistentTrack
        }
      };
    };
    DailyMediaManager.prototype._startRecording = function() {
      var _this = this;
      if (!this._connected || !this._mediaStreamRecorder)
        return;
      try {
        this._mediaStreamRecorder.record(function(data) {
          _this._userAudioCallback(data.mono);
        }, this._recorderChunkSize);
      } catch (e3) {
        var err = e3;
        if (!err.message.includes("Already recording"))
          console.error("Error starting recording", e3);
      }
    };
    DailyMediaManager.prototype._handleAvailableDevicesUpdated = function(event) {
      var _a3, _b, _c3, _d, _e3, _f;
      (_b = (_a3 = this._callbacks).onAvailableCamsUpdated) === null || _b === void 0 || _b.call(_a3, event.availableDevices.filter(function(d3) {
        return d3.kind === "videoinput";
      }));
      (_d = (_c3 = this._callbacks).onAvailableMicsUpdated) === null || _d === void 0 || _d.call(_c3, event.availableDevices.filter(function(d3) {
        return d3.kind === "audioinput";
      }));
      (_f = (_e3 = this._callbacks).onAvailableSpeakersUpdated) === null || _f === void 0 || _f.call(_e3, event.availableDevices.filter(function(d3) {
        return d3.kind === "audiooutput";
      }));
      if (this._selectedSpeaker.deviceId === "default")
        this.updateSpeaker("default");
    };
    DailyMediaManager.prototype._handleSelectedDevicesUpdated = function(event) {
      var _a3, _b, _c3, _d, _e3, _f;
      if (((_a3 = this._selectedCam) === null || _a3 === void 0 ? void 0 : _a3.deviceId) !== event.devices.camera) {
        this._selectedCam = event.devices.camera;
        (_c3 = (_b = this._callbacks).onCamUpdated) === null || _c3 === void 0 || _c3.call(_b, event.devices.camera);
      }
      if (((_d = this._selectedMic) === null || _d === void 0 ? void 0 : _d.deviceId) !== event.devices.mic) {
        this._selectedMic = event.devices.mic;
        (_f = (_e3 = this._callbacks).onMicUpdated) === null || _f === void 0 || _f.call(_e3, event.devices.mic);
      }
    };
    DailyMediaManager.prototype._handleLocalAudioLevel = function(ev) {
      var _a3, _b;
      (_b = (_a3 = this._callbacks).onLocalAudioLevel) === null || _b === void 0 || _b.call(_a3, ev.audioLevel);
    };
    DailyMediaManager.prototype._handleRemoteAudioLevel = function(audioLevel) {
      var _a3, _b;
      (_b = (_a3 = this._callbacks).onRemoteAudioLevel) === null || _b === void 0 || _b.call(_a3, audioLevel, $22ece045290c996a$var$botParticipant2());
    };
    DailyMediaManager.prototype.handleTrackStarted = function(event) {
      return $22ece045290c996a$var$__awaiter2(this, void 0, void 0, function() {
        var status, _a3;
        var _b, _c3, _d, _e3;
        return $22ece045290c996a$var$__generator2(this, function(_f) {
          switch (_f.label) {
            case 0:
              if (!((_b = event.participant) === null || _b === void 0 ? void 0 : _b.local))
                return [
                  2
                  /*return*/
                ];
              if (!(event.track.kind === "audio"))
                return [
                  3,
                  10
                ];
              if (!this._mediaStreamRecorder)
                return [
                  3,
                  9
                ];
              status = this._mediaStreamRecorder.getStatus();
              _a3 = status;
              switch (_a3) {
                case "ended":
                  return [
                    3,
                    1
                  ];
                case "paused":
                  return [
                    3,
                    3
                  ];
                case "recording":
                  return [
                    3,
                    4
                  ];
              }
              return [
                3,
                4
              ];
            case 1:
              return [
                4,
                this._mediaStreamRecorder.begin(event.track)
              ];
            case 2:
              _f.sent();
              if (this._connected) {
                this._startRecording();
                if (this._connectResolve) {
                  this._connectResolve();
                  this._connectResolve = null;
                }
              }
              return [
                3,
                9
              ];
            case 3:
              this._startRecording();
              return [
                3,
                9
              ];
            case 4:
              if (!(this._currentAudioTrack !== event.track))
                return [
                  3,
                  7
                ];
              return [
                4,
                this._mediaStreamRecorder.end()
              ];
            case 5:
              _f.sent();
              return [
                4,
                this._mediaStreamRecorder.begin(event.track)
              ];
            case 6:
              _f.sent();
              this._startRecording();
              return [
                3,
                8
              ];
            case 7:
              console.warn("track-started event received for current track and already recording");
              _f.label = 8;
            case 8:
              return [
                3,
                9
              ];
            case 9:
              this._currentAudioTrack = event.track;
              _f.label = 10;
            case 10:
              (_d = (_c3 = this._callbacks).onTrackStarted) === null || _d === void 0 || _d.call(_c3, event.track, event.participant ? $22ece045290c996a$var$dailyParticipantToParticipant2(event.participant) : void 0);
              (_e3 = this.onTrackStartedCallback) === null || _e3 === void 0 || _e3.call(this, event);
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    DailyMediaManager.prototype.handleTrackStopped = function(event) {
      var _a3, _b, _c3, _d;
      if (!((_a3 = event.participant) === null || _a3 === void 0 ? void 0 : _a3.local))
        return;
      if (event.track.kind === "audio") {
        if (this._mediaStreamRecorder && this._mediaStreamRecorder.getStatus() === "recording")
          this._mediaStreamRecorder.pause();
      }
      (_c3 = (_b = this._callbacks).onTrackStopped) === null || _c3 === void 0 || _c3.call(_b, event.track, event.participant ? $22ece045290c996a$var$dailyParticipantToParticipant2(event.participant) : void 0);
      (_d = this.onTrackStoppedCallback) === null || _d === void 0 || _d.call(this, event);
    };
    return DailyMediaManager;
  }((0, $fc49a56cd8739127$export$4a0c46dbbe2ddb672))
);
var $22ece045290c996a$var$dailyParticipantToParticipant2 = function(p3) {
  return {
    id: p3.user_id,
    local: p3.local,
    name: p3.user_name
  };
};
var $22ece045290c996a$var$botParticipant2 = function() {
  return {
    id: "bot",
    local: false,
    name: "Bot"
  };
};
var $032380dbcf3f4e13$var$__extends = function() {
  var extendStatics = function(d3, b3) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d4, b4) {
      d4.__proto__ = b4;
    } || function(d4, b4) {
      for (var p3 in b4)
        if (Object.prototype.hasOwnProperty.call(b4, p3))
          d4[p3] = b4[p3];
    };
    return extendStatics(d3, b3);
  };
  return function(d3, b3) {
    if (typeof b3 !== "function" && b3 !== null)
      throw new TypeError("Class extends value " + String(b3) + " is not a constructor or null");
    extendStatics(d3, b3);
    function __() {
      this.constructor = d3;
    }
    d3.prototype = b3 === null ? Object.create(b3) : (__.prototype = b3.prototype, new __());
  };
}();
var $032380dbcf3f4e13$var$__awaiter = function(thisArg, _arguments, P3, generator) {
  function adopt(value) {
    return value instanceof P3 ? value : new P3(function(resolve) {
      resolve(value);
    });
  }
  return new (P3 || (P3 = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e3) {
        reject(e3);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e3) {
        reject(e3);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var $032380dbcf3f4e13$var$__generator = function(thisArg, body) {
  var _3 = {
    label: 0,
    sent: function() {
      if (t3[0] & 1)
        throw t3[1];
      return t3[1];
    },
    trys: [],
    ops: []
  }, f3, y3, t3, g3 = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
  return g3.next = verb(0), g3["throw"] = verb(1), g3["return"] = verb(2), typeof Symbol === "function" && (g3[Symbol.iterator] = function() {
    return this;
  }), g3;
  function verb(n3) {
    return function(v3) {
      return step([
        n3,
        v3
      ]);
    };
  }
  function step(op) {
    if (f3)
      throw new TypeError("Generator is already executing.");
    while (g3 && (g3 = 0, op[0] && (_3 = 0)), _3)
      try {
        if (f3 = 1, y3 && (t3 = op[0] & 2 ? y3["return"] : op[0] ? y3["throw"] || ((t3 = y3["return"]) && t3.call(y3), 0) : y3.next) && !(t3 = t3.call(y3, op[1])).done)
          return t3;
        if (y3 = 0, t3)
          op = [
            op[0] & 2,
            t3.value
          ];
        switch (op[0]) {
          case 0:
          case 1:
            t3 = op;
            break;
          case 4:
            _3.label++;
            return {
              value: op[1],
              done: false
            };
          case 5:
            _3.label++;
            y3 = op[1];
            op = [
              0
            ];
            continue;
          case 7:
            op = _3.ops.pop();
            _3.trys.pop();
            continue;
          default:
            if (!(t3 = _3.trys, t3 = t3.length > 0 && t3[t3.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _3 = 0;
              continue;
            }
            if (op[0] === 3 && (!t3 || op[1] > t3[0] && op[1] < t3[3])) {
              _3.label = op[1];
              break;
            }
            if (op[0] === 6 && _3.label < t3[1]) {
              _3.label = t3[1];
              t3 = op;
              break;
            }
            if (t3 && _3.label < t3[2]) {
              _3.label = t3[2];
              _3.ops.push(op);
              break;
            }
            if (t3[2])
              _3.ops.pop();
            _3.trys.pop();
            continue;
        }
        op = body.call(thisArg, _3);
      } catch (e3) {
        op = [
          6,
          e3
        ];
        y3 = 0;
      } finally {
        f3 = t3 = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return {
      value: op[0] ? op[1] : void 0,
      done: true
    };
  }
};
var $032380dbcf3f4e13$var$__spreadArray = function(to3, from, pack) {
  if (pack || arguments.length === 2) {
    for (var i3 = 0, l3 = from.length, ar3; i3 < l3; i3++)
      if (ar3 || !(i3 in from)) {
        if (!ar3)
          ar3 = Array.prototype.slice.call(from, 0, i3);
        ar3[i3] = from[i3];
      }
  }
  return to3.concat(ar3 || Array.prototype.slice.call(from));
};
var $032380dbcf3f4e13$var$readyStates = [
  "CONNECTING",
  "OPEN",
  "CLOSING",
  "CLOSED"
];
var $032380dbcf3f4e13$var$KEEP_ALIVE_INTERVAL = 5e3;
var $032380dbcf3f4e13$var$KEEP_ALIVE_TIMEOUT = 15e3;
var $032380dbcf3f4e13$var$WEBSOCKET_CONNECTION_TIMEOUT = 15e4;
var $032380dbcf3f4e13$var$DEFAULT_RECONNECT_ATTEMPTS = 2;
var $032380dbcf3f4e13$var$MAX_RECONNECT_ATTEMPTS = 10;
var $032380dbcf3f4e13$var$DEFAULT_RECONNECT_INTERVAL = 1e3;
var $032380dbcf3f4e13$var$MAX_RECONNECT_INTERVAL = 3e4;
var $032380dbcf3f4e13$var$DEFAULT_RECONNECT_DECAY = 1.5;
var $032380dbcf3f4e13$var$WEBSOCKET_TIMEOUT_CODE = 4100;
var $032380dbcf3f4e13$var$SIG_CONNECTION_CANCELED = "SIG_CONNECTION_CANCELED";
var $032380dbcf3f4e13$var$WEBSOCKET_ERROR = "WEBSOCKET_ERROR";
var $032380dbcf3f4e13$var$LOG_LEVEL;
(function(LOG_LEVEL) {
  LOG_LEVEL[LOG_LEVEL["DEBUG"] = 0] = "DEBUG";
  LOG_LEVEL[LOG_LEVEL["ERROR"] = 1] = "ERROR";
  LOG_LEVEL[LOG_LEVEL["INFO"] = 2] = "INFO";
  LOG_LEVEL[LOG_LEVEL["WARN"] = 3] = "WARN";
})($032380dbcf3f4e13$var$LOG_LEVEL || ($032380dbcf3f4e13$var$LOG_LEVEL = {}));
var $032380dbcf3f4e13$var$rWebSocket = (
  /** @class */
  function() {
    function rWebSocket(url, protocols) {
      this._closedManually = false;
      this._errored = false;
      this._rejected = false;
      this._timed_out = false;
      this._initialConnectionOk = false;
      this._ws = new WebSocket(url, protocols);
    }
    rWebSocket.prototype.addEventListener = function(type, listener) {
      this._ws.addEventListener(type, listener);
    };
    rWebSocket.prototype.close = function(code, reason) {
      this._ws.close(code, reason);
    };
    rWebSocket.prototype.send = function(data) {
      this._ws.send(data);
    };
    Object.defineProperty(rWebSocket.prototype, "url", {
      // Add getters for WebSocket properties
      get: function() {
        return this._ws.url;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(rWebSocket.prototype, "readyState", {
      get: function() {
        return this._ws.readyState;
      },
      enumerable: false,
      configurable: true
    });
    return rWebSocket;
  }()
);
var $032380dbcf3f4e13$export$4f3d0ffd941ebefb = (
  /** @class */
  function(_super) {
    $032380dbcf3f4e13$var$__extends(ReconnectingWebSocket, _super);
    function ReconnectingWebSocket(address, protocols, options) {
      if (options === void 0)
        options = {};
      var _a3;
      var _this = _super.call(this) || this;
      if (!address)
        throw new Error("Need a valid WebSocket URL");
      _this._ws = null;
      _this._url = address;
      _this._protocols = protocols;
      _this._parseBlobToJson = (_a3 = options === null || options === void 0 ? void 0 : options.parseBlobToJson) !== null && _a3 !== void 0 ? _a3 : true;
      _this.init();
      return _this;
    }
    ReconnectingWebSocket.prototype.init = function() {
      this._keepAliveTimeout = $032380dbcf3f4e13$var$KEEP_ALIVE_TIMEOUT;
      this._keepAliveInterval = $032380dbcf3f4e13$var$KEEP_ALIVE_INTERVAL;
      this._disconnected = false;
      this._keepIntervalID = null;
      this._shouldRetryFn = null;
      this._connectionTimeout = $032380dbcf3f4e13$var$WEBSOCKET_CONNECTION_TIMEOUT;
      this._reconnectAttempts = 0;
      this._allowedReconnectAttempts = $032380dbcf3f4e13$var$DEFAULT_RECONNECT_ATTEMPTS;
      this._reconnectInterval = $032380dbcf3f4e13$var$DEFAULT_RECONNECT_INTERVAL;
      this._maxReconnectInterval = $032380dbcf3f4e13$var$MAX_RECONNECT_INTERVAL;
      this._reconnectDecay = $032380dbcf3f4e13$var$DEFAULT_RECONNECT_DECAY;
    };
    ReconnectingWebSocket.prototype.connect = function() {
      return $032380dbcf3f4e13$var$__awaiter(this, void 0, void 0, function() {
        var _this = this;
        return $032380dbcf3f4e13$var$__generator(this, function(_a3) {
          return [
            2,
            new Promise(function(resolve, reject) {
              _this._disconnected = false;
              _this.clearReconnectTimeout();
              var ws3 = new $032380dbcf3f4e13$var$rWebSocket(_this._url, _this._protocols);
              _this.setConnectionTimeout();
              ws3.addEventListener("close", function(evt) {
                var closeEvent = evt;
                var code = ws3._timed_out ? $032380dbcf3f4e13$var$WEBSOCKET_TIMEOUT_CODE : closeEvent.code;
                var reason = ws3._timed_out ? "websocket connection timed out" : closeEvent.reason;
                ws3._timed_out = false;
                if (!ws3._closedManually && ws3._initialConnectionOk) {
                  console.warn("signaling socket closed unexpectedly: ".concat(code).concat(reason ? " " + reason : ""));
                  _this._closeSocket();
                  _this.emit("close", code, reason);
                } else
                  _this.log("signaling socket closed");
                if (!ws3._closedManually && (ws3._errored || ws3._timed_out)) {
                  console.warn("signaling socket closed on error: ".concat(code).concat(reason ? " " + reason : ""));
                  if (!ws3._rejected) {
                    ws3._rejected = true;
                    var err = new Error("WebSocket connection error (".concat(code, "): ").concat(reason));
                    err.name = $032380dbcf3f4e13$var$WEBSOCKET_ERROR;
                    reject(err);
                  }
                }
              });
              ws3.addEventListener("open", function(evt) {
                _this.log("wss connection opened to", $032380dbcf3f4e13$var$LOG_LEVEL.DEBUG, _this._url);
                _this.clearConnectionTimeout();
                if (ws3._rejected || ws3._timed_out)
                  return;
                if (ws3._closedManually || _this._ws && _this._ws !== ws3) {
                  ws3._rejected = true;
                  ws3.close();
                  var err = Error("wss connection interrupted by disconnect or newer connection");
                  err.name = $032380dbcf3f4e13$var$SIG_CONNECTION_CANCELED;
                  reject(err);
                  return;
                }
                ws3._initialConnectionOk = _this._url;
                _this._lastMsgRecvTime = Date.now();
                if (_this._keepAliveInterval)
                  _this._keepIntervalID = setInterval(function() {
                    return _this.checkSocketHealthAndSendKeepAlive();
                  }, _this._keepAliveInterval);
                _this._ws = ws3;
                _this.emit("open");
                resolve(ws3);
              });
              ws3.addEventListener("error", function(evt) {
                if (!ws3._closedManually) {
                  var wsTarget = evt.currentTarget;
                  _this.log("websocket error event: ".concat(wsTarget === null || wsTarget === void 0 ? void 0 : wsTarget.url));
                }
                ws3._errored = true;
              });
              ws3.addEventListener("message", function(msg) {
                _this._handleMessage(msg);
              });
            })
          ];
        });
      });
    };
    ReconnectingWebSocket.prototype.setConnectionTimeout = function() {
      var _this = this;
      this._connectionTimeoutID = setTimeout(function() {
        return $032380dbcf3f4e13$var$__awaiter(_this, void 0, void 0, function() {
          return $032380dbcf3f4e13$var$__generator(this, function(_a3) {
            switch (_a3.label) {
              case 0:
                this.log("Connection reconnect attempt timed out.");
                this.emit("connection-timeout");
                this.clearConnectionTimeout();
                return [
                  4,
                  this._closeSocket()
                ];
              case 1:
                _a3.sent();
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      }, this._connectionTimeout);
    };
    ReconnectingWebSocket.prototype.clearConnectionTimeout = function() {
      clearTimeout(this._connectionTimeoutID);
      this._connectionTimeoutID = void 0;
    };
    ReconnectingWebSocket.prototype.clearReconnectTimeout = function() {
      clearTimeout(this._reconnectTimeoutID);
      this._reconnectTimeoutID = void 0;
    };
    ReconnectingWebSocket.prototype.clearKeepAliveInterval = function() {
      if (this._keepIntervalID) {
        clearInterval(this._keepIntervalID);
        this._keepIntervalID = null;
      }
    };
    ReconnectingWebSocket.prototype.checkSocketHealthAndSendKeepAlive = function() {
      return $032380dbcf3f4e13$var$__awaiter(this, void 0, void 0, function() {
        return $032380dbcf3f4e13$var$__generator(this, function(_a3) {
          switch (_a3.label) {
            case 0:
              if (!(this._ws && this._ws.readyState === WebSocket.OPEN))
                return [
                  2
                  /*return*/
                ];
              if (!this._keepAliveTimeout || !this._keepAliveInterval)
                return [
                  2
                  /*return*/
                ];
              if (!(Date.now() - this._lastMsgRecvTime > this._keepAliveTimeout))
                return [
                  3,
                  2
                ];
              this.log("Connection is stale, need to reconnect", $032380dbcf3f4e13$var$LOG_LEVEL.WARN);
              return [
                4,
                this._closeSocket()
              ];
            case 1:
              _a3.sent();
              return [
                2
                /*return*/
              ];
            case 2:
              if (Date.now() - this._lastMsgSendTime < this._keepAliveInterval)
                return [
                  2
                  /*return*/
                ];
              this.log("Emitting keep-alive", $032380dbcf3f4e13$var$LOG_LEVEL.DEBUG);
              this.emit("keep-alive");
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    ReconnectingWebSocket.prototype._closeSocket = function() {
      return $032380dbcf3f4e13$var$__awaiter(this, void 0, void 0, function() {
        var shouldRetry, error_1;
        var _a3;
        return $032380dbcf3f4e13$var$__generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              this.log("Closing");
              _b.label = 1;
            case 1:
              _b.trys.push([
                1,
                4,
                ,
                5
              ]);
              this.clearKeepAliveInterval();
              this._lastMsgRecvTime = 0;
              if (this._ws) {
                this._ws._closedManually = true;
                this._ws.close();
              }
              shouldRetry = ((_a3 = this._ws) === null || _a3 === void 0 ? void 0 : _a3._initialConnectionOk) && this._shouldRetryFn && this._shouldRetryFn();
              this._ws = null;
              if (!shouldRetry)
                return [
                  3,
                  3
                ];
              this.log("Emitting reconnect", $032380dbcf3f4e13$var$LOG_LEVEL.DEBUG);
              this.emit("reconnecting");
              return [
                4,
                this.retryFailedConnection()
              ];
            case 2:
              _b.sent();
              _b.label = 3;
            case 3:
              return [
                3,
                5
              ];
            case 4:
              error_1 = _b.sent();
              this.log("Error while closing and retrying: ".concat(error_1), $032380dbcf3f4e13$var$LOG_LEVEL.ERROR);
              return [
                3,
                5
              ];
            case 5:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    ReconnectingWebSocket.prototype.retryFailedConnection = function() {
      return $032380dbcf3f4e13$var$__awaiter(this, void 0, void 0, function() {
        var timeout;
        var _this = this;
        return $032380dbcf3f4e13$var$__generator(this, function(_a3) {
          if (this._reconnectAttempts < this._allowedReconnectAttempts) {
            if (this._reconnectTimeoutID) {
              this.log("Retry already scheduled");
              return [
                2
                /*return*/
              ];
            }
            this.log("Retrying failed connection");
            timeout = // The timeout logic is taken from
            // https://github.com/joewalnes/reconnecting-websocket
            this._reconnectInterval * Math.pow(this._reconnectDecay, this._reconnectAttempts);
            timeout = timeout > this._maxReconnectInterval ? this._maxReconnectInterval : timeout;
            this.log("Reconnecting in ".concat(timeout / 1e3, " seconds"));
            this._reconnectAttempts += 1;
            this._reconnectTimeoutID = setTimeout(function() {
              return _this.connect();
            }, timeout);
          } else {
            this.log("Maximum connection retry attempts exceeded", $032380dbcf3f4e13$var$LOG_LEVEL.ERROR);
            this.emit("reconnect-failed");
          }
          return [
            2
            /*return*/
          ];
        });
      });
    };
    ReconnectingWebSocket.prototype.log = function(msg, log_level) {
      if (log_level === void 0)
        log_level = $032380dbcf3f4e13$var$LOG_LEVEL.DEBUG;
      var args = [];
      for (var _i3 = 2; _i3 < arguments.length; _i3++)
        args[_i3 - 2] = arguments[_i3];
      switch (log_level) {
        case $032380dbcf3f4e13$var$LOG_LEVEL.DEBUG:
          console.debug.apply(console, $032380dbcf3f4e13$var$__spreadArray([
            "websocket: ".concat(msg)
          ], args, false));
          break;
        case $032380dbcf3f4e13$var$LOG_LEVEL.ERROR:
          console.error.apply(console, $032380dbcf3f4e13$var$__spreadArray([
            "websocket: ".concat(msg)
          ], args, false));
          break;
        case $032380dbcf3f4e13$var$LOG_LEVEL.WARN:
          console.warn.apply(console, $032380dbcf3f4e13$var$__spreadArray([
            "websocket: ".concat(msg)
          ], args, false));
          break;
        case $032380dbcf3f4e13$var$LOG_LEVEL.INFO:
        default:
          console.log.apply(console, $032380dbcf3f4e13$var$__spreadArray([
            "websocket: ".concat(msg)
          ], args, false));
          break;
      }
    };
    ReconnectingWebSocket.prototype.send = function(data) {
      return $032380dbcf3f4e13$var$__awaiter(this, void 0, void 0, function() {
        return $032380dbcf3f4e13$var$__generator(this, function(_a3) {
          try {
            if (this._ws && this._ws.readyState === WebSocket.OPEN) {
              this._lastMsgSendTime = Date.now();
              this._ws.send(data);
            } else
              this.log("Failed to send data, web socket not open.", $032380dbcf3f4e13$var$LOG_LEVEL.ERROR);
          } catch (error) {
            this.log("Failed to send data. ".concat(error), $032380dbcf3f4e13$var$LOG_LEVEL.ERROR);
          }
          return [
            2
            /*return*/
          ];
        });
      });
    };
    ReconnectingWebSocket.prototype.close = function() {
      return $032380dbcf3f4e13$var$__awaiter(this, void 0, void 0, function() {
        return $032380dbcf3f4e13$var$__generator(this, function(_a3) {
          try {
            this.log("Closing websocket");
            this._disconnected = true;
            this.clearReconnectTimeout();
            this._closeSocket();
          } catch (error) {
            this.log("Failed to close websocket. ".concat(error));
          }
          return [
            2
            /*return*/
          ];
        });
      });
    };
    Object.defineProperty(ReconnectingWebSocket.prototype, "readyState", {
      get: function() {
        var _a3, _b;
        return (_b = (_a3 = this._ws) === null || _a3 === void 0 ? void 0 : _a3.readyState) !== null && _b !== void 0 ? _b : WebSocket.CLOSED;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(ReconnectingWebSocket.prototype, "url", {
      get: function() {
        return this._url;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(ReconnectingWebSocket.prototype, "keepAliveTimeout", {
      get: function() {
        return this._keepAliveTimeout;
      },
      set: function(keepAliveTimeout) {
        if (typeof keepAliveTimeout === "number") {
          this.log("Setting ACK freshness timeout to ".concat(keepAliveTimeout));
          this._keepAliveTimeout = keepAliveTimeout;
        }
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(ReconnectingWebSocket.prototype, "keepAliveInterval", {
      get: function() {
        return this._keepAliveInterval;
      },
      set: function(keepAliveInterval) {
        if (typeof keepAliveInterval === "number") {
          this.log("Setting keep-alive interval to ".concat(keepAliveInterval));
          this._keepAliveInterval = keepAliveInterval;
        }
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(ReconnectingWebSocket.prototype, "shouldRetryFn", {
      set: function(cb) {
        if (typeof cb === "function")
          this._shouldRetryFn = cb;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(ReconnectingWebSocket.prototype, "connectionTimeout", {
      get: function() {
        return this._connectionTimeout;
      },
      set: function(timeout) {
        if (typeof timeout === "number")
          this._connectionTimeout = timeout;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(ReconnectingWebSocket.prototype, "maxReconnectAttempts", {
      get: function() {
        return this._allowedReconnectAttempts;
      },
      set: function(attempts) {
        if (attempts > 0 && attempts < $032380dbcf3f4e13$var$MAX_RECONNECT_ATTEMPTS) {
          this.log("Setting maximum connection retry attempts to ".concat(attempts));
          this._allowedReconnectAttempts = attempts;
        } else
          this._allowedReconnectAttempts = $032380dbcf3f4e13$var$DEFAULT_RECONNECT_ATTEMPTS;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(ReconnectingWebSocket.prototype, "reconnectInterval", {
      get: function() {
        return this._reconnectInterval;
      },
      set: function(interval) {
        if (typeof interval === "number")
          this._reconnectInterval = interval < this._maxReconnectInterval ? interval : this._maxReconnectInterval;
      },
      enumerable: false,
      configurable: true
    });
    ReconnectingWebSocket.prototype._handleMessage = function(event) {
      return $032380dbcf3f4e13$var$__awaiter(this, void 0, void 0, function() {
        var data, _parsePromise, msg;
        var _this = this;
        return $032380dbcf3f4e13$var$__generator(this, function(_a3) {
          switch (_a3.label) {
            case 0:
              this._lastMsgRecvTime = Date.now();
              data = event.data;
              _parsePromise = new Promise(function(resolve, reject) {
                if (typeof data === "string")
                  resolve(data);
                else if (data instanceof ArrayBuffer) {
                  var arrayBuffer = data;
                  resolve(new Uint8Array(arrayBuffer));
                } else if (data instanceof Blob) {
                  if (!_this._parseBlobToJson) {
                    resolve(data);
                    return;
                  }
                  var blob = data;
                  var reader_1 = new FileReader();
                  reader_1.onload = function() {
                    var text = reader_1.result;
                    try {
                      var json = JSON.parse(text);
                      resolve(json);
                    } catch (e3) {
                      console.error("Failed to parse JSON from Blob:", e3);
                    }
                  };
                  reader_1.readAsText(blob);
                }
              });
              return [
                4,
                _parsePromise
              ];
            case 1:
              msg = _a3.sent();
              this.emit("message", msg);
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    return ReconnectingWebSocket;
  }((0, import_events2.EventEmitter))
);
[
  "binaryType",
  "bufferedAmount",
  "extensions",
  "protocol",
  "readyState",
  "url",
  "keepAliveTimeout",
  "keepAliveInterval",
  "shouldRetryFn",
  "connectionTimeout",
  "maxReconnectAttempts",
  "reconnectInterval"
].forEach(function(property) {
  Object.defineProperty($032380dbcf3f4e13$export$4f3d0ffd941ebefb.prototype, property, {
    enumerable: true
  });
});
[
  "CONNECTING",
  "OPEN",
  "CLOSING",
  "CLOSED"
].forEach(function(property) {
  Object.defineProperty($032380dbcf3f4e13$export$4f3d0ffd941ebefb.prototype, property, {
    enumerable: true,
    value: $032380dbcf3f4e13$var$readyStates.indexOf(property)
  });
});
[
  "CONNECTING",
  "OPEN",
  "CLOSING",
  "CLOSED"
].forEach(function(property) {
  Object.defineProperty($032380dbcf3f4e13$export$4f3d0ffd941ebefb, property, {
    enumerable: true,
    value: $032380dbcf3f4e13$var$readyStates.indexOf(property)
  });
});
var $763b38ac211abed6$export$7fb989e764be5cac = class extends (0, $4086f06442fcb7d7$export$86495b081fef8e52) {
  constructor(service_options, manager) {
    super();
    this._botIsSpeaking = false;
    this._service_options = service_options;
    this._mediaManager = manager;
    this._mediaManager.setUserAudioCallback(this.handleUserAudioStream.bind(this));
  }
  // subclasses should implement this method to initialize the LLM
  // client and call super() on this method
  initialize(options, messageHandler) {
    this._options = options;
    this._callbacks = options.callbacks ?? {};
    this._onMessage = messageHandler;
    this._mediaManager.setRTVIOptions(options);
    this.initializeLLM();
    this.attachDeviceListeners();
    this.attachLLMListeners();
    this.state = "disconnected";
  }
  async initDevices() {
    this.state = "initializing";
    await this._mediaManager.initialize();
    this.state = "initialized";
  }
  async connect(authBundle, abortController) {
    this.state = "connecting";
    await this.connectLLM();
    this._mediaManager.connect();
    this.state = "connected";
    this._callbacks.onConnected?.();
  }
  async disconnect() {
    this.state = "disconnecting";
    await this._mediaManager.disconnect();
    await this.disconnectLLM();
    this.state = "disconnected";
    this._callbacks.onDisconnected?.();
  }
  getAllMics() {
    return this._mediaManager.getAllMics();
  }
  getAllCams() {
    return this._mediaManager.getAllCams();
  }
  getAllSpeakers() {
    return this._mediaManager.getAllSpeakers();
  }
  async updateMic(micId) {
    return this._mediaManager.updateMic(micId);
  }
  updateCam(camId) {
    return this._mediaManager.updateCam(camId);
  }
  updateSpeaker(speakerId) {
    return this._mediaManager.updateSpeaker(speakerId);
  }
  get selectedMic() {
    return this._mediaManager.selectedMic;
  }
  get selectedCam() {
    return this._mediaManager.selectedCam;
  }
  get selectedSpeaker() {
    return this._mediaManager.selectedSpeaker;
  }
  enableMic(enable) {
    this._mediaManager.enableMic(enable);
  }
  enableCam(enable) {
    this._mediaManager.enableCam(enable);
  }
  get isCamEnabled() {
    return this._mediaManager.isCamEnabled;
  }
  get isMicEnabled() {
    return this._mediaManager.isMicEnabled;
  }
  get state() {
    return this._state;
  }
  set state(state) {
    if (this._state === state)
      return;
    this._state = state;
    this._callbacks.onTransportStateChanged?.(state);
  }
  get expiry() {
    return this._expiry;
  }
  tracks() {
    return this._mediaManager.tracks();
  }
  // Realtime event handlers
  async userStartedSpeaking() {
    const trackSampleOffset = await this._mediaManager.userStartedSpeaking();
    this._callbacks.onUserStartedSpeaking?.();
    return trackSampleOffset;
  }
  userStoppedSpeaking() {
    this._callbacks.onUserStoppedSpeaking?.();
  }
  userTranscript(transcript) {
    this._callbacks.onUserTranscript?.(transcript);
  }
  botStartedSpeaking() {
    if (!this._botIsSpeaking) {
      this._botIsSpeaking = true;
      this._callbacks.onBotStartedSpeaking?.();
    }
  }
  botStoppedSpeaking() {
    if (this._botIsSpeaking) {
      this._botIsSpeaking = false;
      this._callbacks.onBotStoppedSpeaking?.();
    }
  }
  botTtsText(data) {
    this._callbacks.onBotTtsText?.(data);
  }
  bufferBotAudio(audio, id) {
    this._mediaManager.bufferBotAudio(audio, id);
  }
  connectionError(errorMsg) {
    console.error(errorMsg);
    this.state = "error";
    this.disconnect();
  }
  attachDeviceListeners() {
  }
};
var $d4cf498bb51af8a5$var$HOST = `generativelanguage.googleapis.com`;
var $d4cf498bb51af8a5$var$BIDI_PATH = `google.ai.generativelanguage.v1alpha.GenerativeService.BidiGenerateContent`;
var $d4cf498bb51af8a5$var$MODEL = "models/gemini-2.0-flash-exp";
var $d4cf498bb51af8a5$export$bef67da0c82ecefe = class extends (0, $763b38ac211abed6$export$7fb989e764be5cac) {
  constructor(service_options, manager) {
    if (!manager)
      manager = new (0, $22ece045290c996a$export$c95c65abc5f471252)();
    super(service_options, manager);
    this._ws = null;
    this._botResponseID = 0;
  }
  initializeLLM() {
    const service_options = this._service_options;
    const apiKey = service_options.api_key;
    if (!apiKey) {
      console.error("!!! No API key provided in llm_service_options");
      return;
    }
    const base_url = `wss://${$d4cf498bb51af8a5$var$HOST}/ws/${$d4cf498bb51af8a5$var$BIDI_PATH}`;
    this._ws = new (0, $032380dbcf3f4e13$export$4f3d0ffd941ebefb)(`${base_url}?key=${apiKey}`);
    this._ws.keepAliveInterval = 0;
  }
  // This is called from super.initialize()
  attachLLMListeners() {
    if (!this._ws) {
      console.error("attachLLMListeners called before the websocket is initialized. Be sure to call initializeLLM() first.");
      return;
    }
    this._ws.on("open", () => {
    });
    this._ws.on("message", async (msg) => {
      const content = msg.serverContent;
      if (!content) {
        if ("setupComplete" in msg) {
          this.state = "ready";
          if (this._botIsReadyResolve) {
            this._botIsReadyResolve();
            this._botIsReadyResolve = null;
          }
        } else
          console.log("received unknown message", msg);
        return;
      }
      if (content.modelTurn) {
        let result = null;
        content.modelTurn.parts?.forEach((part) => {
          if (part.inlineData?.data) {
            if (result)
              $d4cf498bb51af8a5$var$mergeBuffers(result, $d4cf498bb51af8a5$var$base64ToArrayBuffer(part.inlineData.data));
            else
              result = $d4cf498bb51af8a5$var$base64ToArrayBuffer(part.inlineData.data);
          }
        });
        if (result) {
          if (!this._botIsSpeaking) {
            this._botResponseID++;
            this.botStartedSpeaking();
          }
          this.bufferBotAudio(result, this._botResponseID.toString());
        }
      } else if (content.interrupted)
        await this.userStartedSpeaking();
      else if (content.turnComplete)
        this.botStoppedSpeaking();
    });
    this._ws.on("error", (error) => {
      this.connectionError(`websocket error: ${error}`);
    });
    this._ws.on("connection-timeout", () => {
      this.connectionError("websocket connection timed out");
    });
    this._ws.on("close", (code) => {
      this.connectionError(`websocket connection closed. Code: ${code}`);
    });
    this._ws.on("reconnect-failed", () => {
      this.connectionError(`websocket reconnect failed`);
    });
  }
  async connectLLM() {
    if (!this._ws) {
      console.error("connectLLM called before the websocket is initialized. Be sure to call initializeLLM() first.");
      return;
    }
    try {
      await this._ws.connect();
    } catch (error) {
      const msg = `Failed to connect to LLM: ${error}`;
      console.error(msg);
      this.state = "error";
      throw new (0, $8ead7b33b8402751$export$e0624a511a2c4e9)(msg);
    }
    const service_options = this._service_options;
    const model = service_options?.model ?? $d4cf498bb51af8a5$var$MODEL;
    const generation_config = service_options?.settings ?? {};
    let config = {
      setup: {
        model,
        generation_config
      }
    };
    await this._sendMsg(config);
    if (service_options?.initial_messages)
      service_options.initial_messages.forEach((msg) => {
        this._sendTextInput(msg.content, msg.role);
      });
  }
  async disconnectLLM() {
    await this._ws?.close();
  }
  async sendReadyMessage() {
    const p3 = new Promise((resolve) => {
      if (this.state === "ready")
        resolve();
      else
        this._botIsReadyResolve = resolve;
    });
    await p3;
    this._onMessage({
      type: (0, $b48f893ed1354c1e$export$38b3db05cbf0e240).BOT_READY,
      data: {}
    });
  }
  handleUserAudioStream(data) {
    if (this.state === "ready")
      try {
        this._sendAudioInput(data);
      } catch (error) {
        console.error("Error adding audio to stream player", error);
        this.state = "error";
      }
  }
  sendMessage(message) {
    switch (message.type) {
      case "action":
        {
          const data = message.data;
          switch (data.action) {
            case "append_to_messages":
              if (data.arguments) {
                for (const a3 of data.arguments)
                  if (a3.name === "messages") {
                    const value = a3.value;
                    for (const m3 of value)
                      this._sendTextInput(m3.content, m3.role);
                  }
              }
              break;
            case "get_context":
            case "set_context":
              console.warn("get_context and set_context are not implemented");
              break;
          }
        }
        break;
    }
  }
  async _sendAudioInput(data) {
    const sampleRate = 24e3;
    const msg = {
      realtimeInput: {
        mediaChunks: [
          {
            mimeType: `audio/pcm;rate=${sampleRate}`,
            data: $d4cf498bb51af8a5$var$arrayBufferToBase64(data)
          }
        ]
      }
    };
    await this._sendMsg(msg);
  }
  async _sendTextInput(text, role) {
    const msg = {
      clientContent: {
        turns: [
          {
            role,
            parts: [
              {
                text
              }
            ]
          }
        ],
        turnComplete: role === "user" ? true : false
      }
    };
    await this._sendMsg(msg);
  }
  async _sendMsg(msg) {
    if (!this._ws) {
      console.error("sendMsg called but WS is null");
      return;
    }
    if (this._ws.readyState !== WebSocket.OPEN) {
      console.error("attempt to send to closed socket");
      return;
    }
    if (!msg) {
      console.error("need a msg to send a msg");
      return;
    }
    try {
      await this._ws.send(JSON.stringify(msg));
    } catch (e3) {
      console.error("sendMsg error", e3);
    }
  }
  // Not implemented
  enableScreenShare(enable) {
    (0, $7afbbd59ebaa42bf$export$af88d00dbe7f521).error("startScreenShare not implemented for GeminiLiveWebsocketTransport");
    throw new Error("Not implemented");
  }
  get isSharingScreen() {
    (0, $7afbbd59ebaa42bf$export$af88d00dbe7f521).error("isSharingScreen not implemented for GeminiLiveWebsocketTransport");
    return false;
  }
};
function $d4cf498bb51af8a5$var$base64ToArrayBuffer(base64) {
  const binaryString = atob(base64);
  const len = binaryString.length;
  const bytes = new Uint8Array(len);
  for (let i3 = 0; i3 < len; i3++)
    bytes[i3] = binaryString.charCodeAt(i3);
  return bytes.buffer;
}
function $d4cf498bb51af8a5$var$arrayBufferToBase64(buffer) {
  const bytes = new Uint8Array(buffer);
  let binary = "";
  for (let i3 = 0; i3 < bytes.byteLength; i3++)
    binary += String.fromCharCode(bytes[i3]);
  return btoa(binary);
}
function $d4cf498bb51af8a5$var$mergeBuffers(leftBuffer, rightBuffer) {
  const tmpArray = new Uint8Array(leftBuffer.byteLength + rightBuffer.byteLength);
  tmpArray.set(new Uint8Array(leftBuffer), 0);
  tmpArray.set(new Uint8Array(rightBuffer), leftBuffer.byteLength);
  return tmpArray.buffer;
}

// ../node_modules/dequal/dist/index.mjs
var has = Object.prototype.hasOwnProperty;
function find(iter, tar, key) {
  for (key of iter.keys()) {
    if (dequal(key, tar))
      return key;
  }
}
function dequal(foo, bar) {
  var ctor, len, tmp;
  if (foo === bar)
    return true;
  if (foo && bar && (ctor = foo.constructor) === bar.constructor) {
    if (ctor === Date)
      return foo.getTime() === bar.getTime();
    if (ctor === RegExp)
      return foo.toString() === bar.toString();
    if (ctor === Array) {
      if ((len = foo.length) === bar.length) {
        while (len-- && dequal(foo[len], bar[len]))
          ;
      }
      return len === -1;
    }
    if (ctor === Set) {
      if (foo.size !== bar.size) {
        return false;
      }
      for (len of foo) {
        tmp = len;
        if (tmp && typeof tmp === "object") {
          tmp = find(bar, tmp);
          if (!tmp)
            return false;
        }
        if (!bar.has(tmp))
          return false;
      }
      return true;
    }
    if (ctor === Map) {
      if (foo.size !== bar.size) {
        return false;
      }
      for (len of foo) {
        tmp = len[0];
        if (tmp && typeof tmp === "object") {
          tmp = find(bar, tmp);
          if (!tmp)
            return false;
        }
        if (!dequal(len[1], bar.get(tmp))) {
          return false;
        }
      }
      return true;
    }
    if (ctor === ArrayBuffer) {
      foo = new Uint8Array(foo);
      bar = new Uint8Array(bar);
    } else if (ctor === DataView) {
      if ((len = foo.byteLength) === bar.byteLength) {
        while (len-- && foo.getInt8(len) === bar.getInt8(len))
          ;
      }
      return len === -1;
    }
    if (ArrayBuffer.isView(foo)) {
      if ((len = foo.byteLength) === bar.byteLength) {
        while (len-- && foo[len] === bar[len])
          ;
      }
      return len === -1;
    }
    if (!ctor || typeof foo === "object") {
      len = 0;
      for (ctor in foo) {
        if (has.call(foo, ctor) && ++len && !has.call(bar, ctor))
          return false;
        if (!(ctor in bar) || !dequal(foo[ctor], bar[ctor]))
          return false;
      }
      return Object.keys(bar).length === len;
    }
  }
  return foo !== foo && bar !== bar;
}

// ../node_modules/@pipecat-ai/openai-realtime-webrtc-transport/dist/index.module.js
function $parcel$export5(e3, n3, v3, s3) {
  Object.defineProperty(e3, n3, { get: v3, set: s3, enumerable: true, configurable: true });
}
var $4e887b6dcd7ec3e7$exports = {};
$parcel$export5($4e887b6dcd7ec3e7$exports, "OpenAIRealTimeWebRTCTransport", () => $4e887b6dcd7ec3e7$export$60a765086a8f0478);
var $4e887b6dcd7ec3e7$var$BASE_URL = "https://api.openai.com/v1/realtime";
var $4e887b6dcd7ec3e7$var$MODEL = "gpt-4o-realtime-preview-2024-12-17";
var $4e887b6dcd7ec3e7$export$60a765086a8f0478 = class extends (0, $4086f06442fcb7d7$export$86495b081fef8e52) {
  constructor(service_options) {
    super();
    this._openai_channel = null;
    this._openai_cxn = null;
    this._senders = {};
    this._botTracks = {};
    this._selectedCam = {};
    this._selectedMic = {};
    this._selectedSpeaker = {};
    this._service_options = service_options;
  }
  // subclasses should implement this method to initialize the LLM
  // client and call super() on this method
  initialize(options, messageHandler) {
    this._options = options;
    this._callbacks = options.callbacks ?? {};
    this._onMessage = messageHandler;
    this._openai_cxn = new RTCPeerConnection();
    const existingInstance = (0, ic).getCallInstance();
    if (existingInstance)
      this._daily = existingInstance;
    else {
      this._daily = (0, ic).createCallObject({
        // Default is cam off
        startVideoOff: options.enableCam != true,
        // Default is mic on
        startAudioOff: options.enableMic == false
      });
      this._attachDeviceListeners();
    }
    this._attachLLMListeners();
    this.state = "disconnected";
  }
  async initDevices() {
    if (!this._daily)
      throw new (0, $8ead7b33b8402751$export$59b4786f333aac02)("Transport instance not initialized");
    this.state = "initializing";
    const infos = await this._daily.startCamera({
      startVideoOff: true,
      startAudioOff: !(this._options.enableMic ?? true)
    });
    const { devices } = await this._daily.enumerateDevices();
    const cams = devices.filter((d3) => d3.kind === "videoinput");
    const mics = devices.filter((d3) => d3.kind === "audioinput");
    const speakers = devices.filter((d3) => d3.kind === "audiooutput");
    this._callbacks.onAvailableCamsUpdated?.(cams);
    this._callbacks.onAvailableMicsUpdated?.(mics);
    this._callbacks.onAvailableSpeakersUpdated?.(speakers);
    this._selectedCam = infos.camera;
    this._callbacks.onCamUpdated?.(infos.camera);
    this._selectedMic = infos.mic;
    this._callbacks.onMicUpdated?.(infos.mic);
    this._selectedSpeaker = infos.speaker;
    this._callbacks.onSpeakerUpdated?.(infos.speaker);
    if (!this._daily.isLocalAudioLevelObserverRunning())
      await this._daily.startLocalAudioLevelObserver(100);
    this.state = "initialized";
  }
  /**********************************/
  /** Call Lifecycle functionality */
  async connect(authBundle, abortController) {
    if (!this._openai_cxn) {
      (0, $7afbbd59ebaa42bf$export$af88d00dbe7f521).error("connectLLM called before the webrtc connection is initialized. Be sure to call initializeLLM() first.");
      return;
    }
    if (abortController.signal.aborted)
      return;
    this.state = "connecting";
    await this._connectLLM();
    if (abortController.signal.aborted)
      return;
    this.state = "connected";
    this._callbacks.onConnected?.();
  }
  async disconnect() {
    this.state = "disconnecting";
    await this._disconnectLLM();
    this.state = "disconnected";
    this._callbacks.onDisconnected?.();
    this.initialize(this._options, this._onMessage);
  }
  get state() {
    return this._state;
  }
  set state(state) {
    if (this._state === state)
      return;
    this._state = state;
    this._callbacks.onTransportStateChanged?.(state);
  }
  /**********************************/
  /** OpenAI-specific functionality */
  updateSettings(settings) {
    if (settings.voice && this._channelReady()) {
      (0, $7afbbd59ebaa42bf$export$af88d00dbe7f521).warn("changing voice settings after session start is not supported");
      delete settings.voice;
    }
    const newSettings = {
      ...this._service_options.settings,
      ...settings
    };
    if ((0, dequal)(newSettings, this._service_options.settings))
      return;
    this._service_options.settings = {
      ...this._service_options.settings,
      ...settings
    };
    this._updateSession();
  }
  /**********************************/
  /** Device functionality */
  async getAllMics() {
    let devices = (await this._daily.enumerateDevices()).devices;
    return devices.filter((device) => device.kind === "audioinput");
  }
  async getAllCams() {
    let devices = (await this._daily.enumerateDevices()).devices;
    return devices.filter((device) => device.kind === "videoinput");
  }
  async getAllSpeakers() {
    let devices = (await this._daily.enumerateDevices()).devices;
    return devices.filter((device) => device.kind === "audiooutput");
  }
  updateMic(micId) {
    this._daily.setInputDevicesAsync({
      audioDeviceId: micId
    }).then((deviceInfo) => {
      this._selectedMic = deviceInfo.mic;
    });
  }
  updateCam(camId) {
    this._daily.setInputDevicesAsync({
      videoDeviceId: camId
    }).then((deviceInfo) => {
      this._selectedCam = deviceInfo.camera;
    });
  }
  updateSpeaker(speakerId) {
    this._daily.setOutputDeviceAsync({
      outputDeviceId: speakerId
    }).then((deviceInfo) => {
      this._selectedSpeaker = deviceInfo.speaker;
    });
  }
  get selectedMic() {
    return this._selectedMic;
  }
  get selectedCam() {
    return this._selectedCam;
  }
  get selectedSpeaker() {
    return this._selectedSpeaker;
  }
  enableMic(enable) {
    if (!this._daily.participants()?.local)
      return;
    this._daily.setLocalAudio(enable);
  }
  enableCam(enable) {
    if (!this._daily.participants()?.local)
      return;
    this._daily.setLocalVideo(enable);
  }
  get isCamEnabled() {
    return this._daily.localVideo();
  }
  get isMicEnabled() {
    return this._daily.localAudio();
  }
  // Not implemented
  enableScreenShare(enable) {
    (0, $7afbbd59ebaa42bf$export$af88d00dbe7f521).error("startScreenShare not implemented for OpenAIRealTimeWebRTCTransport");
    throw new Error("Not implemented");
  }
  get isSharingScreen() {
    (0, $7afbbd59ebaa42bf$export$af88d00dbe7f521).error("isSharingScreen not implemented for OpenAIRealTimeWebRTCTransport");
    return false;
  }
  tracks() {
    const participants = this._daily?.participants() ?? {};
    const tracks = {
      local: {
        audio: participants?.local?.tracks?.audio?.persistentTrack,
        video: participants?.local?.tracks?.video?.persistentTrack
      }
    };
    if (Object.keys(this._botTracks).length > 0)
      tracks.bot = this._botTracks;
    return tracks;
  }
  /**********************************/
  /** Bot communication */
  async sendReadyMessage() {
    const p3 = new Promise((resolve, reject) => {
      if (this.state === "ready")
        resolve();
      else
        this._botIsReadyResolve = {
          resolve,
          reject
        };
    });
    try {
      await p3;
      this._onMessage({
        type: (0, $b48f893ed1354c1e$export$38b3db05cbf0e240).BOT_READY,
        data: {}
      });
    } catch (e3) {
      (0, $7afbbd59ebaa42bf$export$af88d00dbe7f521).error("Failed to start bot");
      throw new (0, $8ead7b33b8402751$export$e0624a511a2c4e9)();
    }
  }
  sendMessage(message) {
    switch (message.type) {
      case "action": {
        const data = message.data;
        switch (data.action) {
          case "append_to_messages":
            if (data.arguments) {
              let messages = [];
              let runImmediately = false;
              for (const a3 of data.arguments) {
                if (a3.name === "messages")
                  messages = a3.value;
                else if (a3.name === "run_immediately")
                  runImmediately = a3.value;
              }
              this._sendTextInput(messages, runImmediately);
            }
            break;
          case "run":
            this._run();
            break;
          case "get_contex":
          case "set_context":
            (0, $7afbbd59ebaa42bf$export$af88d00dbe7f521).warn("get_context and set_context are not implemented");
            break;
        }
        break;
      }
      case (0, $0908f693e3e0724c$export$441bcd2e10762760).LLM_FUNCTION_CALL_RESULT:
        this._sendFunctionCallResult(message.data);
        break;
    }
  }
  /**********************************/
  /** Private methods */
  async _connectLLM() {
    const audioSender = this._senders["audio"];
    if (!audioSender) {
      let micTrack = this._daily.participants()?.local?.tracks?.audio?.persistentTrack;
      if (!micTrack)
        try {
          const stream = await navigator.mediaDevices.getUserMedia({
            audio: true
          });
          micTrack = stream.getAudioTracks()[0];
        } catch (e3) {
          (0, $7afbbd59ebaa42bf$export$af88d00dbe7f521).error("Failed to get mic track. OpenAI requires audio on initial connection.", e3);
          throw new (0, $8ead7b33b8402751$export$59b4786f333aac02)("Failed to get mic track. OpenAI requires audio on initial connection.");
        }
      this._senders["audio"] = this._openai_cxn.addTrack(micTrack);
    }
    await this._negotiateConnection();
  }
  async _disconnectLLM() {
    this._cleanup();
  }
  _attachDeviceListeners() {
    this._daily.on("track-started", this._handleTrackStarted.bind(this));
    this._daily.on("track-stopped", this._handleTrackStopped.bind(this));
    this._daily.on("available-devices-updated", this._handleAvailableDevicesUpdated.bind(this));
    this._daily.on("selected-devices-updated", this._handleSelectedDevicesUpdated.bind(this));
    this._daily.on("local-audio-level", this._handleLocalAudioLevel.bind(this));
  }
  _attachLLMListeners() {
    if (!this._openai_cxn) {
      (0, $7afbbd59ebaa42bf$export$af88d00dbe7f521).error("_attachLLMListeners called before the websocket is initialized. Be sure to call initializeLLM() first.");
      return;
    }
    this._openai_cxn.ontrack = (e3) => {
      (0, $7afbbd59ebaa42bf$export$af88d00dbe7f521).debug("[openai] got track from openai", e3);
      this._botTracks[e3.track.kind] = e3.track;
      this._callbacks.onTrackStarted?.(e3.track, $4e887b6dcd7ec3e7$var$botParticipant());
    };
    if (this._openai_channel) {
      (0, $7afbbd59ebaa42bf$export$af88d00dbe7f521).warn('closing existing data channel "oai-events"');
      this._openai_channel.close();
      this._openai_channel = null;
    }
    const dc3 = this._openai_cxn.createDataChannel("oai-events");
    dc3.addEventListener("message", (e3) => {
      const realtimeEvent = JSON.parse(e3.data);
      this._handleOpenAIMessage(realtimeEvent);
    });
    this._openai_channel = dc3;
    this._openai_cxn.onconnectionstatechange = (e3) => {
      const state = e3.target?.connectionState;
      (0, $7afbbd59ebaa42bf$export$af88d00dbe7f521).debug(`connection state changed to ${state.toUpperCase()}`);
      switch (state) {
        case "closed":
        case "failed":
          this.state = "error";
          if (this._botIsReadyResolve) {
            this._botIsReadyResolve.reject("Connection to OpenAI failed. Check your API key.");
            this._botIsReadyResolve = null;
          } else
            this._callbacks.onError?.((0, $b48f893ed1354c1e$export$69aa9ab0334b212).error(`Connection to OpenAI ${state}`, true));
          break;
      }
    };
    this._openai_cxn.onicecandidateerror = (e3) => {
      (0, $7afbbd59ebaa42bf$export$af88d00dbe7f521).error("ice candidate error", e3);
    };
  }
  async _negotiateConnection() {
    const cxn = this._openai_cxn;
    const service_options = this._service_options;
    const apiKey = service_options.api_key;
    if (!apiKey) {
      (0, $7afbbd59ebaa42bf$export$af88d00dbe7f521).error("!!! No API key provided in service_options");
      return;
    }
    try {
      const offer = await cxn.createOffer();
      await cxn.setLocalDescription(offer);
      const model = service_options?.model ?? $4e887b6dcd7ec3e7$var$MODEL;
      const sdpResponse = await fetch(`${$4e887b6dcd7ec3e7$var$BASE_URL}?model=${model}`, {
        method: "POST",
        body: offer.sdp,
        headers: {
          Authorization: `Bearer ${apiKey}`,
          "Content-Type": "application/sdp"
        }
      });
      const answer = {
        type: "answer",
        sdp: await sdpResponse.text()
      };
      await cxn.setRemoteDescription(answer);
    } catch (error) {
      const msg = `Failed to connect to LLM: ${error}`;
      (0, $7afbbd59ebaa42bf$export$af88d00dbe7f521).error(msg);
      this.state = "error";
      throw new (0, $8ead7b33b8402751$export$e0624a511a2c4e9)(msg);
    }
  }
  _cleanup() {
    this._openai_channel?.close();
    this._openai_channel = null;
    this._openai_cxn?.close();
    this._openai_cxn = null;
    this._senders = {};
    this._botTracks = {};
  }
  _updateSession() {
    if (!this._channelReady())
      return;
    const service_options = this._service_options;
    const session_config = service_options?.settings ?? {};
    if (session_config.input_audio_transcription === void 0)
      session_config.input_audio_transcription = {
        model: "gpt-4o-transcribe"
      };
    (0, $7afbbd59ebaa42bf$export$af88d00dbe7f521).debug("updating session", session_config);
    this._openai_channel.send(JSON.stringify({
      type: "session.update",
      session: session_config
    }));
    if (service_options?.initial_messages)
      this._sendTextInput(service_options.initial_messages, true);
  }
  async _handleOpenAIMessage(msg) {
    const type = msg.type;
    switch (type) {
      case "error":
        (0, $7afbbd59ebaa42bf$export$af88d00dbe7f521).warn("openai error", msg);
        break;
      case "session.created":
        this.state = "ready";
        if (this._botIsReadyResolve) {
          this._botIsReadyResolve.resolve();
          this._botIsReadyResolve = null;
        }
        this._updateSession();
        break;
      case "input_audio_buffer.speech_started":
        this._callbacks.onUserStartedSpeaking?.();
        break;
      case "input_audio_buffer.speech_stopped":
        this._callbacks.onUserStoppedSpeaking?.();
        break;
      case "conversation.item.input_audio_transcription.completed":
        this._callbacks.onUserTranscript?.({
          text: msg.transcript,
          final: true,
          timestamp: Date.now().toString(),
          user_id: "user"
        });
        break;
      case "response.content_part.added":
        if (msg?.part?.type === "audio")
          this._callbacks.onBotStartedSpeaking?.();
        break;
      case "output_audio_buffer.cleared":
      case "output_audio_buffer.stopped":
        this._callbacks.onBotStoppedSpeaking?.();
        break;
      case "response.audio_transcript.delta":
        this._callbacks.onBotTtsText?.({
          text: msg.delta
        });
        break;
      case "response.audio_transcript.done":
        this._callbacks.onBotTranscript?.({
          text: msg.transcript
        });
        break;
      case "response.function_call_arguments.done":
        {
          let data = {
            function_name: msg.name,
            tool_call_id: msg.call_id,
            args: JSON.parse(msg.arguments)
          };
          this._onMessage({
            type: (0, $0908f693e3e0724c$export$441bcd2e10762760).LLM_FUNCTION_CALL,
            data
          });
        }
        break;
      case "response.function_call_arguments.delta":
      default:
        (0, $7afbbd59ebaa42bf$export$af88d00dbe7f521).debug("ignoring openai message", msg);
    }
  }
  async _handleTrackStarted(ev) {
    const sender = this._senders[ev.track.kind];
    if (sender) {
      if (sender.track?.id !== ev.track.id)
        sender.replaceTrack(ev.track);
    } else
      this._senders[ev.track.kind] = this._openai_cxn.addTrack(ev.track);
    this._callbacks.onTrackStarted?.(ev.track, ev.participant ? $4e887b6dcd7ec3e7$var$dailyParticipantToParticipant(ev.participant) : void 0);
  }
  async _handleTrackStopped(ev) {
    this._callbacks.onTrackStopped?.(ev.track, ev.participant ? $4e887b6dcd7ec3e7$var$dailyParticipantToParticipant(ev.participant) : void 0);
  }
  _handleAvailableDevicesUpdated(ev) {
    this._callbacks.onAvailableCamsUpdated?.(ev.availableDevices.filter((d3) => d3.kind === "videoinput"));
    this._callbacks.onAvailableMicsUpdated?.(ev.availableDevices.filter((d3) => d3.kind === "audioinput"));
    this._callbacks.onAvailableSpeakersUpdated?.(ev.availableDevices.filter((d3) => d3.kind === "audiooutput"));
  }
  _handleSelectedDevicesUpdated(ev) {
    if (this._selectedCam?.deviceId !== ev.devices.camera) {
      this._selectedCam = ev.devices.camera;
      this._callbacks.onCamUpdated?.(ev.devices.camera);
    }
    if (this._selectedMic?.deviceId !== ev.devices.mic) {
      this._selectedMic = ev.devices.mic;
      this._callbacks.onMicUpdated?.(ev.devices.mic);
    }
    if (this._selectedSpeaker?.deviceId !== ev.devices.speaker) {
      this._selectedSpeaker = ev.devices.speaker;
      this._callbacks.onSpeakerUpdated?.(ev.devices.speaker);
    }
  }
  _handleLocalAudioLevel(ev) {
    this._callbacks.onLocalAudioLevel?.(ev.audioLevel);
  }
  _sendTextInput(messages, runImmediately = false) {
    if (!this._channelReady())
      return;
    messages.forEach((m3) => {
      const event = {
        type: "conversation.item.create",
        item: {
          type: "message",
          role: m3.role,
          content: [
            {
              type: m3.role === "assistant" ? "text" : "input_text",
              text: m3.content
            }
          ]
        }
      };
      this._openai_channel.send(JSON.stringify(event));
    });
    if (runImmediately)
      this._run();
  }
  _sendFunctionCallResult(data) {
    if (!this._channelReady() || !data.result)
      return;
    const event = {
      type: "conversation.item.create",
      item: {
        type: "function_call_output",
        call_id: data.tool_call_id,
        output: JSON.stringify(data.result)
      }
    };
    this._openai_channel.send(JSON.stringify(event));
    this._run();
  }
  _run() {
    if (!this._channelReady)
      return;
    this._openai_channel.send(JSON.stringify({
      type: "response.create"
    }));
  }
  _channelReady() {
    if (!this._openai_channel)
      return false;
    return this._openai_channel?.readyState === "open";
  }
};
var $4e887b6dcd7ec3e7$var$dailyParticipantToParticipant = (p3) => ({
  id: p3.user_id,
  local: p3.local,
  name: p3.user_name
});
var $4e887b6dcd7ec3e7$var$botParticipant = () => ({
  id: "bot",
  local: false,
  name: "Bot"
});

// src/transport/transport.ts
var TransportFactory = class {
  static isBrowser() {
    return typeof window !== "undefined" && typeof window.document !== "undefined";
  }
  static create(transportType, options) {
    if (!this.isBrowser()) {
      throw new Error("Transport can only be created in a browser environment");
    }
    switch (transportType) {
      case "websocket":
        return new WebSocketTransport(options);
      case "daily":
        return new $683f111f61e07358$export$b1ca982aa1e488c1(options);
      case "webrtc":
        return new $b31644dc78dca54a$export$62043589d053a879(options);
      case "gemini":
        return new $d4cf498bb51af8a5$export$bef67da0c82ecefe(options);
      case "openai":
        return new $4e887b6dcd7ec3e7$export$60a765086a8f0478(options);
      default:
        throw new Error(`Unsupported transport type: ${transportType}`);
    }
  }
  static getAvailableTransports() {
    return ["websocket", "daily", "webrtc", "gemini", "openai"];
  }
};
var TransportManager = class {
  constructor(transportType, options) {
    this.transport = null;
    this.transportType = transportType;
    this.transportOptions = options;
  }
  ensureTransport() {
    if (!this.transport) {
      this.transport = TransportFactory.create(this.transportType, this.transportOptions);
    }
    return this.transport;
  }
  async initialize(options, messageHandler) {
    return this.ensureTransport().initialize(options, messageHandler);
  }
  async connect(authBundle, abortController) {
    return this.ensureTransport().connect(authBundle, abortController);
  }
  async disconnect() {
    if (this.transport) {
      return this.transport.disconnect();
    }
  }
  get instance() {
    return this.ensureTransport();
  }
  get state() {
    return this.ensureTransport().state;
  }
  tracks() {
    return this.ensureTransport().tracks();
  }
  async enableMic(enable) {
    await this.ensureTransport().enableMic(enable);
  }
  async enableCam(enable) {
    await this.ensureTransport().enableCam(enable);
  }
  enableScreenShare(enable) {
    this.ensureTransport().enableScreenShare(enable);
  }
  get isSharingScreen() {
    return this.ensureTransport().isSharingScreen;
  }
  get isCamEnabled() {
    return this.ensureTransport().isCamEnabled;
  }
  get isMicEnabled() {
    return this.ensureTransport().isMicEnabled;
  }
  sendMessage(message) {
    this.ensureTransport().sendMessage(message);
  }
};

// src/utils/utils.ts
async function createRTVIClient(transportType, customOptions) {
  console.log(`Debug: Transport type chosen: ${transportType}`);
  let transport;
  switch (transportType) {
    case "websocket":
      transport = TransportFactory.create("websocket", {
        serializer: new ProtobufFrameSerializer(),
        recorderSampleRate: 16e3
      });
      break;
    case "webrtc":
      transport = TransportFactory.create("webrtc", {
        iceServers: [
          { urls: "stun:stun.l.google.com:19302" },
          { urls: "stun:stun1.l.google.com:19302" }
        ]
      });
      break;
    case "daily":
      transport = TransportFactory.create("daily", {});
      break;
    case "gemini":
      transport = TransportFactory.create("gemini", {
        api_key: process.env.GEMINI_API_KEY || ""
      });
      break;
    case "openai":
      transport = TransportFactory.create("openai", {
        api_key: process.env.OPENAI_API_KEY || ""
      });
      break;
    default:
      throw new Error(`Invalid transport type: ${transportType}`);
  }
  console.log(`Transport chosen: ${transportType}`);
  const defaultOptions = {
    transport,
    params: {
      baseUrl: "http://localhost:8000",
      endpoints: {
        connect: transportType === "webrtc" ? "/api/offer" : "/connect"
      },
      audio: {
        sampleRate: 16e3,
        numChannels: 1,
        encoding: "raw",
        format: "protobuf",
        outputSampleRate: 16e3,
        outputChannels: 1
      },
      requestData: {
        transportType,
        type: "offer",
        sdp: "sdp"
      }
    },
    enableMic: true,
    enableCam: false,
    timeout: 15e3
  };
  const options = customOptions ? {
    ...defaultOptions,
    ...customOptions,
    // Handle nested params object separately to allow partial overrides
    params: customOptions.params ? {
      ...defaultOptions.params,
      ...customOptions.params,
      // Handle nested endpoints object
      endpoints: customOptions.params.endpoints && typeof customOptions.params.endpoints === "object" ? { ...defaultOptions.params.endpoints || {}, ...customOptions.params.endpoints } : defaultOptions.params.endpoints,
      // Handle nested audio object
      audio: customOptions.params.audio && typeof customOptions.params.audio === "object" ? { ...defaultOptions.params.audio || {}, ...customOptions.params.audio } : defaultOptions.params.audio,
      // Handle nested requestData object
      requestData: customOptions.params.requestData && typeof customOptions.params.requestData === "object" ? { ...defaultOptions.params.requestData || {}, ...customOptions.params.requestData } : defaultOptions.params.requestData
      // Note: We don't need to spread customOptions.params again as it's already spread above
    } : defaultOptions.params,
    // Ensure callbacks are properly merged if provided
    callbacks: customOptions.callbacks && typeof customOptions.callbacks === "object" ? { ...defaultOptions.callbacks || {}, ...customOptions.callbacks } : defaultOptions.callbacks,
    // Preserve transport if provided in customOptions
    transport: customOptions.transport || defaultOptions.transport,
    // Preserve other top-level options
    timeout: customOptions.timeout !== void 0 ? customOptions.timeout : defaultOptions.timeout,
    enableMic: customOptions.enableMic !== void 0 ? customOptions.enableMic : defaultOptions.enableMic,
    enableCam: customOptions.enableCam !== void 0 ? customOptions.enableCam : defaultOptions.enableCam,
    // Include customConnectHandler if provided
    customConnectHandler: customOptions.customConnectHandler || defaultOptions.customConnectHandler
  } : defaultOptions;
  const client = new Client(options);
  return client;
}

// src/index.ts
import { WebSocketTransport as WebSocketTransport2, ProtobufFrameSerializer as ProtobufFrameSerializer2 } from "@pipecat-ai/websocket-transport";
export {
  $8ead7b33b8402751$export$be839f0100cd3132 as ActionEndpointNotSetError,
  $8ead7b33b8402751$export$885fb96b850e8fbb as BotNotReadyError,
  Client,
  $8ead7b33b8402751$export$4eda4fd287fbbca5 as ConfigUpdateError,
  $8ead7b33b8402751$export$c67992fa684a81a6 as ConnectionTimeoutError,
  $683f111f61e07358$export$b1ca982aa1e488c1 as DailyTransport,
  $d4cf498bb51af8a5$export$bef67da0c82ecefe as GeminiLiveWebsocketTransport,
  $0908f693e3e0724c$export$43cdfb26f790451 as LLMActionType,
  $0908f693e3e0724c$export$3cf39a62d076dd5c as LLMHelper,
  $0908f693e3e0724c$export$441bcd2e10762760 as LLMMessageType,
  $7afbbd59ebaa42bf$export$243e62d78d3b544d as LogLevel,
  $b48f893ed1354c1e$export$e9a960646cc432aa as MessageDispatcher,
  $4e887b6dcd7ec3e7$export$60a765086a8f0478 as OpenAIRealTimeWebRTCTransport,
  ProtobufFrameSerializer2 as ProtobufFrameSerializer,
  $b48f893ed1354c1e$export$378529d7a8bead8b as RTVIActionRequest,
  $a7c324a73303ad55$export$fa42a01c1d60f4a1 as RTVIClient,
  $7614fb2168c523cc$export$23bc637255b2a471 as RTVIClientHelper,
  $8ead7b33b8402751$export$59b4786f333aac02 as RTVIError,
  $f9fc0c57b9aaed9c$export$6b4624d233c61fcb as RTVIEvent,
  $b48f893ed1354c1e$export$69aa9ab0334b212 as RTVIMessage,
  $b48f893ed1354c1e$export$38b3db05cbf0e240 as RTVIMessageType,
  $b48f893ed1354c1e$export$882b13c7fda338f5 as RTVI_MESSAGE_LABEL,
  $b31644dc78dca54a$export$62043589d053a879 as SmallWebRTCTransport,
  $8ead7b33b8402751$export$e7544ab812238a61 as StartBotError,
  $4086f06442fcb7d7$export$86495b081fef8e52 as Transport,
  TransportFactory,
  TransportManager,
  $8ead7b33b8402751$export$e0624a511a2c4e9 as TransportStartError,
  $4086f06442fcb7d7$export$82b6ede160a64a3c as TransportWrapper,
  WebSocketTransport2 as WebSocketTransport,
  createRTVIClient,
  $4bb349f22aee5185$export$8728b60ea57bf43e as httpActionGenerator,
  $7afbbd59ebaa42bf$export$af88d00dbe7f521 as logger
};
/*! Bundled license information:

shallow-clone/index.js:
  (*!
   * shallow-clone <https://github.com/jonschlinkert/shallow-clone>
   *
   * Copyright (c) 2015-present, Jon Schlinkert.
   * Released under the MIT License.
   *)

isobject/index.js:
  (*!
   * isobject <https://github.com/jonschlinkert/isobject>
   *
   * Copyright (c) 2014-2017, Jon Schlinkert.
   * Released under the MIT License.
   *)

is-plain-object/index.js:
  (*!
   * is-plain-object <https://github.com/jonschlinkert/is-plain-object>
   *
   * Copyright (c) 2014-2017, Jon Schlinkert.
   * Released under the MIT License.
   *)

@daily-co/daily-js/dist/daily-esm.js:
  (*!
   * Bowser - a browser detector
   * https://github.com/lancedikson/bowser
   * MIT License | (c) Dustin Diaz 2012-2015
   * MIT License | (c) Denis Demchenko 2015-2019
   *)

@daily-co/daily-js/dist/daily-esm.js:
  (*!
   * Bowser - a browser detector
   * https://github.com/lancedikson/bowser
   * MIT License | (c) Dustin Diaz 2012-2015
   * MIT License | (c) Denis Demchenko 2015-2019
   *)
*/
//# sourceMappingURL=index.js.map