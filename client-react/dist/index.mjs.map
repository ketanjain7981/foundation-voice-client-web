{"version":3,"sources":["../src/index.ts","../src/components/chats/DebugDisplay.tsx","../src/components/chats/ChatWindow.tsx","../src/components/chats/ChatContext.tsx","../src/components/controls/MicControl.tsx","../src/utils/utils.ts","../src/components/provider/CAIProvider.tsx","../src/components/visualizer/audio-visualizer.tsx","../src/hooks/useConnectionManager.ts","../src/hooks/useConversationState.ts","../src/utils/logger.ts","../src/components/controls/Connect.tsx"],"sourcesContent":["// Re-export all components and hooks from @pipecat-ai/client-react\nexport * from '@pipecat-ai/client-react';\nexport { DebugDisplay } from \"./components/chats/DebugDisplay\";\nexport { ChatWindow, } from \"./components/chats/ChatWindow\";\nexport { MicControl } from './components/controls/MicControl';\nexport { CAIProvider } from './components/provider/CAIProvider';\nexport { AudioVisualizer } from \"./components/visualizer/audio-visualizer\";\nexport { useConnectionManager } from './hooks/useConnectionManager';\nexport { useConversationState } from './hooks/useConversationState';\nexport { ChatProvider, useChat } from \"./components/chats/ChatContext\";\nexport { ConnectionButton } from './components/controls/Connect';\n// Export types\nexport * from './types';\nexport { log } from './utils/logger';\nexport { cn } from './utils/utils';\n","\"use client\"\n\nimport { useRef, useCallback } from 'react';\nimport {\n  Participant,\n  RTVIEvent,\n  TransportState,\n  TranscriptData,\n  BotLLMTextData,\n} from '@think41/foundation-voice-client-js';\nimport { useRTVIClient, useRTVIClientEvent } from '@pipecat-ai/client-react';\n\nexport interface DebugDisplayProps {\n  className?: string;\n}\n\nexport function DebugDisplay({ className = \"\" }: DebugDisplayProps) {\n  const debugLogRef = useRef<HTMLDivElement>(null);\n  const client = useRTVIClient();\n\n  const log = useCallback((message: string) => {\n    if (!debugLogRef.current) return;\n\n    const entry = document.createElement('div');\n    entry.className = 'text-xs font-mono py-1 border-b border-border/50';\n    entry.textContent = `${new Date().toLocaleTimeString()} - ${message}`;\n\n    // Add styling based on message type\n    if (message.startsWith('User: ')) {\n      entry.className += ' text-blue-500';\n    } else if (message.startsWith('Bot: ')) {\n      entry.className += ' text-green-500';\n    } else if (message.includes('error') || message.includes('Error')) {\n      entry.className += ' text-red-500';\n    } else if (message.includes('warning') || message.includes('Warning')) {\n      entry.className += ' text-yellow-500';\n    }\n\n    debugLogRef.current.appendChild(entry);\n    debugLogRef.current.scrollTop = debugLogRef.current.scrollHeight;\n  }, []);\n\n  // Log transport state changes\n  useRTVIClientEvent(\n    RTVIEvent.TransportStateChanged,\n    useCallback(\n      (state: TransportState) => {\n        log(`Transport state changed: ${state}`);\n      },\n      [log]\n    )\n  );\n\n  // Log bot connection events\n  useRTVIClientEvent(\n    RTVIEvent.BotConnected,\n    useCallback(\n      (participant?: Participant) => {\n        log(`Bot connected: ${participant?.name || 'unknown'}`);\n      },\n      [log]\n    )\n  );\n\n  useRTVIClientEvent(\n    RTVIEvent.BotDisconnected,\n    useCallback(\n      (participant?: Participant) => {\n        log(`Bot disconnected: ${participant?.name || 'unknown'}`);\n      },\n      [log]\n    )\n  );\n\n  // Log track events\n  useRTVIClientEvent(\n    RTVIEvent.TrackStarted,\n    useCallback(\n      (track: MediaStreamTrack, participant?: Participant) => {\n        log(`${participant?.name || 'Unknown'} started ${track.kind} track`);\n      },\n      [log]\n    )\n  );\n\n  useRTVIClientEvent(\n    RTVIEvent.TrackStopped,\n    useCallback(\n      (track: MediaStreamTrack, participant?: Participant) => {\n        log(`${participant?.name || 'Unknown'} stopped ${track.kind} track`);\n      },\n      [log]\n    )\n  );\n\n  // Log bot ready state and check tracks\n  useRTVIClientEvent(\n    RTVIEvent.BotReady,\n    useCallback(() => {\n      log(`Bot is ready`);\n\n      if (!client) return;\n\n      const tracks = client.tracks();\n      log(\n        `Available tracks: ${JSON.stringify({\n          local: {\n            audio: !!tracks.local.audio,\n            video: !!tracks.local.video,\n          },\n          bot: {\n            audio: !!tracks.bot?.audio,\n            video: !!tracks.bot?.video,\n          },\n        })}`\n      );\n    }, [client, log])\n  );\n\n  // Log transcripts\n  useRTVIClientEvent(\n    RTVIEvent.UserTranscript,\n    useCallback(\n      (data: TranscriptData) => {\n        // Only log final transcripts\n        if (data.final) {\n          log(`User: ${data.text}`);\n        }\n      },\n      [log]\n    )\n  );\n\n  useRTVIClientEvent(\n    RTVIEvent.BotTranscript,\n    useCallback(\n      (data: BotLLMTextData) => {\n        log(`Bot: ${data.text}`);\n      },\n      [log]\n    )\n  );\n\n  return (\n    <div className={`border rounded-lg overflow-hidden bg-background ${className}`}>\n      <div className=\"p-3 border-b bg-muted/50\">\n        <h3 className=\"font-medium\">Debug Console</h3>\n      </div>\n      <div \n        ref={debugLogRef} \n        className=\"h-40 overflow-y-auto p-3 text-sm bg-background\"\n      />\n    </div>\n  );\n}\n\nexport default DebugDisplay;\n","\"use client\"\n\nimport { useRef, useState, useCallback, useEffect } from 'react';\nimport {\n  RTVIEvent,\n  TranscriptData,\n  BotLLMTextData,\n  LLMHelper,\n} from '@think41/foundation-voice-client-js';\nimport { useRTVIClient, useRTVIClientEvent } from '@pipecat-ai/client-react';\nimport { useChat } from './ChatContext'; // Import the chat context\n\nexport interface ChatWindowProps {\n  className?: string;\n  initialMessages?: Array<{\n    type: 'user' | 'bot';\n    text: string;\n  }>;\n}\n\nexport function ChatWindow({ \n  className = \"w-full h-full\",\n  initialMessages = [] \n}: ChatWindowProps) {\n  // Use shared chat context instead of local state\n  const { messages, addMessage, clearMessages } = useChat();\n  const [inputValue, setInputValue] = useState('');\n  const [isConnected, setIsConnected] = useState(false);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const client = useRTVIClient();\n  const hasInitialized = useRef(false);\n\n  const scrollToBottom = useCallback(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  }, []);\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages, scrollToBottom]);\n\n  useRTVIClientEvent(\n    RTVIEvent.TransportStateChanged,\n    useCallback((state: string) => {\n      setIsConnected(state === 'ready');\n    }, [])\n  );\n\n  useRTVIClientEvent(\n    RTVIEvent.UserTranscript,\n    useCallback(\n      (data: TranscriptData) => {\n        if (data.final && data.text.trim()) {\n          console.log(\"UserTranscript\" , data);\n          // In this UI, 'user' type corresponds to purple bubbles on the right\n          addMessage('user', data.text);\n        }\n      },\n      [addMessage]\n    )\n  );\n\n  useRTVIClientEvent(\n    RTVIEvent.BotTranscript,\n    useCallback(\n      (data: BotLLMTextData) => {\n        console.log(\"BotTranscript\", data);\n        if (data.text.trim()) {\n          addMessage('bot', data.text);\n        }\n      },\n      [addMessage]\n    )\n  );\n\n  // Handle initial messages\n  useEffect(() => {\n    if (!hasInitialized.current && initialMessages.length > 0) {\n      clearMessages();\n      initialMessages.forEach(msg => {\n        addMessage(msg.type, msg.text);\n      });\n      hasInitialized.current = true;\n    }\n  }, [initialMessages, addMessage, clearMessages]);\n\n  const sendTextMessage = useCallback(async () => {\n    if (!client || !inputValue.trim() || !isConnected) return;\n  \n    const messageText = inputValue.trim();\n    setInputValue('');\n    addMessage('user', messageText);\n  \n    try {\n      const llmHelper = client.getHelper<LLMHelper>(\"llm\");\n      if (!llmHelper) {\n        throw new Error(\"LLM helper is not available\");\n      }\n      await llmHelper.appendToMessages(\n        {\n          role: \"user\",\n          content: messageText,\n        },\n        true  \n      );\n\n    } catch (error) {\n      console.error('Error sending message:', error);\n      addMessage('bot', 'Sorry, I encountered an error processing your message. Please try again.');\n    }\n  }, [client, inputValue, isConnected, addMessage]);\n\n  const handleSubmit = useCallback((e: React.FormEvent) => {\n    e.preventDefault();\n    sendTextMessage();\n  }, [sendTextMessage]);\n\n  const handleKeyPress = useCallback((e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      sendTextMessage();\n    }\n  }, [sendTextMessage]);\n\n  return (\n    <div className={`flex flex-col bg-[oklch(0.278_0.033_256.848)] overflow-hidden ${className}`}>\n      {/* Messages Container */}\n      <div className=\"flex-1 overflow-y-auto p-4 sm:p-6 space-y-4 min-h-0 w-[calc(100%+1rem)] -mr-4 pr-4 no-scrollbar\">\n        <style dangerouslySetInnerHTML={{ __html: `\n          /* Hide scrollbar for Chrome, Safari and Opera */\n          .no-scrollbar::-webkit-scrollbar {\n            display: none;\n          }\n          /* Hide scrollbar for IE, Edge and Firefox */\n          .no-scrollbar {\n            -ms-overflow-style: none;  /* IE and Edge */\n            scrollbar-width: none;  /* Firefox */\n          }\n        `}} />\n        {messages.length === 0 ? (\n          <div className=\"text-center text-neutral-500 py-8\">\n            Start a conversation by typing a message below or speaking.\n          </div>\n        ) : (\n          messages.map((message) => (\n            <div\n              key={message.id}\n              className={`flex flex-col ${\n                message.type === 'user' ? 'items-end' : 'items-start'\n              }`}\n            >\n              {/* Sender Name */}\n              <span className={`text-xs font-medium mb-1 ${\n                message.type === 'user' ? 'text-violet-300' : 'text-neutral-300'\n              }`}>\n                {message.type === 'user' ? 'You' : 'Assistant'}\n              </span>\n              \n              {/* Message Bubble and Timestamp */}\n              <div className=\"flex items-start gap-2.5\">\n                <div\n                  className={`flex flex-col max-w-[75%] sm:max-w-[70%] ${\n                    message.type === 'user' ? 'items-end' : 'items-start'\n                  }`}\n                >\n                  <div\n                    className={`px-3 py-2 text-sm ${\n                      message.type === 'user'\n                        ? 'bg-violet-600 text-white rounded-l-lg rounded-br-lg'\n                        : 'bg-white text-neutral-800 rounded-r-lg rounded-bl-lg'\n                    }`}\n                  >\n                    <p>{message.text}</p>\n                  </div>\n                  <p className=\"text-xs text-neutral-400 mt-1 px-1\">\n                    {message.timestamp.toLocaleTimeString('en-US', { \n                      hour: 'numeric', \n                      minute: '2-digit', \n                      hour12: true \n                    }).toLowerCase()}\n                  </p>\n                </div>\n              </div>\n            </div>\n          ))\n        )}\n        <div ref={messagesEndRef} />\n      </div>\n\n      {/* Message Input */}\n      <div className=\"p-4 border-t border-neutral-700 bg-[oklch(0.278_0.033_256.848)]\">\n        <form onSubmit={handleSubmit} className=\"flex gap-2 items-center\">\n          <input\n            type=\"text\"\n            value={inputValue}\n            onChange={(e) => setInputValue(e.target.value)}\n            onKeyPress={handleKeyPress}\n            placeholder={\n              isConnected \n                ? \"Type your message...\" \n                : \"Connecting to chat...\"\n            }\n            disabled={!isConnected}\n            className=\"flex-1 px-3 py-2 border border-neutral-600 rounded-md bg-neutral-800 text-neutral-200 placeholder:text-neutral-500 focus:outline-none focus:ring-1 focus:ring-violet-500 focus:border-violet-500 disabled:opacity-60 disabled:cursor-not-allowed\"\n          />\n          <button\n            type=\"submit\"\n            disabled={!isConnected || !inputValue.trim()}\n            className=\"px-4 py-2 bg-violet-600 text-white rounded-md hover:bg-violet-700 focus:outline-none focus:ring-2 focus:ring-violet-500 focus:ring-offset-2 focus:ring-offset-neutral-800 disabled:opacity-50 disabled:cursor-not-allowed transition-colors\"\n          >\n            Send\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n}\n\nexport default ChatWindow;","\"use client\";\n\nimport React, { createContext, useContext, useState, useCallback, ReactNode } from 'react';\n\nexport interface ChatMessage {\n  id: string;\n  type: 'user' | 'bot';\n  text: string;\n  timestamp: Date;\n}\n\ninterface ChatContextType {\n  messages: ChatMessage[];\n  addMessage: (type: 'user' | 'bot', text: string) => void;\n  clearMessages: () => void;\n}\n\nconst ChatContext = createContext<ChatContextType | undefined>(undefined);\n\nexport function ChatProvider({ children }: { children: ReactNode }) {\n  const [messages, setMessages] = useState<ChatMessage[]>([]);\n\n  const addMessage = useCallback((type: 'user' | 'bot', text: string) => {\n    const newMessage: ChatMessage = {\n      id: Date.now().toString(),\n      type,\n      text,\n      timestamp: new Date(),\n    };\n    setMessages(prev => [...prev, newMessage]);\n  }, []);\n\n  const clearMessages = useCallback(() => {\n    setMessages([]);\n  }, []);\n\n  return (\n    <ChatContext.Provider value={{ messages, addMessage, clearMessages }}>\n      {children}\n    </ChatContext.Provider>\n  );\n}\n\nexport function useChat() {\n  const context = useContext(ChatContext);\n  if (context === undefined) {\n    throw new Error('useChat must be used within a ChatProvider');\n  }\n  return context;\n}\n","\"use client\";\n\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport { Mic } from \"lucide-react\";\nimport { cn } from \"../../utils/utils\";\nimport { useRTVIClient, useRTVIClientEvent } from \"@pipecat-ai/client-react\";\nimport { RTVIEvent } from \"@think41/foundation-voice-client-js\";\n\ninterface MicControlProps {\n  onStart?: () => void;\n  onStop?: (duration: number) => void;\n  visualizerBars?: number;\n  demoMode?: boolean;\n  demoInterval?: number;\n  className?: string;\n  isActive?: boolean;\n  onChange?: (isActive: boolean) => void;\n}\n\nexport function MicControl({\n  onStart,\n  onStop,\n  visualizerBars = 48,\n  demoMode = false,\n  demoInterval = 3000,\n  className,\n  isActive,\n  onChange,\n}: MicControlProps) {\n  const [internalSubmitted, setInternalSubmitted] = useState(false);\n  const [isConnecting, setIsConnecting] = useState(false);\n  const [time, setTime] = useState(0);\n  const [isClient, setIsClient] = useState(false);\n  const [isDemo, setIsDemo] = useState(demoMode);\n\n  const client = useRTVIClient();\n  \n  // Use external isActive if provided, otherwise use internal state\n  const submitted = isActive !== undefined ? isActive : internalSubmitted;\n\n  useEffect(() => {\n    if (!client) return;\n\n    const handleMicState = async () => {\n      try {\n        const isMicActive = client.isMicEnabled;\n        if (isActive === undefined) {\n          setInternalSubmitted(isMicActive);\n        }\n        onChange?.(isMicActive);\n      } catch (error) {\n        console.error(\"Error getting mic state:\", error);\n      }\n    };\n\n    // Initial state\n    handleMicState();\n\n    // Set up polling for mic state changes\n    const intervalId = setInterval(handleMicState, 1000);\n\n    return () => clearInterval(intervalId);\n  }, [client, isActive, onChange]);\n\n  useEffect(() => {\n    setIsClient(true);\n    \n    // Initialize mic state from client if available\n    const initMicState = async () => {\n      if (client) {\n        try {\n         const micState = client.isMicEnabled;\n          if (isActive === undefined) {\n            setInternalSubmitted(micState);\n          }\n        } catch (error) {\n          console.error(\"Failed to get initial mic state:\", error);\n        }\n      }\n    };\n    \n    initMicState();\n  }, [client, isActive]);\n\n  useEffect(() => {\n    let intervalId: ReturnType<typeof setInterval>;\n\n    if (submitted) {\n      onStart?.();\n      intervalId = setInterval(() => {\n        setTime((t) => t + 1);\n      }, 1000);\n    } else if (time > 0) {\n      onStop?.(time);\n      setTime(0);\n    }\n\n    return () => clearInterval(intervalId);\n  }, [submitted, time, onStart, onStop]);\n\n  useEffect(() => {\n    if (!isDemo) return;\n\n    let timeoutId: ReturnType<typeof setInterval>;\n    const runAnimation = () => {\n      const newState = true;\n      if (onChange) {\n        onChange(newState);\n      } else {\n        setInternalSubmitted(newState);\n      }\n      timeoutId = setTimeout(() => {\n        if (onChange) {\n          onChange(false);\n        } else {\n          setInternalSubmitted(false);\n        }\n        timeoutId = setTimeout(runAnimation, 1000);\n      }, demoInterval);\n    };\n\n    const initialTimeout = setTimeout(runAnimation, 100);\n    return () => {\n      clearTimeout(timeoutId);\n      clearTimeout(initialTimeout);\n    };\n  }, [isDemo, demoInterval, onChange]);\n\n  const formatTime = (seconds: number) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins.toString().padStart(2, \"0\")}:${secs.toString().padStart(2, \"0\")}`;\n  };\n\n  const handleClick = useCallback(async () => {\n    if (isDemo) {\n      setIsDemo(false);\n      if (onChange) {\n        onChange(false);\n      } else {\n        setInternalSubmitted(false);\n      }\n      return;\n    }\n\n    const newState = !submitted;\n\n    try {\n      setIsConnecting(true);\n      \n      if (client) {\n        await client.enableMic(newState);\n      } else if (onChange) {\n        // Fallback to onChange if client is not available\n        onChange(newState);\n      } else {\n        setInternalSubmitted(newState);\n      }\n    } catch (error) {\n      console.error(\"Error toggling mic:\", error);\n      // Revert the state on error\n      if (onChange) {\n        onChange(!newState);\n      } else {\n        setInternalSubmitted(!newState);\n      }\n    } finally {\n      setIsConnecting(false);\n    }\n  }, [client, isDemo, onChange, submitted]);\n\n  return (\n    <div className={cn(\"w-full py-4\", className)}>\n      <div className=\"relative max-w-xl w-full mx-auto flex items-center flex-col gap-2\">\n        <button\n          className={cn(\n            \"group w-16 h-16 rounded-xl flex items-center justify-center transition-colors\",\n            submitted\n              ? \"bg-none\"\n              : \"bg-none hover:bg-black/10 dark:hover:bg-white/10\",\n            isConnecting ? \"opacity-50 cursor-not-allowed\" : \"\"\n          )}\n          type=\"button\"\n          onClick={handleClick}\n          disabled={isConnecting}\n        >\n          {isConnecting ? (\n            <div\n              className=\"w-6 h-6 rounded-sm animate-spin bg-black dark:bg-white cursor-pointer pointer-events-auto\"\n              style={{ animationDuration: \"3s\" }}\n            />\n          ) : submitted ? (\n            <div className=\"w-6 h-6 rounded-full bg-red-500 animate-pulse\" />\n          ) : (\n            <Mic className=\"w-6 h-6 text-black/70 dark:text-white/70\" />\n          )}\n        </button>\n\n        <span\n          className={cn(\n            \"font-mono text-sm transition-opacity duration-300\",\n            submitted || isConnecting\n              ? \"text-black/70 dark:text-white/70\"\n              : \"text-black/30 dark:text-white/30\",\n          )}\n        >\n          {formatTime(time)}\n        </span>\n\n        <div className=\"h-4 w-64 flex items-center justify-center gap-0.5\">\n          {[...Array(visualizerBars)].map((_, i) => (\n            <div\n              key={i}\n              className={cn(\n                \"w-0.5 rounded-full transition-all duration-300\",\n                (submitted || isConnecting)\n                  ? \"bg-black/50 dark:bg-white/50 animate-pulse\"\n                  : \"bg-black/10 dark:bg-white/10 h-1\",\n              )}\n              style={\n                (submitted || isConnecting) && isClient\n                  ? {\n                      height: `${20 + Math.random() * 80}%`,\n                      animationDelay: `${i * 0.05}s`,\n                    }\n                  : undefined\n              }\n            />\n          ))}\n        </div>\n\n        <p className=\"h-4 text-xs text-black/70 dark:text-white/70\">\n          {isConnecting ? \"Processing...\" : submitted ? \"Listening...\" : \"Click to speak\"}\n        </p>\n      </div>\n    </div>\n  );\n}\n","import { clsx, type ClassValue } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}","\"use client\";\n\nimport React from \"react\";\nimport { RTVIClientProvider } from \"@pipecat-ai/client-react\";\nimport {\n  createRTVIClient,\n  RTVIClientOptions,\n  Client,\n  RTVIEvent,\n  LLMHelper,\n} from \"@think41/foundation-voice-client-js\";\nimport { type PropsWithChildren, useEffect, useState, useCallback } from \"react\";\n\nexport interface CAIProviderProps extends PropsWithChildren {\n  clientType?: 'websocket' | 'daily' | 'webrtc' | string;\n  options?: Partial<RTVIClientOptions>;\n  onLLMJsonCompletion?: (jsonString: string) => void;\n  onLLMFunctionCall?: (func: any) => void;\n}\n\nexport function CAIProvider({ \n  children, \n  clientType = 'websocket', \n  options,\n  onLLMJsonCompletion,\n  onLLMFunctionCall,\n}: CAIProviderProps) {\n  const [client, setClient] = useState<Client | undefined>();\n\n  // Initialize LLM helper\n  const initializeLLMHelper = useCallback((client: Client) => {\n    if (!client.getHelper(\"llm\")) {\n      const llmHelper = new LLMHelper({\n        callbacks: {\n          onLLMJsonCompletion: (jsonString) => {\n            console.log('LLM JSON Completion:', jsonString);\n            onLLMJsonCompletion?.(jsonString);\n          },\n          onLLMFunctionCall: (func) => {\n            console.log('LLM Function Call:', func);\n            onLLMFunctionCall?.(func);\n          }\n        }\n      });\n      client.registerHelper(\"llm\", llmHelper);\n    }\n  }, [onLLMJsonCompletion, onLLMFunctionCall]);\n\n  useEffect(() => {\n    const fetchClient = async () => {\n      const client = await createRTVIClient(clientType, options);\n      initializeLLMHelper(client);\n      setClient(client);\n    };\n    fetchClient();\n  }, [clientType, options, initializeLLMHelper]);\n\n  if (!client) return <>{children}</>;\n\n  return <RTVIClientProvider client={client}>{children}</RTVIClientProvider>;\n}\n\nexport default CAIProvider;","\"use client\"\n\nimport { useEffect, useRef, useState } from \"react\"\nimport { cn } from \"../../utils/utils\"\nimport { useRTVIClientMediaTrack, useRTVIClientEvent } from \"@pipecat-ai/client-react\"\nimport { RTVIEvent } from \"@think41/foundation-voice-client-js\"\n\ninterface AudioVisualizerProps {\n  participantType?: \"bot\" | \"local\"\n  barCount?: number\n  barGap?: number\n  barWidth?: number\n  barRadius?: number\n  barColor?: string\n  barGlowColor?: string\n  barMinHeight?: number\n  barMaxHeight?: number\n  sensitivity?: number\n  className?: string\n  containerClassName?: string\n  // New customization props\n  width?: string | number\n  height?: string | number\n  backgroundColor?: string\n  animationSpeed?: number\n  animationStyle?: \"wave\" | \"equalizer\" | \"pulse\"\n  responsive?: boolean\n  visualizerStyle?: \"bars\" | \"circles\" | \"line\"\n  glowIntensity?: number\n  containerStyle?: React.CSSProperties\n  canvasStyle?: React.CSSProperties\n}\n\nexport const AudioVisualizer = ({\n  participantType = \"bot\",\n  barCount = 5,\n  barGap = 10,\n  barWidth = 40,\n  barRadius = 20,\n  barColor = \"#FFFFFF\",\n  barGlowColor = \"rgba(255, 255, 255, 0.7)\",\n  barMinHeight = 20,\n  barMaxHeight = 100,\n  sensitivity = 1.5,\n  className,\n  containerClassName,\n  // Initialize new props with defaults\n  width = \"100%\",\n  height = \"100%\",\n  backgroundColor = \"transparent\",\n  animationSpeed = 0.1,\n  animationStyle = \"wave\",\n  responsive = true,\n  visualizerStyle = \"bars\",\n  glowIntensity = 15,\n  containerStyle = {},\n  canvasStyle = {},\n}: AudioVisualizerProps) => {\n  const canvasRef = useRef<HTMLCanvasElement>(null)\n  const [audioContext, setAudioContext] = useState<AudioContext | null>(null)\n  const [analyser, setAnalyser] = useState<AnalyserNode | null>(null)\n  const [dataArray, setDataArray] = useState<Uint8Array | null>(null)\n  const animationRef = useRef<number>(0)\n  const [isActive, setIsActive] = useState(false)\n  const [isBotSpeaking, setIsBotSpeaking] = useState(false)\n\n  // Use the Pipecat SDK hook to get the audio track\n  const audioTrack = useRTVIClientMediaTrack(\"audio\", participantType)\n\n  // Use RTVI client events for bot speaking\n  useRTVIClientEvent(\n    RTVIEvent.BotStartedSpeaking,\n    () => {\n      console.log(\"Bot speaking started in visualizer\")\n      setIsBotSpeaking(true)\n    }\n  )\n\n  useRTVIClientEvent(\n    RTVIEvent.BotStoppedSpeaking,\n    () => {\n      console.log(\"Bot speaking ended in visualizer\")\n      setIsBotSpeaking(false)\n    }\n  )\n\n  useEffect(() => {\n    // Initialize audio context\n    const context = new (window.AudioContext || (window as any).webkitAudioContext)()\n    setAudioContext(context)\n\n    const analyserNode = context.createAnalyser()\n    analyserNode.fftSize = 1024\n    const bufferLength = analyserNode.frequencyBinCount\n    const dataArr = new Uint8Array(bufferLength)\n\n    setAnalyser(analyserNode)\n    setDataArray(dataArr)\n\n    return () => {\n      if (animationRef.current) {\n        cancelAnimationFrame(animationRef.current)\n      }\n      if (context.state !== \"closed\") {\n        context.close()\n      }\n    }\n  }, [])\n\n  useEffect(() => {\n    if (!audioTrack || !audioContext || !analyser) return\n\n    // Connect to audio track from the Pipecat SDK\n    try {\n      if (audioTrack) {\n        const source = audioContext.createMediaStreamSource(new MediaStream([audioTrack]))\n        source.connect(analyser)\n        setIsActive(true)\n      }\n    } catch (error) {\n      console.error(\"Error connecting to audio stream:\", error)\n    }\n\n    return () => {\n      setIsActive(false)\n    }\n  }, [audioTrack, audioContext, analyser])\n\n  useEffect(() => {\n    if (!canvasRef.current || !analyser || !dataArray) return \n\n    const canvas = canvasRef.current\n    const ctx = canvas.getContext(\"2d\")\n    if (!ctx) return\n\n    // Add a time variable for animation\n    let animationTime = 0\n\n    const draw = () => {\n      // Increment animation time\n      animationTime += animationSpeed\n\n      // Set canvas dimensions based on props or container\n      if (responsive) {\n        // Set canvas dimensions to match container\n        const container = canvas.parentElement\n        if (container) {\n          canvas.width = container.clientWidth\n          canvas.height = container.clientHeight\n        }\n      } else {\n        // Set fixed dimensions from props\n        canvas.width = typeof width === 'number' ? width : parseInt(width) || 300\n        canvas.height = typeof height === 'number' ? height : parseInt(height) || 150\n      }\n\n      // Clear canvas\n      ctx.clearRect(0, 0, canvas.width, canvas.height)\n\n      // Draw background if specified\n      if (backgroundColor !== \"transparent\") {\n        ctx.fillStyle = backgroundColor\n        ctx.fillRect(0, 0, canvas.width, canvas.height)\n      }\n\n      // Calculate bar positions\n      const totalWidth = barWidth * barCount + barGap * (barCount - 1)\n      const startX = (canvas.width - totalWidth) / 2\n      const centerY = canvas.height / 2\n\n      // Get frequency data\n      analyser.getByteFrequencyData(dataArray)\n\n      // Draw visualization based on selected style\n      if (visualizerStyle === \"bars\") {\n        drawBars(ctx, dataArray, startX, centerY, canvas.width, canvas.height, animationTime)\n      } else if (visualizerStyle === \"circles\") {\n        drawCircles(ctx, dataArray, canvas.width, canvas.height, animationTime)\n      } else if (visualizerStyle === \"line\") {\n        drawLine(ctx, dataArray, canvas.width, canvas.height, animationTime)\n      }\n\n      // Continue animation loop\n      animationRef.current = requestAnimationFrame(draw)\n    }\n\n    const drawBars = (\n      ctx: CanvasRenderingContext2D, \n      dataArray: Uint8Array, \n      startX: number, \n      centerY: number, \n      canvasWidth: number, \n      canvasHeight: number, \n      animationTime: number\n    ) => {\n      // Draw bars\n      for (let i = 0; i < barCount; i++) {\n        // Get frequency data for this bar\n        const dataIndex = Math.floor(i * (dataArray.length / barCount))\n        \n        let value = 0\n        \n        if (participantType === \"local\") {\n          // For local participant, use real audio data\n          value = dataArray[dataIndex]\n        } else if (participantType === \"bot\" && isBotSpeaking) {\n          // For bot participant when speaking, use animated values based on selected style\n          if (animationStyle === \"wave\") {\n            // Create a wave effect with different phases for each bar\n            const phase = i / barCount * Math.PI\n            // Generate values between 50 and 200 using sine wave\n            value = 50 + 150 * Math.abs(Math.sin(animationTime + phase))\n          } else if (animationStyle === \"equalizer\") {\n            // Create a more random equalizer effect\n            value = 50 + 150 * Math.abs(Math.sin(animationTime * (i + 1) * 0.3))\n          } else if (animationStyle === \"pulse\") {\n            // Create a synchronized pulsing effect\n            value = 50 + 150 * Math.abs(Math.sin(animationTime))\n          }\n        } else {\n          // When bot is not speaking, use a minimal static height\n          value = 10\n        }\n\n        // Calculate bar height based on audio data\n        const normalizedValue = value / 255 // Normalize to 0-1\n        const barHeight = barMinHeight + normalizedValue * (barMaxHeight - barMinHeight) * sensitivity\n\n        // Calculate position\n        const x = startX + i * (barWidth + barGap)\n\n        // Draw bar with glow effect\n        ctx.save()\n\n        // Add glow effect\n        ctx.shadowColor = barGlowColor\n        ctx.shadowBlur = glowIntensity\n\n        // Draw rounded bar\n        ctx.fillStyle = barColor\n        ctx.beginPath()\n        ctx.roundRect(x, centerY - barHeight / 2, barWidth, barHeight, barRadius)\n        ctx.fill()\n\n        ctx.restore()\n      }\n    }\n\n    const drawCircles = (\n      ctx: CanvasRenderingContext2D, \n      dataArray: Uint8Array, \n      canvasWidth: number, \n      canvasHeight: number, \n      animationTime: number\n    ) => {\n      const centerX = canvasWidth / 2\n      const centerY = canvasHeight / 2\n      \n      for (let i = 0; i < barCount; i++) {\n        const dataIndex = Math.floor(i * (dataArray.length / barCount))\n        \n        let value = 0\n        \n        if (participantType === \"local\") {\n          value = dataArray[dataIndex]\n        } else if (participantType === \"bot\" && isBotSpeaking) {\n          if (animationStyle === \"wave\") {\n            const phase = i / barCount * Math.PI * 2\n            value = 50 + 150 * Math.abs(Math.sin(animationTime + phase))\n          } else if (animationStyle === \"equalizer\") {\n            value = 50 + 150 * Math.abs(Math.sin(animationTime * (i + 1) * 0.3))\n          } else if (animationStyle === \"pulse\") {\n            value = 50 + 150 * Math.abs(Math.sin(animationTime))\n          }\n        } else {\n          value = 10\n        }\n        \n        const normalizedValue = value / 255\n        const radius = barMinHeight + normalizedValue * (barMaxHeight - barMinHeight) * sensitivity / 2\n        \n        const angle = (i / barCount) * Math.PI * 2\n        const distance = radius * 2\n        \n        const x = centerX + Math.cos(angle) * distance\n        const y = centerY + Math.sin(angle) * distance\n        \n        ctx.save()\n        ctx.shadowColor = barGlowColor\n        ctx.shadowBlur = glowIntensity\n        ctx.fillStyle = barColor\n        ctx.beginPath()\n        ctx.arc(x, y, radius, 0, Math.PI * 2)\n        ctx.fill()\n        ctx.restore()\n      }\n    }\n\n    const drawLine = (\n      ctx: CanvasRenderingContext2D, \n      dataArray: Uint8Array, \n      canvasWidth: number, \n      canvasHeight: number, \n      animationTime: number\n    ) => {\n      ctx.save()\n      ctx.strokeStyle = barColor\n      ctx.lineWidth = barWidth / 4\n      ctx.shadowColor = barGlowColor\n      ctx.shadowBlur = glowIntensity\n      ctx.beginPath()\n      \n      const points = barCount * 2\n      \n      for (let i = 0; i <= points; i++) {\n        const dataIndex = Math.floor(i * (dataArray.length / points))\n        \n        let value = 0\n        \n        if (participantType === \"local\") {\n          value = dataArray[dataIndex]\n        } else if (participantType === \"bot\" && isBotSpeaking) {\n          if (animationStyle === \"wave\") {\n            const phase = i / points * Math.PI * 4\n            value = 50 + 150 * Math.sin(animationTime + phase)\n          } else if (animationStyle === \"equalizer\") {\n            value = 50 + 150 * Math.sin(animationTime * (i + 1) * 0.1)\n          } else if (animationStyle === \"pulse\") {\n            value = 50 + 150 * Math.sin(animationTime)\n          }\n        } else {\n          value = 10\n        }\n        \n        const normalizedValue = value / 255\n        const amplitude = (barMaxHeight - barMinHeight) * sensitivity\n        const y = canvasHeight / 2 + normalizedValue * amplitude * (Math.random() > 0.5 ? 1 : -1)\n        const x = (canvasWidth / points) * i\n        \n        if (i === 0) {\n          ctx.moveTo(x, y)\n        } else {\n          ctx.lineTo(x, y)\n        }\n      }\n      \n      ctx.stroke()\n      ctx.restore()\n    }\n\n    draw()\n\n    return () => {\n      if (animationRef.current) {\n        cancelAnimationFrame(animationRef.current)\n      }\n    }\n  }, [\n    analyser,\n    dataArray,\n    isActive,\n    barCount,\n    barGap,\n    barWidth,\n    barRadius,\n    barColor,\n    barGlowColor,\n    barMinHeight,\n    barMaxHeight,\n    sensitivity,\n    isBotSpeaking,\n    participantType,\n    // Add new dependencies\n    width,\n    height,\n    backgroundColor,\n    animationSpeed,\n    animationStyle,\n    responsive,\n    visualizerStyle,\n    glowIntensity\n  ])\n\n  return (\n    <div \n      className={cn(\"relative\", containerClassName)} \n      style={{\n        width: width,\n        height: height,\n        ...containerStyle\n      }}\n    >\n      <div \n        className={cn(\"w-full h-full rounded-lg overflow-hidden\", className)}\n        style={{ background: backgroundColor !== \"transparent\" ? undefined : \"black\" }}\n      >\n        <canvas \n          ref={canvasRef} \n          className=\"w-full h-full\" \n          style={canvasStyle}\n        />\n      </div>\n    </div>\n  )\n}\n","import { useState, useEffect, useCallback } from \"react\";\nimport {\n  useRTVIClient,\n  useRTVIClientTransportState,\n} from \"@pipecat-ai/client-react\";\nimport { RTVIEvent } from \"@think41/foundation-voice-client-js\";\n\n// Connection state interface\nexport interface ConnectionState {\n  isConnected: boolean;\n  isConnecting: boolean;\n  isReconnecting: boolean;\n  reconnectAttempts: number;\n  lastError: string | null;\n  transportState: string;\n}\n\n// Configuration options\ninterface ConnectionManagerOptions {\n  maxReconnectAttempts?: number;\n  reconnectDelay?: number;\n  maxReconnectDelay?: number;\n  reconnectBackoffMultiplier?: number;\n}\n\n/**\n * Hook to manage connection state and automatic reconnection\n * with exponential backoff and jitter\n */\nexport function useConnectionManager(options: ConnectionManagerOptions = {}) {\n  const client = useRTVIClient();\n  const transportState = useRTVIClientTransportState();\n\n  // Default options\n  const {\n    maxReconnectAttempts = 5,\n    reconnectDelay = 1000,\n    maxReconnectDelay = 30000,\n    reconnectBackoffMultiplier = 1.5,\n  } = options;\n\n  // Connection state\n  const [connectionState, setConnectionState] = useState<ConnectionState>({\n    isConnected: false,\n    isConnecting: false,\n    isReconnecting: false,\n    reconnectAttempts: 0,\n    lastError: null,\n    transportState: transportState || \"disconnected\",\n  });\n\n  // Update connection state when transport state changes\n  useEffect(() => {\n    if (!transportState) return;\n\n    setConnectionState((prev) => ({\n      ...prev,\n      transportState,\n      isConnected: transportState === \"connected\" || transportState === \"ready\",\n      isConnecting: transportState === \"connecting\",\n      // Keep reconnecting flag if it's already set, otherwise false\n      isReconnecting: prev.isReconnecting && transportState === \"connecting\",\n    }));\n\n    // Reset reconnect attempts when successfully connected\n    if (transportState === \"connected\" || transportState === \"ready\") {\n      setConnectionState((prev) => ({\n        ...prev,\n        reconnectAttempts: 0,\n        isReconnecting: false,\n      }));\n    }\n  }, [transportState]);\n\n  // Calculate reconnect delay with exponential backoff and jitter\n  const calculateReconnectDelay = useCallback(\n    (attempts: number): number => {\n      // Base delay with exponential backoff\n      const baseDelay =\n        reconnectDelay * Math.pow(reconnectBackoffMultiplier, attempts);\n      // Apply jitter (random value between 0.8 and 1.2)\n      const jitter = 0.8 + Math.random() * 0.4;\n      // Ensure we don't exceed the maximum delay\n      return Math.min(baseDelay * jitter, maxReconnectDelay);\n    },\n    [reconnectDelay, reconnectBackoffMultiplier, maxReconnectDelay],\n  );\n\n  // Handle connection errors and disconnections\n  useEffect(() => {\n    if (!client) return;\n\n    const handleDisconnect = () => {\n      // Only attempt reconnect if we were previously connected\n      if (\n        connectionState.isConnected &&\n        connectionState.reconnectAttempts < maxReconnectAttempts\n      ) {\n        const nextAttempt = connectionState.reconnectAttempts + 1;\n        const delay = calculateReconnectDelay(nextAttempt);\n\n        console.log(\n          `[Connection] Attempting reconnect ${nextAttempt}/${maxReconnectAttempts} in ${delay}ms`,\n        );\n\n        setConnectionState((prev) => ({\n          ...prev,\n          isReconnecting: true,\n          reconnectAttempts: nextAttempt,\n        }));\n\n        // Attempt reconnection after delay\n        setTimeout(() => {\n          if (client) {\n            console.log(\"[Connection] Executing reconnect attempt\");\n            client.connect().catch((error) => {\n              setConnectionState((prev) => ({\n                ...prev,\n                lastError: `Reconnection failed: ${error.message || \"Unknown error\"}`,\n              }));\n            });\n          }\n        }, delay);\n      } else if (connectionState.reconnectAttempts >= maxReconnectAttempts) {\n        console.log(\"[Connection] Maximum reconnect attempts reached\");\n        setConnectionState((prev) => ({\n          ...prev,\n          isReconnecting: false,\n          lastError: \"Maximum reconnection attempts reached\",\n        }));\n      }\n    };\n\n    const handleError = (error: any) => {\n      console.error(\"[Connection] Error:\", error);\n      setConnectionState((prev) => ({\n        ...prev,\n        lastError: error?.message || \"Unknown error\",\n      }));\n    };\n\n    // Register event listeners\n    client.on(RTVIEvent.Disconnected, handleDisconnect);\n    client.on(RTVIEvent.Error, handleError);\n\n    // Cleanup when component unmounts\n    return () => {\n      client.off(RTVIEvent.Disconnected, handleDisconnect);\n      client.off(RTVIEvent.Error, handleError);\n    };\n  }, [\n    client,\n    connectionState.isConnected,\n    connectionState.reconnectAttempts,\n    maxReconnectAttempts,\n    calculateReconnectDelay,\n  ]);\n\n  // Connect method (with auto-reconnect disabled for manual connections)\n  const connect = useCallback(async () => {\n    if (!client) return;\n\n    try {\n      setConnectionState((prev) => ({\n        ...prev,\n        isConnecting: true,\n        lastError: null,\n      }));\n\n      await client.connect();\n\n      setConnectionState((prev) => ({\n        ...prev,\n        isConnecting: false,\n        reconnectAttempts: 0,\n      }));\n    } catch (error: any) {\n      console.error(\"[Connection] Connection failed:\", error);\n      setConnectionState((prev) => ({\n        ...prev,\n        isConnecting: false,\n        lastError: error.message || \"Connection failed\",\n      }));\n    }\n  }, [client]);\n\n  // Disconnect method\n  const disconnect = useCallback(async () => {\n    if (!client) return;\n\n    try {\n      await client.disconnect();\n\n      setConnectionState((prev) => ({\n        ...prev,\n        isConnected: false,\n        isConnecting: false,\n        isReconnecting: false,\n      }));\n    } catch (error: any) {\n      console.error(\"[Connection] Disconnect failed:\", error);\n    }\n  }, [client]);\n\n  // Manually reset the error state\n  const clearError = useCallback(() => {\n    setConnectionState((prev) => ({\n      ...prev,\n      lastError: null,\n    }));\n  }, []);\n\n  return {\n    ...connectionState,\n    connect,\n    disconnect,\n    clearError,\n  };\n}\n","import { useState, useEffect } from \"react\";\nimport { useRTVIClient, useRTVIClientEvent } from \"@pipecat-ai/client-react\";\nimport { RTVIEvent } from \"@think41/foundation-voice-client-js\";\nimport { log } from \"../utils/logger\";\n\n// Define transcript structure\nexport interface Transcript {\n  text: string;\n  speaker: \"user\" | \"bot\";\n  timestamp: number;\n  final?: boolean;\n}\n\n// Interface for the transcript update from our server\nexport interface TranscriptUpdate {\n  type: \"transcript_update\";\n  role: \"user\" | \"assistant\";\n  content: string;\n  timestamp: string;\n}\n\n// Define conversation states\nexport enum ConversationState {\n  IDLE = \"idle\",\n  USER_SPEAKING = \"user_speaking\",\n  BOT_PROCESSING = \"bot_processing\",\n  BOT_SPEAKING = \"bot_speaking\",\n}\n\n// Define the return type for the hook\nexport interface ConversationContext {\n  state: ConversationState;\n  isBotSpeaking: boolean;\n  isUserSpeaking: boolean;\n  isBotProcessing: boolean;\n  transcripts: Transcript[];\n  lastUserTranscript: string | null;\n  lastBotTranscript: string | null;\n  clearTranscripts: () => void;\n  addTranscript: (transcript: Transcript) => void;\n  handleTranscriptUpdate: (update: TranscriptUpdate) => void;\n}\n\n/**\n * A custom hook for managing conversation state\n * Tracks user/bot speaking states, processes transcripts,\n * and manages a state machine for the conversation flow.\n */\nexport function useConversationState(): ConversationContext {\n  // Internal state\n  const client = useRTVIClient();\n  const [currentState, setCurrentState] = useState<ConversationState>(\n    ConversationState.IDLE,\n  );\n  const [isBotSpeaking, setIsBotSpeaking] = useState(false);\n  const [isUserSpeaking, setIsUserSpeaking] = useState(false);\n  const [isBotProcessing, setIsBotProcessing] = useState(false);\n  const [transcripts, setTranscripts] = useState<Transcript[]>([]);\n  const [lastUserTranscript, setLastUserTranscript] = useState<string | null>(\n    null,\n  );\n  const [lastBotTranscript, setLastBotTranscript] = useState<string | null>(\n    null,\n  );\n\n  // State machine transitions\n  const transitionTo = (newState: ConversationState) => {\n    // Only log state transitions for speech events\n    setCurrentState(newState);\n  };\n\n  // Handle bot started speaking\n  useRTVIClientEvent(RTVIEvent.BotStartedSpeaking, () => {\n    setIsBotSpeaking(true);\n    log.conversation.info(\"Bot started speaking (RTVIEvent)\");\n    transitionTo(ConversationState.BOT_SPEAKING);\n  });\n\n  // Handle bot stopped speaking\n  useRTVIClientEvent(RTVIEvent.BotStoppedSpeaking, () => {\n    setIsBotSpeaking(false);\n    log.conversation.info(\"Bot stopped speaking (RTVIEvent)\");\n    transitionTo(ConversationState.IDLE);\n  });\n\n  // Also listen for our custom bot speaking events (from audio frame detection)\n  useEffect(() => {\n    const handleBotStartedSpeaking = () => {\n      setIsBotSpeaking(true);\n      log.conversation.info(\"Bot started speaking (custom event)\");\n      transitionTo(ConversationState.BOT_SPEAKING);\n    };\n\n    const handleBotStoppedSpeaking = () => {\n      setIsBotSpeaking(false);\n      log.conversation.info(\"Bot stopped speaking (custom event)\");\n      transitionTo(ConversationState.IDLE);\n    };\n\n    window.addEventListener(\"bot-started-speaking\", handleBotStartedSpeaking);\n    window.addEventListener(\"bot-stopped-speaking\", handleBotStoppedSpeaking);\n\n    return () => {\n      window.removeEventListener(\n        \"bot-started-speaking\",\n        handleBotStartedSpeaking,\n      );\n      window.removeEventListener(\n        \"bot-stopped-speaking\",\n        handleBotStoppedSpeaking,\n      );\n    };\n  }, []);\n\n  // Handle user started speaking\n  useRTVIClientEvent(RTVIEvent.UserStartedSpeaking, () => {\n    setIsUserSpeaking(true);\n    log.conversation.info(\"User started speaking\");\n    transitionTo(ConversationState.USER_SPEAKING);\n  });\n\n  // Handle user stopped speaking\n  useRTVIClientEvent(RTVIEvent.UserStoppedSpeaking, () => {\n    setIsUserSpeaking(false);\n    log.conversation.info(\"User stopped speaking\");\n    transitionTo(ConversationState.BOT_PROCESSING);\n    setIsBotProcessing(true);\n  });\n\n  // Handle LLM started/stopped events\n  useRTVIClientEvent(RTVIEvent.BotLlmStarted, () => {\n    setIsBotProcessing(true);\n  });\n\n  useRTVIClientEvent(RTVIEvent.BotLlmStopped, () => {\n    setIsBotProcessing(false);\n  });\n\n  // Handle user transcripts\n  useRTVIClientEvent(RTVIEvent.UserTranscript, (data: any) => {\n    if (data?.text) {\n      const transcript: Transcript = {\n        text: data.text,\n        speaker: \"user\",\n        timestamp: Date.now(),\n        final: data.final || false,\n      };\n\n      if (data.final) {\n        setLastUserTranscript(data.text);\n        setTranscripts((prev) => [...prev, transcript]);\n      }\n    }\n  });\n\n  // Handle bot transcripts\n  useRTVIClientEvent(RTVIEvent.BotTranscript, (data: any) => {\n    if (data?.text) {\n      const transcript: Transcript = {\n        text: data.text,\n        speaker: \"bot\",\n        timestamp: Date.now(),\n        final: true,\n      };\n\n      setLastBotTranscript(data.text);\n      setTranscripts((prev) => [...prev, transcript]);\n    }\n  });\n\n  // Utility functions\n  const clearTranscripts = () => {\n    setTranscripts([]);\n    setLastUserTranscript(null);\n    setLastBotTranscript(null);\n  };\n\n  const addTranscript = (transcript: Transcript) => {\n    setTranscripts((prev) => [...prev, transcript]);\n    if (transcript.speaker === \"user\") {\n      setLastUserTranscript(transcript.text);\n    } else {\n      setLastBotTranscript(transcript.text);\n    }\n  };\n\n  // New handler for server transcript updates from raw WebSocket messages\n  const handleTranscriptUpdate = (update: TranscriptUpdate) => {\n    const timestamp = new Date(update.timestamp).getTime();\n    const isAssistant = update.role === \"assistant\";\n\n    // Create a transcript object from the update\n    const transcript: Transcript = {\n      text: update.content,\n      speaker: isAssistant ? \"bot\" : \"user\",\n      timestamp,\n      final: true,\n    };\n\n    // Update state\n    if (isAssistant) {\n      setLastBotTranscript(update.content);\n    } else {\n      setLastUserTranscript(update.content);\n    }\n\n    // Add to transcript list, avoiding duplicates\n    setTranscripts((prev) => {\n      // Check if we already have this exact transcript\n      const exists = prev.some(\n        (t) =>\n          t.text === update.content &&\n          t.speaker === (isAssistant ? \"bot\" : \"user\") &&\n          Math.abs(t.timestamp - timestamp) < 1000, // Allow 1 second tolerance\n      );\n\n      if (exists) {\n        return prev;\n      }\n\n      return [...prev, transcript];\n    });\n\n    log.conversation.info(\n      `Received transcript update - ${update.role}: ${update.content}`,\n    );\n  };\n\n  return {\n    state: currentState,\n    isBotSpeaking,\n    isUserSpeaking,\n    isBotProcessing,\n    transcripts,\n    lastUserTranscript,\n    lastBotTranscript,\n    clearTranscripts,\n    addTranscript,\n    handleTranscriptUpdate,\n  };\n}\n","/**\n * Structured logging utility for the Pipecat WebSocket client\n * Provides consistent log formatting and categorization\n */\n\n// Define log levels\nexport type LogLevel = \"debug\" | \"info\" | \"warn\" | \"error\";\n\n// Define log categories\nexport type LogCategory =\n  | \"transport\"\n  | \"audio\"\n  | \"connection\"\n  | \"ui\"\n  | \"conversation\"\n  | \"event\"\n  | \"general\";\n\n// Configure which log levels are enabled\nconst LOG_LEVEL_ENABLED = {\n  debug: process.env.NODE_ENV !== \"production\",\n  info: true,\n  warn: true,\n  error: true,\n};\n\n// Configure which categories are enabled\nconst CATEGORY_ENABLED: Record<LogCategory, boolean> = {\n  transport: true,\n  audio: true,\n  connection: true,\n  ui: true,\n  conversation: true,\n  event: true,\n  general: true,\n};\n\n// Add colors for console output (works in most browsers)\nconst LOG_LEVEL_STYLES: Record<LogLevel, string> = {\n  debug: \"color: #6b7280\", // gray\n  info: \"color: #3b82f6\", // blue\n  warn: \"color: #f59e0b\", // amber\n  error: \"color: #ef4444\", // red\n};\n\n// Add colors for categories\nconst CATEGORY_STYLES: Record<LogCategory, string> = {\n  transport: \"color: #8b5cf6\", // purple\n  audio: \"color: #10b981\", // green\n  connection: \"color: #f59e0b\", // amber\n  ui: \"color: #3b82f6\", // blue\n  conversation: \"color: #ec4899\", // pink\n  event: \"color: #6366f1\", // indigo\n  general: \"color: #6b7280\", // gray\n};\n\n/**\n * Creates a formatted log message with timestamp, category, and level\n */\nfunction formatLogMessage(\n  level: LogLevel,\n  category: LogCategory,\n  message: string,\n  data?: any,\n): [string, string, string, any?] {\n  const timestamp = new Date().toISOString().substring(11, 23); // HH:MM:SS.mmm format\n  const formatStr = `%c[${timestamp}] [${category.toUpperCase()}] %c${message}`;\n  const categoryStyle = CATEGORY_STYLES[category];\n  const levelStyle = LOG_LEVEL_STYLES[level];\n\n  return [formatStr, categoryStyle, levelStyle, data];\n}\n\n/**\n * Determines if a log should be displayed based on level and category\n */\nfunction shouldLog(level: LogLevel, category: LogCategory): boolean {\n  return LOG_LEVEL_ENABLED[level] && CATEGORY_ENABLED[category];\n}\n\n/**\n * Logger factory that creates a logger for a specific category\n */\nexport function createLogger(category: LogCategory) {\n  return {\n    debug(message: string, data?: any): void {\n      if (shouldLog(\"debug\", category)) {\n        console.debug(...formatLogMessage(\"debug\", category, message, data));\n      }\n    },\n\n    info(message: string, data?: any): void {\n      if (shouldLog(\"info\", category)) {\n        console.info(...formatLogMessage(\"info\", category, message, data));\n      }\n    },\n\n    warn(message: string, data?: any): void {\n      if (shouldLog(\"warn\", category)) {\n        console.warn(...formatLogMessage(\"warn\", category, message, data));\n      }\n    },\n\n    error(message: string, data?: any): void {\n      if (shouldLog(\"error\", category)) {\n        console.error(...formatLogMessage(\"error\", category, message, data));\n      }\n    },\n  };\n}\n\n// Create default loggers for each category\nexport const log = {\n  transport: createLogger(\"transport\"),\n  audio: createLogger(\"audio\"),\n  connection: createLogger(\"connection\"),\n  ui: createLogger(\"ui\"),\n  conversation: createLogger(\"conversation\"),\n  event: createLogger(\"event\"),\n  general: createLogger(\"general\"),\n};\n\n// Enable or disable logging for specific categories\nexport function configureLogging(\n  categories: Partial<Record<LogCategory, boolean>> = {},\n  levels: Partial<Record<LogLevel, boolean>> = {},\n): void {\n  // Update category configuration\n  Object.entries(categories).forEach(([category, enabled]) => {\n    if (category in CATEGORY_ENABLED) {\n      CATEGORY_ENABLED[category as LogCategory] = enabled;\n    }\n  });\n\n  // Update level configuration\n  Object.entries(levels).forEach(([level, enabled]) => {\n    if (level in LOG_LEVEL_ENABLED) {\n      LOG_LEVEL_ENABLED[level as LogLevel] = enabled;\n    }\n  });\n}\n\n// Helper function to log performance metrics\nexport function logPerformance(label: string, startTime: number): void {\n  const duration = performance.now() - startTime;\n  log.general.debug(`Performance [${label}]: ${duration.toFixed(2)}ms`);\n}","\"use client\";\nimport React, { useState, useCallback, useEffect } from \"react\";\nimport { useRTVIClient, useRTVIClientEvent } from \"@pipecat-ai/client-react\";\nimport { RTVIEvent } from \"@think41/foundation-voice-client-js\";\n\ninterface ConnectionButtonProps {\n  onConnect?: () => void;\n  onDisconnect?: () => void;\n  className?: string;\n  isConnected?: boolean;\n  onChange?: (isConnected: boolean) => void;\n}\n\nexport function ConnectionButton({\n  onConnect,\n  onDisconnect,\n  className = \"\",\n  isConnected: externalIsConnected,\n  onChange,\n}: ConnectionButtonProps) {\n  const client = useRTVIClient();\n  const [internalConnected, setInternalConnected] = useState(false);\n  const [isConnecting, setIsConnecting] = useState(false);\n\n  const connected = externalIsConnected !== undefined ? externalIsConnected : internalConnected;\n\n  // Listen for connection state changes\n  useRTVIClientEvent(RTVIEvent.Connected, () => {\n    setInternalConnected(true);\n    setIsConnecting(false);\n    onChange?.(true);\n  });\n\n  useRTVIClientEvent(RTVIEvent.Disconnected, () => {\n    setInternalConnected(false);\n    setIsConnecting(false);\n    onChange?.(false);\n  });\n\n  const handleClick = useCallback(async () => {\n    const newState = !connected;\n\n    try {\n      setIsConnecting(true);\n\n      if (newState) {\n        onConnect?.();\n        await client?.connect();\n      } else {\n        onDisconnect?.();\n        await client?.disconnect();\n      }\n    } catch (error) {\n      console.error(\"Connection toggle error:\", error);\n      setIsConnecting(false);\n    }\n  }, [client, connected, onChange, onConnect, onDisconnect]);\n\n  return (\n    <button\n      onClick={handleClick}\n      disabled={isConnecting}\n      className={`px-6 py-3 rounded-lg font-medium text-sm transition-all duration-200 shadow-md ${\n        isConnecting\n          ? \"bg-gray-400 cursor-not-allowed text-white opacity-75\"\n          : connected\n          ? \"bg-red-600 hover:bg-red-700 text-white shadow-lg\"\n          : \"bg-gray-800 hover:bg-gray-900 text-white shadow-lg\"\n      } ${className}`}\n    >\n      {isConnecting \n        ? \"Connecting...\" \n        : connected \n        ? \"Disconnect\" \n        : \"Connect\"\n      }\n    </button>\n  );\n}"],"mappings":"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","names":["log","useRef","useState","useCallback","RTVIEvent","useRTVIClient","useRTVIClientEvent","useCallback","jsx","jsx","jsxs","useState","useRef","useRTVIClient","useCallback","useRTVIClientEvent","RTVIEvent","useState","useEffect","useCallback","useRTVIClient","jsx","jsxs","useState","useEffect","useCallback","LLMHelper","useEffect","useState","useCallback","jsx","client","useEffect","useRef","useState","useRTVIClientEvent","RTVIEvent","jsx","useRef","useState","useEffect","ctx","dataArray","animationTime","useState","useEffect","useCallback","useRTVIClient","RTVIEvent","useState","useEffect","useRTVIClient","useRTVIClientEvent","RTVIEvent","useRTVIClient","useState","useRTVIClientEvent","RTVIEvent","useEffect","useState","useCallback","useRTVIClient","useRTVIClientEvent","RTVIEvent","jsx"]}